net/mlx5e: Add NAPI statistics

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add NAPI statistics (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 92.86%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 2d7103c800add14d9ea3194a704130622474d54f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/2d7103c8.failed

Add per-channel and global ethtool counters for NAPI.
This helps us monitor and analyze performance in general.

- ch[i]_poll:
  the number of times the channel's NAPI poll was invoked.

- ch[i]_arm:
  the number of times the channel's NAPI poll completed
  and armed the completion queues.

- ch[i]_aff_change:
  the number of times the channel's NAPI poll explicitly
  stopped execution on a cpu due to a change in affinity.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 2d7103c800add14d9ea3194a704130622474d54f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
index b54d059b5bf3,9f6e97883cbc..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
@@@ -66,10 -95,9 +69,14 @@@ int mlx5e_napi_poll(struct napi_struct 
  	busy |= c->rq.post_wqes(&c->rq);
  
  	if (busy) {
 +#ifdef CONFIG_GENERIC_HARDIRQS
  		if (likely(mlx5e_channel_no_affinity_change(c)))
  			return budget;
++<<<<<<< HEAD
 +#endif
++=======
+ 		ch_stats->aff_change++;
++>>>>>>> 2d7103c800ad (net/mlx5e: Add NAPI statistics)
  		if (budget && work_done == budget)
  			work_done--;
  	}
@@@ -77,17 -105,14 +84,24 @@@
  	if (unlikely(!napi_complete_done(napi, work_done)))
  		return work_done;
  
++<<<<<<< HEAD
 +	for (i = 0; i < c->num_tc; i++)
++=======
+ 	ch_stats->arm++;
+ 
+ 	for (i = 0; i < c->num_tc; i++) {
+ 		mlx5e_handle_tx_dim(&c->sq[i]);
++>>>>>>> 2d7103c800ad (net/mlx5e: Add NAPI statistics)
  		mlx5e_cq_arm(&c->sq[i].cq);
 -	}
  
 -	mlx5e_handle_rx_dim(&c->rq);
 +	if (MLX5E_TEST_BIT(c->rq.state, MLX5E_RQ_STATE_AM)) {
 +		struct net_dim_sample dim_sample;
 +		net_dim_sample(c->rq.cq.event_ctr,
 +			       c->rq.stats->packets,
 +			       c->rq.stats->bytes,
 +			       &dim_sample);
 +		net_dim(&c->rq.dim, dim_sample);
 +	}
  
  	mlx5e_cq_arm(&c->rq.cq);
  	mlx5e_cq_arm(&c->icosq.cq);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
index 96dab53d64cc..4d66b2e2fd0d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@ -73,6 +73,9 @@ static const struct counter_desc sw_stats_desc[] = {
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_empty) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_busy) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_cache_waive) },
+	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_poll) },
+	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_arm) },
+	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_aff_change) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, ch_eq_rearm) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, link_down_events_phy) },
 };
@@ -139,6 +142,9 @@ static void mlx5e_grp_sw_update_stats(struct mlx5e_priv *priv)
 		s->rx_cache_empty += rq_stats->cache_empty;
 		s->rx_cache_busy  += rq_stats->cache_busy;
 		s->rx_cache_waive += rq_stats->cache_waive;
+		s->ch_poll        += ch_stats->poll;
+		s->ch_arm         += ch_stats->arm;
+		s->ch_aff_change  += ch_stats->aff_change;
 		s->ch_eq_rearm += ch_stats->eq_rearm;
 
 		for (j = 0; j < priv->max_opened_tc; j++) {
@@ -1110,6 +1116,9 @@ static const struct counter_desc sq_stats_desc[] = {
 };
 
 static const struct counter_desc ch_stats_desc[] = {
+	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, poll) },
+	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, arm) },
+	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, aff_change) },
 	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, eq_rearm) },
 };
 
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 2036ba733d42..f2e9035cbd66 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@ -91,6 +91,9 @@ struct mlx5e_sw_stats {
 	u64 rx_cache_empty;
 	u64 rx_cache_busy;
 	u64 rx_cache_waive;
+	u64 ch_poll;
+	u64 ch_arm;
+	u64 ch_aff_change;
 	u64 ch_eq_rearm;
 
 	/* Special handling counters */
@@ -204,6 +207,9 @@ struct mlx5e_sq_stats {
 };
 
 struct mlx5e_ch_stats {
+	u64 poll;
+	u64 arm;
+	u64 aff_change;
 	u64 eq_rearm;
 };
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
