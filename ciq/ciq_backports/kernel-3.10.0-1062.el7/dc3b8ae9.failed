bpf: avoid -Wmaybe-uninitialized warning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Arnd Bergmann <arnd@arndb.de>
commit dc3b8ae9d271897e09b27fa4e4e0000de98590d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/dc3b8ae9.failed

The stack_map_get_build_id_offset() function is too long for gcc to track
whether 'work' may or may not be initialized at the end of it, leading
to a false-positive warning:

kernel/bpf/stackmap.c: In function 'stack_map_get_build_id_offset':
kernel/bpf/stackmap.c:334:13: error: 'work' may be used uninitialized in this function [-Werror=maybe-uninitialized]

This removes the 'in_nmi_ctx' flag and uses the state of that variable
itself to see if it got initialized.

Fixes: bae77c5eb5b2 ("bpf: enable stackmap with build_id in nmi context")
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Acked-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit dc3b8ae9d271897e09b27fa4e4e0000de98590d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/stackmap.c
diff --cc kernel/bpf/stackmap.c
index 15bd541c30ba,b675a3f3d141..000000000000
--- a/kernel/bpf/stackmap.c
+++ b/kernel/bpf/stackmap.c
@@@ -267,12 -285,21 +267,24 @@@ static void stack_map_get_build_id_offs
  {
  	int i;
  	struct vm_area_struct *vma;
++<<<<<<< HEAD
++=======
+ 	bool irq_work_busy = false;
+ 	struct stack_map_irq_work *work = NULL;
+ 
+ 	if (in_nmi()) {
+ 		work = this_cpu_ptr(&up_read_work);
+ 		if (work->irq_work.flags & IRQ_WORK_BUSY)
+ 			/* cannot queue more up_read, fallback */
+ 			irq_work_busy = true;
+ 	}
++>>>>>>> dc3b8ae9d271 (bpf: avoid -Wmaybe-uninitialized warning)
  
  	/*
 -	 * We cannot do up_read() in nmi context. To do build_id lookup
 -	 * in nmi context, we need to run up_read() in irq_work. We use
 -	 * a percpu variable to do the irq_work. If the irq_work is
 -	 * already used by another lookup, we fall back to report ips.
 +	 * We cannot do up_read() in nmi context, so build_id lookup is
 +	 * only supported for non-nmi events. If at some point, it is
 +	 * possible to run find_vma() without taking the semaphore, we
 +	 * would like to allow build_id lookup in nmi context.
  	 *
  	 * Same fallback is used for kernel stack (!user) on a stackmap
  	 * with build_id.
@@@ -299,7 -326,13 +311,17 @@@
  			- vma->vm_start;
  		id_offs[i].status = BPF_STACK_BUILD_ID_VALID;
  	}
++<<<<<<< HEAD
 +	up_read(&current->mm->mmap_sem);
++=======
+ 
+ 	if (!work) {
+ 		up_read(&current->mm->mmap_sem);
+ 	} else {
+ 		work->sem = &current->mm->mmap_sem;
+ 		irq_work_queue(&work->irq_work);
+ 	}
++>>>>>>> dc3b8ae9d271 (bpf: avoid -Wmaybe-uninitialized warning)
  }
  
  BPF_CALL_3(bpf_get_stackid, struct pt_regs *, regs, struct bpf_map *, map,
* Unmerged path kernel/bpf/stackmap.c
