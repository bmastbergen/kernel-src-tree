scsi: mpt3sas: Replace readl with ioc->base_readl

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [scsi] mpt3sas: Replace readl with ioc->base_readl (Tomas Henzl) [1660791]
Rebuild_FUZZ: 93.48%
commit-author Suganath Prabu <suganath-prabu.subramani@broadcom.com>
commit 306eaf276b02aa0852b7efdff6552a3dbfdbb943
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/306eaf27.failed

Use ioc->base_readl to restrict the readl retries to only Aero controllers.

	Signed-off-by: Suganath Prabu <suganath-prabu.subramani@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 306eaf276b02aa0852b7efdff6552a3dbfdbb943)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/mpt3sas/mpt3sas_base.c
diff --cc drivers/scsi/mpt3sas/mpt3sas_base.c
index 47ce8385aae2,8a0851ed0c39..000000000000
--- a/drivers/scsi/mpt3sas/mpt3sas_base.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_base.c
@@@ -4059,11 -4936,11 +4059,11 @@@ _base_wait_for_doorbell_int(struct MPT3
  	count = 0;
  	cntdn = 1000 * timeout;
  	do {
- 		int_status = readl(&ioc->chip->HostInterruptStatus);
+ 		int_status = ioc->base_readl(&ioc->chip->HostInterruptStatus);
  		if (int_status & MPI2_HIS_IOC2SYS_DB_STATUS) {
 -			dhsprintk(ioc,
 -				  ioc_info(ioc, "%s: successful count(%d), timeout(%d)\n",
 -					   __func__, count, timeout));
 +			dhsprintk(ioc, pr_info(MPT3SAS_FMT
 +				"%s: successful count(%d), timeout(%d)\n",
 +				ioc->name, __func__, count, timeout));
  			return 0;
  		}
  
@@@ -4086,11 -4962,11 +4086,11 @@@ _base_spin_on_doorbell_int(struct MPT3S
  	count = 0;
  	cntdn = 2000 * timeout;
  	do {
- 		int_status = readl(&ioc->chip->HostInterruptStatus);
+ 		int_status = ioc->base_readl(&ioc->chip->HostInterruptStatus);
  		if (int_status & MPI2_HIS_IOC2SYS_DB_STATUS) {
 -			dhsprintk(ioc,
 -				  ioc_info(ioc, "%s: successful count(%d), timeout(%d)\n",
 -					   __func__, count, timeout));
 +			dhsprintk(ioc, pr_info(MPT3SAS_FMT
 +				"%s: successful count(%d), timeout(%d)\n",
 +				ioc->name, __func__, count, timeout));
  			return 0;
  		}
  
@@@ -4125,14 -5000,14 +4125,14 @@@ _base_wait_for_doorbell_ack(struct MPT3
  	count = 0;
  	cntdn = 1000 * timeout;
  	do {
- 		int_status = readl(&ioc->chip->HostInterruptStatus);
+ 		int_status = ioc->base_readl(&ioc->chip->HostInterruptStatus);
  		if (!(int_status & MPI2_HIS_SYS2IOC_DB_STATUS)) {
 -			dhsprintk(ioc,
 -				  ioc_info(ioc, "%s: successful count(%d), timeout(%d)\n",
 -					   __func__, count, timeout));
 +			dhsprintk(ioc, pr_info(MPT3SAS_FMT
 +				"%s: successful count(%d), timeout(%d)\n",
 +				ioc->name, __func__, count, timeout));
  			return 0;
  		} else if (int_status & MPI2_HIS_IOC2SYS_DB_STATUS) {
- 			doorbell = readl(&ioc->chip->Doorbell);
+ 			doorbell = ioc->base_readl(&ioc->chip->Doorbell);
  			if ((doorbell & MPI2_IOC_STATE_MASK) ==
  			    MPI2_IOC_STATE_FAULT) {
  				mpt3sas_base_fault_info(ioc , doorbell);
@@@ -4169,11 -5042,11 +4169,11 @@@ _base_wait_for_doorbell_not_used(struc
  	count = 0;
  	cntdn = 1000 * timeout;
  	do {
- 		doorbell_reg = readl(&ioc->chip->Doorbell);
+ 		doorbell_reg = ioc->base_readl(&ioc->chip->Doorbell);
  		if (!(doorbell_reg & MPI2_DOORBELL_USED)) {
 -			dhsprintk(ioc,
 -				  ioc_info(ioc, "%s: successful count(%d), timeout(%d)\n",
 -					   __func__, count, timeout));
 +			dhsprintk(ioc, pr_info(MPT3SAS_FMT
 +				"%s: successful count(%d), timeout(%d)\n",
 +				ioc->name, __func__, count, timeout));
  			return 0;
  		}
  
@@@ -4254,10 -5157,8 +4254,15 @@@ _base_handshake_req_reply_wait(struct M
  	__le32 *mfp;
  
  	/* make sure doorbell is not in use */
++<<<<<<< HEAD
 +	if ((readl(&ioc->chip->Doorbell) & MPI2_DOORBELL_USED)) {
 +		pr_err(MPT3SAS_FMT
 +			"doorbell is in use (line=%d)\n",
 +			ioc->name, __LINE__);
++=======
+ 	if ((ioc->base_readl(&ioc->chip->Doorbell) & MPI2_DOORBELL_USED)) {
+ 		ioc_err(ioc, "doorbell is in use (line=%d)\n", __LINE__);
++>>>>>>> 306eaf276b02 (scsi: mpt3sas: Replace readl with ioc->base_readl)
  		return -EFAULT;
  	}
  
@@@ -4313,12 -5210,11 +4318,12 @@@
  	    & MPI2_DOORBELL_DATA_MASK);
  	writel(0, &ioc->chip->HostInterruptStatus);
  	if ((_base_wait_for_doorbell_int(ioc, 5))) {
 -		ioc_err(ioc, "doorbell handshake int failed (line=%d)\n",
 -			__LINE__);
 +		pr_err(MPT3SAS_FMT
 +			"doorbell handshake int failed (line=%d)\n",
 +			ioc->name, __LINE__);
  		return -EFAULT;
  	}
- 	reply[1] = le16_to_cpu(readl(&ioc->chip->Doorbell)
+ 	reply[1] = le16_to_cpu(ioc->base_readl(&ioc->chip->Doorbell)
  	    & MPI2_DOORBELL_DATA_MASK);
  	writel(0, &ioc->chip->HostInterruptStatus);
  
@@@ -5198,17 -6054,16 +5204,24 @@@ _base_diag_reset(struct MPT3SAS_ADAPTE
  		if (count++ > 20)
  			goto out;
  
++<<<<<<< HEAD
 +		host_diagnostic = readl(&ioc->chip->HostDiagnostic);
 +		drsprintk(ioc, pr_info(MPT3SAS_FMT
 +			"wrote magic sequence: count(%d), host_diagnostic(0x%08x)\n",
 +		    ioc->name, count, host_diagnostic));
++=======
+ 		host_diagnostic = ioc->base_readl(&ioc->chip->HostDiagnostic);
+ 		drsprintk(ioc,
+ 			  ioc_info(ioc, "wrote magic sequence: count(%d), host_diagnostic(0x%08x)\n",
+ 				   count, host_diagnostic));
++>>>>>>> 306eaf276b02 (scsi: mpt3sas: Replace readl with ioc->base_readl)
  
  	} while ((host_diagnostic & MPI2_DIAG_DIAG_WRITE_ENABLE) == 0);
  
- 	hcb_size = readl(&ioc->chip->HCBSize);
+ 	hcb_size = ioc->base_readl(&ioc->chip->HCBSize);
  
 -	drsprintk(ioc, ioc_info(ioc, "diag reset: issued\n"));
 +	drsprintk(ioc, pr_info(MPT3SAS_FMT "diag reset: issued\n",
 +	    ioc->name));
  	writel(host_diagnostic | MPI2_DIAG_RESET_ADAPTER,
  	     &ioc->chip->HostDiagnostic);
  
* Unmerged path drivers/scsi/mpt3sas/mpt3sas_base.c
