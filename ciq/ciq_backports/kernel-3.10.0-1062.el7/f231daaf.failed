ALSA: hda/ca0132 - Add input selection commands for AE-5

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Connor McAdams <conmanx360@gmail.com>
commit f231daaf51daa78c8bf2d0dd94ebeba7836f8efe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/f231daaf.failed

This patch adds the input selection commands for the Sound BlasterX
AE-5.

	Signed-off-by: Connor McAdams <conmanx360@gmail.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit f231daaf51daa78c8bf2d0dd94ebeba7836f8efe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 20ce308ff039,cfbcc3f16542..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -3436,6 -4492,151 +3436,154 @@@ static int ca0132_select_mic(struct hda
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Select the active input.
+  * Mic detection isn't used, because it's kind of pointless on the SBZ.
+  * The front mic has no jack-detection, so the only way to switch to it
+  * is to do it manually in alsamixer.
+  */
+ static int ca0132_alt_select_in(struct hda_codec *codec)
+ {
+ 	struct ca0132_spec *spec = codec->spec;
+ 	unsigned int tmp;
+ 
+ 	codec_dbg(codec, "%s\n", __func__);
+ 
+ 	snd_hda_power_up_pm(codec);
+ 
+ 	chipio_set_stream_control(codec, 0x03, 0);
+ 	chipio_set_stream_control(codec, 0x04, 0);
+ 
+ 	spec->cur_mic_type = spec->in_enum_val;
+ 
+ 	switch (spec->cur_mic_type) {
+ 	case REAR_MIC:
+ 		switch (spec->quirk) {
+ 		case QUIRK_SBZ:
+ 		case QUIRK_R3D:
+ 			ca0113_mmio_gpio_set(codec, 0, false);
+ 			tmp = FLOAT_THREE;
+ 			break;
+ 		case QUIRK_R3DI:
+ 			r3di_gpio_mic_set(codec, R3DI_REAR_MIC);
+ 			tmp = FLOAT_ONE;
+ 			break;
+ 		case QUIRK_AE5:
+ 			ca0113_mmio_command_set(codec, 0x48, 0x28, 0x00);
+ 			tmp = FLOAT_THREE;
+ 			break;
+ 		default:
+ 			tmp = FLOAT_ONE;
+ 			break;
+ 		}
+ 
+ 		chipio_set_conn_rate(codec, MEM_CONNID_MICIN1, SR_96_000);
+ 		chipio_set_conn_rate(codec, MEM_CONNID_MICOUT1, SR_96_000);
+ 		if (spec->quirk == QUIRK_R3DI)
+ 			chipio_set_conn_rate(codec, 0x0F, SR_96_000);
+ 
+ 		dspio_set_uint_param(codec, 0x80, 0x00, tmp);
+ 
+ 		chipio_set_stream_control(codec, 0x03, 1);
+ 		chipio_set_stream_control(codec, 0x04, 1);
+ 		switch (spec->quirk) {
+ 		case QUIRK_SBZ:
+ 			chipio_write(codec, 0x18B098, 0x0000000C);
+ 			chipio_write(codec, 0x18B09C, 0x0000000C);
+ 			break;
+ 		case QUIRK_AE5:
+ 			chipio_write(codec, 0x18B098, 0x0000000C);
+ 			chipio_write(codec, 0x18B09C, 0x0000004C);
+ 			break;
+ 		}
+ 		ca0132_alt_mic_boost_set(codec, spec->mic_boost_enum_val);
+ 		break;
+ 	case REAR_LINE_IN:
+ 		ca0132_mic_boost_set(codec, 0);
+ 		switch (spec->quirk) {
+ 		case QUIRK_SBZ:
+ 		case QUIRK_R3D:
+ 			ca0113_mmio_gpio_set(codec, 0, false);
+ 			break;
+ 		case QUIRK_R3DI:
+ 			r3di_gpio_mic_set(codec, R3DI_REAR_MIC);
+ 			break;
+ 		case QUIRK_AE5:
+ 			ca0113_mmio_command_set(codec, 0x48, 0x28, 0x00);
+ 			break;
+ 		}
+ 
+ 		chipio_set_conn_rate(codec, MEM_CONNID_MICIN1, SR_96_000);
+ 		chipio_set_conn_rate(codec, MEM_CONNID_MICOUT1, SR_96_000);
+ 		if (spec->quirk == QUIRK_R3DI)
+ 			chipio_set_conn_rate(codec, 0x0F, SR_96_000);
+ 
+ 		tmp = FLOAT_ZERO;
+ 		dspio_set_uint_param(codec, 0x80, 0x00, tmp);
+ 
+ 		switch (spec->quirk) {
+ 		case QUIRK_SBZ:
+ 		case QUIRK_AE5:
+ 			chipio_write(codec, 0x18B098, 0x00000000);
+ 			chipio_write(codec, 0x18B09C, 0x00000000);
+ 			break;
+ 		}
+ 		chipio_set_stream_control(codec, 0x03, 1);
+ 		chipio_set_stream_control(codec, 0x04, 1);
+ 		break;
+ 	case FRONT_MIC:
+ 		switch (spec->quirk) {
+ 		case QUIRK_SBZ:
+ 		case QUIRK_R3D:
+ 			ca0113_mmio_gpio_set(codec, 0, true);
+ 			ca0113_mmio_gpio_set(codec, 5, false);
+ 			tmp = FLOAT_THREE;
+ 			break;
+ 		case QUIRK_R3DI:
+ 			r3di_gpio_mic_set(codec, R3DI_FRONT_MIC);
+ 			tmp = FLOAT_ONE;
+ 			break;
+ 		case QUIRK_AE5:
+ 			ca0113_mmio_command_set(codec, 0x48, 0x28, 0x3f);
+ 			tmp = FLOAT_THREE;
+ 			break;
+ 		default:
+ 			tmp = FLOAT_ONE;
+ 			break;
+ 		}
+ 
+ 		chipio_set_conn_rate(codec, MEM_CONNID_MICIN1, SR_96_000);
+ 		chipio_set_conn_rate(codec, MEM_CONNID_MICOUT1, SR_96_000);
+ 		if (spec->quirk == QUIRK_R3DI)
+ 			chipio_set_conn_rate(codec, 0x0F, SR_96_000);
+ 
+ 		dspio_set_uint_param(codec, 0x80, 0x00, tmp);
+ 
+ 		chipio_set_stream_control(codec, 0x03, 1);
+ 		chipio_set_stream_control(codec, 0x04, 1);
+ 
+ 		switch (spec->quirk) {
+ 		case QUIRK_SBZ:
+ 			chipio_write(codec, 0x18B098, 0x0000000C);
+ 			chipio_write(codec, 0x18B09C, 0x000000CC);
+ 			break;
+ 		case QUIRK_AE5:
+ 			chipio_write(codec, 0x18B098, 0x0000000C);
+ 			chipio_write(codec, 0x18B09C, 0x0000004C);
+ 			break;
+ 		}
+ 		ca0132_alt_mic_boost_set(codec, spec->mic_boost_enum_val);
+ 		break;
+ 	}
+ 	ca0132_cvoice_switch_set(codec);
+ 
+ 	snd_hda_power_down_pm(codec);
+ 	return 0;
+ }
+ 
+ /*
++>>>>>>> f231daaf51da (ALSA: hda/ca0132 - Add input selection commands for AE-5)
   * Check if VNODE settings take effect immediately.
   */
  static bool ca0132_is_vnode_effective(struct hda_codec *codec,
* Unmerged path sound/pci/hda/patch_ca0132.c
