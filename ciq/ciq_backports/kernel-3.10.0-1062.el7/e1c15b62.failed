net/mlx5e: RX, Verify MPWQE stride size is in range

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: RX, Verify MPWQE stride size is in range (Alaa Hleihel) [1642498]
Rebuild_FUZZ: 95.92%
commit-author Moshe Shemesh <moshe@mellanox.com>
commit e1c15b62b7015119d3e5915cd2ae3b89d59c2576
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e1c15b62.failed

Add check of MPWQE stride size is within range supported by HW. In case
calculated MPWQE stride size exceed range, linear SKB can't be used and
we should use non linear MPWQE instead.

Fixes: 619a8f2a42f1 ("net/mlx5e: Use linear SKB in Striding RQ")
	Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit e1c15b62b7015119d3e5915cd2ae3b89d59c2576)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 489704305daa,c17de6a990ff..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -82,14 -80,94 +82,62 @@@ struct mlx5e_channel_param 
  
  bool mlx5e_check_fragmented_striding_rq_cap(struct mlx5_core_dev *mdev)
  {
 -	bool striding_rq_umr = MLX5_CAP_GEN(mdev, striding_rq) &&
 +	return MLX5_CAP_GEN(mdev, striding_rq) &&
  		MLX5_CAP_GEN(mdev, umr_ptr_rlky) &&
  		MLX5_CAP_ETH(mdev, reg_umr_sq);
 -	u16 max_wqe_sz_cap = MLX5_CAP_GEN(mdev, max_wqe_sz_sq);
 -	bool inline_umr = MLX5E_UMR_WQE_INLINE_SZ <= max_wqe_sz_cap;
 -
 -	if (!striding_rq_umr)
 -		return false;
 -	if (!inline_umr) {
 -		mlx5_core_warn(mdev, "Cannot support Striding RQ: UMR WQE size (%d) exceeds maximum supported (%d).\n",
 -			       (int)MLX5E_UMR_WQE_INLINE_SZ, max_wqe_sz_cap);
 -		return false;
 -	}
 -	return true;
  }
  
 -static u32 mlx5e_rx_get_linear_frag_sz(struct mlx5e_params *params)
 -{
 -	u16 hw_mtu = MLX5E_SW2HW_MTU(params, params->sw_mtu);
 -	u16 linear_rq_headroom = params->xdp_prog ?
 -		XDP_PACKET_HEADROOM : MLX5_RX_HEADROOM;
 -	u32 frag_sz;
 -
 -	linear_rq_headroom += NET_IP_ALIGN;
 -
 -	frag_sz = MLX5_SKB_FRAG_SZ(linear_rq_headroom + hw_mtu);
 -
 -	if (params->xdp_prog && frag_sz < PAGE_SIZE)
 -		frag_sz = PAGE_SIZE;
 -
 -	return frag_sz;
 -}
 -
 -static u8 mlx5e_mpwqe_log_pkts_per_wqe(struct mlx5e_params *params)
 -{
 -	u32 linear_frag_sz = mlx5e_rx_get_linear_frag_sz(params);
 -
 -	return MLX5_MPWRQ_LOG_WQE_SZ - order_base_2(linear_frag_sz);
 -}
 -
 -static bool mlx5e_rx_is_linear_skb(struct mlx5_core_dev *mdev,
 +u8 mlx5e_mpwqe_get_log_stride_size(struct mlx5_core_dev *mdev,
  				   struct mlx5e_params *params)
  {
++<<<<<<< HEAD
++=======
+ 	u32 frag_sz = mlx5e_rx_get_linear_frag_sz(params);
+ 
+ 	return !params->lro_en && frag_sz <= PAGE_SIZE;
+ }
+ 
+ #define MLX5_MAX_MPWQE_LOG_WQE_STRIDE_SZ ((BIT(__mlx5_bit_sz(wq, log_wqe_stride_size)) - 1) + \
+ 					  MLX5_MPWQE_LOG_STRIDE_SZ_BASE)
+ static bool mlx5e_rx_mpwqe_is_linear_skb(struct mlx5_core_dev *mdev,
+ 					 struct mlx5e_params *params)
+ {
+ 	u32 frag_sz = mlx5e_rx_get_linear_frag_sz(params);
+ 	s8 signed_log_num_strides_param;
+ 	u8 log_num_strides;
+ 
+ 	if (!mlx5e_rx_is_linear_skb(mdev, params))
+ 		return false;
+ 
+ 	if (order_base_2(frag_sz) > MLX5_MAX_MPWQE_LOG_WQE_STRIDE_SZ)
+ 		return false;
+ 
+ 	if (MLX5_CAP_GEN(mdev, ext_stride_num_range))
+ 		return true;
+ 
+ 	log_num_strides = MLX5_MPWRQ_LOG_WQE_SZ - order_base_2(frag_sz);
+ 	signed_log_num_strides_param =
+ 		(s8)log_num_strides - MLX5_MPWQE_LOG_NUM_STRIDES_BASE;
+ 
+ 	return signed_log_num_strides_param >= 0;
+ }
+ 
+ static u8 mlx5e_mpwqe_get_log_rq_size(struct mlx5e_params *params)
+ {
+ 	if (params->log_rq_mtu_frames <
+ 	    mlx5e_mpwqe_log_pkts_per_wqe(params) + MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE_MPW)
+ 		return MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE_MPW;
+ 
+ 	return params->log_rq_mtu_frames - mlx5e_mpwqe_log_pkts_per_wqe(params);
+ }
+ 
+ static u8 mlx5e_mpwqe_get_log_stride_size(struct mlx5_core_dev *mdev,
+ 					  struct mlx5e_params *params)
+ {
+ 	if (mlx5e_rx_mpwqe_is_linear_skb(mdev, params))
+ 		return order_base_2(mlx5e_rx_get_linear_frag_sz(params));
+ 
++>>>>>>> e1c15b62b701 (net/mlx5e: RX, Verify MPWQE stride size is in range)
  	return MLX5E_MPWQE_STRIDE_SZ(mdev,
  		MLX5E_GET_PFLAG(params, MLX5E_PFLAG_RX_CQE_COMPRESS));
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
