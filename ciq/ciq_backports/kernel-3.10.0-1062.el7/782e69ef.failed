powerpc/speculation: Support 'mitigations=' cmdline option

jira LE-1907
cve CVE-2019-11091
cve CVE-2018-12130
cve CVE-2018-12127
cve CVE-2018-12126
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 782e69efb3dfed6e8360bc612e8c7827a901a8f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/782e69ef.failed

Configure powerpc CPU runtime speculation bug mitigations in accordance
with the 'mitigations=' cmdline option.  This affects Meltdown, Spectre
v1, Spectre v2, and Speculative Store Bypass.

The default behavior is unchanged.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Tested-by: Jiri Kosina <jkosina@suse.cz> (on x86)
	Reviewed-by: Jiri Kosina <jkosina@suse.cz>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: "H . Peter Anvin" <hpa@zytor.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Jiri Kosina <jikos@kernel.org>
	Cc: Waiman Long <longman@redhat.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Jon Masters <jcm@redhat.com>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: linuxppc-dev@lists.ozlabs.org
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: linux-s390@vger.kernel.org
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linux-arch@vger.kernel.org
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Tyler Hicks <tyhicks@canonical.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Cc: Steven Price <steven.price@arm.com>
	Cc: Phil Auld <pauld@redhat.com>
Link: https://lkml.kernel.org/r/245a606e1a42a558a310220312d9b6adb9159df6.1555085500.git.jpoimboe@redhat.com

(cherry picked from commit 782e69efb3dfed6e8360bc612e8c7827a901a8f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/kernel-parameters.txt
#	arch/powerpc/kernel/security.c
diff --cc Documentation/kernel-parameters.txt
index f6852ae416ce,ac7150a25a7a..000000000000
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@@ -1989,6 -2513,37 +1989,40 @@@ bytes respectively. Such letter suffixe
  			in the "bleeding edge" mini2440 support kernel at
  			http://repo.or.cz/w/linux-2.6/mini2440.git
  
++<<<<<<< HEAD:Documentation/kernel-parameters.txt
++=======
+ 	mitigations=
+ 			[X86,PPC] Control optional mitigations for CPU
+ 			vulnerabilities.  This is a set of curated,
+ 			arch-independent options, each of which is an
+ 			aggregation of existing arch-specific options.
+ 
+ 			off
+ 				Disable all optional CPU mitigations.  This
+ 				improves system performance, but it may also
+ 				expose users to several CPU vulnerabilities.
+ 				Equivalent to: nopti [X86,PPC]
+ 					       nospectre_v1 [PPC]
+ 					       nospectre_v2 [X86,PPC]
+ 					       spectre_v2_user=off [X86]
+ 					       spec_store_bypass_disable=off [X86,PPC]
+ 					       l1tf=off [X86]
+ 
+ 			auto (default)
+ 				Mitigate all CPU vulnerabilities, but leave SMT
+ 				enabled, even if it's vulnerable.  This is for
+ 				users who don't want to be surprised by SMT
+ 				getting disabled across kernel upgrades, or who
+ 				have other ways of avoiding SMT-based attacks.
+ 				Equivalent to: (default behavior)
+ 
+ 			auto,nosmt
+ 				Mitigate all CPU vulnerabilities, disabling SMT
+ 				if needed.  This is for users who always want to
+ 				be fully mitigated, even if it means losing SMT.
+ 				Equivalent to: l1tf=flush,nosmt [X86]
+ 
++>>>>>>> 782e69efb3df (powerpc/speculation: Support 'mitigations=' cmdline option):Documentation/admin-guide/kernel-parameters.txt
  	mminit_loglevel=
  			[KNL] When CONFIG_DEBUG_MEMORY_INIT is set, this
  			parameter allows control of the logging verbosity for
diff --cc arch/powerpc/kernel/security.c
index c48c320c0dde,cdf3e73000e9..000000000000
--- a/arch/powerpc/kernel/security.c
+++ b/arch/powerpc/kernel/security.c
@@@ -14,6 -18,112 +14,115 @@@
  
  unsigned long powerpc_security_features __read_mostly = SEC_FTR_DEFAULT;
  
++<<<<<<< HEAD
++=======
+ enum count_cache_flush_type {
+ 	COUNT_CACHE_FLUSH_NONE	= 0x1,
+ 	COUNT_CACHE_FLUSH_SW	= 0x2,
+ 	COUNT_CACHE_FLUSH_HW	= 0x4,
+ };
+ static enum count_cache_flush_type count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;
+ 
+ bool barrier_nospec_enabled;
+ static bool no_nospec;
+ static bool btb_flush_enabled;
+ #ifdef CONFIG_PPC_FSL_BOOK3E
+ static bool no_spectrev2;
+ #endif
+ 
+ static void enable_barrier_nospec(bool enable)
+ {
+ 	barrier_nospec_enabled = enable;
+ 	do_barrier_nospec_fixups(enable);
+ }
+ 
+ void setup_barrier_nospec(void)
+ {
+ 	bool enable;
+ 
+ 	/*
+ 	 * It would make sense to check SEC_FTR_SPEC_BAR_ORI31 below as well.
+ 	 * But there's a good reason not to. The two flags we check below are
+ 	 * both are enabled by default in the kernel, so if the hcall is not
+ 	 * functional they will be enabled.
+ 	 * On a system where the host firmware has been updated (so the ori
+ 	 * functions as a barrier), but on which the hypervisor (KVM/Qemu) has
+ 	 * not been updated, we would like to enable the barrier. Dropping the
+ 	 * check for SEC_FTR_SPEC_BAR_ORI31 achieves that. The only downside is
+ 	 * we potentially enable the barrier on systems where the host firmware
+ 	 * is not updated, but that's harmless as it's a no-op.
+ 	 */
+ 	enable = security_ftr_enabled(SEC_FTR_FAVOUR_SECURITY) &&
+ 		 security_ftr_enabled(SEC_FTR_BNDS_CHK_SPEC_BAR);
+ 
+ 	if (!no_nospec && !cpu_mitigations_off())
+ 		enable_barrier_nospec(enable);
+ }
+ 
+ static int __init handle_nospectre_v1(char *p)
+ {
+ 	no_nospec = true;
+ 
+ 	return 0;
+ }
+ early_param("nospectre_v1", handle_nospectre_v1);
+ 
+ #ifdef CONFIG_DEBUG_FS
+ static int barrier_nospec_set(void *data, u64 val)
+ {
+ 	switch (val) {
+ 	case 0:
+ 	case 1:
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (!!val == !!barrier_nospec_enabled)
+ 		return 0;
+ 
+ 	enable_barrier_nospec(!!val);
+ 
+ 	return 0;
+ }
+ 
+ static int barrier_nospec_get(void *data, u64 *val)
+ {
+ 	*val = barrier_nospec_enabled ? 1 : 0;
+ 	return 0;
+ }
+ 
+ DEFINE_SIMPLE_ATTRIBUTE(fops_barrier_nospec,
+ 			barrier_nospec_get, barrier_nospec_set, "%llu\n");
+ 
+ static __init int barrier_nospec_debugfs_init(void)
+ {
+ 	debugfs_create_file("barrier_nospec", 0600, powerpc_debugfs_root, NULL,
+ 			    &fops_barrier_nospec);
+ 	return 0;
+ }
+ device_initcall(barrier_nospec_debugfs_init);
+ #endif /* CONFIG_DEBUG_FS */
+ 
+ #ifdef CONFIG_PPC_FSL_BOOK3E
+ static int __init handle_nospectre_v2(char *p)
+ {
+ 	no_spectrev2 = true;
+ 
+ 	return 0;
+ }
+ early_param("nospectre_v2", handle_nospectre_v2);
+ void setup_spectre_v2(void)
+ {
+ 	if (no_spectrev2 || cpu_mitigations_off())
+ 		do_btb_flush_fixups();
+ 	else
+ 		btb_flush_enabled = true;
+ }
+ #endif /* CONFIG_PPC_FSL_BOOK3E */
+ 
+ #ifdef CONFIG_PPC_BOOK3S_64
++>>>>>>> 782e69efb3df (powerpc/speculation: Support 'mitigations=' cmdline option)
  ssize_t cpu_show_meltdown(struct device *dev, struct device_attribute *attr, char *buf)
  {
  	bool thread_priv;
* Unmerged path Documentation/kernel-parameters.txt
* Unmerged path arch/powerpc/kernel/security.c
diff --git a/arch/powerpc/kernel/setup_64.c b/arch/powerpc/kernel/setup_64.c
index 19a1bdc40cdf..c10b467bab08 100644
--- a/arch/powerpc/kernel/setup_64.c
+++ b/arch/powerpc/kernel/setup_64.c
@@ -855,7 +855,7 @@ void setup_rfi_flush(enum l1d_flush_type types, bool enable)
 
 	enabled_flush_types = types;
 
-	if (!no_rfi_flush)
+	if (!no_rfi_flush && !cpu_mitigations_off())
 		rfi_flush_enable(enable);
 }
 
