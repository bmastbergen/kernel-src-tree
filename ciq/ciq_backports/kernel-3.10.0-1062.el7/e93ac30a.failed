ALSA: hda/ca0132: add extra init functions for r3di + sbz

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Connor McAdams <conmanx360@gmail.com>
commit e93ac30a32a6ba7ac3b4b2a4379af1dadb91e505
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/e93ac30a.failed

This patch adds extra init functions for the Sound Blaster Z and
Recon3Di. It also adds more checks to make sure that the DSP isn't
downloaded twice on startup, by checking if the dsp_state is already set
to DSP_DOWNLOADED. It also adds the ability to re-download the DSP on a
resume.

It also changes the init verbs table to apply to all codecs, and takes
the two specific end verbs and puts them into a separate function in
ca0132_init instead.

GPIO functions are also added.

	Signed-off-by: Connor McAdams <conmanx360@gmail.com>
	Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit e93ac30a32a6ba7ac3b4b2a4379af1dadb91e505)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/patch_ca0132.c
diff --cc sound/pci/hda/patch_ca0132.c
index 267302056b78,508ba35eadbb..000000000000
--- a/sound/pci/hda/patch_ca0132.c
+++ b/sound/pci/hda/patch_ca0132.c
@@@ -710,7 -714,9 +710,8 @@@ struct ca0132_spec 
  	const struct hda_verb *base_init_verbs;
  	const struct hda_verb *base_exit_verbs;
  	const struct hda_verb *chip_init_verbs;
+ 	const struct hda_verb *sbz_init_verbs;
  	struct hda_verb *spec_init_verbs;
 -	struct auto_pin_cfg autocfg;
  
  	/* Nodes configurations */
  	struct hda_multi_out multiout;
@@@ -741,6 -747,8 +742,11 @@@
  	unsigned int scp_resp_header;
  	unsigned int scp_resp_data[4];
  	unsigned int scp_resp_count;
++<<<<<<< HEAD
++=======
+ 	bool alt_firmware_present;
+ 	bool dsp_reload;
++>>>>>>> e93ac30a32a6 (ALSA: hda/ca0132: add extra init functions for r3di + sbz)
  
  	/* mixer and effects related */
  	unsigned char dmic_ctl;
@@@ -4523,7 -4630,8 +4585,12 @@@ static struct hda_verb ca0132_base_exit
  	{}
  };
  
++<<<<<<< HEAD
 +/* Other verbs tables.  Sends after DSP download. */
++=======
+ /* Other verbs tables. Sends after DSP download. */
+ 
++>>>>>>> e93ac30a32a6 (ALSA: hda/ca0132: add extra init functions for r3di + sbz)
  static struct hda_verb ca0132_init_verbs0[] = {
  	/* chip init verbs */
  	{0x15, 0x70D, 0xF0},
@@@ -4716,8 -4970,28 +4929,28 @@@ static void ca0132_alt_init(struct hda_
  static int ca0132_init(struct hda_codec *codec)
  {
  	struct ca0132_spec *spec = codec->spec;
 -	struct auto_pin_cfg *cfg = &spec->autocfg;
 +	struct auto_pin_cfg *cfg = &spec->gen.autocfg;
  	int i;
+ 	bool dsp_loaded;
+ 
+ 	/*
+ 	 * If the DSP is already downloaded, and init has been entered again,
+ 	 * there's only two reasons for it. One, the codec has awaken from a
+ 	 * suspended state, and in that case dspload_is_loaded will return
+ 	 * false, and the init will be ran again. The other reason it gets
+ 	 * re entered is on startup for some reason it triggers a suspend and
+ 	 * resume state. In this case, it will check if the DSP is downloaded,
+ 	 * and not run the init function again. For codecs using alt_functions,
+ 	 * it will check if the DSP is loaded properly.
+ 	 */
+ 	if (spec->dsp_state == DSP_DOWNLOADED) {
+ 		dsp_loaded = dspload_is_loaded(codec);
+ 		if (!dsp_loaded) {
+ 			spec->dsp_reload = true;
+ 			spec->dsp_state = DSP_DOWNLOAD_INIT;
+ 		} else
+ 			return 0;
+ 	}
  
  	if (spec->dsp_state != DSP_DOWNLOAD_FAILED)
  		spec->dsp_state = DSP_DOWNLOAD_INIT;
* Unmerged path sound/pci/hda/patch_ca0132.c
