xfs: refactor xfs_bmap_add_extent_delay_real

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1062.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 4dcb8869871cc102b9431ae78b40bfc39087b90c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1062.el7/4dcb8869.failed

Use xfs_iext_get_extent to find, and xfs_iext_update_extent to update
entries in the in-core extent list.  This isolates the function from
the detailed layout of the extent list, and generally makes the code
a lot more readable.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 4dcb8869871cc102b9431ae78b40bfc39087b90c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_bmap.c
diff --cc fs/xfs/libxfs/xfs_bmap.c
index b813e9db509a,390f12d3c5d2..000000000000
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@@ -1563,10 -1586,10 +1562,14 @@@ xfs_bmap_add_extent_delay_real
  	xfs_filblks_t		da_new; /* new count del alloc blocks used */
  	xfs_filblks_t		da_old; /* old count del alloc blocks used */
  	xfs_filblks_t		temp=0;	/* value for da_new calculations */
- 	xfs_filblks_t		temp2=0;/* value for da_new calculations */
  	int			tmp_rval;	/* partial logging flags */
 +	int			whichfork = XFS_DATA_FORK;
  	struct xfs_mount	*mp;
++<<<<<<< HEAD
++=======
+ 	xfs_extnum_t		*nextents;
+ 	struct xfs_bmbt_irec	old;
++>>>>>>> 4dcb8869871c (xfs: refactor xfs_bmap_add_extent_delay_real)
  
  	mp = bma->ip->i_mount;
  	ifp = XFS_IFORK_PTR(bma->ip, whichfork);
@@@ -1768,11 -1793,12 +1767,12 @@@
  		 * the new one.
  		 */
  		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
- 		xfs_bmbt_set_startblock(ep, new->br_startblock);
- 		xfs_bmbt_set_state(ep, new->br_state);
+ 		PREV.br_startblock = new->br_startblock;
+ 		PREV.br_state = new->br_state;
+ 		xfs_iext_update_extent(ifp, bma->idx, &PREV);
  		trace_xfs_bmap_post_update(bma->ip, bma->idx, state, _THIS_IP_);
  
 -		(*nextents)++;
 +		bma->ip->i_d.di_nextents++;
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_CORE | XFS_ILOG_DEXT;
  		else {
@@@ -1837,12 -1864,8 +1838,8 @@@
  		 * Filling in the first part of a previous delayed allocation.
  		 * The left neighbor is not contiguous.
  		 */
- 		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
- 		xfs_bmbt_set_startoff(ep, new_endoff);
- 		temp = PREV.br_blockcount - new->br_blockcount;
- 		xfs_bmbt_set_blockcount(ep, temp);
  		xfs_iext_insert(bma->ip, bma->idx, 1, new, state);
 -		(*nextents)++;
 +		bma->ip->i_d.di_nextents++;
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_CORE | XFS_ILOG_DEXT;
  		else {
@@@ -1922,11 -1954,8 +1928,8 @@@
  		 * Filling in the last part of a previous delayed allocation.
  		 * The right neighbor is not contiguous.
  		 */
- 		temp = PREV.br_blockcount - new->br_blockcount;
- 		trace_xfs_bmap_pre_update(bma->ip, bma->idx, state, _THIS_IP_);
- 		xfs_bmbt_set_blockcount(ep, temp);
  		xfs_iext_insert(bma->ip, bma->idx + 1, 1, new, state);
 -		(*nextents)++;
 +		bma->ip->i_d.di_nextents++;
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_CORE | XFS_ILOG_DEXT;
  		else {
@@@ -1983,19 -2017,33 +1991,37 @@@
  		 *  PREV @ idx          LEFT              RIGHT
  		 *                      inserted at idx + 1
  		 */
- 		temp = new->br_startoff - PREV.br_startoff;
- 		temp2 = PREV.br_startoff + PREV.br_blockcount - new_endoff;
- 		trace_xfs_bmap_pre_update(bma->ip, bma->idx, 0, _THIS_IP_);
- 		xfs_bmbt_set_blockcount(ep, temp);	/* truncate PREV */
+ 		old = PREV;
+ 
+ 		/* LEFT is the new middle */
  		LEFT = *new;
+ 
+ 		/* RIGHT is the new right */
  		RIGHT.br_state = PREV.br_state;
- 		RIGHT.br_startblock = nullstartblock(
- 				(int)xfs_bmap_worst_indlen(bma->ip, temp2));
  		RIGHT.br_startoff = new_endoff;
- 		RIGHT.br_blockcount = temp2;
+ 		RIGHT.br_blockcount =
+ 			PREV.br_startoff + PREV.br_blockcount - new_endoff;
+ 		RIGHT.br_startblock =
+ 			nullstartblock(xfs_bmap_worst_indlen(bma->ip,
+ 					RIGHT.br_blockcount));
+ 
+ 		/* truncate PREV */
+ 		trace_xfs_bmap_pre_update(bma->ip, bma->idx, 0, _THIS_IP_);
+ 		PREV.br_blockcount = new->br_startoff - PREV.br_startoff;
+ 		PREV.br_startblock =
+ 			nullstartblock(xfs_bmap_worst_indlen(bma->ip,
+ 					PREV.br_blockcount));
+ 		xfs_iext_update_extent(ifp, bma->idx, &PREV);
+ 		trace_xfs_bmap_post_update(bma->ip, bma->idx, state, _THIS_IP_);
+ 
  		/* insert LEFT (r[0]) and RIGHT (r[1]) at the same time */
  		xfs_iext_insert(bma->ip, bma->idx + 1, 2, &LEFT, state);
++<<<<<<< HEAD
 +		bma->ip->i_d.di_nextents++;
++=======
+ 		(*nextents)++;
+ 
++>>>>>>> 4dcb8869871c (xfs: refactor xfs_bmap_add_extent_delay_real)
  		if (bma->cur == NULL)
  			rval = XFS_ILOG_CORE | XFS_ILOG_DEXT;
  		else {
* Unmerged path fs/xfs/libxfs/xfs_bmap.c
