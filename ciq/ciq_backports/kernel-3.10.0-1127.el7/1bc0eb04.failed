scsi: sg: protect accesses to 'reserved' page array

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [scsi] sg: protect accesses to 'reserved' page array (Ewan Milne) [1710533]
Rebuild_FUZZ: 93.75%
commit-author Hannes Reinecke <hare@suse.de>
commit 1bc0eb0446158cc76562176b80623aa119afee5b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/1bc0eb04.failed

The 'reserved' page array is used as a short-cut for mapping data,
saving us to allocate pages per request. However, the 'reserved' array
is only capable of holding one request, so this patch introduces a mutex
for protect 'sg_fd' against concurrent accesses.

	Signed-off-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Tested-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 1bc0eb0446158cc76562176b80623aa119afee5b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sg.c
diff --cc drivers/scsi/sg.c
index 4ce04123d0c8,ddc18082cf6a..000000000000
--- a/drivers/scsi/sg.c
+++ b/drivers/scsi/sg.c
@@@ -967,10 -955,15 +970,19 @@@ sg_ioctl(struct file *filp, unsigned in
                  if (val < 0)
                          return -EINVAL;
  		val = min_t(int, val,
++<<<<<<< HEAD
 +			    queue_max_sectors(sdp->device->request_queue) * 512);
++=======
+ 			    max_sectors_bytes(sdp->device->request_queue));
+ 		mutex_lock(&sfp->f_mutex);
++>>>>>>> 1bc0eb044615 (scsi: sg: protect accesses to 'reserved' page array)
  		if (val != sfp->reserve.bufflen) {
- 			if (sg_res_in_use(sfp) || sfp->mmap_called)
+ 			if (sfp->mmap_called ||
+ 			    sfp->res_in_use) {
+ 				mutex_unlock(&sfp->f_mutex);
  				return -EBUSY;
+ 			}
+ 
  			sg_remove_scat(sfp, &sfp->reserve);
  			sg_build_reserve(sfp, val);
  		}
* Unmerged path drivers/scsi/sg.c
