scsi: lpfc: Rework misleading nvme not supported in firmware message

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author James Smart <jsmart2021@gmail.com>
commit c15e07047e7ad006324d8a8b9d58a86e8f0131fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/c15e0704.failed

The driver unconditionally says fw doesn't support nvme when in
truth it was a driver parameter settings that disabled nvme support.

Rework the code validating nvme support to accurately report what
condition is disabling nvme support. Save state on whether nvme
fw supports nvme in case sysfs attributes change dynamically.

	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <jsmart2021@gmail.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit c15e07047e7ad006324d8a8b9d58a86e8f0131fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_init.c
diff --cc drivers/scsi/lpfc/lpfc_init.c
index b32cc70e9759,1468a4d7c501..000000000000
--- a/drivers/scsi/lpfc/lpfc_init.c
+++ b/drivers/scsi/lpfc/lpfc_init.c
@@@ -11275,26 -11333,43 +11275,58 @@@ lpfc_get_sli4_parameters(struct lpfc_hb
  					   mbx_sli4_parameters);
  	phba->sli4_hba.extents_in_use = bf_get(cfg_ext, mbx_sli4_parameters);
  	phba->sli4_hba.rpi_hdrs_in_use = bf_get(cfg_hdrr, mbx_sli4_parameters);
- 	phba->nvme_support = (bf_get(cfg_nvme, mbx_sli4_parameters) &&
- 			      bf_get(cfg_xib, mbx_sli4_parameters));
  
++<<<<<<< HEAD
 +	if ((phba->cfg_enable_fc4_type == LPFC_ENABLE_FCP) ||
 +	    !phba->nvme_support) {
 +		phba->nvme_support = 0;
 +		phba->nvmet_support = 0;
 +		phba->cfg_nvmet_mrq = LPFC_NVMET_MRQ_OFF;
 +		phba->cfg_nvme_io_channel = 0;
 +		phba->io_channel_irqs = phba->cfg_fcp_io_channel;
 +		lpfc_printf_log(phba, KERN_ERR, LOG_INIT | LOG_NVME,
 +				"6101 Disabling NVME support: "
 +				"Not supported by firmware: %d %d\n",
 +				bf_get(cfg_nvme, mbx_sli4_parameters),
 +				bf_get(cfg_xib, mbx_sli4_parameters));
++=======
+ 	/* Check for firmware nvme support */
+ 	rc = (bf_get(cfg_nvme, mbx_sli4_parameters) &&
+ 		     bf_get(cfg_xib, mbx_sli4_parameters));
++>>>>>>> c15e07047e7a (scsi: lpfc: Rework misleading nvme not supported in firmware message)
  
- 		/* If firmware doesn't support NVME, just use SCSI support */
- 		if (!(phba->cfg_enable_fc4_type & LPFC_ENABLE_FCP))
- 			return -ENODEV;
- 		phba->cfg_enable_fc4_type = LPFC_ENABLE_FCP;
+ 	if (rc) {
+ 		/* Save this to indicate the Firmware supports NVME */
+ 		sli4_params->nvme = 1;
+ 
+ 		/* Firmware NVME support, check driver FC4 NVME support */
+ 		if (phba->cfg_enable_fc4_type == LPFC_ENABLE_FCP) {
+ 			lpfc_printf_log(phba, KERN_INFO, LOG_INIT | LOG_NVME,
+ 					"6133 Disabling NVME support: "
+ 					"FC4 type not supported: x%x\n",
+ 					phba->cfg_enable_fc4_type);
+ 			goto fcponly;
+ 		}
+ 	} else {
+ 		/* No firmware NVME support, check driver FC4 NVME support */
+ 		sli4_params->nvme = 0;
+ 		if (phba->cfg_enable_fc4_type & LPFC_ENABLE_NVME) {
+ 			lpfc_printf_log(phba, KERN_ERR, LOG_INIT | LOG_NVME,
+ 					"6101 Disabling NVME support: Not "
+ 					"supported by firmware (%d %d) x%x\n",
+ 					bf_get(cfg_nvme, mbx_sli4_parameters),
+ 					bf_get(cfg_xib, mbx_sli4_parameters),
+ 					phba->cfg_enable_fc4_type);
+ fcponly:
+ 			phba->nvme_support = 0;
+ 			phba->nvmet_support = 0;
+ 			phba->cfg_nvmet_mrq = 0;
+ 
+ 			/* If no FC4 type support, move to just SCSI support */
+ 			if (!(phba->cfg_enable_fc4_type & LPFC_ENABLE_FCP))
+ 				return -ENODEV;
+ 			phba->cfg_enable_fc4_type = LPFC_ENABLE_FCP;
+ 		}
  	}
  
  	/* Only embed PBDE for if_type 6, PBDE support requires xib be set */
* Unmerged path drivers/scsi/lpfc/lpfc_init.c
diff --git a/drivers/scsi/lpfc/lpfc_sli4.h b/drivers/scsi/lpfc/lpfc_sli4.h
index 3c0dc9f17aa6..81469552181e 100644
--- a/drivers/scsi/lpfc/lpfc_sli4.h
+++ b/drivers/scsi/lpfc/lpfc_sli4.h
@@ -495,6 +495,7 @@ struct lpfc_pc_sli4_params {
 #define LPFC_WQ_SZ64_SUPPORT	1
 #define LPFC_WQ_SZ128_SUPPORT	2
 	uint8_t wqpcnt;
+	uint8_t nvme;
 };
 
 #define LPFC_CQ_4K_PAGE_SZ	0x1
