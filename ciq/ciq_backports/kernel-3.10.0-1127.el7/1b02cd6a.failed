sched/deadline: Correctly handle active 0-lag timers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author luca abeni <luca.abeni@santannapisa.it>
commit 1b02cd6a2d7f3e2a6a5262887d2cb2912083e42f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/1b02cd6a.failed

syzbot reported the following warning:

   [Â ] WARNING: CPU: 4 PID: 17089 at kernel/sched/deadline.c:255 task_non_contending+0xae0/0x1950

line 255 of deadline.c is:

	WARN_ON(hrtimer_active(&dl_se->inactive_timer));

in task_non_contending().

Unfortunately, in some cases (for example, a deadline task
continuosly blocking and waking immediately) it can happen that
a task blocks (and task_non_contending() is called) while the
0-lag timer is still active.

In this case, the safest thing to do is to immediately decrease
the running bandwidth of the task, without trying to re-arm the 0-lag timer.

	Signed-off-by: luca abeni <luca.abeni@santannapisa.it>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Juri Lelli <juri.lelli@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: chengjian (D) <cj.chengjian@huawei.com>
Link: https://lkml.kernel.org/r/20190325131530.34706-1-luca.abeni@santannapisa.it
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 1b02cd6a2d7f3e2a6a5262887d2cb2912083e42f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
diff --cc kernel/sched/deadline.c
index 75f9634980d1,43901fa3f269..000000000000
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@@ -183,7 -249,9 +183,13 @@@ static void task_non_contending(struct 
  	if (dl_se->dl_runtime == 0)
  		return;
  
++<<<<<<< HEAD
 +	WARN_ON(hrtimer_active(&dl_se->inactive_timer));
++=======
+ 	if (dl_entity_is_special(dl_se))
+ 		return;
+ 
++>>>>>>> 1b02cd6a2d7f (sched/deadline: Correctly handle active 0-lag timers)
  	WARN_ON(dl_se->dl_non_contending);
  
  	zerolag_time = dl_se->deadline -
@@@ -200,9 -268,9 +206,9 @@@
  	 * If the "0-lag time" already passed, decrease the active
  	 * utilization now, instead of starting a timer
  	 */
- 	if (zerolag_time < 0) {
+ 	if ((zerolag_time < 0) || hrtimer_active(&dl_se->inactive_timer)) {
  		if (dl_task(p))
 -			sub_running_bw(dl_se, dl_rq);
 +			sub_running_bw(dl_se->dl_bw, dl_rq);
  		if (!dl_task(p) || p->state == TASK_DEAD) {
  			struct dl_bw *dl_b = dl_bw_of(task_cpu(p));
  
* Unmerged path kernel/sched/deadline.c
