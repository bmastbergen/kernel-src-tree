xfs: teach error reporting functions to take xfs_failaddr_t

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit d9418ed08ae1fa025c96498d95ba30cbb934e119
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/d9418ed0.failed

Convert the two other error reporting functions to take xfs_failaddr_t
when the caller wishes to capture a code pointer instead of the classic
void * pointer.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
(cherry picked from commit d9418ed08ae1fa025c96498d95ba30cbb934e119)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_error.h
diff --cc fs/xfs/xfs_error.h
index ea816c1bf8db,f086040266ac..000000000000
--- a/fs/xfs/xfs_error.h
+++ b/fs/xfs/xfs_error.h
@@@ -21,11 -21,13 +21,18 @@@
  struct xfs_mount;
  
  extern void xfs_error_report(const char *tag, int level, struct xfs_mount *mp,
- 			const char *filename, int linenum, void *ra);
+ 			const char *filename, int linenum,
+ 			xfs_failaddr_t failaddr);
  extern void xfs_corruption_error(const char *tag, int level,
  			struct xfs_mount *mp, void *p, const char *filename,
++<<<<<<< HEAD
 +			int linenum, void *ra);
 +extern void xfs_verifier_error(struct xfs_buf *bp);
++=======
+ 			int linenum, xfs_failaddr_t failaddr);
+ extern void xfs_verifier_error(struct xfs_buf *bp, int error,
+ 			xfs_failaddr_t failaddr);
++>>>>>>> d9418ed08ae1 (xfs: teach error reporting functions to take xfs_failaddr_t)
  
  #define	XFS_ERROR_REPORT(e, lvl, mp)	\
  	xfs_error_report(e, lvl, mp, __FILE__, __LINE__, __return_address)
diff --git a/fs/xfs/xfs_error.c b/fs/xfs/xfs_error.c
index 388ce630c4b7..8d18b5577d3f 100644
--- a/fs/xfs/xfs_error.c
+++ b/fs/xfs/xfs_error.c
@@ -299,12 +299,12 @@ xfs_error_report(
 	struct xfs_mount	*mp,
 	const char		*filename,
 	int			linenum,
-	void			*ra)
+	xfs_failaddr_t		failaddr)
 {
 	if (level <= xfs_error_level) {
 		xfs_alert_tag(mp, XFS_PTAG_ERROR_REPORT,
 		"Internal error %s at line %d of file %s.  Caller %pS",
-			    tag, linenum, filename, ra);
+			    tag, linenum, filename, failaddr);
 
 		xfs_stack_trace();
 	}
@@ -318,11 +318,11 @@ xfs_corruption_error(
 	void			*p,
 	const char		*filename,
 	int			linenum,
-	void			*ra)
+	xfs_failaddr_t		failaddr)
 {
 	if (level <= xfs_error_level)
 		xfs_hex_dump(p, 64);
-	xfs_error_report(tag, level, mp, filename, linenum, ra);
+	xfs_error_report(tag, level, mp, filename, linenum, failaddr);
 	xfs_alert(mp, "Corruption detected. Unmount and run xfs_repair");
 }
 
* Unmerged path fs/xfs/xfs_error.h
