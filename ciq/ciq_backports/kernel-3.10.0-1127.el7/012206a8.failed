x86/speculation/taa: Fix printing of TAA_MSG_SMT on IBRS_ALL CPUs

jira LE-1907
cve CVE-2019-11135
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 012206a822a8b6ac09125bfaa210a95b9eb8f1c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/012206a8.failed

For new IBRS_ALL CPUs, the Enhanced IBRS check at the beginning of
cpu_bugs_smt_update() causes the function to return early, unintentionally
skipping the MDS and TAA logic.

This is not a problem for MDS, because there appears to be no overlap
between IBRS_ALL and MDS-affected CPUs.  So the MDS mitigation would be
disabled and nothing would need to be done in this function anyway.

But for TAA, the TAA_MSG_SMT string will never get printed on Cascade
Lake and newer.

The check is superfluous anyway: when 'spectre_v2_enabled' is
SPECTRE_V2_IBRS_ENHANCED, 'spectre_v2_user' is always
SPECTRE_V2_USER_NONE, and so the 'spectre_v2_user' switch statement
handles it appropriately by doing nothing.  So just remove the check.

Fixes: 1b42f017415b ("x86/speculation/taa: Add mitigation for TSX Async Abort")
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Tyler Hicks <tyhicks@canonical.com>
	Reviewed-by: Borislav Petkov <bp@suse.de>

(cherry picked from commit 012206a822a8b6ac09125bfaa210a95b9eb8f1c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index 9ec6cfa4f503,4c7b0fa15a19..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -409,30 -882,23 +409,33 @@@ static void update_mds_branch_idle(void
  }
  
  #define MDS_MSG_SMT "MDS CPU bug present and SMT on, data leak possible. See https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html for more details.\n"
 -#define TAA_MSG_SMT "TAA CPU bug present and SMT on, data leak possible. See https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/tsx_async_abort.html for more details.\n"
  
 -void cpu_bugs_smt_update(void)
 +void arch_smt_update(void)
  {
++<<<<<<< HEAD
 +	u64 mask;
 +
 +	if (!stibp_needed())
 +		return;
 +
++=======
++>>>>>>> 012206a822a8 (x86/speculation/taa: Fix printing of TAA_MSG_SMT on IBRS_ALL CPUs)
  	mutex_lock(&spec_ctrl_mutex);
  
 -	switch (spectre_v2_user) {
 -	case SPECTRE_V2_USER_NONE:
 -		break;
 -	case SPECTRE_V2_USER_STRICT:
 -	case SPECTRE_V2_USER_STRICT_PREFERRED:
 -		update_stibp_strict();
 -		break;
 -	case SPECTRE_V2_USER_PRCTL:
 -	case SPECTRE_V2_USER_SECCOMP:
 -		update_indir_branch_cond();
 -		break;
 +	mask = x86_spec_ctrl_base & ~SPEC_CTRL_STIBP;
 +
 +	/*
 +	 * RHEL: Disable automatic enabling of STIBP with SMT on for now.
 +	 */
 +#if 0
 +	if (sched_smt_active())
 +		mask |= SPEC_CTRL_STIBP;
 +#endif
 +	if (mask != x86_spec_ctrl_base) {
 +		pr_info("Spectre v2 cross-process SMT mitigation: %s STIBP\n",
 +			mask & SPEC_CTRL_STIBP ? "Enabling" : "Disabling");
 +		x86_spec_ctrl_base = mask;
 +		on_each_cpu(update_stibp_msr, NULL, 1);
  	}
  
  	switch (mds_mitigation) {
* Unmerged path arch/x86/kernel/cpu/bugs.c
