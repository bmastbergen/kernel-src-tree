net/mlx5e: Use helpers to get headers criteria and value pointers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Eli Britstein <elibr@mellanox.com>
commit 8377629e76bcdf5ba1d3f2d220eebbfd947cfe7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/8377629e.failed

The headers criteria and value pointers may be either of the inner
packet, if a tunnel exists, or of the outer. Simplify the code by using
helper functions to retrieve them.

	Signed-off-by: Eli Britstein <elibr@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 8377629e76bcdf5ba1d3f2d220eebbfd947cfe7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index c47f64762949,81f8ac569a0e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -1484,27 -1523,22 +1504,27 @@@ static int __parse_cls_flower(struct ml
  		/* In decap flow, header pointers should point to the inner
  		 * headers, outer header were already set by parse_tunnel_attr
  		 */
- 		headers_c = MLX5_ADDR_OF(fte_match_param, spec->match_criteria,
- 					 inner_headers);
- 		headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value,
- 					 inner_headers);
+ 		headers_c = get_match_headers_criteria(MLX5_FLOW_CONTEXT_ACTION_DECAP,
+ 						       spec);
+ 		headers_v = get_match_headers_value(MLX5_FLOW_CONTEXT_ACTION_DECAP,
+ 						    spec);
  	}
  
 -	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_BASIC)) {
 -		struct flow_match_basic match;
 -
 -		flow_rule_match_basic(rule, &match);
 +	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_BASIC)) {
 +		struct flow_dissector_key_basic *key =
 +			skb_flow_dissector_target(f->dissector,
 +						  FLOW_DISSECTOR_KEY_BASIC,
 +						  f->key);
 +		struct flow_dissector_key_basic *mask =
 +			skb_flow_dissector_target(f->dissector,
 +						  FLOW_DISSECTOR_KEY_BASIC,
 +						  f->mask);
  		MLX5_SET(fte_match_set_lyr_2_4, headers_c, ethertype,
 -			 ntohs(match.mask->n_proto));
 +			 ntohs(mask->n_proto));
  		MLX5_SET(fte_match_set_lyr_2_4, headers_v, ethertype,
 -			 ntohs(match.key->n_proto));
 +			 ntohs(key->n_proto));
  
 -		if (match.mask->n_proto)
 +		if (mask->n_proto)
  			*match_level = MLX5_MATCH_L2;
  	}
  
@@@ -2193,13 -2202,9 +2213,17 @@@ static bool modify_header_match_support
  	u8 htype, ip_proto;
  	void *headers_v;
  	u16 ethertype;
 -	int i;
 +	int nkeys, i;
 +
++<<<<<<< HEAD
 +	if (actions2 & MLX5_FLOW_CONTEXT_ACTION_DECAP)
 +		headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, inner_headers);
 +	else
 +		headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, outer_headers);
  
++=======
+ 	headers_v = get_match_headers_value(actions, spec);
++>>>>>>> 8377629e76bc (net/mlx5e: Use helpers to get headers criteria and value pointers)
  	ethertype = MLX5_GET(fte_match_set_lyr_2_4, headers_v, ethertype);
  
  	/* for non-IP we only re-write MACs, so we're okay */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
