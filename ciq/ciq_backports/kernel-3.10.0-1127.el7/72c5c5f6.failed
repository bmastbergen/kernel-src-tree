xfs: print specific dqblk that failed verifiers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Eric Sandeen <sandeen@sandeen.net>
commit 72c5c5f6d01c859dfe16c4910a5222ed9393c37c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/72c5c5f6.failed

Rather than printing the top of the buffer that held a corrupted dqblk,
restructure things to print out the specific one that failed by pushing
the calls to the verifier_error function down into the verifier which
iterates over the buffer and detects the error.

	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 72c5c5f6d01c859dfe16c4910a5222ed9393c37c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_dquot_buf.c
diff --cc fs/xfs/libxfs/xfs_dquot_buf.c
index 74b0867f3ece,cce520becee4..000000000000
--- a/fs/xfs/libxfs/xfs_dquot_buf.c
+++ b/fs/xfs/libxfs/xfs_dquot_buf.c
@@@ -198,10 -174,12 +199,17 @@@ xfs_dquot_buf_verify_crc
  
  	for (i = 0; i < ndquots; i++, d++) {
  		if (!xfs_verify_cksum((char *)d, sizeof(struct xfs_dqblk),
- 				 XFS_DQUOT_CRC_OFF))
+ 				 XFS_DQUOT_CRC_OFF)) {
+ 			if (!readahead)
+ 				xfs_buf_verifier_error(bp, -EFSBADCRC, __func__,
+ 					d, sizeof(*d), __this_address);
  			return false;
++<<<<<<< HEAD
 +		if (!uuid_equal(&d->dd_uuid, &mp->m_sb.sb_meta_uuid))
 +			return false;
++=======
+ 		}
++>>>>>>> 72c5c5f6d01c (xfs: print specific dqblk that failed verifiers)
  	}
  	return true;
  }
@@@ -210,9 -188,10 +218,13 @@@ STATIC boo
  xfs_dquot_buf_verify(
  	struct xfs_mount	*mp,
  	struct xfs_buf		*bp,
++<<<<<<< HEAD
 +	int			warn)
++=======
+ 	bool			readahead)
++>>>>>>> 72c5c5f6d01c (xfs: print specific dqblk that failed verifiers)
  {
 -	struct xfs_dqblk	*dqb = bp->b_addr;
 -	xfs_failaddr_t		fa;
 +	struct xfs_dqblk	*d = (struct xfs_dqblk *)bp->b_addr;
  	xfs_dqid_t		id = 0;
  	int			ndquots;
  	int			i;
@@@ -243,11 -221,26 +255,34 @@@
  		if (i == 0)
  			id = be32_to_cpu(ddq->d_id);
  
++<<<<<<< HEAD
 +		error = xfs_dqcheck(mp, ddq, id + i, 0, warn, __func__);
 +		if (error)
 +			return false;
 +	}
 +	return true;
++=======
+ 		fa = xfs_dqblk_verify(mp, &dqb[i], id + i, 0);
+ 		if (fa) {
+ 			if (!readahead)
+ 				xfs_buf_verifier_error(bp, -EFSCORRUPTED,
+ 					__func__, &dqb[i],
+ 					sizeof(struct xfs_dqblk), fa);
+ 			return fa;
+ 		}
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ static xfs_failaddr_t
+ xfs_dquot_buf_verify_struct(
+ 	struct xfs_buf		*bp)
+ {
+ 	struct xfs_mount	*mp = bp->b_target->bt_mount;
+ 
+ 	return xfs_dquot_buf_verify(mp, bp, false);
++>>>>>>> 72c5c5f6d01c (xfs: print specific dqblk that failed verifiers)
  }
  
  static void
@@@ -256,13 -249,9 +291,19 @@@ xfs_dquot_buf_read_verify
  {
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  
++<<<<<<< HEAD
 +	if (!xfs_dquot_buf_verify_crc(mp, bp))
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_dquot_buf_verify(mp, bp, XFS_QMOPT_DOWARN))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 	if (!xfs_dquot_buf_verify_crc(mp, bp, false))
+ 		return;
+ 	xfs_dquot_buf_verify(mp, bp, false);
++>>>>>>> 72c5c5f6d01c (xfs: print specific dqblk that failed verifiers)
  }
  
  /*
@@@ -277,8 -266,8 +318,13 @@@ xfs_dquot_buf_readahead_verify
  {
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  
++<<<<<<< HEAD
 +	if (!xfs_dquot_buf_verify_crc(mp, bp) ||
 +	    !xfs_dquot_buf_verify(mp, bp, 0)) {
++=======
+ 	if (!xfs_dquot_buf_verify_crc(mp, bp, true) ||
+ 	    xfs_dquot_buf_verify(mp, bp, true) != NULL) {
++>>>>>>> 72c5c5f6d01c (xfs: print specific dqblk that failed verifiers)
  		xfs_buf_ioerror(bp, -EIO);
  		bp->b_flags &= ~XBF_DONE;
  	}
@@@ -295,11 -284,7 +341,15 @@@ xfs_dquot_buf_write_verify
  {
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  
++<<<<<<< HEAD
 +	if (!xfs_dquot_buf_verify(mp, bp, XFS_QMOPT_DOWARN)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
 +		return;
 +	}
++=======
+ 	xfs_dquot_buf_verify(mp, bp, false);
++>>>>>>> 72c5c5f6d01c (xfs: print specific dqblk that failed verifiers)
  }
  
  const struct xfs_buf_ops xfs_dquot_buf_ops = {
* Unmerged path fs/xfs/libxfs/xfs_dquot_buf.c
