x86/kexec: Do not map kexec area as decrypted when SEV is active

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Lianbo Jiang <lijiang@redhat.com>
commit 1a79c1b8a04153c4c387518967ce851f89e22733
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/1a79c1b8.failed

When a virtual machine panics, its memory needs to be dumped for
analysis. With memory encryption in the picture, special care must be
taken when loading a kexec/kdump kernel in a SEV guest.

A SEV guest starts and runs fully encrypted. In order to load a kexec
kernel and initrd, arch_kexec_post_{alloc,free}_pages() need to not map
areas as decrypted unconditionally but differentiate whether the kernel
is running as a SEV guest and if so, leave kexec area encrypted.

 [ bp: Reduce commit message to the relevant information pertaining to
   this commit only. ]

Co-developed-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Lianbo Jiang <lijiang@redhat.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: bhe@redhat.com
	Cc: Brijesh Singh <brijesh.singh@amd.com>
	Cc: dyoung@redhat.com
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: kexec@lists.infradead.org
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tom Lendacky <thomas.lendacky@amd.com>
	Cc: x86-ml <x86@kernel.org>
Link: https://lkml.kernel.org/r/20190430074421.7852-2-lijiang@redhat.com
(cherry picked from commit 1a79c1b8a04153c4c387518967ce851f89e22733)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/machine_kexec_64.c
diff --cc arch/x86/kernel/machine_kexec_64.c
index e8e0eedb2a84,3b38449028e0..000000000000
--- a/arch/x86/kernel/machine_kexec_64.c
+++ b/arch/x86/kernel/machine_kexec_64.c
@@@ -618,3 -558,37 +618,40 @@@ void arch_kexec_unprotect_crashkres(voi
  {
  	kexec_mark_crashkres(false);
  }
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * During a traditional boot under SME, SME will encrypt the kernel,
+  * so the SME kexec kernel also needs to be un-encrypted in order to
+  * replicate a normal SME boot.
+  *
+  * During a traditional boot under SEV, the kernel has already been
+  * loaded encrypted, so the SEV kexec kernel needs to be encrypted in
+  * order to replicate a normal SEV boot.
+  */
+ int arch_kexec_post_alloc_pages(void *vaddr, unsigned int pages, gfp_t gfp)
+ {
+ 	if (sev_active())
+ 		return 0;
+ 
+ 	/*
+ 	 * If SME is active we need to be sure that kexec pages are
+ 	 * not encrypted because when we boot to the new kernel the
+ 	 * pages won't be accessed encrypted (initially).
+ 	 */
+ 	return set_memory_decrypted((unsigned long)vaddr, pages);
+ }
+ 
+ void arch_kexec_pre_free_pages(void *vaddr, unsigned int pages)
+ {
+ 	if (sev_active())
+ 		return;
+ 
+ 	/*
+ 	 * If SME is active we need to reset the pages back to being
+ 	 * an encrypted mapping before freeing them.
+ 	 */
+ 	set_memory_encrypted((unsigned long)vaddr, pages);
+ }
++>>>>>>> 1a79c1b8a041 (x86/kexec: Do not map kexec area as decrypted when SEV is active)
* Unmerged path arch/x86/kernel/machine_kexec_64.c
