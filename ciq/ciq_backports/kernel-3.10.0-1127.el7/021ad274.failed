PCI: hv: Serialize the present and eject work items

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [pci] hv: Serialize the present and eject work items (Mohammed Gamal) [1634251]
Rebuild_FUZZ: 94.85%
commit-author Dexuan Cui <decui@microsoft.com>
commit 021ad274d7dc31611d4f47f7dd4ac7a224526f30
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/021ad274.failed

When we hot-remove the device, we first receive a PCI_EJECT message and
then receive a PCI_BUS_RELATIONS message with bus_rel->device_count == 0.

The first message is offloaded to hv_eject_device_work(), and the second
is offloaded to pci_devices_present_work(). Both the paths can be running
list_del(&hpdev->list_entry), causing general protection fault, because
system_wq can run them concurrently.

The patch eliminates the race condition.

Since access to present/eject work items is serialized, we do not need the
hbus->enum_sem anymore, so remove it.

Fixes: 4daace0d8ce8 ("PCI: hv: Add paravirtual PCI front-end for Microsoft Hyper-V VMs")
Link: https://lkml.kernel.org/r/KL1P15301MB00064DA6B4D221123B5241CFBFD70@KL1P15301MB0006.APCP153.PROD.OUTLOOK.COM
	Tested-by: Adrian Suhov <v-adsuho@microsoft.com>
	Tested-by: Chris Valean <v-chvale@microsoft.com>
	Signed-off-by: Dexuan Cui <decui@microsoft.com>
[lorenzo.pieralisi@arm.com: squashed semaphore removal patch]
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
	Acked-by: Haiyang Zhang <haiyangz@microsoft.com>
	Cc: <stable@vger.kernel.org> # v4.6+
	Cc: Vitaly Kuznetsov <vkuznets@redhat.com>
	Cc: Jack Morgenstein <jackm@mellanox.com>
	Cc: Stephen Hemminger <sthemmin@microsoft.com>
	Cc: K. Y. Srinivasan <kys@microsoft.com>
(cherry picked from commit 021ad274d7dc31611d4f47f7dd4ac7a224526f30)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index d5ea96eaad68,b7fd5c157d73..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -461,9 -459,9 +460,15 @@@ struct hv_pcibus_device 
  	/* hypercall arg, must not cross page boundary */
  	struct retarget_msi_interrupt retarget_msi_interrupt_params;
  
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +	/*
 +	 * Don't put anything here: retarget_msi_interrupt_params must be last
 +	 */
++=======
+ 	spinlock_t retarget_msi_interrupt_lock;
+ 
+ 	struct workqueue_struct *wq;
++>>>>>>> 021ad274d7dc (PCI: hv: Serialize the present and eject work items):drivers/pci/host/pci-hyperv.c
  };
  
  /*
@@@ -2644,8 -2608,11 +2645,9 @@@ static int hv_pci_remove(struct hv_devi
  	hv_free_config_window(hbus);
  	pci_free_resource_list(&hbus->resources_for_children);
  	hv_pci_free_bridge_windows(hbus);
 -	irq_domain_remove(hbus->irq_domain);
 -	irq_domain_free_fwnode(hbus->sysdata.fwnode);
  	put_hvpcibus(hbus);
  	wait_for_completion(&hbus->remove_event);
+ 	destroy_workqueue(hbus->wq);
  	free_page((unsigned long)hbus);
  	return 0;
  }
* Unmerged path drivers/pci/pci-hyperv.c
