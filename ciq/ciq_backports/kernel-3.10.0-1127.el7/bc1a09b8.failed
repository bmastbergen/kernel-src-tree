xfs: refactor verifier callers to print address of failing check

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit bc1a09b8e334bf5fca1d6727aec538dcff957961
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/bc1a09b8.failed

Refactor the callers of verifiers to print the instruction address of a
failing check.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
(cherry picked from commit bc1a09b8e334bf5fca1d6727aec538dcff957961)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_alloc.c
#	fs/xfs/libxfs/xfs_alloc_btree.c
#	fs/xfs/libxfs/xfs_attr_leaf.c
#	fs/xfs/libxfs/xfs_attr_remote.c
#	fs/xfs/libxfs/xfs_bmap_btree.c
#	fs/xfs/libxfs/xfs_da_btree.c
#	fs/xfs/libxfs/xfs_dir2_block.c
#	fs/xfs/libxfs/xfs_dir2_data.c
#	fs/xfs/libxfs/xfs_dir2_leaf.c
#	fs/xfs/libxfs/xfs_dir2_node.c
#	fs/xfs/libxfs/xfs_dquot_buf.c
#	fs/xfs/libxfs/xfs_ialloc.c
#	fs/xfs/libxfs/xfs_ialloc_btree.c
#	fs/xfs/libxfs/xfs_inode_buf.c
#	fs/xfs/libxfs/xfs_refcount_btree.c
#	fs/xfs/libxfs/xfs_rmap_btree.c
#	fs/xfs/libxfs/xfs_sb.c
#	fs/xfs/libxfs/xfs_symlink_remote.c
#	fs/xfs/xfs_error.c
#	fs/xfs/xfs_error.h
diff --cc fs/xfs/libxfs/xfs_alloc.c
index 71f7539a064c,6bace8cb47da..000000000000
--- a/fs/xfs/libxfs/xfs_alloc.c
+++ b/fs/xfs/libxfs/xfs_alloc.c
@@@ -543,12 -569,12 +544,21 @@@ xfs_agfl_read_verify
  		return;
  
  	if (!xfs_buf_verify_cksum(bp, XFS_AGFL_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_agfl_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_agfl_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -562,9 -589,9 +573,15 @@@ xfs_agfl_write_verify
  	if (!xfs_sb_version_hascrc(&mp->m_sb))
  		return;
  
++<<<<<<< HEAD
 +	if (!xfs_agfl_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_agfl_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
@@@ -2452,13 -2465,12 +2470,22 @@@ xfs_agf_read_verify
  
  	if (xfs_sb_version_hascrc(&mp->m_sb) &&
  	    !xfs_buf_verify_cksum(bp, XFS_AGF_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (XFS_TEST_ERROR(!xfs_agf_verify(mp, bp), mp,
 +				XFS_ERRTAG_ALLOC_READ_AGF))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_agf_verify(mp, bp);
+ 		if (XFS_TEST_ERROR(fa, mp, XFS_ERRTAG_ALLOC_READ_AGF))
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -2467,10 -2479,11 +2494,17 @@@ xfs_agf_write_verify
  {
  	struct xfs_mount *mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_agf_verify(mp, bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_agf_verify(mp, bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
diff --cc fs/xfs/libxfs/xfs_alloc_btree.c
index 63a0babaab52,060d6fa83a7f..000000000000
--- a/fs/xfs/libxfs/xfs_alloc_btree.c
+++ b/fs/xfs/libxfs/xfs_alloc_btree.c
@@@ -312,25 -366,30 +312,45 @@@ static voi
  xfs_allocbt_read_verify(
  	struct xfs_buf	*bp)
  {
+ 	xfs_failaddr_t	fa;
+ 
  	if (!xfs_btree_sblock_verify_crc(bp))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_allocbt_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_allocbt_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  
 -	if (bp->b_error)
 +	if (bp->b_error) {
  		trace_xfs_btree_corrupt(bp, _RET_IP_);
 +		xfs_verifier_error(bp);
 +	}
  }
  
  static void
  xfs_allocbt_write_verify(
  	struct xfs_buf	*bp)
  {
++<<<<<<< HEAD
 +	if (!xfs_allocbt_verify(bp)) {
 +		trace_xfs_btree_corrupt(bp, _RET_IP_);
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	xfs_failaddr_t	fa;
+ 
+ 	fa = xfs_allocbt_verify(bp);
+ 	if (fa) {
+ 		trace_xfs_btree_corrupt(bp, _RET_IP_);
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  	xfs_btree_sblock_calc_crc(bp);
diff --cc fs/xfs/libxfs/xfs_attr_leaf.c
index 521209514b31,68c66fa378fd..000000000000
--- a/fs/xfs/libxfs/xfs_attr_leaf.c
+++ b/fs/xfs/libxfs/xfs_attr_leaf.c
@@@ -295,10 -295,11 +295,17 @@@ xfs_attr3_leaf_write_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
  	struct xfs_attr3_leaf_hdr *hdr3 = bp->b_addr;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_attr3_leaf_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_attr3_leaf_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
@@@ -325,12 -327,12 +333,21 @@@ xfs_attr3_leaf_read_verify
  
  	if (xfs_sb_version_hascrc(&mp->m_sb) &&
  	     !xfs_buf_verify_cksum(bp, XFS_ATTR3_LEAF_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_attr3_leaf_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_attr3_leaf_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  const struct xfs_buf_ops xfs_attr3_leaf_buf_ops = {
diff --cc fs/xfs/libxfs/xfs_attr_remote.c
index 3e888d7d3199,55514b343216..000000000000
--- a/fs/xfs/libxfs/xfs_attr_remote.c
+++ b/fs/xfs/libxfs/xfs_attr_remote.c
@@@ -137,11 -138,12 +138,20 @@@ xfs_attr3_rmt_read_verify
  
  	while (len > 0) {
  		if (!xfs_verify_cksum(ptr, blksize, XFS_ATTR3_RMT_CRC_OFF)) {
++<<<<<<< HEAD
 +			xfs_buf_ioerror(bp, -EFSBADCRC);
 +			break;
 +		}
 +		if (!xfs_attr3_rmt_verify(mp, ptr, blksize, bno)) {
 +			xfs_buf_ioerror(bp, -EFSCORRUPTED);
++=======
+ 			xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 			return;
+ 		}
+ 		fa = xfs_attr3_rmt_verify(mp, ptr, blksize, bno);
+ 		if (fa) {
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  			break;
  		}
  		len -= blksize;
@@@ -149,10 -151,8 +159,15 @@@
  		bno += BTOBB(blksize);
  	}
  
++<<<<<<< HEAD
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
 +	else
 +		ASSERT(len == 0);
++=======
+ 	if (len != 0)
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -177,9 -178,9 +193,15 @@@ xfs_attr3_rmt_write_verify
  	while (len > 0) {
  		struct xfs_attr3_rmt_hdr *rmt = (struct xfs_attr3_rmt_hdr *)ptr;
  
++<<<<<<< HEAD
 +		if (!xfs_attr3_rmt_verify(mp, ptr, blksize, bno)) {
 +			xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +			xfs_verifier_error(bp);
++=======
+ 		fa = xfs_attr3_rmt_verify(mp, ptr, blksize, bno);
+ 		if (fa) {
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  			return;
  		}
  
@@@ -188,8 -189,7 +210,12 @@@
  		 * xfs_attr3_rmt_hdr_set() for the explanation.
  		 */
  		if (rmt->rm_lsn != cpu_to_be64(NULLCOMMITLSN)) {
++<<<<<<< HEAD
 +			xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +			xfs_verifier_error(bp);
++=======
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  			return;
  		}
  		xfs_update_cksum(ptr, blksize, XFS_ATTR3_RMT_CRC_OFF);
@@@ -198,7 -198,9 +224,13 @@@
  		ptr += blksize;
  		bno += BTOBB(blksize);
  	}
++<<<<<<< HEAD
 +	ASSERT(len == 0);
++=======
+ 
+ 	if (len != 0)
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  const struct xfs_buf_ops xfs_attr3_rmt_buf_ops = {
diff --cc fs/xfs/libxfs/xfs_bmap_btree.c
index 2fb9ffdf0120,64ae0eea9812..000000000000
--- a/fs/xfs/libxfs/xfs_bmap_btree.c
+++ b/fs/xfs/libxfs/xfs_bmap_btree.c
@@@ -459,25 -468,30 +459,45 @@@ static voi
  xfs_bmbt_read_verify(
  	struct xfs_buf	*bp)
  {
+ 	xfs_failaddr_t	fa;
+ 
  	if (!xfs_btree_lblock_verify_crc(bp))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_bmbt_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_bmbt_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  
 -	if (bp->b_error)
 +	if (bp->b_error) {
  		trace_xfs_btree_corrupt(bp, _RET_IP_);
 +		xfs_verifier_error(bp);
 +	}
  }
  
  static void
  xfs_bmbt_write_verify(
  	struct xfs_buf	*bp)
  {
++<<<<<<< HEAD
 +	if (!xfs_bmbt_verify(bp)) {
 +		trace_xfs_btree_corrupt(bp, _RET_IP_);
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	xfs_failaddr_t	fa;
+ 
+ 	fa = xfs_bmbt_verify(bp);
+ 	if (fa) {
+ 		trace_xfs_btree_corrupt(bp, _RET_IP_);
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  	xfs_btree_lblock_calc_crc(bp);
diff --cc fs/xfs/libxfs/xfs_da_btree.c
index 651611530d2f,0ae39617a6c1..000000000000
--- a/fs/xfs/libxfs/xfs_da_btree.c
+++ b/fs/xfs/libxfs/xfs_da_btree.c
@@@ -184,10 -184,11 +184,17 @@@ xfs_da3_node_write_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
  	struct xfs_da3_node_hdr *hdr3 = bp->b_addr;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_da3_node_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_da3_node_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
@@@ -215,15 -217,15 +223,26 @@@ xfs_da3_node_read_verify
  	switch (be16_to_cpu(info->magic)) {
  		case XFS_DA3_NODE_MAGIC:
  			if (!xfs_buf_verify_cksum(bp, XFS_DA3_NODE_CRC_OFF)) {
++<<<<<<< HEAD
 +				xfs_buf_ioerror(bp, -EFSBADCRC);
++=======
+ 				xfs_verifier_error(bp, -EFSBADCRC,
+ 						__this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  				break;
  			}
  			/* fall through */
  		case XFS_DA_NODE_MAGIC:
++<<<<<<< HEAD
 +			if (!xfs_da3_node_verify(bp)) {
 +				xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +				break;
 +			}
++=======
+ 			fa = xfs_da3_node_verify(bp);
+ 			if (fa)
+ 				xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  			return;
  		case XFS_ATTR_LEAF_MAGIC:
  		case XFS_ATTR3_LEAF_MAGIC:
@@@ -236,12 -238,9 +255,16 @@@
  			bp->b_ops->verify_read(bp);
  			return;
  		default:
++<<<<<<< HEAD
 +			xfs_buf_ioerror(bp, -EFSCORRUPTED);
++=======
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  			break;
  	}
 +
 +	/* corrupt block */
 +	xfs_verifier_error(bp);
  }
  
  const struct xfs_buf_ops xfs_da3_node_buf_ops = {
diff --cc fs/xfs/libxfs/xfs_dir2_block.c
index e4272494b17f,cfd2777bf918..000000000000
--- a/fs/xfs/libxfs/xfs_dir2_block.c
+++ b/fs/xfs/libxfs/xfs_dir2_block.c
@@@ -89,12 -90,12 +90,21 @@@ xfs_dir3_block_read_verify
  
  	if (xfs_sb_version_hascrc(&mp->m_sb) &&
  	     !xfs_buf_verify_cksum(bp, XFS_DIR3_DATA_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_dir3_block_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_dir3_block_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -104,10 -105,11 +114,17 @@@ xfs_dir3_block_write_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
  	struct xfs_dir3_blk_hdr	*hdr3 = bp->b_addr;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_dir3_block_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_dir3_block_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
diff --cc fs/xfs/libxfs/xfs_dir2_data.c
index af15f7052f3a,2fa7c34023fb..000000000000
--- a/fs/xfs/libxfs/xfs_dir2_data.c
+++ b/fs/xfs/libxfs/xfs_dir2_data.c
@@@ -267,8 -284,7 +267,12 @@@ xfs_dir3_data_reada_verify
  		bp->b_ops->verify_read(bp);
  		return;
  	default:
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		break;
  	}
  }
@@@ -278,15 -294,16 +282,26 @@@ xfs_dir3_data_read_verify
  	struct xfs_buf	*bp)
  {
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
+ 	xfs_failaddr_t		fa;
  
  	if (xfs_sb_version_hascrc(&mp->m_sb) &&
++<<<<<<< HEAD
 +	     !xfs_buf_verify_cksum(bp, XFS_DIR3_DATA_CRC_OFF))
 +		 xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_dir3_data_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 	    !xfs_buf_verify_cksum(bp, XFS_DIR3_DATA_CRC_OFF))
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_dir3_data_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -296,10 -313,11 +311,17 @@@ xfs_dir3_data_write_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
  	struct xfs_dir3_blk_hdr	*hdr3 = bp->b_addr;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_dir3_data_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_dir3_data_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
diff --cc fs/xfs/libxfs/xfs_dir2_leaf.c
index 27297a689d9c,a03d67995811..000000000000
--- a/fs/xfs/libxfs/xfs_dir2_leaf.c
+++ b/fs/xfs/libxfs/xfs_dir2_leaf.c
@@@ -184,12 -194,12 +185,21 @@@ __read_verify
  
  	if (xfs_sb_version_hascrc(&mp->m_sb) &&
  	     !xfs_buf_verify_cksum(bp, XFS_DIR3_LEAF_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_dir3_leaf_verify(bp, magic))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_dir3_leaf_verify(bp, magic);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -200,10 -210,11 +210,17 @@@ __write_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
  	struct xfs_dir3_leaf_hdr *hdr3 = bp->b_addr;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_dir3_leaf_verify(bp, magic)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_dir3_leaf_verify(bp, magic);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
diff --cc fs/xfs/libxfs/xfs_dir2_node.c
index 682e2bf370c7,3bdbe1897212..000000000000
--- a/fs/xfs/libxfs/xfs_dir2_node.c
+++ b/fs/xfs/libxfs/xfs_dir2_node.c
@@@ -118,12 -128,12 +119,21 @@@ xfs_dir3_free_read_verify
  
  	if (xfs_sb_version_hascrc(&mp->m_sb) &&
  	    !xfs_buf_verify_cksum(bp, XFS_DIR3_FREE_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_dir3_free_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_dir3_free_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -133,10 -143,11 +143,17 @@@ xfs_dir3_free_write_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
  	struct xfs_dir3_blk_hdr	*hdr3 = bp->b_addr;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_dir3_free_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_dir3_free_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
@@@ -208,9 -220,9 +226,15 @@@ __xfs_dir3_free_read
  		return err;
  
  	/* Check things that we can't do in the verifier. */
++<<<<<<< HEAD
 +	if (!xfs_dir3_free_header_check(dp, fbno, *bpp)) {
 +		xfs_buf_ioerror(*bpp, -EFSCORRUPTED);
 +		xfs_verifier_error(*bpp);
++=======
+ 	fa = xfs_dir3_free_header_check(dp, fbno, *bpp);
+ 	if (fa) {
+ 		xfs_verifier_error(*bpp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		xfs_trans_brelse(tp, *bpp);
  		return -EFSCORRUPTED;
  	}
diff --cc fs/xfs/libxfs/xfs_dquot_buf.c
index 747085b4ef44,5e022c1a52c4..000000000000
--- a/fs/xfs/libxfs/xfs_dquot_buf.c
+++ b/fs/xfs/libxfs/xfs_dquot_buf.c
@@@ -249,12 -249,9 +249,18 @@@ xfs_dquot_buf_read_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  
  	if (!xfs_dquot_buf_verify_crc(mp, bp))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_dquot_buf_verify(mp, bp, XFS_QMOPT_DOWARN))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else if (!xfs_dquot_buf_verify(mp, bp, XFS_QMOPT_DOWARN))
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  /*
@@@ -288,8 -285,7 +294,12 @@@ xfs_dquot_buf_write_verify
  	struct xfs_mount	*mp = bp->b_target->bt_mount;
  
  	if (!xfs_dquot_buf_verify(mp, bp, XFS_QMOPT_DOWARN)) {
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  }
diff --cc fs/xfs/libxfs/xfs_ialloc.c
index 8a6e2ce84589,344b6a3525e1..000000000000
--- a/fs/xfs/libxfs/xfs_ialloc.c
+++ b/fs/xfs/libxfs/xfs_ialloc.c
@@@ -2540,13 -2545,12 +2541,22 @@@ xfs_agi_read_verify
  
  	if (xfs_sb_version_hascrc(&mp->m_sb) &&
  	    !xfs_buf_verify_cksum(bp, XFS_AGI_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (XFS_TEST_ERROR(!xfs_agi_verify(bp), mp,
 +				XFS_ERRTAG_IALLOC_READ_AGI))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_agi_verify(bp);
+ 		if (XFS_TEST_ERROR(fa, mp, XFS_ERRTAG_IALLOC_READ_AGI))
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -2555,10 -2559,11 +2565,17 @@@ xfs_agi_write_verify
  {
  	struct xfs_mount *mp = bp->b_target->bt_mount;
  	struct xfs_buf_log_item	*bip = bp->b_fspriv;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
 +	if (!xfs_agi_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_agi_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
diff --cc fs/xfs/libxfs/xfs_ialloc_btree.c
index 65f87127fae3,9c691ad00220..000000000000
--- a/fs/xfs/libxfs/xfs_ialloc_btree.c
+++ b/fs/xfs/libxfs/xfs_ialloc_btree.c
@@@ -242,25 -295,30 +242,45 @@@ static voi
  xfs_inobt_read_verify(
  	struct xfs_buf	*bp)
  {
+ 	xfs_failaddr_t	fa;
+ 
  	if (!xfs_btree_sblock_verify_crc(bp))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_inobt_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_inobt_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  
 -	if (bp->b_error)
 +	if (bp->b_error) {
  		trace_xfs_btree_corrupt(bp, _RET_IP_);
 +		xfs_verifier_error(bp);
 +	}
  }
  
  static void
  xfs_inobt_write_verify(
  	struct xfs_buf	*bp)
  {
++<<<<<<< HEAD
 +	if (!xfs_inobt_verify(bp)) {
 +		trace_xfs_btree_corrupt(bp, _RET_IP_);
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	xfs_failaddr_t	fa;
+ 
+ 	fa = xfs_inobt_verify(bp);
+ 	if (fa) {
+ 		trace_xfs_btree_corrupt(bp, _RET_IP_);
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  	xfs_btree_sblock_calc_crc(bp);
diff --cc fs/xfs/libxfs/xfs_inode_buf.c
index 3aebe5129937,a43a3702af93..000000000000
--- a/fs/xfs/libxfs/xfs_inode_buf.c
+++ b/fs/xfs/libxfs/xfs_inode_buf.c
@@@ -113,8 -113,7 +113,12 @@@ xfs_inode_buf_verify
  				return;
  			}
  
++<<<<<<< HEAD
 +			xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +			xfs_verifier_error(bp);
++=======
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  #ifdef DEBUG
  			xfs_alert(mp,
  				"bad inode magic/vsn daddr %lld #%d (magic=%x)",
diff --cc fs/xfs/libxfs/xfs_sb.c
index c8bca117d38f,63e0331b1d24..000000000000
--- a/fs/xfs/libxfs/xfs_sb.c
+++ b/fs/xfs/libxfs/xfs_sb.c
@@@ -637,11 -640,10 +637,17 @@@ xfs_sb_read_verify
  	error = xfs_sb_verify(bp, true);
  
  out_error:
++<<<<<<< HEAD
 +	if (error) {
++=======
+ 	if (error == -EFSCORRUPTED || error == -EFSBADCRC)
+ 		xfs_verifier_error(bp, error, __this_address);
+ 	else if (error)
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		xfs_buf_ioerror(bp, error);
 +		if (error == -EFSCORRUPTED || error == -EFSBADCRC)
 +			xfs_verifier_error(bp);
 +	}
  }
  
  /*
@@@ -675,8 -677,7 +681,12 @@@ xfs_sb_write_verify
  
  	error = xfs_sb_verify(bp, false);
  	if (error) {
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, error);
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, error, __this_address);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
diff --cc fs/xfs/libxfs/xfs_symlink_remote.c
index c484877129a0,5497014f5293..000000000000
--- a/fs/xfs/libxfs/xfs_symlink_remote.c
+++ b/fs/xfs/libxfs/xfs_symlink_remote.c
@@@ -135,12 -136,12 +136,21 @@@ xfs_symlink_read_verify
  		return;
  
  	if (!xfs_buf_verify_cksum(bp, XFS_SYMLINK_CRC_OFF))
++<<<<<<< HEAD
 +		xfs_buf_ioerror(bp, -EFSBADCRC);
 +	else if (!xfs_symlink_verify(bp))
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +
 +	if (bp->b_error)
 +		xfs_verifier_error(bp);
++=======
+ 		xfs_verifier_error(bp, -EFSBADCRC, __this_address);
+ 	else {
+ 		fa = xfs_symlink_verify(bp);
+ 		if (fa)
+ 			xfs_verifier_error(bp, -EFSCORRUPTED, fa);
+ 	}
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  }
  
  static void
@@@ -154,9 -156,9 +165,15 @@@ xfs_symlink_write_verify
  	if (!xfs_sb_version_hascrc(&mp->m_sb))
  		return;
  
++<<<<<<< HEAD
 +	if (!xfs_symlink_verify(bp)) {
 +		xfs_buf_ioerror(bp, -EFSCORRUPTED);
 +		xfs_verifier_error(bp);
++=======
+ 	fa = xfs_symlink_verify(bp);
+ 	if (fa) {
+ 		xfs_verifier_error(bp, -EFSCORRUPTED, fa);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  		return;
  	}
  
diff --cc fs/xfs/xfs_error.c
index 388ce630c4b7,21db07cc7a11..000000000000
--- a/fs/xfs/xfs_error.c
+++ b/fs/xfs/xfs_error.c
@@@ -332,13 -347,19 +332,26 @@@ xfs_corruption_error
   */
  void
  xfs_verifier_error(
++<<<<<<< HEAD
 +	struct xfs_buf		*bp)
++=======
+ 	struct xfs_buf		*bp,
+ 	int			error,
+ 	xfs_failaddr_t		failaddr)
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  {
- 	struct xfs_mount *mp = bp->b_target->bt_mount;
+ 	struct xfs_mount	*mp = bp->b_target->bt_mount;
+ 	xfs_failaddr_t		fa;
  
++<<<<<<< HEAD
++=======
+ 	fa = failaddr ? failaddr : __return_address;
+ 	__xfs_buf_ioerror(bp, error, fa);
+ 
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  	xfs_alert(mp, "Metadata %s detected at %pS, %s block 0x%llx",
  		  bp->b_error == -EFSBADCRC ? "CRC error" : "corruption",
- 		  __return_address, bp->b_ops->name, bp->b_bn);
+ 		  fa, bp->b_ops->name, bp->b_bn);
  
  	xfs_alert(mp, "Unmount and run xfs_repair");
  
diff --cc fs/xfs/xfs_error.h
index ea816c1bf8db,11f80e072403..000000000000
--- a/fs/xfs/xfs_error.h
+++ b/fs/xfs/xfs_error.h
@@@ -25,7 -25,8 +25,12 @@@ extern void xfs_error_report(const cha
  extern void xfs_corruption_error(const char *tag, int level,
  			struct xfs_mount *mp, void *p, const char *filename,
  			int linenum, void *ra);
++<<<<<<< HEAD
 +extern void xfs_verifier_error(struct xfs_buf *bp);
++=======
+ extern void xfs_verifier_error(struct xfs_buf *bp, int error,
+ 			xfs_failaddr_t failaddr);
++>>>>>>> bc1a09b8e334 (xfs: refactor verifier callers to print address of failing check)
  
  #define	XFS_ERROR_REPORT(e, lvl, mp)	\
  	xfs_error_report(e, lvl, mp, __FILE__, __LINE__, __return_address)
* Unmerged path fs/xfs/libxfs/xfs_refcount_btree.c
* Unmerged path fs/xfs/libxfs/xfs_rmap_btree.c
* Unmerged path fs/xfs/libxfs/xfs_alloc.c
* Unmerged path fs/xfs/libxfs/xfs_alloc_btree.c
* Unmerged path fs/xfs/libxfs/xfs_attr_leaf.c
* Unmerged path fs/xfs/libxfs/xfs_attr_remote.c
* Unmerged path fs/xfs/libxfs/xfs_bmap_btree.c
* Unmerged path fs/xfs/libxfs/xfs_da_btree.c
* Unmerged path fs/xfs/libxfs/xfs_dir2_block.c
* Unmerged path fs/xfs/libxfs/xfs_dir2_data.c
* Unmerged path fs/xfs/libxfs/xfs_dir2_leaf.c
* Unmerged path fs/xfs/libxfs/xfs_dir2_node.c
* Unmerged path fs/xfs/libxfs/xfs_dquot_buf.c
* Unmerged path fs/xfs/libxfs/xfs_ialloc.c
* Unmerged path fs/xfs/libxfs/xfs_ialloc_btree.c
* Unmerged path fs/xfs/libxfs/xfs_inode_buf.c
* Unmerged path fs/xfs/libxfs/xfs_refcount_btree.c
* Unmerged path fs/xfs/libxfs/xfs_rmap_btree.c
* Unmerged path fs/xfs/libxfs/xfs_sb.c
* Unmerged path fs/xfs/libxfs/xfs_symlink_remote.c
* Unmerged path fs/xfs/xfs_error.c
* Unmerged path fs/xfs/xfs_error.h
