scsi: qla2xxx: Correctly report max/min supported speeds

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Joe Carnuccio <joe.carnuccio@cavium.com>
commit 72a92df2109bf62094c25436ded2be0283d9aa24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/72a92df2.failed

This patch fixes reported speed for min_link and max_supported speed. Also
rename sysfs nodes link_speed and max_supported to be consistent with
{min|max}_suuported_speed.

	Signed-off-by: Joe Carnuccio <joe.carnuccio@cavium.com>
	Signed-off-by: Mike Hernandez <mhernandez@marvell.com>
	Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 72a92df2109bf62094c25436ded2be0283d9aa24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_attr.c
#	drivers/scsi/qla2xxx/qla_mbx.c
diff --cc drivers/scsi/qla2xxx/qla_attr.c
index 3ed38509f9fa,e762e60ae072..000000000000
--- a/drivers/scsi/qla2xxx/qla_attr.c
+++ b/drivers/scsi/qla2xxx/qla_attr.c
@@@ -3016,25 -3049,45 +3021,55 @@@ qla2x00_init_host_attr(scsi_qla_host_t 
  	fc_host_npiv_vports_inuse(vha->host) = ha->cur_vport_count;
  
  	if (IS_CNA_CAPABLE(ha))
- 		speed = FC_PORTSPEED_10GBIT;
- 	else if (IS_QLA2031(ha))
- 		speed = FC_PORTSPEED_16GBIT | FC_PORTSPEED_8GBIT |
- 		    FC_PORTSPEED_4GBIT;
- 	else if (IS_QLA25XX(ha))
- 		speed = FC_PORTSPEED_8GBIT | FC_PORTSPEED_4GBIT |
- 		    FC_PORTSPEED_2GBIT | FC_PORTSPEED_1GBIT;
+ 		speeds = FC_PORTSPEED_10GBIT;
+ 	else if (IS_QLA28XX(ha) || IS_QLA27XX(ha)) {
+ 		if (ha->max_supported_speed == 2) {
+ 			if (ha->min_supported_speed <= 6)
+ 				speeds |= FC_PORTSPEED_64GBIT;
+ 		}
+ 		if (ha->max_supported_speed == 2 ||
+ 		    ha->max_supported_speed == 1) {
+ 			if (ha->min_supported_speed <= 5)
+ 				speeds |= FC_PORTSPEED_32GBIT;
+ 		}
+ 		if (ha->max_supported_speed == 2 ||
+ 		    ha->max_supported_speed == 1 ||
+ 		    ha->max_supported_speed == 0) {
+ 			if (ha->min_supported_speed <= 4)
+ 				speeds |= FC_PORTSPEED_16GBIT;
+ 		}
+ 		if (ha->max_supported_speed == 1 ||
+ 		    ha->max_supported_speed == 0) {
+ 			if (ha->min_supported_speed <= 3)
+ 				speeds |= FC_PORTSPEED_8GBIT;
+ 		}
+ 		if (ha->max_supported_speed == 0) {
+ 			if (ha->min_supported_speed <= 2)
+ 				speeds |= FC_PORTSPEED_4GBIT;
+ 		}
+ 	} else if (IS_QLA2031(ha))
+ 		speeds = FC_PORTSPEED_16GBIT|FC_PORTSPEED_8GBIT|
+ 			FC_PORTSPEED_4GBIT;
+ 	else if (IS_QLA25XX(ha) || IS_QLAFX00(ha))
+ 		speeds = FC_PORTSPEED_8GBIT|FC_PORTSPEED_4GBIT|
+ 			FC_PORTSPEED_2GBIT|FC_PORTSPEED_1GBIT;
  	else if (IS_QLA24XX_TYPE(ha))
- 		speed = FC_PORTSPEED_4GBIT | FC_PORTSPEED_2GBIT |
- 		    FC_PORTSPEED_1GBIT;
+ 		speeds = FC_PORTSPEED_4GBIT|FC_PORTSPEED_2GBIT|
+ 			FC_PORTSPEED_1GBIT;
  	else if (IS_QLA23XX(ha))
++<<<<<<< HEAD
 +		speed = FC_PORTSPEED_2GBIT | FC_PORTSPEED_1GBIT;
 +	else if (IS_QLAFX00(ha))
 +		speed = FC_PORTSPEED_8GBIT | FC_PORTSPEED_4GBIT |
 +		    FC_PORTSPEED_2GBIT | FC_PORTSPEED_1GBIT;
 +	else if (IS_QLA27XX(ha))
 +		speed = FC_PORTSPEED_32GBIT | FC_PORTSPEED_16GBIT |
 +		    FC_PORTSPEED_8GBIT;
++=======
+ 		speeds = FC_PORTSPEED_2GBIT|FC_PORTSPEED_1GBIT;
++>>>>>>> 72a92df2109b (scsi: qla2xxx: Correctly report max/min supported speeds)
  	else
- 		speed = FC_PORTSPEED_1GBIT;
- 	fc_host_supported_speeds(vha->host) = speed;
+ 		speeds = FC_PORTSPEED_1GBIT;
+ 
+ 	fc_host_supported_speeds(vha->host) = speeds;
  }
diff --cc drivers/scsi/qla2xxx/qla_mbx.c
index 3068422cd7a5,21a595027ce3..000000000000
--- a/drivers/scsi/qla2xxx/qla_mbx.c
+++ b/drivers/scsi/qla2xxx/qla_mbx.c
@@@ -730,19 -731,20 +730,20 @@@ qla2x00_execute_fw(scsi_qla_host_t *vha
  			}
  		}
  
 -		if (ql2xnvmeenable && (IS_QLA27XX(ha) || IS_QLA28XX(ha)))
 +		if (ql2xnvmeenable && IS_QLA27XX(ha))
  			mcp->mb[4] |= NVME_ENABLE_FLAG;
  
 -		if (IS_QLA83XX(ha) || IS_QLA27XX(ha) || IS_QLA28XX(ha)) {
 +		if (IS_QLA83XX(ha) || IS_QLA27XX(ha)) {
  			struct nvram_81xx *nv = ha->nvram;
  			/* set minimum speed if specified in nvram */
- 			if (nv->min_link_speed >= 2 &&
- 			    nv->min_link_speed <= 5) {
+ 			if (nv->min_supported_speed >= 2 &&
+ 			    nv->min_supported_speed <= 5) {
  				mcp->mb[4] |= BIT_4;
- 				mcp->mb[11] = nv->min_link_speed;
+ 				mcp->mb[11] |= nv->min_supported_speed & 0xF;
  				mcp->out_mb |= MBX_11;
  				mcp->in_mb |= BIT_5;
- 				vha->min_link_speed_feat = nv->min_link_speed;
+ 				vha->min_supported_speed =
+ 				    nv->min_supported_speed;
  			}
  		}
  
@@@ -770,34 -772,39 +771,68 @@@
  	if (rval != QLA_SUCCESS) {
  		ql_dbg(ql_dbg_mbx, vha, 0x1026,
  		    "Failed=%x mb[0]=%x.\n", rval, mcp->mb[0]);
++<<<<<<< HEAD
 +	} else {
 +		if (IS_FWI2_CAPABLE(ha)) {
 +			ha->fw_ability_mask = mcp->mb[3] << 16 | mcp->mb[2];
 +			ql_dbg(ql_dbg_mbx, vha, 0x119a,
 +			    "fw_ability_mask=%x.\n", ha->fw_ability_mask);
 +			ql_dbg(ql_dbg_mbx, vha, 0x1027,
 +			    "exchanges=%x.\n", mcp->mb[1]);
 +			if (IS_QLA83XX(ha) || IS_QLA27XX(ha)) {
 +				ha->max_speed_sup = mcp->mb[2] & BIT_0;
 +				ql_dbg(ql_dbg_mbx, vha, 0x119b,
 +				    "Maximum speed supported=%s.\n",
 +				    ha->max_speed_sup ? "32Gps" : "16Gps");
 +				if (vha->min_link_speed_feat) {
 +					ha->min_link_speed = mcp->mb[5];
 +					ql_dbg(ql_dbg_mbx, vha, 0x119c,
 +					    "Minimum speed set=%s.\n",
 +					    mcp->mb[5] == 5 ? "32Gps" :
 +					    mcp->mb[5] == 4 ? "16Gps" :
 +					    mcp->mb[5] == 3 ? "8Gps" :
 +					    mcp->mb[5] == 2 ? "4Gps" :
 +						"unknown");
 +				}
 +			}
 +		}
 +		ql_dbg(ql_dbg_mbx + ql_dbg_verbose, vha, 0x1028,
 +		    "Done.\n");
++=======
+ 		return rval;
++>>>>>>> 72a92df2109b (scsi: qla2xxx: Correctly report max/min supported speeds)
  	}
  
+ 	if (!IS_FWI2_CAPABLE(ha))
+ 		goto done;
+ 
+ 	ha->fw_ability_mask = mcp->mb[3] << 16 | mcp->mb[2];
+ 	ql_dbg(ql_dbg_mbx, vha, 0x119a,
+ 	    "fw_ability_mask=%x.\n", ha->fw_ability_mask);
+ 	ql_dbg(ql_dbg_mbx, vha, 0x1027, "exchanges=%x.\n", mcp->mb[1]);
+ 	if (IS_QLA27XX(ha) || IS_QLA28XX(ha)) {
+ 		ha->max_supported_speed = mcp->mb[2] & (BIT_0|BIT_1);
+ 		ql_dbg(ql_dbg_mbx, vha, 0x119b, "max_supported_speed=%s.\n",
+ 		    ha->max_supported_speed == 0 ? "16Gps" :
+ 		    ha->max_supported_speed == 1 ? "32Gps" :
+ 		    ha->max_supported_speed == 2 ? "64Gps" : "unknown");
+ 		if (vha->min_supported_speed) {
+ 			ha->min_supported_speed = mcp->mb[5] &
+ 			    (BIT_0 | BIT_1 | BIT_2);
+ 			ql_dbg(ql_dbg_mbx, vha, 0x119c,
+ 			    "min_supported_speed=%s.\n",
+ 			    ha->min_supported_speed == 6 ? "64Gps" :
+ 			    ha->min_supported_speed == 5 ? "32Gps" :
+ 			    ha->min_supported_speed == 4 ? "16Gps" :
+ 			    ha->min_supported_speed == 3 ? "8Gps" :
+ 			    ha->min_supported_speed == 2 ? "4Gps" : "unknown");
+ 		}
+ 	}
+ 
+ done:
+ 	ql_dbg(ql_dbg_mbx + ql_dbg_verbose, vha, 0x1028,
+ 	    "Done %s.\n", __func__);
+ 
  	return rval;
  }
  
* Unmerged path drivers/scsi/qla2xxx/qla_attr.c
diff --git a/drivers/scsi/qla2xxx/qla_def.h b/drivers/scsi/qla2xxx/qla_def.h
index 416307fab71e..e82be7bc1154 100644
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@ -4204,8 +4204,8 @@ struct qla_hw_data {
 	struct qlt_hw_data tgt;
 	int	allow_cna_fw_dump;
 	uint32_t fw_ability_mask;
-	uint16_t min_link_speed;
-	uint16_t max_speed_sup;
+	uint16_t min_supported_speed;
+	uint16_t max_supported_speed;
 
 	/* DMA pool for the DIF bundling buffers */
 	struct dma_pool *dif_bundl_pool;
@@ -4436,7 +4436,7 @@ typedef struct scsi_qla_host {
 	int fcport_count;
 	wait_queue_head_t fcport_waitQ;
 	wait_queue_head_t vref_waitq;
-	uint8_t min_link_speed_feat;
+	uint8_t min_supported_speed;
 	uint8_t n2n_node_name[WWN_SIZE];
 	uint8_t n2n_port_name[WWN_SIZE];
 	uint16_t	n2n_id;
@@ -4712,4 +4712,5 @@ struct sff_8247_a0 {
 #include "qla_gbl.h"
 #include "qla_dbg.h"
 #include "qla_inline.h"
+
 #endif
diff --git a/drivers/scsi/qla2xxx/qla_fw.h b/drivers/scsi/qla2xxx/qla_fw.h
index 50c1e6c62e31..822f55567aa2 100644
--- a/drivers/scsi/qla2xxx/qla_fw.h
+++ b/drivers/scsi/qla2xxx/qla_fw.h
@@ -1757,7 +1757,7 @@ struct nvram_81xx {
 	uint16_t reserved_6_3[14];
 
 	/* Offset 192. */
-	uint8_t min_link_speed;
+	uint8_t min_supported_speed;
 	uint8_t reserved_7_0;
 	uint16_t reserved_7[31];
 
* Unmerged path drivers/scsi/qla2xxx/qla_mbx.c
