powerpc/pseries: correctly track irq state in default idle

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Nathan Lynch <nathanl@linux.ibm.com>
commit 92c94dfb69e350471473fd3075c74bc68150879e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/92c94dfb.failed

prep_irq_for_idle() is intended to be called before entering
H_CEDE (and it is used by the pseries cpuidle driver). However the
default pseries idle routine does not call it, leading to mismanaged
lazy irq state when the cpuidle driver isn't in use. Manifestations of
this include:

* Dropped IPIs in the time immediately after a cpu comes
  online (before it has installed the cpuidle handler), making the
  online operation block indefinitely waiting for the new cpu to
  respond.

* Hitting this WARN_ON in arch_local_irq_restore():
	/*
	 * We should already be hard disabled here. We had bugs
	 * where that wasn't the case so let's dbl check it and
	 * warn if we are wrong. Only do that when IRQ tracing
	 * is enabled as mfmsr() can be costly.
	 */
	if (WARN_ON_ONCE(mfmsr() & MSR_EE))
		__hard_irq_disable();

Call prep_irq_for_idle() from pseries_lpar_idle() and honor its
result.

Fixes: 363edbe2614a ("powerpc: Default arch idle could cede processor on pseries")
	Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20190910225244.25056-1-nathanl@linux.ibm.com
(cherry picked from commit 92c94dfb69e350471473fd3075c74bc68150879e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/pseries/setup.c
diff --cc arch/powerpc/platforms/pseries/setup.c
index bbac34358c01,f8adcd0e4589..000000000000
--- a/arch/powerpc/platforms/pseries/setup.c
+++ b/arch/powerpc/platforms/pseries/setup.c
@@@ -364,29 -316,27 +364,37 @@@ early_initcall(alloc_dispatch_log_kmem_
  
  static void pseries_lpar_idle(void)
  {
 -	/*
 -	 * Default handler to go into low thread priority and possibly
 -	 * low power mode by ceding processor to hypervisor
 +	/* This would call on the cpuidle framework, and the back-end pseries
 +	 * driver to  go to idle states
  	 */
 +	if (cpuidle_idle_call()) {
 +		/* On error, execute default handler
 +		 * to go into low thread priority and possibly
 +		 * low power mode by cedeing processor to hypervisor
 +		 */
  
++<<<<<<< HEAD
 +		/* Indicate to hypervisor that we are idle. */
 +		get_lppaca()->idle = 1;
++=======
+ 	if (!prep_irq_for_idle())
+ 		return;
+ 
+ 	/* Indicate to hypervisor that we are idle. */
+ 	get_lppaca()->idle = 1;
++>>>>>>> 92c94dfb69e3 (powerpc/pseries: correctly track irq state in default idle)
 +
 +		/*
 +		 * Yield the processor to the hypervisor.  We return if
 +		 * an external interrupt occurs (which are driven prior
 +		 * to returning here) or if a prod occurs from another
 +		 * processor. When returning here, external interrupts
 +		 * are enabled.
 +		 */
 +		cede_processor();
  
 -	/*
 -	 * Yield the processor to the hypervisor.  We return if
 -	 * an external interrupt occurs (which are driven prior
 -	 * to returning here) or if a prod occurs from another
 -	 * processor. When returning here, external interrupts
 -	 * are enabled.
 -	 */
 -	cede_processor();
 -
 -	get_lppaca()->idle = 0;
 +		get_lppaca()->idle = 0;
 +	}
  }
  
  /*
* Unmerged path arch/powerpc/platforms/pseries/setup.c
