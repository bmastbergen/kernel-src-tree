selinuxfs: don't open-code d_genocide()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit ad52184b705c1048aa01225eccde119ef5c93000
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/ad52184b.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit ad52184b705c1048aa01225eccde119ef5c93000)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/selinux/selinuxfs.c
diff --cc security/selinux/selinuxfs.c
index b3ca4f43a462,1684bcc78b34..000000000000
--- a/security/selinux/selinuxfs.c
+++ b/security/selinux/selinuxfs.c
@@@ -1191,30 -1195,8 +1191,35 @@@ static const struct file_operations sel
  
  static void sel_remove_entries(struct dentry *de)
  {
++<<<<<<< HEAD
 +	struct list_head *node;
 +
 +	spin_lock(&de->d_lock);
 +	node = de->d_subdirs.next;
 +	while (node != &de->d_subdirs) {
 +		struct dentry *d = list_entry(node, struct dentry, d_u.d_child);
 +
 +		spin_lock_nested(&d->d_lock, DENTRY_D_LOCK_NESTED);
 +		list_del_init(node);
 +
 +		if (d->d_inode) {
 +			dget_dlock(d);
 +			spin_unlock(&de->d_lock);
 +			spin_unlock(&d->d_lock);
 +			d_delete(d);
 +			simple_unlink(de->d_inode, d);
 +			dput(d);
 +			spin_lock(&de->d_lock);
 +		} else
 +			spin_unlock(&d->d_lock);
 +		node = de->d_subdirs.next;
 +	}
 +
 +	spin_unlock(&de->d_lock);
++=======
+ 	d_genocide(de);
+ 	shrink_dcache_parent(de);
++>>>>>>> ad52184b705c (selinuxfs: don't open-code d_genocide())
  }
  
  #define BOOL_DIR_NAME "booleans"
@@@ -1664,30 -1646,6 +1669,33 @@@ static int sel_make_class_dir_entries(c
  	return rc;
  }
  
++<<<<<<< HEAD
 +static void sel_remove_classes(void)
 +{
 +	struct list_head *class_node;
 +
 +	list_for_each(class_node, &class_dir->d_subdirs) {
 +		struct dentry *class_subdir = list_entry(class_node,
 +					struct dentry, d_u.d_child);
 +		struct list_head *class_subdir_node;
 +
 +		list_for_each(class_subdir_node, &class_subdir->d_subdirs) {
 +			struct dentry *d = list_entry(class_subdir_node,
 +						struct dentry, d_u.d_child);
 +
 +			if (d->d_inode)
 +				if (d->d_inode->i_mode & S_IFDIR)
 +					sel_remove_entries(d);
 +		}
 +
 +		sel_remove_entries(class_subdir);
 +	}
 +
 +	sel_remove_entries(class_dir);
 +}
 +
++=======
++>>>>>>> ad52184b705c (selinuxfs: don't open-code d_genocide())
  static int sel_make_classes(void)
  {
  	int rc, nclasses, i;
* Unmerged path security/selinux/selinuxfs.c
