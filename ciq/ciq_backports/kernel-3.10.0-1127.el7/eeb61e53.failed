sched: Fix race between task_group and sched_task_group

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Kirill Tkhai <ktkhai@parallels.com>
commit eeb61e53ea19be0c4015b00b2e8b3b2185436f2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/eeb61e53.failed

The race may happen when somebody is changing task_group of a forking task.
Child's cgroup is the same as parent's after dup_task_struct() (there just
memory copying). Also, cfs_rq and rt_rq are the same as parent's.

But if parent changes its task_group before it's called cgroup_post_fork(),
we do not reflect this situation on child. Child's cfs_rq and rt_rq remain
the same, while child's task_group changes in cgroup_post_fork().

To fix this we introduce fork() method, which calls sched_move_task() directly.
This function changes sched_task_group on appropriate (also its logic has
no problem with freshly created tasks, so we shouldn't introduce something
special; we are able just to use it).

Possibly, this decides the Burke Libbey's problem: https://lkml.org/lkml/2014/10/24/456

	Signed-off-by: Kirill Tkhai <ktkhai@parallels.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/1414405105.19914.169.camel@tkhai
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit eeb61e53ea19be0c4015b00b2e8b3b2185436f2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 13966acd35e8,dde8adb7d0c0..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -9430,7 -7833,12 +9430,16 @@@ static void cpu_cgroup_css_offline(stru
  	sched_offline_group(tg);
  }
  
++<<<<<<< HEAD
 +static int cpu_cgroup_can_attach(struct cgroup *cgrp,
++=======
+ static void cpu_cgroup_fork(struct task_struct *task)
+ {
+ 	sched_move_task(task);
+ }
+ 
+ static int cpu_cgroup_can_attach(struct cgroup_subsys_state *css,
++>>>>>>> eeb61e53ea19 (sched: Fix race between task_group and sched_task_group)
  				 struct cgroup_taskset *tset)
  {
  	struct task_struct *task;
* Unmerged path kernel/sched/core.c
