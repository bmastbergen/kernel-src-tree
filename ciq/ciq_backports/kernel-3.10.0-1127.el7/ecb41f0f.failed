ALSA: pcm: Remove down_write() hack for snd_pcm_link_rwsem

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit ecb41f0f44cadfa90ef9acff3ffe95563274ec1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/ecb41f0f.failed

Remove the hackish down_write_nonfifo() that was introduced as a
workaround of rwsem deadlock.

It used to be a problem for non-atomic PCM streams that take the rwsem
for the locking and hit the high lock contention.  Since the current
PCM locking refactoring, we'll no longer hit it as the hot code-paths
don't take global locks.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit ecb41f0f44cadfa90ef9acff3ffe95563274ec1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/pcm_native.c
diff --cc sound/core/pcm_native.c
index 72d271be617b,f450083eb073..000000000000
--- a/sound/core/pcm_native.c
+++ b/sound/core/pcm_native.c
@@@ -84,21 -85,8 +84,9 @@@ static int snd_pcm_open(struct file *fi
   *
   */
  
 +static DEFINE_RWLOCK(snd_pcm_link_rwlock);
  static DECLARE_RWSEM(snd_pcm_link_rwsem);
  
- /* Writer in rwsem may block readers even during its waiting in queue,
-  * and this may lead to a deadlock when the code path takes read sem
-  * twice (e.g. one in snd_pcm_action_nonatomic() and another in
-  * snd_pcm_stream_lock()).  As a (suboptimal) workaround, let writer to
-  * sleep until all the readers are completed without blocking by writer.
-  */
- static inline void down_write_nonfifo(struct rw_semaphore *lock)
- {
- 	while (!down_write_trylock(lock))
- 		msleep(1);
- }
- 
  void snd_pcm_group_init(struct snd_pcm_group *group)
  {
  	spin_lock_init(&group->lock);
@@@ -1988,8 -2039,8 +1976,13 @@@ static int snd_pcm_link(struct snd_pcm_
  		goto _nolock;
  	}
  	snd_pcm_group_init(group);
++<<<<<<< HEAD
 +	down_write_nonfifo(&snd_pcm_link_rwsem);
 +	write_lock_irq(&snd_pcm_link_rwlock);
++=======
+ 
+ 	down_write(&snd_pcm_link_rwsem);
++>>>>>>> ecb41f0f44ca (ALSA: pcm: Remove down_write() hack for snd_pcm_link_rwsem)
  	if (substream->runtime->status->state == SNDRV_PCM_STATE_OPEN ||
  	    substream->runtime->status->state != substream1->runtime->status->state ||
  	    substream->pcm->nonatomic != substream1->pcm->nonatomic) {
@@@ -2023,10 -2084,12 +2016,15 @@@ static void relink_to_local(struct snd_
  static int snd_pcm_unlink(struct snd_pcm_substream *substream)
  {
  	struct snd_pcm_group *group;
 -	bool nonatomic = substream->pcm->nonatomic;
 -	bool do_free = false;
  	int res = 0;
  
++<<<<<<< HEAD
 +	down_write_nonfifo(&snd_pcm_link_rwsem);
 +	write_lock_irq(&snd_pcm_link_rwlock);
++=======
+ 	down_write(&snd_pcm_link_rwsem);
+ 
++>>>>>>> ecb41f0f44ca (ALSA: pcm: Remove down_write() hack for snd_pcm_link_rwsem)
  	if (!snd_pcm_stream_linked(substream)) {
  		res = -EALREADY;
  		goto _end;
* Unmerged path sound/core/pcm_native.c
