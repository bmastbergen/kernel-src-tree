scsi: sd: fix entropy gathering for most rotational disks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author James Bottomley <James.Bottomley@HansenPartnership.com>
commit e4a056987c86f402f1286e050b1dee3f4ce7c7eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/e4a05698.failed

The problem is that the default for MQ is not to gather entropy, whereas
the default for the legacy queue was always to gather it.  The original
attempt to fix entropy gathering for rotational disks under MQ added an
else branch in sd_read_block_characteristics().  Unfortunately, the entire
check isn't reached if the device has no characteristics VPD page.  Since
this page was only introduced in SBC-3 and its optional anyway, most less
expensive rotational disks don't have one, meaning they all stopped
gathering entropy when we made MQ the default.  In a wholly unrelated
change, openssl and openssh won't function until the random number
generator is initialised, meaning lots of people have been seeing large
delays before they could log into systems with default MQ kernels due to
this lack of entropy, because it now can take tens of minutes to initialise
the kernel random number generator.

The fix is to set the non-rotational and add-randomness flags
unconditionally early on in the disk initialization path, so they can be
reset only if the device actually reports being non-rotational via the VPD
page.

	Reported-by: Mikael Pettersson <mikpelinux@gmail.com>
Fixes: 83e32a591077 ("scsi: sd: Contribute to randomness when running rotational device")
	Cc: stable@vger.kernel.org
	Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
	Reviewed-by: Jens Axboe <axboe@kernel.dk>
	Reviewed-by: Xuewei Zhang <xueweiz@google.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit e4a056987c86f402f1286e050b1dee3f4ce7c7eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd.c
diff --cc drivers/scsi/sd.c
index f65a22cbf36e,5464d467e23e..000000000000
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@@ -2754,10 -2949,29 +2754,15 @@@ static void sd_read_block_characteristi
  	rot = get_unaligned_be16(&buffer[4]);
  
  	if (rot == 1) {
++<<<<<<< HEAD
 +		queue_flag_set_unlocked(QUEUE_FLAG_NONROT, sdkp->disk->queue);
 +		queue_flag_clear_unlocked(QUEUE_FLAG_ADD_RANDOM, sdkp->disk->queue);
++=======
+ 		blk_queue_flag_set(QUEUE_FLAG_NONROT, q);
+ 		blk_queue_flag_clear(QUEUE_FLAG_ADD_RANDOM, q);
++>>>>>>> e4a056987c86 (scsi: sd: fix entropy gathering for most rotational disks)
  	}
  
 -	if (sdkp->device->type == TYPE_ZBC) {
 -		/* Host-managed */
 -		q->limits.zoned = BLK_ZONED_HM;
 -	} else {
 -		sdkp->zoned = (buffer[8] >> 4) & 3;
 -		if (sdkp->zoned == 1)
 -			/* Host-aware */
 -			q->limits.zoned = BLK_ZONED_HA;
 -		else
 -			/*
 -			 * Treat drive-managed devices as
 -			 * regular block devices.
 -			 */
 -			q->limits.zoned = BLK_ZONED_NONE;
 -	}
 -	if (blk_queue_is_zoned(q) && sdkp->first_scan)
 -		sd_printk(KERN_NOTICE, sdkp, "Host-%s zoned block device\n",
 -		      q->limits.zoned == BLK_ZONED_HM ? "managed" : "aware");
 -
   out:
  	kfree(buffer);
  }
* Unmerged path drivers/scsi/sd.c
