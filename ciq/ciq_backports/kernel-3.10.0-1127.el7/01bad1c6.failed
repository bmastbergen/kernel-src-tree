cpuidle: poll_state: Revise loop termination condition

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 01bad1c6896db021db82042e71c2bf1f97cc026b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/01bad1c6.failed

If need_resched() returns "false", breaking out of the loop in
poll_idle() will cause a new idle state to be selected, so in fact
it usually doesn't make sense to spin in it longer than the target
residency of the second state.  [Note that the "polling" state is
used only if there is at least one "real" state defined in addition
to it, so the second state is always there.]  On the other hand,
breaking out of it early (say in case the next state is disabled)
shouldn't hurt as it is polling anyway.

For this reason, make the loop in poll_idle() break if the CPU has
been spinning longer than the target residency of the second state
(the "polling" state can only be state[0]).

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 01bad1c6896db021db82042e71c2bf1f97cc026b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpuidle/poll_state.c
* Unmerged path drivers/cpuidle/poll_state.c
* Unmerged path drivers/cpuidle/poll_state.c
