net/mlx5e: Replace reciprocal_scale in TX select queue function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Shay Agroskin <shayag@mellanox.com>
commit 57c70d8740f740498a52f9c0c0d7295829b944de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/57c70d87.failed

The TX queue index returned by the fallback function ranges
between [0,NUM CHANNELS - 1] if QoS isn't set and
[0, (NUM CHANNELS)*(NUM TCs) -1] otherwise.

Our HW uses different TC mapping than the fallback function
(which is denoted as 'up', user priority) so we only need to extract
a channel number out of the returned value.

Since (NUM CHANNELS)*(NUM TCs) is a relatively small number, using
reciprocal scale almost always returns zero.
We instead access the 'txq2sq' table to extract the sq (and with it the
channel number) associated with the tx queue, thus getting
a more evenly distributed channel number.

Perf:

Rx/Tx side with Intel(R) Xeon(R) Silver 4108 CPU @ 1.80GHz and ConnectX-5.
Used 'iperf' UDP traffic, 10 threads, and priority 5.

Before:	0.566Mpps
After:	 2.37Mpps

As expected, releasing the existing bottleneck of steering all traffic
to TX queue zero significantly improves transmission rates.

Fixes: 7ccdd0841b30 ("net/mlx5e: Fix select queue callback")
	Signed-off-by: Shay Agroskin <shayag@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 57c70d8740f740498a52f9c0c0d7295829b944de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
index e310a0de21c4,701e5dc75bb0..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
@@@ -110,10 -111,10 +110,14 @@@ static inline int mlx5e_get_dscp_up(str
  #endif
  
  u16 mlx5e_select_queue(struct net_device *dev, struct sk_buff *skb,
 -		       struct net_device *sb_dev)
 +		       void *accel_priv, select_queue_fallback_t fallback)
  {
++<<<<<<< HEAD
++=======
+ 	int txq_ix = netdev_pick_tx(dev, skb, NULL);
++>>>>>>> 57c70d8740f7 (net/mlx5e: Replace reciprocal_scale in TX select queue function)
  	struct mlx5e_priv *priv = netdev_priv(dev);
 +	int channel_ix = fallback(dev, skb);
  	u16 num_channels;
  	int up = 0;
  
@@@ -126,9 -127,9 +130,9 @@@
  	else
  #endif
  		if (skb_vlan_tag_present(skb))
 -			up = skb_vlan_tag_get_prio(skb);
 +			up = skb->vlan_tci >> VLAN_PRIO_SHIFT;
  
- 	/* channel_ix can be larger than num_channels since
+ 	/* txq_ix can be larger than num_channels since
  	 * dev->num_real_tx_queues = num_channels * num_tc
  	 */
  	num_channels = priv->channels.params.num_channels;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 8240fe5a7c81..ca7eb9285381 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -392,6 +392,7 @@ struct mlx5e_txqsq {
 	/* control path */
 	struct mlx5_wq_ctrl        wq_ctrl;
 	struct mlx5e_channel      *channel;
+	int                        ch_ix;
 	int                        txq_ix;
 	u32                        rate_limit;
 	struct mlx5e_txqsq_recover {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index b820d9111cdb..f7827705fefc 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -1150,6 +1150,7 @@ static int mlx5e_alloc_txqsq(struct mlx5e_channel *c,
 	sq->clock     = &mdev->clock;
 	sq->mkey_be   = c->mkey_be;
 	sq->channel   = c;
+	sq->ch_ix     = c->ix;
 	sq->txq_ix    = txq_ix;
 	sq->uar_map   = mdev->mlx5e_res.bfreg.map;
 	sq->min_inline_mode = params->tx_min_inline_mode;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
