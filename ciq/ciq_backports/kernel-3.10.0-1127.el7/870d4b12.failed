mm: percpu: use pr_fmt to prefix output

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Joe Perches <joe@perches.com>
commit 870d4b12ad15d21c5db67b373bdc2f62cfe2ec64
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/870d4b12.failed

Use the normal mechanism to make the logging output consistently
"percpu:" instead of a mix of "PERCPU:" and "percpu:"

	Signed-off-by: Joe Perches <joe@perches.com>
	Acked-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 870d4b12ad15d21c5db67b373bdc2f62cfe2ec64)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/percpu-km.c
#	mm/percpu.c
diff --cc mm/percpu-km.c
index 10e3d0b8a86d,d66911ff42d9..000000000000
--- a/mm/percpu-km.c
+++ b/mm/percpu-km.c
@@@ -95,7 -95,7 +95,11 @@@ static int __init pcpu_verify_alloc_inf
  
  	/* all units must be in a single group */
  	if (ai->nr_groups != 1) {
++<<<<<<< HEAD
 +		printk(KERN_CRIT "percpu: can't handle more than one groups\n");
++=======
+ 		pr_crit("can't handle more than one group\n");
++>>>>>>> 870d4b12ad15 (mm: percpu: use pr_fmt to prefix output)
  		return -EINVAL;
  	}
  
@@@ -103,8 -103,8 +107,13 @@@
  	alloc_pages = roundup_pow_of_two(nr_pages);
  
  	if (alloc_pages > nr_pages)
++<<<<<<< HEAD
 +		printk(KERN_WARNING "percpu: wasting %zu pages per chunk\n",
 +		       alloc_pages - nr_pages);
++=======
+ 		pr_warn("wasting %zu pages per chunk\n",
+ 			alloc_pages - nr_pages);
++>>>>>>> 870d4b12ad15 (mm: percpu: use pr_fmt to prefix output)
  
  	return 0;
  }
diff --cc mm/percpu.c
index 895c2996b902,0c59684f1ff2..000000000000
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@@ -1035,12 -1034,12 +1037,18 @@@ area_found
  fail_unlock:
  	spin_unlock_irqrestore(&pcpu_lock, flags);
  fail:
++<<<<<<< HEAD
 +	if (!is_atomic && do_warn && warn_limit) {
 +		pr_warning("PERCPU: allocation failed, size=%zu align=%zu atomic=%d, %s\n",
 +			   size, align, is_atomic, err);
++=======
+ 	if (!is_atomic && warn_limit) {
+ 		pr_warn("allocation failed, size=%zu align=%zu atomic=%d, %s\n",
+ 			size, align, is_atomic, err);
++>>>>>>> 870d4b12ad15 (mm: percpu: use pr_fmt to prefix output)
  		dump_stack();
  		if (!--warn_limit)
- 			pr_info("PERCPU: limit reached, disable warning\n");
+ 			pr_info("limit reached, disable warning\n");
  	}
  	if (is_atomic) {
  		/* see the flag handling in pcpu_blance_workfn() */
@@@ -1751,7 -1725,7 +1759,11 @@@ static int __init percpu_alloc_setup(ch
  		pcpu_chosen_fc = PCPU_FC_PAGE;
  #endif
  	else
++<<<<<<< HEAD
 +		pr_warning("PERCPU: unknown allocator %s specified\n", str);
++=======
+ 		pr_warn("unknown allocator %s specified\n", str);
++>>>>>>> 870d4b12ad15 (mm: percpu: use pr_fmt to prefix output)
  
  	return 0;
  }
@@@ -2044,9 -2018,8 +2056,14 @@@ int __init pcpu_embed_first_chunk(size_
  
  	/* warn if maximum distance is further than 75% of vmalloc space */
  	if (max_distance > VMALLOC_TOTAL * 3 / 4) {
++<<<<<<< HEAD
 +		pr_warning("PERCPU: max_distance=0x%zx too large for vmalloc "
 +			   "space 0x%lx\n", max_distance,
 +			   VMALLOC_TOTAL);
++=======
+ 		pr_warn("max_distance=0x%zx too large for vmalloc space 0x%lx\n",
+ 			max_distance, VMALLOC_TOTAL);
++>>>>>>> 870d4b12ad15 (mm: percpu: use pr_fmt to prefix output)
  #ifdef CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK
  		/* and fail if we have fallback */
  		rc = -EINVAL;
@@@ -2128,8 -2101,8 +2145,13 @@@ int __init pcpu_page_first_chunk(size_
  
  			ptr = alloc_fn(cpu, PAGE_SIZE, PAGE_SIZE);
  			if (!ptr) {
++<<<<<<< HEAD
 +				pr_warning("PERCPU: failed to allocate %s page "
 +					   "for cpu%u\n", psize_str, cpu);
++=======
+ 				pr_warn("failed to allocate %s page for cpu%u\n",
+ 					psize_str, cpu);
++>>>>>>> 870d4b12ad15 (mm: percpu: use pr_fmt to prefix output)
  				goto enomem;
  			}
  			/* kmemleak tracks the percpu allocations separately */
* Unmerged path mm/percpu-km.c
* Unmerged path mm/percpu.c
