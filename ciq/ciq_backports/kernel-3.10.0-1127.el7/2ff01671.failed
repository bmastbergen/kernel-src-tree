scsi: qla2xxx: Correction and improvement to fwdt processing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Joe Carnuccio <joe.carnuccio@cavium.com>
commit 2ff0167151f50f38c103c2e8e08e542cd8727441
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/2ff01671.failed

This patch cleans up and fixes firmware dump template processing. These
changes are added to support newer features for ISP27XX/ISP28XX.

	Signed-off-by: Joe Carnuccio <joe.carnuccio@cavium.com>
	Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 2ff0167151f50f38c103c2e8e08e542cd8727441)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_tmpl.c
diff --cc drivers/scsi/qla2xxx/qla_tmpl.c
index 8e1a825aed39,9f8a7a3d6726..000000000000
--- a/drivers/scsi/qla2xxx/qla_tmpl.c
+++ b/drivers/scsi/qla2xxx/qla_tmpl.c
@@@ -684,14 -708,14 +684,18 @@@ qla27xx_fwdt_entry_t275(struct scsi_qla
  		qla27xx_skip_entry(ent, buf);
  		goto done;
  	}
++<<<<<<< HEAD
 +	if (offset + ent->t275.length > ent->hdr.size) {
++=======
+ 	if (offset + length > size) {
+ 		length = size - offset;
++>>>>>>> 2ff0167151f5 (scsi: qla2xxx: Correction and improvement to fwdt processing)
  		ql_dbg(ql_dbg_misc, vha, 0xd030,
- 		    "%s: buffer overflow\n", __func__);
- 		qla27xx_skip_entry(ent, buf);
- 		goto done;
+ 		    "%s: buffer overflow, truncate [%lx]\n", __func__, length);
+ 		ent->t275.length = cpu_to_le32(length);
  	}
  
 -	qla27xx_insertbuf(buffer, length, buf, len);
 +	qla27xx_insertbuf(ent->t275.buffer, ent->t275.length, buf, len);
  done:
  	return qla27xx_next_entry(ent);
  }
@@@ -700,15 -724,22 +704,34 @@@ static struct qla27xx_fwdt_entry 
  qla27xx_fwdt_entry_t276(struct scsi_qla_host *vha,
      struct qla27xx_fwdt_entry *ent, void *buf, ulong *len)
  {
++<<<<<<< HEAD
 +	uint type = vha->hw->pdev->device >> 4 & 0xf;
 +	uint func = vha->hw->port_no & 0x3;
 +
 +	ql_dbg(ql_dbg_misc + ql_dbg_verbose, vha, 0xd214,
 +	    "%s: cond [%lx]\n", __func__, *len);
 +
 +	if (type != ent->t276.cond1 || func != ent->t276.cond2) {
 +		ent = qla27xx_next_entry(ent);
 +		qla27xx_skip_entry(ent, buf);
++=======
+ 	ql_dbg(ql_dbg_misc + ql_dbg_verbose, vha, 0xd214,
+ 	    "%s: cond [%lx]\n", __func__, *len);
+ 
+ 	if (buf) {
+ 		ulong cond1 = le32_to_cpu(ent->t276.cond1);
+ 		ulong cond2 = le32_to_cpu(ent->t276.cond2);
+ 		uint type = vha->hw->pdev->device >> 4 & 0xf;
+ 		uint func = vha->hw->port_no & 0x3;
+ 
+ 		if (type != cond1 || func != cond2) {
+ 			struct qla27xx_fwdt_template *tmp = buf;
+ 
+ 			tmp->count--;
+ 			ent = qla27xx_next_entry(ent);
+ 			qla27xx_skip_entry(ent, buf);
+ 		}
++>>>>>>> 2ff0167151f5 (scsi: qla2xxx: Correction and improvement to fwdt processing)
  	}
  
  	return qla27xx_next_entry(ent);
@@@ -803,20 -843,23 +826,38 @@@ static voi
  qla27xx_walk_template(struct scsi_qla_host *vha,
  	struct qla27xx_fwdt_template *tmp, void *buf, ulong *len)
  {
++<<<<<<< HEAD
 +	struct qla27xx_fwdt_entry *ent = (void *)tmp + tmp->entry_offset;
 +	ulong count = tmp->entry_count;
++=======
+ 	struct qla27xx_fwdt_entry *ent = (void *)tmp +
+ 	    le32_to_cpu(tmp->entry_offset);
+ 	ulong type;
++>>>>>>> 2ff0167151f5 (scsi: qla2xxx: Correction and improvement to fwdt processing)
  
+ 	tmp->count = le32_to_cpu(tmp->entry_count);
  	ql_dbg(ql_dbg_misc, vha, 0xd01a,
++<<<<<<< HEAD
 +	    "%s: entry count %lx\n", __func__, count);
 +	while (count--) {
 +		ent = qla27xx_find_entry(ent->hdr.type)(vha, ent, buf, len);
++=======
+ 	    "%s: entry count %u\n", __func__, tmp->count);
+ 	while (ent && tmp->count--) {
+ 		type = le32_to_cpu(ent->hdr.type);
+ 		ent = qla27xx_find_entry(type)(vha, ent, buf, len);
++>>>>>>> 2ff0167151f5 (scsi: qla2xxx: Correction and improvement to fwdt processing)
  		if (!ent)
  			break;
  	}
  
- 	if (count)
+ 	if (tmp->count)
  		ql_dbg(ql_dbg_misc, vha, 0xd018,
++<<<<<<< HEAD
 +		    "%s: entry residual count (%lx)\n", __func__, count);
++=======
+ 		    "%s: entry count residual=+%u\n", __func__, tmp->count);
++>>>>>>> 2ff0167151f5 (scsi: qla2xxx: Correction and improvement to fwdt processing)
  
  	if (ent)
  		ql_dbg(ql_dbg_misc, vha, 0xd019,
* Unmerged path drivers/scsi/qla2xxx/qla_tmpl.c
diff --git a/drivers/scsi/qla2xxx/qla_tmpl.h b/drivers/scsi/qla2xxx/qla_tmpl.h
index f7990f2a057a..265c228ec0c0 100644
--- a/drivers/scsi/qla2xxx/qla_tmpl.h
+++ b/drivers/scsi/qla2xxx/qla_tmpl.h
@@ -14,7 +14,7 @@ struct __packed qla27xx_fwdt_template {
 	uint32_t template_type;
 	uint32_t entry_offset;
 	uint32_t template_size;
-	uint32_t reserved_1;
+	uint32_t count;		/* borrow field for running/residual count */
 
 	uint32_t entry_count;
 	uint32_t template_version;
