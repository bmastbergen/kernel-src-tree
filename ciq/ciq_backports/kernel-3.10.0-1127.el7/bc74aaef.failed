gfs2: separate holder for rgrps in gfs2_rename

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Bob Peterson <rpeterso@redhat.com>
commit bc74aaefdd538bb2756d74518c177378e6bd589f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/bc74aaef.failed

Before this patch, gfs2_rename added a holder for the rgrp glock to
its array of holders, ghs. There's nothing wrong with that, but this
patch separates it into a separate holder. This is done to ensure
it's always locked last as per the proper glock lock ordering,
and also to pave the way for a future patch in which we will
lock the non-rgrp glocks asynchronously.

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit bc74aaefdd538bb2756d74518c177378e6bd589f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/inode.c
diff --cc fs/gfs2/inode.c
index 22e1c51ec01a,50eeb15c6f4f..000000000000
--- a/fs/gfs2/inode.c
+++ b/fs/gfs2/inode.c
@@@ -1301,10 -1345,10 +1301,10 @@@ static int gfs2_rename(struct inode *od
  {
  	struct gfs2_inode *odip = GFS2_I(odir);
  	struct gfs2_inode *ndip = GFS2_I(ndir);
 -	struct gfs2_inode *ip = GFS2_I(d_inode(odentry));
 +	struct gfs2_inode *ip = GFS2_I(odentry->d_inode);
  	struct gfs2_inode *nip = NULL;
  	struct gfs2_sbd *sdp = GFS2_SB(odir);
- 	struct gfs2_holder ghs[5], r_gh;
+ 	struct gfs2_holder ghs[4], r_gh, rd_gh;
  	struct gfs2_rgrpd *nrgd;
  	unsigned int num_gh;
  	int dir_rename = 0;
@@@ -1313,8 -1357,9 +1313,14 @@@
  	int error;
  
  	gfs2_holder_mark_uninitialized(&r_gh);
++<<<<<<< HEAD
 +	if (ndentry->d_inode) {
 +		nip = GFS2_I(ndentry->d_inode);
++=======
+ 	gfs2_holder_mark_uninitialized(&rd_gh);
+ 	if (d_really_is_positive(ndentry)) {
+ 		nip = GFS2_I(d_inode(ndentry));
++>>>>>>> bc74aaefdd53 (gfs2: separate holder for rgrps in gfs2_rename)
  		if (ip == nip)
  			return 0;
  	}
@@@ -1492,12 -1544,16 +1507,19 @@@
  out_end_trans:
  	gfs2_trans_end(sdp);
  out_ipreserv:
 -	if (da.nr_blocks)
 +	if (alloc_required)
  		gfs2_inplace_release(ndip);
  out_gunlock_q:
 -	if (da.nr_blocks)
 +	if (alloc_required)
  		gfs2_quota_unlock(ndip);
  out_gunlock:
++<<<<<<< HEAD
++=======
+ 	gfs2_dir_no_add(&da);
+ 	if (gfs2_holder_initialized(&rd_gh))
+ 		gfs2_glock_dq_uninit(&rd_gh);
+ 
++>>>>>>> bc74aaefdd53 (gfs2: separate holder for rgrps in gfs2_rename)
  	while (x--) {
  		gfs2_glock_dq(ghs + x);
  		gfs2_holder_uninit(ghs + x);
* Unmerged path fs/gfs2/inode.c
