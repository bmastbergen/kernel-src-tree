scsi: core: Make scsi_result_to_blk_status() recognize CONDITION MET

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Bart Van Assche <bart.vanassche@wdc.com>
commit f4abab3f182b6b01e3e0f052721b4721a269a133
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/f4abab3f.failed

Ensure that CONDITION MET and other non-zero status values that indicate
success are translated into BLK_STS_OK.

	Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
	Cc: Hannes Reinecke <hare@suse.com>
	Cc: Douglas Gilbert <dgilbert@interlog.com>
	Cc: Damien Le Moal <damien.lemoal@wdc.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Lee Duncan <lduncan@suse.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit f4abab3f182b6b01e3e0f052721b4721a269a133)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_lib.c
diff --cc drivers/scsi/scsi_lib.c
index 457e2f762ae3,e9b4f279d29c..000000000000
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@@ -675,49 -723,41 +675,62 @@@ static bool scsi_end_request(struct req
  }
  
  /**
 - * scsi_result_to_blk_status - translate a SCSI result code into blk_status_t
 - * @cmd:	SCSI command
 + * __scsi_error_from_host_byte - translate SCSI error code into errno
 + * @cmd:	SCSI command (unused)
   * @result:	scsi error code
   *
 - * Translate a SCSI result code into a blk_status_t value. May reset the host
 - * byte of @cmd->result.
 + * Translate SCSI error code into standard UNIX errno.
 + * Return values:
 + * -ENOLINK	temporary transport failure
 + * -EREMOTEIO	permanent target failure, do not retry
 + * -EBADE	permanent nexus failure, retry on other path
 + * -ENOSPC	No write space available
 + * -ENODATA	Medium error
 + * -EIO		unspecified I/O error
   */
 -static blk_status_t scsi_result_to_blk_status(struct scsi_cmnd *cmd, int result)
 +static int __scsi_error_from_host_byte(struct scsi_cmnd *cmd, int result)
  {
++<<<<<<< HEAD
 +	int error = 0;
 +
 +	switch(host_byte(result)) {
++=======
+ 	switch (host_byte(result)) {
+ 	case DID_OK:
+ 		/*
+ 		 * Also check the other bytes than the status byte in result
+ 		 * to handle the case when a SCSI LLD sets result to
+ 		 * DRIVER_SENSE << 24 without setting SAM_STAT_CHECK_CONDITION.
+ 		 */
+ 		if (scsi_status_is_good(result) && (result & ~0xff) == 0)
+ 			return BLK_STS_OK;
+ 		return BLK_STS_IOERR;
++>>>>>>> f4abab3f182b (scsi: core: Make scsi_result_to_blk_status() recognize CONDITION MET)
  	case DID_TRANSPORT_FAILFAST:
 -		return BLK_STS_TRANSPORT;
 +		error = -ENOLINK;
 +		break;
  	case DID_TARGET_FAILURE:
  		set_host_byte(cmd, DID_OK);
 -		return BLK_STS_TARGET;
 +		error = -EREMOTEIO;
 +		break;
  	case DID_NEXUS_FAILURE:
 -		return BLK_STS_NEXUS;
 +		set_host_byte(cmd, DID_OK);
 +		error = -EBADE;
 +		break;
  	case DID_ALLOC_FAILURE:
  		set_host_byte(cmd, DID_OK);
 -		return BLK_STS_NOSPC;
 +		error = -ENOSPC;
 +		break;
  	case DID_MEDIUM_ERROR:
  		set_host_byte(cmd, DID_OK);
 -		return BLK_STS_MEDIUM;
 +		error = -ENODATA;
 +		break;
  	default:
 -		return BLK_STS_IOERR;
 +		error = -EIO;
 +		break;
  	}
 +
 +	return error;
  }
  
  /*
* Unmerged path drivers/scsi/scsi_lib.c
