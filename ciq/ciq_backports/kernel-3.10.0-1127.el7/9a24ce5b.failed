cachefiles: Fix page leak in cachefiles_read_backing_file while vmscan is active

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Kiran Kumar Modukuri <kiran.modukuri@gmail.com>
commit 9a24ce5b66f9c8190d63b15f4473600db4935f1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/9a24ce5b.failed

[Description]

In a heavily loaded system where the system pagecache is nearing memory
limits and fscache is enabled, pages can be leaked by fscache while trying
read pages from cachefiles backend.  This can happen because two
applications can be reading same page from a single mount, two threads can
be trying to read the backing page at same time.  This results in one of
the threads finding that a page for the backing file or netfs file is
already in the radix tree.  During the error handling cachefiles does not
clean up the reference on backing page, leading to page leak.

[Fix]
The fix is straightforward, to decrement the reference when error is
encountered.

  [dhowells: Note that I've removed the clearance and put of newpage as
   they aren't attested in the commit message and don't appear to actually
   achieve anything since a new page is only allocated is newpage!=NULL and
   any residual new page is cleared before returning.]

[Testing]
I have tested the fix using following method for 12+ hrs.

1) mkdir -p /mnt/nfs ; mount -o vers=3,fsc <server_ip>:/export /mnt/nfs
2) create 10000 files of 2.8MB in a NFS mount.
3) start a thread to simulate heavy VM presssure
   (while true ; do echo 3 > /proc/sys/vm/drop_caches ; sleep 1 ; done)&
4) start multiple parallel reader for data set at same time
   find /mnt/nfs -type f | xargs -P 80 cat > /dev/null &
   find /mnt/nfs -type f | xargs -P 80 cat > /dev/null &
   find /mnt/nfs -type f | xargs -P 80 cat > /dev/null &
   ..
   ..
   find /mnt/nfs -type f | xargs -P 80 cat > /dev/null &
   find /mnt/nfs -type f | xargs -P 80 cat > /dev/null &
5) finally check using cat /proc/fs/fscache/stats | grep -i pages ;
   free -h , cat /proc/meminfo and page-types -r -b lru
   to ensure all pages are freed.

	Reviewed-by: Daniel Axtens <dja@axtens.net>
	Signed-off-by: Shantanu Goel <sgoel01@yahoo.com>
	Signed-off-by: Kiran Kumar Modukuri <kiran.modukuri@gmail.com>
[dja: forward ported to current upstream]
	Signed-off-by: Daniel Axtens <dja@axtens.net>
	Signed-off-by: David Howells <dhowells@redhat.com>
(cherry picked from commit 9a24ce5b66f9c8190d63b15f4473600db4935f1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cachefiles/rdwr.c
diff --cc fs/cachefiles/rdwr.c
index 2a871356efa0,db233588a69a..000000000000
--- a/fs/cachefiles/rdwr.c
+++ b/fs/cachefiles/rdwr.c
@@@ -537,7 -535,10 +537,14 @@@ static int cachefiles_read_backing_file
  					    netpage->index, cachefiles_gfp);
  		if (ret < 0) {
  			if (ret == -EEXIST) {
++<<<<<<< HEAD
 +				page_cache_release(netpage);
++=======
+ 				put_page(backpage);
+ 				backpage = NULL;
+ 				put_page(netpage);
+ 				netpage = NULL;
++>>>>>>> 9a24ce5b66f9 (cachefiles: Fix page leak in cachefiles_read_backing_file while vmscan is active)
  				fscache_retrieval_complete(op, 1);
  				continue;
  			}
@@@ -610,7 -611,10 +617,14 @@@
  					    netpage->index, cachefiles_gfp);
  		if (ret < 0) {
  			if (ret == -EEXIST) {
++<<<<<<< HEAD
 +				page_cache_release(netpage);
++=======
+ 				put_page(backpage);
+ 				backpage = NULL;
+ 				put_page(netpage);
+ 				netpage = NULL;
++>>>>>>> 9a24ce5b66f9 (cachefiles: Fix page leak in cachefiles_read_backing_file while vmscan is active)
  				fscache_retrieval_complete(op, 1);
  				continue;
  			}
* Unmerged path fs/cachefiles/rdwr.c
