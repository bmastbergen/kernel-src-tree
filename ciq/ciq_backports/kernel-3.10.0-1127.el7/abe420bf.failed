swiotlb: Introduce swiotlb_max_mapping_size()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Joerg Roedel <jroedel@suse.de>
commit abe420bfae528c92bd8cc5ecb62dc95672b1fd6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/abe420bf.failed

The function returns the maximum size that can be remapped
by the SWIOTLB implementation. This function will be later
exposed to users through the DMA-API.

	Cc: stable@vger.kernel.org
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit abe420bfae528c92bd8cc5ecb62dc95672b1fd6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/swiotlb.h
#	kernel/dma/swiotlb.c
diff --cc include/linux/swiotlb.h
index ca8329242ce9,d3980aeed4a0..000000000000
--- a/include/linux/swiotlb.h
+++ b/include/linux/swiotlb.h
@@@ -111,11 -64,45 +111,51 @@@ extern in
  swiotlb_dma_supported(struct device *hwdev, u64 mask);
  
  #ifdef CONFIG_SWIOTLB
++<<<<<<< HEAD
 +extern void __init swiotlb_free(void);
 +#else
 +static inline void swiotlb_free(void) { }
 +#endif
++=======
+ extern enum swiotlb_force swiotlb_force;
+ extern phys_addr_t io_tlb_start, io_tlb_end;
+ 
+ static inline bool is_swiotlb_buffer(phys_addr_t paddr)
+ {
+ 	return paddr >= io_tlb_start && paddr < io_tlb_end;
+ }
+ 
+ bool swiotlb_map(struct device *dev, phys_addr_t *phys, dma_addr_t *dma_addr,
+ 		size_t size, enum dma_data_direction dir, unsigned long attrs);
+ void __init swiotlb_exit(void);
+ unsigned int swiotlb_max_segment(void);
+ size_t swiotlb_max_mapping_size(struct device *dev);
+ #else
+ #define swiotlb_force SWIOTLB_NO_FORCE
+ static inline bool is_swiotlb_buffer(phys_addr_t paddr)
+ {
+ 	return false;
+ }
+ static inline bool swiotlb_map(struct device *dev, phys_addr_t *phys,
+ 		dma_addr_t *dma_addr, size_t size, enum dma_data_direction dir,
+ 		unsigned long attrs)
+ {
+ 	return false;
+ }
+ static inline void swiotlb_exit(void)
+ {
+ }
+ static inline unsigned int swiotlb_max_segment(void)
+ {
+ 	return 0;
+ }
+ static inline size_t swiotlb_max_mapping_size(struct device *dev)
+ {
+ 	return SIZE_MAX;
+ }
+ #endif /* CONFIG_SWIOTLB */
++>>>>>>> abe420bfae52 (swiotlb: Introduce swiotlb_max_mapping_size())
  
  extern void swiotlb_print_info(void);
 -extern void swiotlb_set_max_segment(unsigned int);
 -
 +extern int is_swiotlb_buffer(phys_addr_t paddr);
  #endif /* __LINUX_SWIOTLB_H */
* Unmerged path kernel/dma/swiotlb.c
* Unmerged path include/linux/swiotlb.h
* Unmerged path kernel/dma/swiotlb.c
