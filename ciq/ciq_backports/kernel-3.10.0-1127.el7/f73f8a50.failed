PCI: hv: Use bytes 4 and 5 from instance ID as the PCI domain numbers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [pci] hv: Use bytes 4 and 5 from instance ID as the PCI domain numbers (Mohammed Gamal) [1634251]
Rebuild_FUZZ: 96.24%
commit-author Haiyang Zhang <haiyangz@microsoft.com>
commit f73f8a504e27959576a2f4d85182202561e426f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/f73f8a50.failed

As recommended by Azure host team, the bytes 4, 5 have more uniqueness
(info entropy) than bytes 8, 9 so use them as the PCI domain numbers.

On older hosts, bytes 4, 5 can also be used -- no backward compatibility
issues are introduced and the chance of collision is greatly reduced.

In the rare cases of collision, the driver code detects and finds
another number that is not in use.

	Suggested-by: Michael Kelley <mikelley@microsoft.com>
	Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Acked-by: Sasha Levin <sashal@kernel.org>
(cherry picked from commit f73f8a504e27959576a2f4d85182202561e426f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index d5ea96eaad68,3a56de6b2ec2..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -2485,22 -2578,37 +2485,41 @@@ static int hv_pci_probe(struct hv_devic
  	hbus->state = hv_pcibus_init;
  
  	/*
 -	 * The PCI bus "domain" is what is called "segment" in ACPI and other
 -	 * specs. Pull it from the instance ID, to get something usually
 -	 * unique. In rare cases of collision, we will find out another number
 -	 * not in use.
 -	 *
 -	 * Note that, since this code only runs in a Hyper-V VM, Hyper-V
 -	 * together with this guest driver can guarantee that (1) The only
 -	 * domain used by Gen1 VMs for something that looks like a physical
 -	 * PCI bus (which is actually emulated by the hypervisor) is domain 0.
 -	 * (2) There will be no overlap between domains (after fixing possible
 -	 * collisions) in the same VM.
 +	 * The PCI bus "domain" is what is called "segment" in ACPI and
 +	 * other specs.  Pull it from the instance ID, to get something
 +	 * unique.  Bytes 8 and 9 are what is used in Windows guests, so
 +	 * do the same thing for consistency.  Note that, since this code
 +	 * only runs in a Hyper-V VM, Hyper-V can (and does) guarantee
 +	 * that (1) the only domain in use for something that looks like
 +	 * a physical PCI bus (which is actually emulated by the
 +	 * hypervisor) is domain 0 and (2) there will be no overlap
 +	 * between domains derived from these instance IDs in the same
 +	 * VM.
  	 */
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +	hbus->sysdata.domain = hdev->dev_instance.b[9] |
 +			       hdev->dev_instance.b[8] << 8;
++=======
+ 	dom_req = hdev->dev_instance.b[5] << 8 | hdev->dev_instance.b[4];
+ 	dom = hv_get_dom_num(dom_req);
+ 
+ 	if (dom == HVPCI_DOM_INVALID) {
+ 		dev_err(&hdev->device,
+ 			"Unable to use dom# 0x%hx or other numbers", dom_req);
+ 		ret = -EINVAL;
+ 		goto free_bus;
+ 	}
+ 
+ 	if (dom != dom_req)
+ 		dev_info(&hdev->device,
+ 			 "PCI dom# 0x%hx has collision, using 0x%hx",
+ 			 dom_req, dom);
+ 
+ 	hbus->sysdata.domain = dom;
++>>>>>>> f73f8a504e27 (PCI: hv: Use bytes 4 and 5 from instance ID as the PCI domain numbers):drivers/pci/controller/pci-hyperv.c
  
  	hbus->hdev = hdev;
 -	refcount_set(&hbus->remove_lock, 1);
 +	atomic_inc(&hbus->remove_lock);
  	INIT_LIST_HEAD(&hbus->children);
  	INIT_LIST_HEAD(&hbus->dr_list);
  	INIT_LIST_HEAD(&hbus->resources_for_children);
* Unmerged path drivers/pci/pci-hyperv.c
