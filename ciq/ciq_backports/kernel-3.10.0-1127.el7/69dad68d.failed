net/mlx5e: Turn on HW tunnel offload in all TIRs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Turn on HW tunnel offload in all TIRs (Alaa Hleihel) [1710423]
Rebuild_FUZZ: 95.65%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 69dad68d1bcf26dde3cc4b08b08c2260ae575ab6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/69dad68d.failed

Hardware requires that all TIRs that steer traffic to the same RQ
should share identical tunneled_offload_en value.
For that, the tunneled_offload_en bit should be set/unset (according to
the HW capability) for all TIRs', not only the ones dedicated for
tunneled (inner) traffic.

Fixes: 1b223dd39162 ("net/mlx5e: Fix checksum handling for non-stripped vlan packets")
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 69dad68d1bcf26dde3cc4b08b08c2260ae575ab6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index f8d193e3057c,457cc39423f2..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -3169,6 -3094,18 +3169,21 @@@ void mlx5e_cleanup_nic_tx(struct mlx5e_
  		mlx5e_destroy_tis(priv->mdev, priv->tisn[tc]);
  }
  
++<<<<<<< HEAD
++=======
+ static void mlx5e_build_indir_tir_ctx_common(struct mlx5e_priv *priv,
+ 					     u32 rqtn, u32 *tirc)
+ {
+ 	MLX5_SET(tirc, tirc, transport_domain, priv->mdev->mlx5e_res.td.tdn);
+ 	MLX5_SET(tirc, tirc, disp_type, MLX5_TIRC_DISP_TYPE_INDIRECT);
+ 	MLX5_SET(tirc, tirc, indirect_table, rqtn);
+ 	MLX5_SET(tirc, tirc, tunneled_offload_en,
+ 		 priv->channels.params.tunneled_offload_en);
+ 
+ 	mlx5e_build_tir_ctx_lro(&priv->channels.params, tirc);
+ }
+ 
++>>>>>>> 69dad68d1bcf (net/mlx5e: Turn on HW tunnel offload in all TIRs)
  static void mlx5e_build_indir_tir_ctx(struct mlx5e_priv *priv,
  				      enum mlx5e_traffic_types tt,
  				      u32 *tirc)
@@@ -3186,13 -3117,17 +3201,23 @@@
  
  static void mlx5e_build_direct_tir_ctx(struct mlx5e_priv *priv, u32 rqtn, u32 *tirc)
  {
 -	mlx5e_build_indir_tir_ctx_common(priv, rqtn, tirc);
 -	MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_INVERTED_XOR8);
 -}
 +	MLX5_SET(tirc, tirc, transport_domain, priv->mdev->mlx5e_res.td.tdn);
 +
++<<<<<<< HEAD
 +	mlx5e_build_tir_ctx_lro(&priv->channels.params, tirc);
  
 +	MLX5_SET(tirc, tirc, disp_type, MLX5_TIRC_DISP_TYPE_INDIRECT);
 +	MLX5_SET(tirc, tirc, indirect_table, rqtn);
 +	MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_INVERTED_XOR8);
++=======
+ static void mlx5e_build_inner_indir_tir_ctx(struct mlx5e_priv *priv,
+ 					    enum mlx5e_traffic_types tt,
+ 					    u32 *tirc)
+ {
+ 	mlx5e_build_indir_tir_ctx_common(priv, priv->indir_rqt.rqtn, tirc);
+ 	mlx5e_build_indir_tir_ctx_hash(&priv->rss_params,
+ 				       &tirc_default_config[tt], tirc, true);
++>>>>>>> 69dad68d1bcf (net/mlx5e: Turn on HW tunnel offload in all TIRs)
  }
  
  int mlx5e_create_indirect_tirs(struct mlx5e_priv *priv, bool inner_ttc)
@@@ -4594,7 -4572,9 +4619,13 @@@ void mlx5e_build_nic_params(struct mlx5
  	params->tx_min_inline_mode = mlx5e_params_calculate_tx_min_inline(mdev);
  
  	/* RSS */
++<<<<<<< HEAD
 +	mlx5e_build_rss_params(params);
++=======
+ 	mlx5e_build_rss_params(rss_params, params->num_channels);
+ 	params->tunneled_offload_en =
+ 		mlx5e_tunnel_inner_ft_supported(mdev);
++>>>>>>> 69dad68d1bcf (net/mlx5e: Turn on HW tunnel offload in all TIRs)
  }
  
  static void mlx5e_set_netdev_dev_addr(struct net_device *netdev)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 8240fe5a7c81..aae4979827b6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -245,6 +245,7 @@ struct mlx5e_params {
 	bool rx_cqe_compress_def;
 	struct net_dim_cq_moder rx_cq_moderation;
 	struct net_dim_cq_moder tx_cq_moderation;
+	bool tunneled_offload_en;
 	bool lro_en;
 	u32 lro_wqe_sz;
 	u8  tx_min_inline_mode;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index ff66b971d5dc..283cc1038900 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -1243,6 +1243,7 @@ static void mlx5e_build_rep_params(struct mlx5_core_dev *mdev,
 	mlx5e_set_rx_cq_mode_params(params, cq_period_mode);
 
 	params->num_tc                = 1;
+	params->tunneled_offload_en = false;
 
 	mlx5_query_min_inline(mdev, &params->tx_min_inline_mode);
 
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index 776b42d71d41..cb8452bf718b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@ -69,6 +69,7 @@ static void mlx5i_build_nic_params(struct mlx5_core_dev *mdev,
 
 	params->lro_en = false;
 	params->hard_mtu = MLX5_IB_GRH_BYTES + MLX5_IPOIB_HARD_LEN;
+	params->tunneled_offload_en = false;
 }
 
 /* Called directly after IPoIB netdevice was created to initialize SW structs */
