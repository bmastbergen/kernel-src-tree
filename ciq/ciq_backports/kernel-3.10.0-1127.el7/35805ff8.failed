sched/fair: Fix endless loop in idle_balance()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Kirill Tkhai <ktkhai@parallels.com>
commit 35805ff8f4fc535ac85330170d3c56829c87c677
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/35805ff8.failed

Check for fair tasks number to decide, that we've pulled a task.
rq's nr_running may contain throttled RT tasks.

	Signed-off-by: Kirill Tkhai <ktkhai@parallels.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1394118975.19290.104.camel@tkhai
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 35805ff8f4fc535ac85330170d3c56829c87c677)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index f5746240e89a,f1eedae1e83e..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -7028,10 -6706,22 +7028,27 @@@ void idle_balance(int this_cpu, struct 
  
  	raw_spin_lock(&this_rq->lock);
  
++<<<<<<< HEAD
 +out:
 +	/* Move the next balance forward */
 +	if (time_after(this_rq->next_balance, next_balance))
++=======
+ 	/*
+ 	 * While browsing the domains, we released the rq lock.
+ 	 * A task could have be enqueued in the meantime
+ 	 */
+ 	if (this_rq->cfs.h_nr_running && !pulled_task) {
+ 		pulled_task = 1;
+ 		goto out;
+ 	}
+ 
+ 	if (pulled_task || time_after(jiffies, this_rq->next_balance)) {
+ 		/*
+ 		 * We are going idle. next_balance may be set based on
+ 		 * a busy processor. So reset next_balance.
+ 		 */
++>>>>>>> 35805ff8f4fc (sched/fair: Fix endless loop in idle_balance())
  		this_rq->next_balance = next_balance;
 -	}
  
  	if (curr_cost > this_rq->max_idle_balance_cost)
  		this_rq->max_idle_balance_cost = curr_cost;
* Unmerged path kernel/sched/fair.c
