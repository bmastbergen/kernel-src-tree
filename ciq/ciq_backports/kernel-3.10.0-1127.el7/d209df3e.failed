netfilter: nf_tables: fix register ordering

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Florian Westphal <fw@strlen.de>
commit d209df3e7f7002d9099fdb0f6df0f972b4386a63
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/d209df3e.failed

We must register nfnetlink ops last, as that exposes nf_tables to
userspace.  Without this, we could theoretically get nfnetlink request
before net->nft state has been initialized.

Fixes: 99633ab29b213 ("netfilter: nf_tables: complete net namespace support")
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit d209df3e7f7002d9099fdb0f6df0f972b4386a63)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netfilter/nf_tables.h
#	net/netfilter/nf_tables_api.c
#	net/netfilter/nft_chain_filter.c
diff --cc include/net/netfilter/nf_tables.h
index 76717ea433a3,0f39ac487012..000000000000
--- a/include/net/netfilter/nf_tables.h
+++ b/include/net/netfilter/nf_tables.h
@@@ -1130,4 -1359,21 +1130,24 @@@ struct nft_trans_elem 
  #define nft_trans_elem(trans)	\
  	(((struct nft_trans_elem *)trans->data)->elem)
  
++<<<<<<< HEAD
++=======
+ struct nft_trans_obj {
+ 	struct nft_object		*obj;
+ };
+ 
+ #define nft_trans_obj(trans)	\
+ 	(((struct nft_trans_obj *)trans->data)->obj)
+ 
+ struct nft_trans_flowtable {
+ 	struct nft_flowtable		*flowtable;
+ };
+ 
+ #define nft_trans_flowtable(trans)	\
+ 	(((struct nft_trans_flowtable *)trans->data)->flowtable)
+ 
+ int __init nft_chain_filter_init(void);
+ void nft_chain_filter_fini(void);
+ 
++>>>>>>> d209df3e7f70 (netfilter: nf_tables: fix register ordering)
  #endif /* _NET_NF_TABLES_H */
diff --cc net/netfilter/nf_tables_api.c
index fac54e2397f0,80636cc59686..000000000000
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@@ -4737,28 -7273,36 +4737,59 @@@ static int __init nf_tables_module_init
  {
  	int err;
  
++<<<<<<< HEAD
 +	info = kmalloc(sizeof(struct nft_expr_info) * NFT_RULE_MAXEXPRS,
 +		       GFP_KERNEL);
 +	if (info == NULL) {
 +		err = -ENOMEM;
 +		goto err1;
 +	}
 +
 +	err = nf_tables_core_module_init();
++=======
+ 	err = register_pernet_subsys(&nf_tables_net_ops);
++>>>>>>> d209df3e7f70 (netfilter: nf_tables: fix register ordering)
  	if (err < 0)
 -		return err;
 +		goto err2;
  
+ 	err = nft_chain_filter_init();
+ 	if (err < 0)
+ 		goto err1;
+ 
+ 	err = nf_tables_core_module_init();
+ 	if (err < 0)
+ 		goto err2;
+ 
+ 	err = register_netdevice_notifier(&nf_tables_flowtable_notifier);
+ 	if (err < 0)
+ 		goto err3;
+ 
+ 	/* must be last */
  	err = nfnetlink_subsys_register(&nf_tables_subsys);
  	if (err < 0)
++<<<<<<< HEAD
 +		goto err3;
 +
 +	pr_info("nf_tables: (c) 2007-2009 Patrick McHardy <kaber@trash.net>\n");
 +	return register_pernet_subsys(&nf_tables_net_ops);
 +err3:
 +	nf_tables_core_module_exit();
 +err2:
 +	kfree(info);
 +err1:
++=======
+ 		goto err4;
+ 
+ 	return err;
+ err4:
+ 	unregister_netdevice_notifier(&nf_tables_flowtable_notifier);
+ err3:
+ 	nf_tables_core_module_exit();
+ err2:
+ 	nft_chain_filter_fini();
+ err1:
+ 	unregister_pernet_subsys(&nf_tables_net_ops);
++>>>>>>> d209df3e7f70 (netfilter: nf_tables: fix register ordering)
  	return err;
  }
  
* Unmerged path net/netfilter/nft_chain_filter.c
* Unmerged path include/net/netfilter/nf_tables.h
* Unmerged path net/netfilter/nf_tables_api.c
* Unmerged path net/netfilter/nft_chain_filter.c
