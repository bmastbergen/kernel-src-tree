sched,dl: Remove return value from pull_dl_task()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Peter Zijlstra <peterz@infradead.org>
commit 0ea60c2054fc3b0c3eb68ac4f6884f3ee78d9925
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/0ea60c20.failed

In order to be able to use pull_dl_task() from a callback, we need to
do away with the return value.

Since the return value indicates if we should reschedule, do this
inside the function. Since not all callers currently do this, this can
increase the number of reschedules due rt balancing.

Too many reschedules is not a correctness issues, too few are.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: ktkhai@parallels.com
	Cc: rostedt@goodmis.org
	Cc: juri.lelli@gmail.com
	Cc: pang.xunlei@linaro.org
	Cc: oleg@redhat.com
	Cc: wanpeng.li@linux.intel.com
	Cc: umgwanakikbuti@gmail.com
Link: http://lkml.kernel.org/r/20150611124742.859398977@infradead.org
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 0ea60c2054fc3b0c3eb68ac4f6884f3ee78d9925)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
diff --cc kernel/sched/deadline.c
index 75f9634980d1,079c09251e90..000000000000
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@@ -507,6 -293,18 +507,21 @@@ void dec_dl_migration(struct sched_dl_e
  {
  }
  
++<<<<<<< HEAD
++=======
+ static inline bool need_pull_dl_task(struct rq *rq, struct task_struct *prev)
+ {
+ 	return false;
+ }
+ 
+ static inline void pull_dl_task(struct rq *rq)
+ {
+ }
+ 
+ static inline void queue_push_tasks(struct rq *rq)
+ {
+ }
++>>>>>>> 0ea60c2054fc (sched,dl: Remove return value from pull_dl_task())
  #endif /* CONFIG_SMP */
  
  static void enqueue_task_dl(struct rq *rq, struct task_struct *p, int flags);
@@@ -1534,6 -1040,8 +1549,11 @@@ static void check_preempt_equal_dl(stru
  	resched_curr(rq);
  }
  
++<<<<<<< HEAD
++=======
+ static void pull_dl_task(struct rq *this_rq);
+ 
++>>>>>>> 0ea60c2054fc (sched,dl: Remove return value from pull_dl_task())
  #endif /* CONFIG_SMP */
  
  /*
@@@ -2012,14 -1535,10 +2033,14 @@@ static void pull_dl_task(struct rq *thi
  					   src_rq->curr->dl.deadline))
  				goto skip;
  
- 			ret = 1;
+ 			resched = true;
  
  			deactivate_task(src_rq, p, 0);
 +			sub_running_bw(p->dl.dl_bw, &src_rq->dl);
 +			sub_rq_bw(p->dl.dl_bw, &src_rq->dl);
  			set_task_cpu(p, this_cpu);
 +			add_rq_bw(p->dl.dl_bw, &this_rq->dl);
 +			add_running_bw(p->dl.dl_bw, &this_rq->dl);
  			activate_task(this_rq, p, 0);
  			dmin = p->dl.deadline;
  
@@@ -2029,21 -1548,10 +2050,22 @@@ skip
  		double_unlock_balance(this_rq, src_rq);
  	}
  
- 	return ret;
+ 	if (resched)
+ 		resched_curr(this_rq);
  }
  
 +static void pre_schedule_dl(struct rq *rq, struct task_struct *prev)
 +{
 +	/* Try to pull other tasks here */
 +	if (dl_task(prev))
 +		pull_dl_task(rq);
 +}
 +
 +static void post_schedule_dl(struct rq *rq)
 +{
 +	push_dl_tasks(rq);
 +}
 +
  /*
   * Since the task is not running and a reschedule is not going to happen
   * anytime soon on its runqueue, we try pushing it away now.
* Unmerged path kernel/sched/deadline.c
