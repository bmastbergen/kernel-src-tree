crypto: vmx - Remove overly verbose printk from AES init routines

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 1411b5218adbcf1d45ddb260db5553c52e8d917c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/1411b521.failed

In the vmx AES init routines we do a printk(KERN_INFO ...) to report
the fallback implementation we're using.

However with a slow console this can significantly affect the speed of
crypto operations. Using 'cryptsetup benchmark' the removal of the
printk() leads to a ~5x speedup for aes-cbc decryption.

So remove them.

Fixes: 8676590a1593 ("crypto: vmx - Adding AES routines for VMX module")
Fixes: 8c755ace357c ("crypto: vmx - Adding CBC routines for VMX module")
Fixes: 4f7f60d312b3 ("crypto: vmx - Adding CTR routines for VMX module")
Fixes: cc333cd68dfa ("crypto: vmx - Adding GHASH routines for VMX module")
	Cc: stable@vger.kernel.org # v4.1+
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 1411b5218adbcf1d45ddb260db5553c52e8d917c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/vmx/aes_cbc.c
#	drivers/crypto/vmx/aes_ctr.c
diff --cc drivers/crypto/vmx/aes_cbc.c
index 5b3ab68ef93a,5285ece4f33a..000000000000
--- a/drivers/crypto/vmx/aes_cbc.c
+++ b/drivers/crypto/vmx/aes_cbc.c
@@@ -55,12 -52,10 +55,17 @@@ static int p8_aes_cbc_init(struct crypt
  		       alg, PTR_ERR(fallback));
  		return PTR_ERR(fallback);
  	}
++<<<<<<< HEAD
 +	printk(KERN_INFO "Using '%s' as fallback implementation.\n",
 +	       crypto_tfm_alg_driver_name((struct crypto_tfm *) fallback));
 +
 +	crypto_blkcipher_set_flags(
++=======
+ 
+ 	crypto_skcipher_set_flags(
++>>>>>>> 1411b5218adb (crypto: vmx - Remove overly verbose printk from AES init routines)
  		fallback,
 -		crypto_skcipher_get_flags((struct crypto_skcipher *)tfm));
 +		crypto_blkcipher_get_flags((struct crypto_blkcipher *)tfm));
  	ctx->fallback = fallback;
  
  	return 0;
diff --cc drivers/crypto/vmx/aes_ctr.c
index 8f197401e410,cd777c75291d..000000000000
--- a/drivers/crypto/vmx/aes_ctr.c
+++ b/drivers/crypto/vmx/aes_ctr.c
@@@ -53,12 -50,10 +53,15 @@@ static int p8_aes_ctr_init(struct crypt
  		       alg, PTR_ERR(fallback));
  		return PTR_ERR(fallback);
  	}
++<<<<<<< HEAD
 +	printk(KERN_INFO "Using '%s' as fallback implementation.\n",
 +	       crypto_tfm_alg_driver_name((struct crypto_tfm *) fallback));
++=======
++>>>>>>> 1411b5218adb (crypto: vmx - Remove overly verbose printk from AES init routines)
  
 -	crypto_skcipher_set_flags(
 +	crypto_blkcipher_set_flags(
  		fallback,
 -		crypto_skcipher_get_flags((struct crypto_skcipher *)tfm));
 +		crypto_blkcipher_get_flags((struct crypto_blkcipher *)tfm));
  	ctx->fallback = fallback;
  
  	return 0;
diff --git a/drivers/crypto/vmx/aes.c b/drivers/crypto/vmx/aes.c
index 20539fb7e975..89545b65c688 100644
--- a/drivers/crypto/vmx/aes.c
+++ b/drivers/crypto/vmx/aes.c
@@ -53,8 +53,6 @@ static int p8_aes_init(struct crypto_tfm *tfm)
 		       alg, PTR_ERR(fallback));
 		return PTR_ERR(fallback);
 	}
-	printk(KERN_INFO "Using '%s' as fallback implementation.\n",
-	       crypto_tfm_alg_driver_name((struct crypto_tfm *) fallback));
 
 	crypto_cipher_set_flags(fallback,
 				crypto_cipher_get_flags((struct
* Unmerged path drivers/crypto/vmx/aes_cbc.c
* Unmerged path drivers/crypto/vmx/aes_ctr.c
diff --git a/drivers/crypto/vmx/ghash.c b/drivers/crypto/vmx/ghash.c
index 6d98ae1dc3c6..deca441f53f0 100644
--- a/drivers/crypto/vmx/ghash.c
+++ b/drivers/crypto/vmx/ghash.c
@@ -64,8 +64,6 @@ static int p8_ghash_init_tfm(struct crypto_tfm *tfm)
 		       alg, PTR_ERR(fallback));
 		return PTR_ERR(fallback);
 	}
-	printk(KERN_INFO "Using '%s' as fallback implementation.\n",
-	       crypto_tfm_alg_driver_name(crypto_shash_tfm(fallback)));
 
 	crypto_shash_set_flags(fallback,
 			       crypto_shash_get_flags((struct crypto_shash
