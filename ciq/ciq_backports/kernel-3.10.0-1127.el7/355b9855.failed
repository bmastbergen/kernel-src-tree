netns: provide pure entropy for net_hash_mix()

jira LE-1907
cve CVE-2019-10639
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 355b98553789b646ed97ad801a619ff898471b92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/355b9855.failed

net_hash_mix() currently uses kernel address of a struct net,
and is used in many places that could be used to reveal this
address to a patient attacker, thus defeating KASLR, for
the typical case (initial net namespace, &init_net is
not dynamically allocated)

I believe the original implementation tried to avoid spending
too many cycles in this function, but security comes first.

Also provide entropy regardless of CONFIG_NET_NS.

Fixes: 0b4419162aa6 ("netns: introduce the net_hash_mix "salt" for hashes")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Amit Klein <aksecurity@gmail.com>
	Reported-by: Benny Pinkas <benny@pinkas.net>
	Cc: Pavel Emelyanov <xemul@openvz.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 355b98553789b646ed97ad801a619ff898471b92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/net_namespace.h
#	include/net/netns/hash.h
#	net/core/net_namespace.c
diff --cc include/net/net_namespace.h
index dcc781304f20,12689ddfc24c..000000000000
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@@ -53,13 -59,24 +53,19 @@@ struct net 
  						 */
  	spinlock_t		rules_mod_lock;
  
++<<<<<<< HEAD
++=======
+ 	u32			hash_mix;
+ 	atomic64_t		cookie_gen;
+ 
++>>>>>>> 355b98553789 (netns: provide pure entropy for net_hash_mix())
  	struct list_head	list;		/* list of network namespaces */
 -	struct list_head	exit_list;	/* To linked to call pernet exit
 -						 * methods on dead net (
 -						 * pernet_ops_rwsem read locked),
 -						 * or to unregister pernet ops
 -						 * (pernet_ops_rwsem write locked).
 -						 */
 -	struct llist_node	cleanup_list;	/* namespaces on death row */
 +	struct list_head	cleanup_list;	/* namespaces on death row */
 +	struct list_head	exit_list;	/* Use only net_mutex */
  
  	struct user_namespace   *user_ns;	/* Owning user namespace */
 -	struct ucounts		*ucounts;
 -	spinlock_t		nsid_lock;
 -	struct idr		netns_ids;
  
 -	struct ns_common	ns;
 +	unsigned int		proc_inum;
  
  	struct proc_dir_entry 	*proc_net;
  	struct proc_dir_entry 	*proc_net_stat;
diff --cc include/net/netns/hash.h
index c06ac58ca107,d9b665151f3d..000000000000
--- a/include/net/netns/hash.h
+++ b/include/net/netns/hash.h
@@@ -1,21 -1,11 +1,23 @@@
  #ifndef __NET_NS_HASH_H__
  #define __NET_NS_HASH_H__
  
- #include <asm/cache.h>
- 
- struct net;
+ #include <net/net_namespace.h>
  
 -static inline u32 net_hash_mix(const struct net *net)
 +static inline unsigned int net_hash_mix(struct net *net)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_NET_NS
 +	/*
 +	 * shift this right to eliminate bits, that are
 +	 * always zeroed
 +	 */
 +
 +	return (unsigned)(((unsigned long)net) >> L1_CACHE_SHIFT);
 +#else
 +	return 0;
 +#endif
++=======
+ 	return net->hash_mix;
++>>>>>>> 355b98553789 (netns: provide pure entropy for net_hash_mix())
  }
  #endif
diff --cc net/core/net_namespace.c
index d2faeb90a774,7e6dcc625701..000000000000
--- a/net/core/net_namespace.c
+++ b/net/core/net_namespace.c
@@@ -289,8 -302,9 +289,14 @@@ static __net_init int setup_net(struct 
  	int error = 0;
  	LIST_HEAD(net_exit_list);
  
++<<<<<<< HEAD
 +	atomic_set(&net->count, 1);
 +	atomic_set(&net->passive, 1);
++=======
+ 	refcount_set(&net->count, 1);
+ 	refcount_set(&net->passive, 1);
+ 	get_random_bytes(&net->hash_mix, sizeof(u32));
++>>>>>>> 355b98553789 (netns: provide pure entropy for net_hash_mix())
  	net->dev_base_seq = 1;
  	net->user_ns = user_ns;
  	idr_init(&net->netns_ids);
* Unmerged path include/net/net_namespace.h
* Unmerged path include/net/netns/hash.h
* Unmerged path net/core/net_namespace.c
