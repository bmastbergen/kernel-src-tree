net/mlx5e: Replace TC VLAN pop with VLAN 0 rewrite in prio tag mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Eli Britstein <elibr@mellanox.com>
commit 0bac1194539753eca1c0fd9aca7a1764356bdc9f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/0bac1194.failed

Current ConnectX HW is unable to perform VLAN pop in TX path and VLAN
push on RX path. To workaround that limitation untagged packets are
tagged with VLAN ID 0x000 (priority tag) and pop/push actions are
replaced by VLAN re-write actions (which are supported by the HW).
Replace TC VLAN pop action with a VLAN priority tag header rewrite.

	Signed-off-by: Eli Britstein <elibr@mellanox.com>
	Reviewed-by: Oz Shlomo <ozsh@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 0bac1194539753eca1c0fd9aca7a1764356bdc9f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index c47f64762949,c79db55f8a76..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -2274,7 -2392,76 +2274,80 @@@ static bool same_hw_devs(struct mlx5e_p
  	return (fsystem_guid == psystem_guid);
  }
  
++<<<<<<< HEAD
 +static int parse_tc_nic_actions(struct mlx5e_priv *priv, struct tcf_exts *exts,
++=======
+ static int add_vlan_rewrite_action(struct mlx5e_priv *priv, int namespace,
+ 				   const struct flow_action_entry *act,
+ 				   struct mlx5e_tc_flow_parse_attr *parse_attr,
+ 				   struct pedit_headers_action *hdrs,
+ 				   u32 *action, struct netlink_ext_ack *extack)
+ {
+ 	u16 mask16 = VLAN_VID_MASK;
+ 	u16 val16 = act->vlan.vid & VLAN_VID_MASK;
+ 	const struct flow_action_entry pedit_act = {
+ 		.id = FLOW_ACTION_MANGLE,
+ 		.mangle.htype = FLOW_ACT_MANGLE_HDR_TYPE_ETH,
+ 		.mangle.offset = offsetof(struct vlan_ethhdr, h_vlan_TCI),
+ 		.mangle.mask = ~(u32)be16_to_cpu(*(__be16 *)&mask16),
+ 		.mangle.val = (u32)be16_to_cpu(*(__be16 *)&val16),
+ 	};
+ 	u8 match_prio_mask, match_prio_val;
+ 	void *headers_c, *headers_v;
+ 	int err;
+ 
+ 	headers_c = get_match_headers_criteria(*action, &parse_attr->spec);
+ 	headers_v = get_match_headers_value(*action, &parse_attr->spec);
+ 
+ 	if (!(MLX5_GET(fte_match_set_lyr_2_4, headers_c, cvlan_tag) &&
+ 	      MLX5_GET(fte_match_set_lyr_2_4, headers_v, cvlan_tag))) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "VLAN rewrite action must have VLAN protocol match");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	match_prio_mask = MLX5_GET(fte_match_set_lyr_2_4, headers_c, first_prio);
+ 	match_prio_val = MLX5_GET(fte_match_set_lyr_2_4, headers_v, first_prio);
+ 	if (act->vlan.prio != (match_prio_val & match_prio_mask)) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "Changing VLAN prio is not supported");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	err = parse_tc_pedit_action(priv, &pedit_act, namespace, parse_attr,
+ 				    hdrs, NULL);
+ 	*action |= MLX5_FLOW_CONTEXT_ACTION_MOD_HDR;
+ 
+ 	return err;
+ }
+ 
+ static int
+ add_vlan_prio_tag_rewrite_action(struct mlx5e_priv *priv,
+ 				 struct mlx5e_tc_flow_parse_attr *parse_attr,
+ 				 struct pedit_headers_action *hdrs,
+ 				 u32 *action, struct netlink_ext_ack *extack)
+ {
+ 	const struct flow_action_entry prio_tag_act = {
+ 		.vlan.vid = 0,
+ 		.vlan.prio =
+ 			MLX5_GET(fte_match_set_lyr_2_4,
+ 				 get_match_headers_value(*action,
+ 							 &parse_attr->spec),
+ 				 first_prio) &
+ 			MLX5_GET(fte_match_set_lyr_2_4,
+ 				 get_match_headers_criteria(*action,
+ 							    &parse_attr->spec),
+ 				 first_prio),
+ 	};
+ 
+ 	return add_vlan_rewrite_action(priv, MLX5_FLOW_NAMESPACE_FDB,
+ 				       &prio_tag_act, parse_attr, hdrs, action,
+ 				       extack);
+ }
+ 
+ static int parse_tc_nic_actions(struct mlx5e_priv *priv,
+ 				struct flow_action *flow_action,
++>>>>>>> 0bac11945397 (net/mlx5e: Replace TC VLAN pop with VLAN 0 rewrite in prio tag mode)
  				struct mlx5e_tc_flow_parse_attr *parse_attr,
  				struct mlx5e_tc_flow *flow,
  				struct netlink_ext_ack *extack)
@@@ -2732,11 -2963,42 +2805,41 @@@ static int parse_tc_fdb_actions(struct 
  			}
  			action |= MLX5_FLOW_CONTEXT_ACTION_COUNT;
  			attr->dest_chain = dest_chain;
 -			break;
 -			}
 -		default:
 -			NL_SET_ERR_MSG_MOD(extack, "The offload action is not supported");
 -			return -EOPNOTSUPP;
 -		}
 -	}
  
++<<<<<<< HEAD
 +			continue;
++=======
+ 	if (MLX5_CAP_GEN(esw->dev, prio_tag_required) &&
+ 	    action & MLX5_FLOW_CONTEXT_ACTION_VLAN_POP) {
+ 		/* For prio tag mode, replace vlan pop with rewrite vlan prio
+ 		 * tag rewrite.
+ 		 */
+ 		action &= ~MLX5_FLOW_CONTEXT_ACTION_VLAN_POP;
+ 		err = add_vlan_prio_tag_rewrite_action(priv, parse_attr, hdrs,
+ 						       &action, extack);
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	if (hdrs[TCA_PEDIT_KEY_EX_CMD_SET].pedits ||
+ 	    hdrs[TCA_PEDIT_KEY_EX_CMD_ADD].pedits) {
+ 		err = alloc_tc_pedit_action(priv, MLX5_FLOW_NAMESPACE_FDB,
+ 					    parse_attr, hdrs, &action, extack);
+ 		if (err)
+ 			return err;
+ 		/* in case all pedit actions are skipped, remove the MOD_HDR
+ 		 * flag. we might have set split_count either by pedit or
+ 		 * pop/push. if there is no pop/push either, reset it too.
+ 		 */
+ 		if (parse_attr->num_mod_hdr_actions == 0) {
+ 			action &= ~MLX5_FLOW_CONTEXT_ACTION_MOD_HDR;
+ 			if (!((action & MLX5_FLOW_CONTEXT_ACTION_VLAN_POP) ||
+ 			      (action & MLX5_FLOW_CONTEXT_ACTION_VLAN_PUSH)))
+ 				attr->split_count = 0;
++>>>>>>> 0bac11945397 (net/mlx5e: Replace TC VLAN pop with VLAN 0 rewrite in prio tag mode)
  		}
 +
 +		return -EINVAL;
  	}
  
  	attr->action = action;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
