xfs: remove unused flags arg from xfs_dquot_verify

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Eric Sandeen <sandeen@sandeen.net>
commit e381a0f6c28a3f2a452d5fba9b917f03e5dc4ffb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/e381a0f6.failed

Long ago the flags argument was used to determine whether to issue warnings
about corruptions, but that's done elsewhere now and the flag is unused
here, so remove it.

	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit e381a0f6c28a3f2a452d5fba9b917f03e5dc4ffb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_dquot_buf.c
#	fs/xfs/libxfs/xfs_quota_defs.h
#	fs/xfs/xfs_dquot.c
#	fs/xfs/xfs_log_recover.c
#	fs/xfs/xfs_qm.c
diff --cc fs/xfs/libxfs/xfs_dquot_buf.c
index 74b0867f3ece,a926058f7b0c..000000000000
--- a/fs/xfs/libxfs/xfs_dquot_buf.c
+++ b/fs/xfs/libxfs/xfs_dquot_buf.c
@@@ -47,12 -47,8 +47,16 @@@ xfs_dqcheck
  	struct xfs_mount *mp,
  	xfs_disk_dquot_t *ddq,
  	xfs_dqid_t	 id,
++<<<<<<< HEAD
 +	uint		 type,	  /* used only when IO_dorepair is true */
 +	uint		 flags,
 +	const char	 *str)
++=======
+ 	uint		 type)	  /* used only when IO_dorepair is true */
++>>>>>>> e381a0f6c28a (xfs: remove unused flags arg from xfs_dquot_verify)
  {
 +	int		errs = 0;
 +
  	/*
  	 * We can encounter an uninitialized dquot buffer for 2 reasons:
  	 * 1. If we crash while deleting the quotainode(s), and those blks got
@@@ -243,11 -199,21 +247,17 @@@ xfs_dquot_buf_verify
  		if (i == 0)
  			id = be32_to_cpu(ddq->d_id);
  
++<<<<<<< HEAD
 +		error = xfs_dqcheck(mp, ddq, id + i, 0, warn, __func__);
 +		if (error)
 +			return false;
++=======
+ 		fa = xfs_dquot_verify(mp, ddq, id + i, 0);
+ 		if (fa)
+ 			return fa;
++>>>>>>> e381a0f6c28a (xfs: remove unused flags arg from xfs_dquot_verify)
  	}
 -
 -	return NULL;
 -}
 -
 -static xfs_failaddr_t
 -xfs_dquot_buf_verify_struct(
 -	struct xfs_buf		*bp)
 -{
 -	struct xfs_mount	*mp = bp->b_target->bt_mount;
 -
 -	return xfs_dquot_buf_verify(mp, bp);
 +	return true;
  }
  
  static void
diff --cc fs/xfs/libxfs/xfs_quota_defs.h
index 7187ec93fc76,8433656af0da..000000000000
--- a/fs/xfs/libxfs/xfs_quota_defs.h
+++ b/fs/xfs/libxfs/xfs_quota_defs.h
@@@ -152,8 -151,8 +152,13 @@@ typedef uint16_t	xfs_qwarncnt_t
  		(XFS_QMOPT_UQUOTA | XFS_QMOPT_PQUOTA | XFS_QMOPT_GQUOTA)
  #define XFS_QMOPT_RESBLK_MASK	(XFS_QMOPT_RES_REGBLKS | XFS_QMOPT_RES_RTBLKS)
  
++<<<<<<< HEAD
 +extern int xfs_dqcheck(struct xfs_mount *mp, xfs_disk_dquot_t *ddq,
 +		       xfs_dqid_t id, uint type, uint flags, const char *str);
++=======
+ extern xfs_failaddr_t xfs_dquot_verify(struct xfs_mount *mp,
+ 		struct xfs_disk_dquot *ddq, xfs_dqid_t id, uint type);
++>>>>>>> e381a0f6c28a (xfs: remove unused flags arg from xfs_dquot_verify)
  extern int xfs_calc_dquots_per_chunk(unsigned int nbblks);
  extern int xfs_dquot_repair(struct xfs_mount *mp, struct xfs_disk_dquot *ddq,
  		xfs_dqid_t id, uint type);
diff --cc fs/xfs/xfs_dquot.c
index 7f1b77dc77fa,8d378f485260..000000000000
--- a/fs/xfs/xfs_dquot.c
+++ b/fs/xfs/xfs_dquot.c
@@@ -1010,9 -1001,10 +1010,16 @@@ xfs_qm_dqflush
  	/*
  	 * A simple sanity check in case we got a corrupted dquot..
  	 */
++<<<<<<< HEAD
 +	error = xfs_dqcheck(mp, &dqp->q_core, be32_to_cpu(ddqp->d_id), 0,
 +			   XFS_QMOPT_DOWARN, "dqflush (incore copy)");
 +	if (error) {
++=======
+ 	fa = xfs_dquot_verify(mp, &dqp->q_core, be32_to_cpu(ddqp->d_id), 0);
+ 	if (fa) {
+ 		xfs_alert(mp, "corrupt dquot ID 0x%x in memory at %pS",
+ 				be32_to_cpu(ddqp->d_id), fa);
++>>>>>>> e381a0f6c28a (xfs: remove unused flags arg from xfs_dquot_verify)
  		xfs_buf_relse(bp);
  		xfs_dqfunlock(dqp);
  		xfs_force_shutdown(mp, SHUTDOWN_CORRUPT_INCORE);
diff --cc fs/xfs/xfs_log_recover.c
index 9925c8ea78f2,06a09cb948b5..000000000000
--- a/fs/xfs/xfs_log_recover.c
+++ b/fs/xfs/xfs_log_recover.c
@@@ -2684,11 -2701,14 +2684,20 @@@ xlog_recover_do_reg_buffer
  					item->ri_buf[i].i_len, __func__);
  				goto next;
  			}
++<<<<<<< HEAD
 +			error = xfs_dqcheck(mp, item->ri_buf[i].i_addr,
 +					       -1, 0, XFS_QMOPT_DOWARN,
 +					       "dquot_buf_recover");
 +			if (error)
++=======
+ 			fa = xfs_dquot_verify(mp, item->ri_buf[i].i_addr,
+ 					       -1, 0);
+ 			if (fa) {
+ 				xfs_alert(mp,
+ 	"dquot corrupt at %pS trying to replay into block 0x%llx",
+ 					fa, bp->b_bn);
++>>>>>>> e381a0f6c28a (xfs: remove unused flags arg from xfs_dquot_verify)
  				goto next;
 -			}
  		}
  
  		memcpy(xfs_buf_offset(bp,
@@@ -3330,10 -3348,12 +3339,17 @@@ xlog_recover_dquot_pass2
  	 */
  	dq_f = item->ri_buf[0].i_addr;
  	ASSERT(dq_f);
++<<<<<<< HEAD
 +	error = xfs_dqcheck(mp, recddq, dq_f->qlf_id, 0, XFS_QMOPT_DOWARN,
 +			   "xlog_recover_dquot_pass2 (log copy)");
 +	if (error)
++=======
+ 	fa = xfs_dquot_verify(mp, recddq, dq_f->qlf_id, 0);
+ 	if (fa) {
+ 		xfs_alert(mp, "corrupt dquot ID 0x%x in log at %pS",
+ 				dq_f->qlf_id, fa);
++>>>>>>> e381a0f6c28a (xfs: remove unused flags arg from xfs_dquot_verify)
  		return -EIO;
 -	}
  	ASSERT(dq_f->qlf_len == 1);
  
  	/*
diff --cc fs/xfs/xfs_qm.c
index f3f3d4e5a473,e641a507d0ed..000000000000
--- a/fs/xfs/xfs_qm.c
+++ b/fs/xfs/xfs_qm.c
@@@ -725,10 -862,11 +725,15 @@@ xfs_qm_reset_dqcounts
  		/*
  		 * Do a sanity check, and if needed, repair the dqblk. Don't
  		 * output any warnings because it's perfectly possible to
 -		 * find uninitialised dquot blks. See comment in
 -		 * xfs_dquot_verify.
 +		 * find uninitialised dquot blks. See comment in xfs_dqcheck.
  		 */
++<<<<<<< HEAD
 +		error = xfs_dqcheck(mp, ddq, id+j, type, 0, "xfs_quotacheck");
 +		if (error)
++=======
+ 		fa = xfs_dquot_verify(mp, ddq, id + j, type);
+ 		if (fa)
++>>>>>>> e381a0f6c28a (xfs: remove unused flags arg from xfs_dquot_verify)
  			xfs_dquot_repair(mp, ddq, id + j, type);
  
  		/*
* Unmerged path fs/xfs/libxfs/xfs_dquot_buf.c
* Unmerged path fs/xfs/libxfs/xfs_quota_defs.h
* Unmerged path fs/xfs/xfs_dquot.c
* Unmerged path fs/xfs/xfs_log_recover.c
* Unmerged path fs/xfs/xfs_qm.c
