tun: call dev_get_valid_name() before register_netdevice()

jira LE-1907
cve CVE-2018-7191
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit 0ad646c81b2182f7fa67ec0c8c825e0ee165696d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/0ad646c8.failed

register_netdevice() could fail early when we have an invalid
dev name, in which case ->ndo_uninit() is not called. For tun
device, this is a problem because a timer etc. are already
initialized and it expects ->ndo_uninit() to clean them up.

We could move these initializations into a ->ndo_init() so
that register_netdevice() knows better, however this is still
complicated due to the logic in tun_detach().

Therefore, I choose to just call dev_get_valid_name() before
register_netdevice(), which is quicker and much easier to audit.
And for this specific case, it is already enough.

Fixes: 96442e42429e ("tuntap: choose the txq based on rxq")
	Reported-by: Dmitry Alexeev <avekceeb@gmail.com>
	Cc: Jason Wang <jasowang@redhat.com>
	Cc: "Michael S. Tsirkin" <mst@redhat.com>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0ad646c81b2182f7fa67ec0c8c825e0ee165696d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index 9041a8ab11bb,2eaac7d75af4..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -3889,13 -3691,18 +3889,21 @@@ void ether_setup_rh(struct net_device *
  
  /* Support for loadable net-drivers */
  struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
 -				    unsigned char name_assign_type,
  				    void (*setup)(struct net_device *),
  				    unsigned int txqs, unsigned int rxqs);
++<<<<<<< HEAD
 +#define alloc_netdev(sizeof_priv, name, setup) \
 +	alloc_netdev_mqs(sizeof_priv, name, setup, 1, 1)
++=======
+ int dev_get_valid_name(struct net *net, struct net_device *dev,
+ 		       const char *name);
+ 
+ #define alloc_netdev(sizeof_priv, name, name_assign_type, setup) \
+ 	alloc_netdev_mqs(sizeof_priv, name, name_assign_type, setup, 1, 1)
++>>>>>>> 0ad646c81b21 (tun: call dev_get_valid_name() before register_netdevice())
  
 -#define alloc_netdev_mq(sizeof_priv, name, name_assign_type, setup, count) \
 -	alloc_netdev_mqs(sizeof_priv, name, name_assign_type, setup, count, \
 -			 count)
 +#define alloc_netdev_mq(sizeof_priv, name, setup, count) \
 +	alloc_netdev_mqs(sizeof_priv, name, setup, count, count)
  
  int register_netdev(struct net_device *dev);
  void unregister_netdev(struct net_device *dev);
diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index 4cdb9597f760..92ee36a4e672 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -2046,6 +2046,9 @@ static int tun_set_iff(struct net *net, struct file *file, struct ifreq *ifr)
 
 		if (!dev)
 			return -ENOMEM;
+		err = dev_get_valid_name(net, dev, name);
+		if (err)
+			goto err_free_dev;
 
 		dev_net_set(dev, net);
 		dev->rtnl_link_ops = &tun_link_ops;
* Unmerged path include/linux/netdevice.h
diff --git a/net/core/dev.c b/net/core/dev.c
index 84e839c661b4..2ea94fbe4bf1 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -1148,9 +1148,8 @@ static int dev_alloc_name_ns(struct net *net,
 	return ret;
 }
 
-static int dev_get_valid_name(struct net *net,
-			      struct net_device *dev,
-			      const char *name)
+int dev_get_valid_name(struct net *net, struct net_device *dev,
+		       const char *name)
 {
 	BUG_ON(!net);
 
@@ -1166,6 +1165,7 @@ static int dev_get_valid_name(struct net *net,
 
 	return 0;
 }
+EXPORT_SYMBOL(dev_get_valid_name);
 
 /**
  *	dev_change_name - change name of a device
