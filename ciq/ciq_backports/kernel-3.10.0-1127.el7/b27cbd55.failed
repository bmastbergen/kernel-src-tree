scsi: lpfc: Remove set-but-not-used variables

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Bart Van Assche <bvanassche@acm.org>
commit b27cbd5549509397c6e85b8aed1d9e95538c919e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/b27cbd55.failed

This patch does not change any functionality but avoids that the compiler
complains about set-but-not-used variables when building with W=1.

	Cc: James Smart <james.smart@broadcom.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Acked-by: James Smart <james.smart@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit b27cbd5549509397c6e85b8aed1d9e95538c919e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_nportdisc.c
#	drivers/scsi/lpfc/lpfc_nvmet.c
diff --cc drivers/scsi/lpfc/lpfc_nportdisc.c
index 0df7f153cd0d,59252bfca14e..000000000000
--- a/drivers/scsi/lpfc/lpfc_nportdisc.c
+++ b/drivers/scsi/lpfc/lpfc_nportdisc.c
@@@ -1805,9 -1804,9 +1804,15 @@@ lpfc_cmpl_reglogin_reglogin_issue(struc
  			 * should just issue PRLI for FCP. Otherwise issue
  			 * GFT_ID to determine if remote port supports NVME.
  			 */
++<<<<<<< HEAD
 +			if (phba->cfg_enable_fc4_type != LPFC_ENABLE_FCP) {
 +				rc = lpfc_ns_cmd(vport, SLI_CTNS_GFT_ID,
 +						 0, ndlp->nlp_DID);
++=======
+ 			if (vport->cfg_enable_fc4_type != LPFC_ENABLE_FCP) {
+ 				lpfc_ns_cmd(vport, SLI_CTNS_GFT_ID, 0,
+ 					    ndlp->nlp_DID);
++>>>>>>> b27cbd554950 (scsi: lpfc: Remove set-but-not-used variables)
  				return ndlp->nlp_state;
  			}
  			ndlp->nlp_fc4_type = NLP_FC4_FCP;
diff --cc drivers/scsi/lpfc/lpfc_nvmet.c
index 6a1265b7c114,c125598089e2..000000000000
--- a/drivers/scsi/lpfc/lpfc_nvmet.c
+++ b/drivers/scsi/lpfc/lpfc_nvmet.c
@@@ -324,8 -325,7 +324,12 @@@ lpfc_nvmet_ctxbuf_post(struct lpfc_hba 
  	struct fc_frame_header *fc_hdr;
  	struct rqb_dmabuf *nvmebuf;
  	struct lpfc_nvmet_ctx_info *infop;
++<<<<<<< HEAD
 +	uint32_t *payload;
 +	uint32_t size, oxid, sid, rc;
++=======
+ 	uint32_t size, oxid, sid;
++>>>>>>> b27cbd554950 (scsi: lpfc: Remove set-but-not-used variables)
  	int cpu;
  	unsigned long iflag;
  
@@@ -1901,13 -2021,9 +1904,17 @@@ lpfc_nvmet_unsol_fcp_buffer(struct lpfc
  	struct fc_frame_header *fc_hdr;
  	struct lpfc_nvmet_ctxbuf *ctx_buf;
  	struct lpfc_nvmet_ctx_info *current_infop;
++<<<<<<< HEAD
 +	uint32_t *payload;
 +	uint32_t size, oxid, sid, rc, qno;
++=======
+ 	uint32_t size, oxid, sid, qno;
++>>>>>>> b27cbd554950 (scsi: lpfc: Remove set-but-not-used variables)
  	unsigned long iflag;
  	int current_cpu;
 +#ifdef CONFIG_SCSI_LPFC_DEBUG_FS
 +	uint32_t id;
 +#endif
  
  	if (!IS_ENABLED(CONFIG_NVME_TARGET_FC))
  		return;
diff --git a/drivers/scsi/lpfc/lpfc_els.c b/drivers/scsi/lpfc/lpfc_els.c
index 81fb79b430bd..e5efdc581d0c 100644
--- a/drivers/scsi/lpfc/lpfc_els.c
+++ b/drivers/scsi/lpfc/lpfc_els.c
@@ -1961,7 +1961,7 @@ lpfc_cmpl_els_plogi(struct lpfc_hba *phba, struct lpfc_iocbq *cmdiocb,
 	IOCB_t *irsp;
 	struct lpfc_nodelist *ndlp;
 	struct lpfc_dmabuf *prsp;
-	int disc, rc;
+	int disc;
 
 	/* we pass cmdiocb to state machine which needs rspiocb as well */
 	cmdiocb->context_un.rsp_iocb = rspiocb;
@@ -1990,7 +1990,6 @@ lpfc_cmpl_els_plogi(struct lpfc_hba *phba, struct lpfc_iocbq *cmdiocb,
 	disc = (ndlp->nlp_flag & NLP_NPR_2B_DISC);
 	ndlp->nlp_flag &= ~NLP_NPR_2B_DISC;
 	spin_unlock_irq(shost->host_lock);
-	rc = 0;
 
 	/* PLOGI completes to NPort <nlp_DID> */
 	lpfc_printf_vlog(vport, KERN_INFO, LOG_ELS,
@@ -2029,18 +2028,16 @@ lpfc_cmpl_els_plogi(struct lpfc_hba *phba, struct lpfc_iocbq *cmdiocb,
 				 ndlp->nlp_DID, irsp->ulpStatus,
 				 irsp->un.ulpWord[4]);
 		/* Do not call DSM for lpfc_els_abort'ed ELS cmds */
-		if (lpfc_error_lost_link(irsp))
-			rc = NLP_STE_FREED_NODE;
-		else
-			rc = lpfc_disc_state_machine(vport, ndlp, cmdiocb,
-						     NLP_EVT_CMPL_PLOGI);
+		if (!lpfc_error_lost_link(irsp))
+			lpfc_disc_state_machine(vport, ndlp, cmdiocb,
+						NLP_EVT_CMPL_PLOGI);
 	} else {
 		/* Good status, call state machine */
 		prsp = list_entry(((struct lpfc_dmabuf *)
 				   cmdiocb->context2)->list.next,
 				  struct lpfc_dmabuf, list);
 		ndlp = lpfc_plogi_confirm_nport(phba, prsp->virt, ndlp);
-		rc = lpfc_disc_state_machine(vport, ndlp, cmdiocb,
+		lpfc_disc_state_machine(vport, ndlp, cmdiocb,
 					     NLP_EVT_CMPL_PLOGI);
 	}
 
@@ -6742,12 +6739,11 @@ lpfc_els_rcv_rnid(struct lpfc_vport *vport, struct lpfc_iocbq *cmdiocb,
 	uint32_t *lp;
 	RNID *rn;
 	struct ls_rjt stat;
-	uint32_t cmd;
 
 	pcmd = (struct lpfc_dmabuf *) cmdiocb->context2;
 	lp = (uint32_t *) pcmd->virt;
 
-	cmd = *lp++;
+	lp++;
 	rn = (RNID *) lp;
 
 	/* RNID received */
@@ -7506,14 +7502,14 @@ lpfc_els_rcv_farp(struct lpfc_vport *vport, struct lpfc_iocbq *cmdiocb,
 	uint32_t *lp;
 	IOCB_t *icmd;
 	FARP *fp;
-	uint32_t cmd, cnt, did;
+	uint32_t cnt, did;
 
 	icmd = &cmdiocb->iocb;
 	did = icmd->un.elsreq64.remoteID;
 	pcmd = (struct lpfc_dmabuf *) cmdiocb->context2;
 	lp = (uint32_t *) pcmd->virt;
 
-	cmd = *lp++;
+	lp++;
 	fp = (FARP *) lp;
 	/* FARP-REQ received from DID <did> */
 	lpfc_printf_vlog(vport, KERN_INFO, LOG_ELS,
@@ -7578,14 +7574,14 @@ lpfc_els_rcv_farpr(struct lpfc_vport *vport, struct lpfc_iocbq *cmdiocb,
 	struct lpfc_dmabuf *pcmd;
 	uint32_t *lp;
 	IOCB_t *icmd;
-	uint32_t cmd, did;
+	uint32_t did;
 
 	icmd = &cmdiocb->iocb;
 	did = icmd->un.elsreq64.remoteID;
 	pcmd = (struct lpfc_dmabuf *) cmdiocb->context2;
 	lp = (uint32_t *) pcmd->virt;
 
-	cmd = *lp++;
+	lp++;
 	/* FARP-RSP received from DID <did> */
 	lpfc_printf_vlog(vport, KERN_INFO, LOG_ELS,
 			 "0600 FARP-RSP received from DID x%x\n", did);
* Unmerged path drivers/scsi/lpfc/lpfc_nportdisc.c
* Unmerged path drivers/scsi/lpfc/lpfc_nvmet.c
