net: socket: set sock->sk to NULL after calling proto_ops::release()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [net] socket: set sock->sk to NULL after calling proto_ops::release() (Bruno Eduardo de Oliveira Meneguele) [1548921]
Rebuild_FUZZ: 96.18%
commit-author Eric Biggers <ebiggers@google.com>
commit ff7b11aa481f682e0e9711abfeb7d03f5cd612bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/ff7b11aa.failed

Commit 9060cb719e61 ("net: crypto set sk to NULL when af_alg_release.")
fixed a use-after-free in sockfs_setattr() when an AF_ALG socket is
closed concurrently with fchownat().  However, it ignored that many
other proto_ops::release() methods don't set sock->sk to NULL and
therefore allow the same use-after-free:

    - base_sock_release
    - bnep_sock_release
    - cmtp_sock_release
    - data_sock_release
    - dn_release
    - hci_sock_release
    - hidp_sock_release
    - iucv_sock_release
    - l2cap_sock_release
    - llcp_sock_release
    - llc_ui_release
    - rawsock_release
    - rfcomm_sock_release
    - sco_sock_release
    - svc_release
    - vcc_release
    - x25_release

Rather than fixing all these and relying on every socket type to get
this right forever, just make __sock_release() set sock->sk to NULL
itself after calling proto_ops::release().

Reproducer that produces the KASAN splat when any of these socket types
are configured into the kernel:

    #include <pthread.h>
    #include <stdlib.h>
    #include <sys/socket.h>
    #include <unistd.h>

    pthread_t t;
    volatile int fd;

    void *close_thread(void *arg)
    {
        for (;;) {
            usleep(rand() % 100);
            close(fd);
        }
    }

    int main()
    {
        pthread_create(&t, NULL, close_thread, NULL);
        for (;;) {
            fd = socket(rand() % 50, rand() % 11, 0);
            fchownat(fd, "", 1000, 1000, 0x1000);
            close(fd);
        }
    }

Fixes: 86741ec25462 ("net: core: Add a UID field to struct sock.")
	Signed-off-by: Eric Biggers <ebiggers@google.com>
	Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ff7b11aa481f682e0e9711abfeb7d03f5cd612bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/socket.c
diff --cc net/socket.c
index 99af33f73ea8,320f51b22b19..000000000000
--- a/net/socket.c
+++ b/net/socket.c
@@@ -568,7 -574,12 +568,13 @@@ void sock_release(struct socket *sock
  	if (sock->ops) {
  		struct module *owner = sock->ops->owner;
  
 -		if (inode)
 -			inode_lock(inode);
  		sock->ops->release(sock);
++<<<<<<< HEAD
++=======
+ 		sock->sk = NULL;
+ 		if (inode)
+ 			inode_unlock(inode);
++>>>>>>> ff7b11aa481f (net: socket: set sock->sk to NULL after calling proto_ops::release())
  		sock->ops = NULL;
  		module_put(owner);
  	}
* Unmerged path net/socket.c
