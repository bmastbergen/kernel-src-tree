percpu: setup_first_chunk remove dyn_size and consolidate logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Dennis Zhou (Facebook) <dennisszhou@gmail.com>
commit b9c39442ceffb202b98a88d492347eae125c5ba2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/b9c39442.failed

There is logic for setting variables in the static chunk init code that
could be consolidated with the dynamic chunk init code. This combines
this logic to setup for combining the allocation paths. reserved_size is
used as the conditional as a dynamic region will always exist.

	Signed-off-by: Dennis Zhou <dennisszhou@gmail.com>
	Reviewed-by: Josef Bacik <jbacik@fb.com>
	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit b9c39442ceffb202b98a88d492347eae125c5ba2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/percpu.c
diff --cc mm/percpu.c
index 3c1f6f694380,851aa8109788..000000000000
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@@ -1681,25 -1689,17 +1680,31 @@@ int __init pcpu_setup_first_chunk(cons
  	bitmap_fill(schunk->populated, pcpu_unit_pages);
  	schunk->nr_populated = pcpu_unit_pages;
  
++<<<<<<< HEAD
 +	if (ai->reserved_size) {
 +		schunk->free_size = ai->reserved_size;
 +		pcpu_reserved_chunk = schunk;
 +		pcpu_reserved_chunk_limit = ai->static_size + ai->reserved_size;
 +	} else {
 +		schunk->free_size = dyn_size;
 +		dyn_size = 0;			/* dynamic area covered */
 +	}
++=======
+ 	schunk->free_size = ai->reserved_size ?: ai->dyn_size;
++>>>>>>> b9c39442ceff (percpu: setup_first_chunk remove dyn_size and consolidate logic)
  	schunk->contig_hint = schunk->free_size;
 +
  	schunk->map[0] = 1;
 -	schunk->map[1] = schunk->start_offset;
 -	schunk->map[2] = (ai->static_size + schunk->free_size) | 1;
 -	schunk->map_used = 2;
 +	schunk->map[1] = ai->static_size;
 +	schunk->map_used = 1;
 +	if (schunk->free_size)
 +		schunk->map[++schunk->map_used] = ai->static_size + schunk->free_size;
 +	schunk->map[schunk->map_used] |= 1;
  
  	/* init dynamic chunk if necessary */
- 	if (dyn_size) {
+ 	if (ai->reserved_size) {
+ 		pcpu_reserved_chunk = schunk;
+ 
  		dchunk = memblock_virt_alloc(pcpu_chunk_struct_size, 0);
  		INIT_LIST_HEAD(&dchunk->list);
  		INIT_LIST_HEAD(&dchunk->map_extend_list);
@@@ -1710,10 -1711,10 +1715,10 @@@
  		bitmap_fill(dchunk->populated, pcpu_unit_pages);
  		dchunk->nr_populated = pcpu_unit_pages;
  
- 		dchunk->contig_hint = dchunk->free_size = dyn_size;
+ 		dchunk->contig_hint = dchunk->free_size = ai->dyn_size;
  		dchunk->map[0] = 1;
 -		dchunk->map[1] = dchunk->start_offset;
 -		dchunk->map[2] = (dchunk->start_offset + dchunk->free_size) | 1;
 +		dchunk->map[1] = pcpu_reserved_chunk_limit;
 +		dchunk->map[2] = (pcpu_reserved_chunk_limit + dchunk->free_size) | 1;
  		dchunk->map_used = 2;
  	}
  
* Unmerged path mm/percpu.c
