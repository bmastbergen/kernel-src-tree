x86/tsx: Add config options to set tsx=on|off|auto

jira LE-1907
cve CVE-2019-11135
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Michal Hocko <mhocko@suse.com>
commit db616173d787395787ecc93eef075fa975227b10
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/db616173.failed

There is a general consensus that TSX usage is not largely spread while
the history shows there is a non trivial space for side channel attacks
possible. Therefore the tsx is disabled by default even on platforms
that might have a safe implementation of TSX according to the current
knowledge. This is a fair trade off to make.

There are, however, workloads that really do benefit from using TSX and
updating to a newer kernel with TSX disabled might introduce a
noticeable regressions. This would be especially a problem for Linux
distributions which will provide TAA mitigations.

Introduce config options X86_INTEL_TSX_MODE_OFF, X86_INTEL_TSX_MODE_ON
and X86_INTEL_TSX_MODE_AUTO to control the TSX feature. The config
setting can be overridden by the tsx cmdline options.

 [ bp: Text cleanups from Josh. ]

	Suggested-by: Borislav Petkov <bpetkov@suse.de>
	Signed-off-by: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
(cherry picked from commit db616173d787395787ecc93eef075fa975227b10)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/kernel/cpu/tsx.c
diff --cc arch/x86/Kconfig
index 804be7721b44,8ef85139553f..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1762,6 -1880,111 +1762,114 @@@ config X86_SMA
  
  	  If unsure, say Y.
  
++<<<<<<< HEAD
++=======
+ config X86_INTEL_UMIP
+ 	def_bool y
+ 	depends on CPU_SUP_INTEL
+ 	prompt "Intel User Mode Instruction Prevention" if EXPERT
+ 	---help---
+ 	  The User Mode Instruction Prevention (UMIP) is a security
+ 	  feature in newer Intel processors. If enabled, a general
+ 	  protection fault is issued if the SGDT, SLDT, SIDT, SMSW
+ 	  or STR instructions are executed in user mode. These instructions
+ 	  unnecessarily expose information about the hardware state.
+ 
+ 	  The vast majority of applications do not use these instructions.
+ 	  For the very few that do, software emulation is provided in
+ 	  specific cases in protected and virtual-8086 modes. Emulated
+ 	  results are dummy.
+ 
+ config X86_INTEL_MPX
+ 	prompt "Intel MPX (Memory Protection Extensions)"
+ 	def_bool n
+ 	# Note: only available in 64-bit mode due to VMA flags shortage
+ 	depends on CPU_SUP_INTEL && X86_64
+ 	select ARCH_USES_HIGH_VMA_FLAGS
+ 	---help---
+ 	  MPX provides hardware features that can be used in
+ 	  conjunction with compiler-instrumented code to check
+ 	  memory references.  It is designed to detect buffer
+ 	  overflow or underflow bugs.
+ 
+ 	  This option enables running applications which are
+ 	  instrumented or otherwise use MPX.  It does not use MPX
+ 	  itself inside the kernel or to protect the kernel
+ 	  against bad memory references.
+ 
+ 	  Enabling this option will make the kernel larger:
+ 	  ~8k of kernel text and 36 bytes of data on a 64-bit
+ 	  defconfig.  It adds a long to the 'mm_struct' which
+ 	  will increase the kernel memory overhead of each
+ 	  process and adds some branches to paths used during
+ 	  exec() and munmap().
+ 
+ 	  For details, see Documentation/x86/intel_mpx.rst
+ 
+ 	  If unsure, say N.
+ 
+ config X86_INTEL_MEMORY_PROTECTION_KEYS
+ 	prompt "Intel Memory Protection Keys"
+ 	def_bool y
+ 	# Note: only available in 64-bit mode
+ 	depends on CPU_SUP_INTEL && X86_64
+ 	select ARCH_USES_HIGH_VMA_FLAGS
+ 	select ARCH_HAS_PKEYS
+ 	---help---
+ 	  Memory Protection Keys provides a mechanism for enforcing
+ 	  page-based protections, but without requiring modification of the
+ 	  page tables when an application changes protection domains.
+ 
+ 	  For details, see Documentation/core-api/protection-keys.rst
+ 
+ 	  If unsure, say y.
+ 
+ choice
+ 	prompt "TSX enable mode"
+ 	depends on CPU_SUP_INTEL
+ 	default X86_INTEL_TSX_MODE_OFF
+ 	help
+ 	  Intel's TSX (Transactional Synchronization Extensions) feature
+ 	  allows to optimize locking protocols through lock elision which
+ 	  can lead to a noticeable performance boost.
+ 
+ 	  On the other hand it has been shown that TSX can be exploited
+ 	  to form side channel attacks (e.g. TAA) and chances are there
+ 	  will be more of those attacks discovered in the future.
+ 
+ 	  Therefore TSX is not enabled by default (aka tsx=off). An admin
+ 	  might override this decision by tsx=on the command line parameter.
+ 	  Even with TSX enabled, the kernel will attempt to enable the best
+ 	  possible TAA mitigation setting depending on the microcode available
+ 	  for the particular machine.
+ 
+ 	  This option allows to set the default tsx mode between tsx=on, =off
+ 	  and =auto. See Documentation/admin-guide/kernel-parameters.txt for more
+ 	  details.
+ 
+ 	  Say off if not sure, auto if TSX is in use but it should be used on safe
+ 	  platforms or on if TSX is in use and the security aspect of tsx is not
+ 	  relevant.
+ 
+ config X86_INTEL_TSX_MODE_OFF
+ 	bool "off"
+ 	help
+ 	  TSX is disabled if possible - equals to tsx=off command line parameter.
+ 
+ config X86_INTEL_TSX_MODE_ON
+ 	bool "on"
+ 	help
+ 	  TSX is always enabled on TSX capable HW - equals the tsx=on command
+ 	  line parameter.
+ 
+ config X86_INTEL_TSX_MODE_AUTO
+ 	bool "auto"
+ 	help
+ 	  TSX is enabled on TSX capable HW that is believed to be safe against
+ 	  side channel attacks- equals the tsx=auto command line parameter.
+ endchoice
+ 
++>>>>>>> db616173d787 (x86/tsx: Add config options to set tsx=on|off|auto)
  config EFI
  	bool "EFI runtime service support"
  	depends on ACPI
* Unmerged path arch/x86/kernel/cpu/tsx.c
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/kernel/cpu/tsx.c
