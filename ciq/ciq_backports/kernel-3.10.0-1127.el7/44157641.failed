drm/i915: Disable Secure Batches for gen6+

jira LE-1907
cve CVE-2019-0155
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Jon Bloomfield <jon.bloomfield@intel.com>
commit 44157641d448cbc0c4b73c5231d2b911f0cb0427
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/44157641.failed

Retroactively stop reporting support for secure batches
through the api for gen6+ so that older binaries trigger
the fallback path instead.

Older binaries use secure batches pre gen6 to access resources
that are not available to normal usermode processes. However,
all known userspace explicitly checks for HAS_SECURE_BATCHES
before relying on the secure batch feature.

Since there are no known binaries relying on this for newer gens
we can kill secure batches from gen6, via I915_PARAM_HAS_SECURE_BATCHES.

v2: rebase (Mika)
v3: rebase (Mika)

	Signed-off-by: Jon Bloomfield <jon.bloomfield@intel.com>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: Dave Airlie <airlied@redhat.com>
	Cc: Takashi Iwai <tiwai@suse.de>
	Cc: Tyler Hicks <tyhicks@canonical.com>
	Signed-off-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
	Reviewed-by: Chris Wilson <chris.p.wilson@intel.com>
(cherry picked from commit 44157641d448cbc0c4b73c5231d2b911f0cb0427)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_drv.h
#	drivers/gpu/drm/i915/i915_getparam.c
diff --cc drivers/gpu/drm/i915/i915_drv.h
index d21ed89e6f74,68974df69f2f..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -2367,51 -2058,27 +2367,58 @@@ intel_info(const struct drm_i915_privat
  #define IS_ICL_REVID(p, since, until) \
  	(IS_ICELAKE(p) && IS_REVID(p, since, until))
  
 -#define IS_LP(dev_priv)	(INTEL_INFO(dev_priv)->is_lp)
 -#define IS_GEN9_LP(dev_priv)	(IS_GEN(dev_priv, 9) && IS_LP(dev_priv))
 -#define IS_GEN9_BC(dev_priv)	(IS_GEN(dev_priv, 9) && !IS_LP(dev_priv))
 -
 -#define HAS_ENGINE(dev_priv, id) (INTEL_INFO(dev_priv)->engine_mask & BIT(id))
 -
 -#define ENGINE_INSTANCES_MASK(dev_priv, first, count) ({		\
 -	unsigned int first__ = (first);					\
 -	unsigned int count__ = (count);					\
 -	(INTEL_INFO(dev_priv)->engine_mask &				\
 -	 GENMASK(first__ + count__ - 1, first__)) >> first__;		\
 -})
 -#define VDBOX_MASK(dev_priv) \
 -	ENGINE_INSTANCES_MASK(dev_priv, VCS0, I915_MAX_VCS)
 -#define VEBOX_MASK(dev_priv) \
 -	ENGINE_INSTANCES_MASK(dev_priv, VECS0, I915_MAX_VECS)
 +/*
 + * The genX designation typically refers to the render engine, so render
 + * capability related checks should use IS_GEN, while display and other checks
 + * have their own (e.g. HAS_PCH_SPLIT for ILK+ display, IS_foo for particular
 + * chips, etc.).
 + */
 +#define IS_GEN2(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(1)))
 +#define IS_GEN3(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(2)))
 +#define IS_GEN4(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(3)))
 +#define IS_GEN5(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(4)))
 +#define IS_GEN6(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(5)))
 +#define IS_GEN7(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(6)))
 +#define IS_GEN8(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(7)))
 +#define IS_GEN9(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(8)))
 +#define IS_GEN10(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(9)))
 +#define IS_GEN11(dev_priv)	(!!((dev_priv)->info.gen_mask & BIT(10)))
  
 +#define IS_LP(dev_priv)	(INTEL_INFO(dev_priv)->is_lp)
 +#define IS_GEN9_LP(dev_priv)	(IS_GEN9(dev_priv) && IS_LP(dev_priv))
 +#define IS_GEN9_BC(dev_priv)	(IS_GEN9(dev_priv) && !IS_LP(dev_priv))
 +
 +#define ENGINE_MASK(id)	BIT(id)
 +#define RENDER_RING	ENGINE_MASK(RCS)
 +#define BSD_RING	ENGINE_MASK(VCS)
 +#define BLT_RING	ENGINE_MASK(BCS)
 +#define VEBOX_RING	ENGINE_MASK(VECS)
 +#define BSD2_RING	ENGINE_MASK(VCS2)
 +#define BSD3_RING	ENGINE_MASK(VCS3)
 +#define BSD4_RING	ENGINE_MASK(VCS4)
 +#define VEBOX2_RING	ENGINE_MASK(VECS2)
 +#define ALL_ENGINES	(~0)
 +
 +#define HAS_ENGINE(dev_priv, id) \
 +	(!!((dev_priv)->info.ring_mask & ENGINE_MASK(id)))
 +
++<<<<<<< HEAD
 +#define HAS_BSD(dev_priv)	HAS_ENGINE(dev_priv, VCS)
 +#define HAS_BSD2(dev_priv)	HAS_ENGINE(dev_priv, VCS2)
 +#define HAS_BLT(dev_priv)	HAS_ENGINE(dev_priv, BCS)
 +#define HAS_VEBOX(dev_priv)	HAS_ENGINE(dev_priv, VECS)
 +
 +#define HAS_LEGACY_SEMAPHORES(dev_priv) IS_GEN7(dev_priv)
 +
 +#define HAS_LLC(dev_priv)	((dev_priv)->info.has_llc)
 +#define HAS_SNOOP(dev_priv)	((dev_priv)->info.has_snoop)
 +#define HAS_EDRAM(dev_priv)	(!!((dev_priv)->edram_cap & EDRAM_ENABLED))
++=======
+ #define HAS_LLC(dev_priv)	(INTEL_INFO(dev_priv)->has_llc)
+ #define HAS_SNOOP(dev_priv)	(INTEL_INFO(dev_priv)->has_snoop)
+ #define HAS_EDRAM(dev_priv)	((dev_priv)->edram_size_mb)
+ #define HAS_SECURE_BATCHES(dev_priv) (INTEL_GEN(dev_priv) < 6)
++>>>>>>> 44157641d448 (drm/i915: Disable Secure Batches for gen6+)
  #define HAS_WT(dev_priv)	((IS_HASWELL(dev_priv) || \
  				 IS_BROADWELL(dev_priv)) && HAS_EDRAM(dev_priv))
  
* Unmerged path drivers/gpu/drm/i915/i915_getparam.c
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
diff --git a/drivers/gpu/drm/i915/i915_gem_execbuffer.c b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
index 8d881efc48be..b5d1a1817f1f 100644
--- a/drivers/gpu/drm/i915/i915_gem_execbuffer.c
+++ b/drivers/gpu/drm/i915/i915_gem_execbuffer.c
@@ -2208,6 +2208,7 @@ i915_gem_do_execbuffer(struct drm_device *dev,
 		       struct drm_i915_gem_exec_object2 *exec,
 		       struct drm_syncobj **fences)
 {
+	struct drm_i915_private *i915 = to_i915(dev);
 	struct i915_execbuffer eb;
 	struct dma_fence *in_fence = NULL;
 	struct sync_file *out_fence = NULL;
@@ -2218,7 +2219,7 @@ i915_gem_do_execbuffer(struct drm_device *dev,
 	BUILD_BUG_ON(__EXEC_OBJECT_INTERNAL_FLAGS &
 		     ~__EXEC_OBJECT_UNKNOWN_FLAGS);
 
-	eb.i915 = to_i915(dev);
+	eb.i915 = i915;
 	eb.file = file;
 	eb.args = args;
 	if (DBG_FORCE_RELOC || !(args->flags & I915_EXEC_NO_RELOC))
@@ -2238,8 +2239,15 @@ i915_gem_do_execbuffer(struct drm_device *dev,
 
 	eb.batch_flags = 0;
 	if (args->flags & I915_EXEC_SECURE) {
+		if (INTEL_GEN(i915) >= 11)
+			return -ENODEV;
+
+		/* Return -EPERM to trigger fallback code on old binaries. */
+		if (!HAS_SECURE_BATCHES(i915))
+			return -EPERM;
+
 		if (!drm_is_current_master(file) || !capable(CAP_SYS_ADMIN))
-		    return -EPERM;
+			return -EPERM;
 
 		eb.batch_flags |= I915_DISPATCH_SECURE;
 	}
* Unmerged path drivers/gpu/drm/i915/i915_getparam.c
