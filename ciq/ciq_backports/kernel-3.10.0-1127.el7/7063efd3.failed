tuntap: fix use after free during release

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Jason Wang <jasowang@redhat.com>
commit 7063efd33bb15abc0160347f89eb5aba6b7d000e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/7063efd3.failed

After commit b196d88aba8a ("tun: fix use after free for ptr_ring") we
need clean up tx ring during release(). But unfortunately, it tries to
do the cleanup blindly after socket were destroyed which will lead
another use-after-free. Fix this by doing the cleanup before dropping
the last reference of the socket in __tun_detach().

	Reported-by: Andrei Vagin <avagin@virtuozzo.com>
	Acked-by: Andrei Vagin <avagin@virtuozzo.com>
Fixes: b196d88aba8a ("tun: fix use after free for ptr_ring")
	Signed-off-by: Jason Wang <jasowang@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7063efd33bb15abc0160347f89eb5aba6b7d000e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/tun.c
diff --cc drivers/net/tun.c
index 4cdb9597f760,d45ac37e1287..000000000000
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@@ -556,13 -727,10 +556,19 @@@ static void __tun_detach(struct tun_fil
  			    tun->dev->reg_state == NETREG_REGISTERED)
  				unregister_netdevice(tun->dev);
  		}
 +
  		if (tun)
++<<<<<<< HEAD
 +			skb_array_cleanup(&tfile->tx_array);
 +
 +		BUG_ON(!test_bit(SOCK_EXTERNALLY_ALLOCATED,
 +				 &tfile->socket.flags));
 +		sk_release_kernel(&tfile->sk);
++=======
+ 			xdp_rxq_info_unreg(&tfile->xdp_rxq);
+ 		ptr_ring_cleanup(&tfile->tx_ring, tun_ptr_free);
+ 		sock_put(&tfile->sk);
++>>>>>>> 7063efd33bb1 (tuntap: fix use after free during release)
  	}
  }
  
@@@ -2648,10 -3244,8 +2654,13 @@@ static int tun_chr_open(struct inode *i
  static int tun_chr_close(struct inode *inode, struct file *file)
  {
  	struct tun_file *tfile = file->private_data;
 +	struct net *net = tfile->net;
  
  	tun_detach(tfile, true);
++<<<<<<< HEAD
 +	put_net(net);
++=======
++>>>>>>> 7063efd33bb1 (tuntap: fix use after free during release)
  
  	return 0;
  }
* Unmerged path drivers/net/tun.c
