perf: Return empty callchain instead of NULL

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit 99e818cc88889a2fa2f483b91b372c47b94b7c98
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/99e818cc.failed

It simplifies the code a bit, because we dump the callchain
Link: http://lkml.kernel.org/n/tip-uqp7qd6aif47g39glnbu95yl@git.kernel.org
even if it's empty. With 'empty' callchain we can remove
all the NULL-checking code paths.

Original-patch-from: Peter Zijlstra <peterz@infradead.org>
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/20180107160356.28203-7-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 99e818cc88889a2fa2f483b91b372c47b94b7c98)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/events/core.c
diff --cc kernel/events/core.c
index 559f40f24854,4e1a1bf8d867..000000000000
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@@ -6188,6 -5972,26 +6180,29 @@@ static u64 perf_virt_to_phys(u64 virt
  	return phys_addr;
  }
  
++<<<<<<< HEAD
++=======
+ static struct perf_callchain_entry __empty_callchain = { .nr = 0, };
+ 
+ static struct perf_callchain_entry *
+ perf_callchain(struct perf_event *event, struct pt_regs *regs)
+ {
+ 	bool kernel = !event->attr.exclude_callchain_kernel;
+ 	bool user   = !event->attr.exclude_callchain_user;
+ 	/* Disallow cross-task user callchains. */
+ 	bool crosstask = event->ctx->task && event->ctx->task != current;
+ 	const u32 max_stack = event->attr.sample_max_stack;
+ 	struct perf_callchain_entry *callchain;
+ 
+ 	if (!kernel && !user)
+ 		return &__empty_callchain;
+ 
+ 	callchain = get_perf_callchain(regs, 0, kernel, user,
+ 				       max_stack, crosstask, true);
+ 	return callchain ?: &__empty_callchain;
+ }
+ 
++>>>>>>> 99e818cc8888 (perf: Return empty callchain instead of NULL)
  void perf_prepare_sample(struct perf_event_header *header,
  			 struct perf_sample_data *data,
  			 struct perf_event *event,
* Unmerged path kernel/events/core.c
