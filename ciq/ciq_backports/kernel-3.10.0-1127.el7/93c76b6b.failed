mm/percpu.c: correct max_distance calculation for pcpu_embed_first_chunk()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author zijun_hu <zijun_hu@htc.com>
commit 93c76b6b2faaad7bfbc0cda840763aa4819ef26e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/93c76b6b.failed

pcpu_embed_first_chunk() calculates the range a percpu chunk spans into
@max_distance and uses it to ensure that a chunk is not too big compared
to the total vmalloc area. However, during calculation, it used incorrect
top address by adding a unit size to the highest group's base address.

This can make the calculated max_distance slightly smaller than the actual
distance although given the scale of values involved the error is very
unlikely to have an actual impact.

Fix this issue by adding the group's size instead of a unit size.

BTW, The type of variable max_distance is changed from size_t to unsigned
long too based on below consideration:
 - type unsigned long usually have same width with IP core registers and
   can be applied at here very well
 - make @max_distance type consistent with the operand calculated against
   it such as @ai->groups[i].base_offset and macro VMALLOC_TOTAL
 - type unsigned long is more universal then size_t, size_t is type defined
   to unsigned int or unsigned long among various ARCHs usually

	Signed-off-by: zijun_hu <zijun_hu@htc.com>
	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit 93c76b6b2faaad7bfbc0cda840763aa4819ef26e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/percpu.c
diff --cc mm/percpu.c
index 895c2996b902,e2737e56b017..000000000000
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@@ -2044,9 -2035,8 +2046,14 @@@ int __init pcpu_embed_first_chunk(size_
  
  	/* warn if maximum distance is further than 75% of vmalloc space */
  	if (max_distance > VMALLOC_TOTAL * 3 / 4) {
++<<<<<<< HEAD
 +		pr_warning("PERCPU: max_distance=0x%zx too large for vmalloc "
 +			   "space 0x%lx\n", max_distance,
 +			   VMALLOC_TOTAL);
++=======
+ 		pr_warn("max_distance=0x%lx too large for vmalloc space 0x%lx\n",
+ 			max_distance, VMALLOC_TOTAL);
++>>>>>>> 93c76b6b2faa (mm/percpu.c: correct max_distance calculation for pcpu_embed_first_chunk())
  #ifdef CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK
  		/* and fail if we have fallback */
  		rc = -EINVAL;
* Unmerged path mm/percpu.c
