scsi: megaraid_sas: Add formatting option for megasas_dump

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
commit 4fe55035f30fb38bfb898c974f603943cdfe390a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/4fe55035.failed

Add option to format the buffer that is being dumped.  Currently, the IO
frame and chain frame dumped in the syslog is getting split across multiple
lines based on the formatting.  Fix this by using KERN_CONT in printk.

	Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
	Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 4fe55035f30fb38bfb898c974f603943cdfe390a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_base.c
diff --cc drivers/scsi/megaraid/megaraid_sas_base.c
index 71e2f1acbbb8,7d7cf8b82e9e..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@@ -2843,24 -2837,70 +2843,89 @@@ blk_eh_timer_return megasas_reset_timer
  }
  
  /**
++<<<<<<< HEAD
 + * megasas_dump_frame -	This function will dump MPT/MFI frame
 + */
 +static inline void
 +megasas_dump_frame(void *mpi_request, int sz)
 +{
 +	int i;
 +	__le32 *mfp = (__le32 *)mpi_request;
 +
 +	printk(KERN_INFO "IO request frame:\n\t");
 +	for (i = 0; i < sz / sizeof(__le32); i++) {
 +		if (i && ((i % 8) == 0))
 +			printk("\n\t");
 +		printk("%08x ", le32_to_cpu(mfp[i]));
++=======
+  * megasas_dump -	This function will print hexdump of provided buffer.
+  * @buf:		Buffer to be dumped
+  * @sz:		Size in bytes
+  * @format:		Different formats of dumping e.g. format=n will
+  *			cause only 'n' 32 bit words to be dumped in a single
+  *			line.
+  */
+ inline void
+ megasas_dump(void *buf, int sz, int format)
+ {
+ 	int i;
+ 	__le32 *buf_loc = (__le32 *)buf;
+ 
+ 	for (i = 0; i < (sz / sizeof(__le32)); i++) {
+ 		if ((i % format) == 0) {
+ 			if (i != 0)
+ 				printk(KERN_CONT "\n");
+ 			printk(KERN_CONT "%08x: ", (i * 4));
+ 		}
+ 		printk(KERN_CONT "%08x ", le32_to_cpu(buf_loc[i]));
++>>>>>>> 4fe55035f30f (scsi: megaraid_sas: Add formatting option for megasas_dump)
+ 	}
+ 	printk(KERN_CONT "\n");
+ }
+ 
+ /**
++<<<<<<< HEAD
++=======
+  * megasas_dump_fusion_io -	This function will print key details
+  *				of SCSI IO
+  * @scmd:			SCSI command pointer of SCSI IO
+  */
+ void
+ megasas_dump_fusion_io(struct scsi_cmnd *scmd)
+ {
+ 	struct megasas_cmd_fusion *cmd;
+ 	union MEGASAS_REQUEST_DESCRIPTOR_UNION *req_desc;
+ 	struct megasas_instance *instance;
+ 
+ 	cmd = (struct megasas_cmd_fusion *)scmd->SCp.ptr;
+ 	instance = (struct megasas_instance *)scmd->device->host->hostdata;
+ 
+ 	scmd_printk(KERN_INFO, scmd,
+ 		    "scmd: (0x%p)  retries: 0x%x  allowed: 0x%x\n",
+ 		    scmd, scmd->retries, scmd->allowed);
+ 	scsi_print_command(scmd);
+ 
+ 	if (cmd) {
+ 		req_desc = (union MEGASAS_REQUEST_DESCRIPTOR_UNION *)cmd->request_desc;
+ 		scmd_printk(KERN_INFO, scmd, "Request descriptor details:\n");
+ 		scmd_printk(KERN_INFO, scmd,
+ 			    "RequestFlags:0x%x  MSIxIndex:0x%x  SMID:0x%x  LMID:0x%x  DevHandle:0x%x\n",
+ 			    req_desc->SCSIIO.RequestFlags,
+ 			    req_desc->SCSIIO.MSIxIndex, req_desc->SCSIIO.SMID,
+ 			    req_desc->SCSIIO.LMID, req_desc->SCSIIO.DevHandle);
+ 
+ 		printk(KERN_INFO "IO request frame:\n");
+ 		megasas_dump(cmd->io_request,
+ 			     MEGA_MPI2_RAID_DEFAULT_IO_FRAME_SIZE, 8);
+ 		printk(KERN_INFO "Chain frame:\n");
+ 		megasas_dump(cmd->sg_frame,
+ 			     instance->max_chain_frame_sz, 8);
  	}
- 	printk("\n");
+ 
  }
  
  /**
++>>>>>>> 4fe55035f30f (scsi: megaraid_sas: Add formatting option for megasas_dump)
   * megasas_reset_bus_host -	Bus & host reset handler entry point
   */
  static int megasas_reset_bus_host(struct scsi_cmnd *scmd)
* Unmerged path drivers/scsi/megaraid/megaraid_sas_base.c
