brd: re-enable __GFP_HIGHMEM in brd_insert_page()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Hou Tao <houtao1@huawei.com>
commit f6b50160a06d4a0d6a3999ab0c5aec4f52dba248
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/f6b50160.failed

__GFP_HIGHMEM is disabled if dax is enabled on brd, however
dax support for brd has been removed since commit (7a862fbbdec6
"brd: remove dax support"), so restore __GFP_HIGHMEM in
brd_insert_page().

Also remove the no longer applicable comments about DAX and highmem.

	Cc: stable@vger.kernel.org
Fixes: 7a862fbbdec6 ("brd: remove dax support")
	Signed-off-by: Hou Tao <houtao1@huawei.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f6b50160a06d4a0d6a3999ab0c5aec4f52dba248)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/brd.c
diff --cc drivers/block/brd.c
index bfe79fba5ad9,17defbf4f332..000000000000
--- a/drivers/block/brd.c
+++ b/drivers/block/brd.c
@@@ -104,16 -96,8 +104,15 @@@ static struct page *brd_insert_page(str
  	/*
  	 * Must use NOIO because we don't want to recurse back into the
  	 * block or filesystem layers from page reclaim.
- 	 *
- 	 * Cannot support DAX and highmem, because our ->direct_access
- 	 * routine for DAX must return memory that is always addressable.
- 	 * If DAX was reworked to use pfns and kmap throughout, this
- 	 * restriction might be able to be lifted.
  	 */
++<<<<<<< HEAD
 +	gfp_flags = GFP_NOIO | __GFP_ZERO;
 +#ifndef CONFIG_BLK_DEV_RAM_DAX
 +	gfp_flags |= __GFP_HIGHMEM;
 +#endif
++=======
+ 	gfp_flags = GFP_NOIO | __GFP_ZERO | __GFP_HIGHMEM;
++>>>>>>> f6b50160a06d (brd: re-enable __GFP_HIGHMEM in brd_insert_page())
  	page = alloc_page(gfp_flags);
  	if (!page)
  		return NULL;
* Unmerged path drivers/block/brd.c
