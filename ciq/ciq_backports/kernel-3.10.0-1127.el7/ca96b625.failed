mm: alloc_contig_range: allow to specify GFP mask

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Lucas Stach <l.stach@pengutronix.de>
commit ca96b625341027f611c3e61351a70311077ebcf5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/ca96b625.failed

Currently alloc_contig_range assumes that the compaction should be done
with the default GFP_KERNEL flags.  This is probably right for all
current uses of this interface, but may change as CMA is used in more
use-cases (including being the default DMA memory allocator on some
platforms).

Change the function prototype, to allow for passing through the GFP mask
set by upper layers.

Also respect global restrictions by applying memalloc_noio_flags to the
passed in flags.

Link: http://lkml.kernel.org/r/20170127172328.18574-1-l.stach@pengutronix.de
	Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Radim Krcmar <rkrcmar@redhat.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Chris Zankel <chris@zankel.net>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Alexander Graf <agraf@suse.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ca96b625341027f611c3e61351a70311077ebcf5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/cma.c
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index fd58fca076c2,8a0f33624335..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -7317,17 -7413,19 +7318,21 @@@ static int __alloc_contig_migrate_range
   * need to be freed with free_contig_range().
   */
  int alloc_contig_range(unsigned long start, unsigned long end,
- 		       unsigned migratetype)
+ 		       unsigned migratetype, gfp_t gfp_mask)
  {
  	unsigned long outer_start, outer_end;
 -	unsigned int order;
 -	int ret = 0;
 +	int ret = 0, order;
  
  	struct compact_control cc = {
  		.nr_migratepages = 0,
  		.order = -1,
  		.zone = page_zone(pfn_to_page(start)),
 -		.mode = MIGRATE_SYNC,
 +		.sync = true,
  		.ignore_skip_hint = true,
++<<<<<<< HEAD
++=======
+ 		.gfp_mask = memalloc_noio_flags(gfp_mask),
++>>>>>>> ca96b6253410 (mm: alloc_contig_range: allow to specify GFP mask)
  	};
  	INIT_LIST_HEAD(&cc.migratepages);
  
* Unmerged path mm/cma.c
diff --git a/include/linux/gfp.h b/include/linux/gfp.h
index b4194f05bfaa..0d423dfba471 100644
--- a/include/linux/gfp.h
+++ b/include/linux/gfp.h
@@ -445,7 +445,7 @@ static inline bool pm_suspended_storage(void)
 #if (defined(CONFIG_MEMORY_ISOLATION) && defined(CONFIG_COMPACTION)) || defined(CONFIG_CMA)
 /* The below functions must be run on a range from a single zone. */
 extern int alloc_contig_range(unsigned long start, unsigned long end,
-			      unsigned migratetype);
+			      unsigned migratetype, gfp_t gfp_mask);
 extern void free_contig_range(unsigned long pfn, unsigned nr_pages);
 #endif
 
* Unmerged path mm/cma.c
diff --git a/mm/hugetlb.c b/mm/hugetlb.c
index 0f91e2c9c2c6..e20a97e68a3b 100644
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@ -1062,7 +1062,8 @@ static int __alloc_gigantic_page(unsigned long start_pfn,
 				unsigned long nr_pages)
 {
 	unsigned long end_pfn = start_pfn + nr_pages;
-	return alloc_contig_range(start_pfn, end_pfn, MIGRATE_MOVABLE);
+	return alloc_contig_range(start_pfn, end_pfn, MIGRATE_MOVABLE,
+				  GFP_KERNEL);
 }
 
 static bool pfn_range_valid_gigantic(struct zone *z,
* Unmerged path mm/page_alloc.c
