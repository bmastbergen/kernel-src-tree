sched/deadline: Fix switched_from_dl() warning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Juri Lelli <juri.lelli@redhat.com>
commit e117cb52bdb4d376b711bee34af6434c9e314b3b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/e117cb52.failed

Mark noticed that syzkaller is able to reliably trigger the following warning:

  dl_rq->running_bw > dl_rq->this_bw
  WARNING: CPU: 1 PID: 153 at kernel/sched/deadline.c:124 switched_from_dl+0x454/0x608
  Kernel panic - not syncing: panic_on_warn set ...

  CPU: 1 PID: 153 Comm: syz-executor253 Not tainted 4.18.0-rc3+ #29
  Hardware name: linux,dummy-virt (DT)
  Call trace:
   dump_backtrace+0x0/0x458
   show_stack+0x20/0x30
   dump_stack+0x180/0x250
   panic+0x2dc/0x4ec
   __warn_printk+0x0/0x150
   report_bug+0x228/0x2d8
   bug_handler+0xa0/0x1a0
   brk_handler+0x2f0/0x568
   do_debug_exception+0x1bc/0x5d0
   el1_dbg+0x18/0x78
   switched_from_dl+0x454/0x608
   __sched_setscheduler+0x8cc/0x2018
   sys_sched_setattr+0x340/0x758
   el0_svc_naked+0x30/0x34

syzkaller reproducer runs a bunch of threads that constantly switch
between DEADLINE and NORMAL classes while interacting through futexes.

The splat above is caused by the fact that if a DEADLINE task is setattr
back to NORMAL while in non_contending state (blocked on a futex -
inactive timer armed), its contribution to running_bw is not removed
before sub_rq_bw() gets called (!task_on_rq_queued() branch) and the
latter sees running_bw > this_bw.

Fix it by removing a task contribution from running_bw if the task is
not queued and in non_contending state while switched to a different
class.

	Reported-by: Mark Rutland <mark.rutland@arm.com>
	Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Daniel Bristot de Oliveira <bristot@redhat.com>
	Reviewed-by: Luca Abeni <luca.abeni@santannapisa.it>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: claudio@evidence.eu.com
	Cc: rostedt@goodmis.org
Link: http://lkml.kernel.org/r/20180711072948.27061-1-juri.lelli@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e117cb52bdb4d376b711bee34af6434c9e314b3b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
diff --cc kernel/sched/deadline.c
index 162a8d64d022,10c7b51c0d1f..000000000000
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@@ -2173,8 -2290,17 +2173,22 @@@ static void switched_from_dl(struct rq 
  	if (task_on_rq_queued(p) && p->dl.dl_runtime)
  		task_non_contending(p);
  
++<<<<<<< HEAD
 +	if (!task_on_rq_queued(p))
 +		sub_rq_bw(p->dl.dl_bw, &rq->dl);
++=======
+ 	if (!task_on_rq_queued(p)) {
+ 		/*
+ 		 * Inactive timer is armed. However, p is leaving DEADLINE and
+ 		 * might migrate away from this rq while continuing to run on
+ 		 * some other class. We need to remove its contribution from
+ 		 * this rq running_bw now, or sub_rq_bw (below) will complain.
+ 		 */
+ 		if (p->dl.dl_non_contending)
+ 			sub_running_bw(&p->dl, &rq->dl);
+ 		sub_rq_bw(&p->dl, &rq->dl);
+ 	}
++>>>>>>> e117cb52bdb4 (sched/deadline: Fix switched_from_dl() warning)
  
  	/*
  	 * We cannot use inactive_task_timer() to invoke sub_running_bw()
* Unmerged path kernel/sched/deadline.c
