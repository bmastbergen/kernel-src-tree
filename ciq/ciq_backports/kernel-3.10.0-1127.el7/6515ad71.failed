scsi: qla2xxx: Reduce the number of forward declarations

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Bart Van Assche <bvanassche@acm.org>
commit 6515ad717bd723f7564581ffdfd5d8064602f29f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/6515ad71.failed

Move the SCSI host template definition after the definition of the
functions that it references. Remove the forward declarations that became
unnecessary by that change. This patch does not change any functionality.

	Cc: Himanshu Madhani <hmadhani@marvell.com>
	Cc: Giridhar Malavali <gmalavali@marvell.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Acked-by: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 6515ad717bd723f7564581ffdfd5d8064602f29f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_os.c
diff --cc drivers/scsi/qla2xxx/qla_os.c
index d8902b90b121,137c7165d21d..000000000000
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@@ -305,59 -306,12 +305,65 @@@ MODULE_PARM_DESC(ql2xdifbundlinginterna
      "0 (Default). Based on check.\n"
      "1 Force using internal buffers\n");
  
++<<<<<<< HEAD
 +/*
 + * SCSI host template entry points
 + */
 +static int qla2xxx_slave_configure(struct scsi_device * device);
 +static int qla2xxx_slave_alloc(struct scsi_device *);
 +static int qla2xxx_scan_finished(struct Scsi_Host *, unsigned long time);
 +static void qla2xxx_scan_start(struct Scsi_Host *);
 +static void qla2xxx_slave_destroy(struct scsi_device *);
 +static int qla2xxx_queuecommand(struct Scsi_Host *h, struct scsi_cmnd *cmd);
 +static int qla2xxx_eh_abort(struct scsi_cmnd *);
 +static int qla2xxx_eh_device_reset(struct scsi_cmnd *);
 +static int qla2xxx_eh_target_reset(struct scsi_cmnd *);
 +static int qla2xxx_eh_bus_reset(struct scsi_cmnd *);
 +static int qla2xxx_eh_host_reset(struct scsi_cmnd *);
 +
 +static int qla2x00_change_queue_depth(struct scsi_device *, int, int);
 +static int qla2x00_change_queue_type(struct scsi_device *, int);
++=======
++>>>>>>> 6515ad717bd7 (scsi: qla2xxx: Reduce the number of forward declarations)
  static void qla2x00_clear_drv_active(struct qla_hw_data *);
  static void qla2x00_free_device(scsi_qla_host_t *);
 -static int qla2xxx_map_queues(struct Scsi_Host *shost);
  static void qla2x00_destroy_deferred_work(struct qla_hw_data *);
  
  
++<<<<<<< HEAD
 +struct scsi_host_template qla2xxx_driver_template = {
 +	.module			= THIS_MODULE,
 +	.name			= QLA2XXX_DRIVER_NAME,
 +	.queuecommand		= qla2xxx_queuecommand,
 +
 +	.eh_abort_handler	= qla2xxx_eh_abort,
 +	.eh_device_reset_handler = qla2xxx_eh_device_reset,
 +	.eh_target_reset_handler = qla2xxx_eh_target_reset,
 +	.eh_bus_reset_handler	= qla2xxx_eh_bus_reset,
 +	.eh_host_reset_handler	= qla2xxx_eh_host_reset,
 +
 +	.slave_configure	= qla2xxx_slave_configure,
 +
 +	.slave_alloc		= qla2xxx_slave_alloc,
 +	.slave_destroy		= qla2xxx_slave_destroy,
 +	.scan_finished		= qla2xxx_scan_finished,
 +	.scan_start		= qla2xxx_scan_start,
 +	.change_queue_depth	= qla2x00_change_queue_depth,
 +	.change_queue_type	= qla2x00_change_queue_type,
 +	.this_id		= -1,
 +	.cmd_per_lun		= 3,
 +	.use_clustering		= ENABLE_CLUSTERING,
 +	.sg_tablesize		= SG_ALL,
 +
 +	.max_sectors		= 0xFFFF,
 +	.shost_attrs		= qla2x00_host_attrs,
 +
 +	.supported_mode		= MODE_INITIATOR,
 +	.use_host_wide_tags	= 1,
 +};
 +
++=======
++>>>>>>> 6515ad717bd7 (scsi: qla2xxx: Reduce the number of forward declarations)
  static struct scsi_transport_template *qla2xxx_transport_template = NULL;
  struct scsi_transport_template *qla2xxx_transport_vport_template = NULL;
  
@@@ -7232,6 -7156,101 +7238,104 @@@ qla2xxx_pci_resume(struct pci_dev *pdev
  	ha->flags.eeh_busy = 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void
+ qla_pci_reset_prepare(struct pci_dev *pdev)
+ {
+ 	scsi_qla_host_t *base_vha = pci_get_drvdata(pdev);
+ 	struct qla_hw_data *ha = base_vha->hw;
+ 	struct qla_qpair *qpair;
+ 
+ 	ql_log(ql_log_warn, base_vha, 0xffff,
+ 	    "%s.\n", __func__);
+ 
+ 	/*
+ 	 * PCI FLR/function reset is about to reset the
+ 	 * slot. Stop the chip to stop all DMA access.
+ 	 * It is assumed that pci_reset_done will be called
+ 	 * after FLR to resume Chip operation.
+ 	 */
+ 	ha->flags.eeh_busy = 1;
+ 	mutex_lock(&ha->mq_lock);
+ 	list_for_each_entry(qpair, &base_vha->qp_list, qp_list_elem)
+ 		qpair->online = 0;
+ 	mutex_unlock(&ha->mq_lock);
+ 
+ 	set_bit(ABORT_ISP_ACTIVE, &base_vha->dpc_flags);
+ 	qla2x00_abort_isp_cleanup(base_vha);
+ 	qla2x00_abort_all_cmds(base_vha, DID_RESET << 16);
+ }
+ 
+ static void
+ qla_pci_reset_done(struct pci_dev *pdev)
+ {
+ 	scsi_qla_host_t *base_vha = pci_get_drvdata(pdev);
+ 	struct qla_hw_data *ha = base_vha->hw;
+ 	struct qla_qpair *qpair;
+ 
+ 	ql_log(ql_log_warn, base_vha, 0xffff,
+ 	    "%s.\n", __func__);
+ 
+ 	/*
+ 	 * FLR just completed by PCI layer. Resume adapter
+ 	 */
+ 	ha->flags.eeh_busy = 0;
+ 	mutex_lock(&ha->mq_lock);
+ 	list_for_each_entry(qpair, &base_vha->qp_list, qp_list_elem)
+ 		qpair->online = 1;
+ 	mutex_unlock(&ha->mq_lock);
+ 
+ 	base_vha->flags.online = 1;
+ 	ha->isp_ops->abort_isp(base_vha);
+ 	clear_bit(ABORT_ISP_ACTIVE, &base_vha->dpc_flags);
+ }
+ 
+ static int qla2xxx_map_queues(struct Scsi_Host *shost)
+ {
+ 	int rc;
+ 	scsi_qla_host_t *vha = (scsi_qla_host_t *)shost->hostdata;
+ 	struct blk_mq_queue_map *qmap = &shost->tag_set.map[HCTX_TYPE_DEFAULT];
+ 
+ 	if (USER_CTRL_IRQ(vha->hw) || !vha->hw->mqiobase)
+ 		rc = blk_mq_map_queues(qmap);
+ 	else
+ 		rc = blk_mq_pci_map_queues(qmap, vha->hw->pdev, vha->irq_offset);
+ 	return rc;
+ }
+ 
+ struct scsi_host_template qla2xxx_driver_template = {
+ 	.module			= THIS_MODULE,
+ 	.name			= QLA2XXX_DRIVER_NAME,
+ 	.queuecommand		= qla2xxx_queuecommand,
+ 
+ 	.eh_timed_out		= fc_eh_timed_out,
+ 	.eh_abort_handler	= qla2xxx_eh_abort,
+ 	.eh_device_reset_handler = qla2xxx_eh_device_reset,
+ 	.eh_target_reset_handler = qla2xxx_eh_target_reset,
+ 	.eh_bus_reset_handler	= qla2xxx_eh_bus_reset,
+ 	.eh_host_reset_handler	= qla2xxx_eh_host_reset,
+ 
+ 	.slave_configure	= qla2xxx_slave_configure,
+ 
+ 	.slave_alloc		= qla2xxx_slave_alloc,
+ 	.slave_destroy		= qla2xxx_slave_destroy,
+ 	.scan_finished		= qla2xxx_scan_finished,
+ 	.scan_start		= qla2xxx_scan_start,
+ 	.change_queue_depth	= scsi_change_queue_depth,
+ 	.map_queues             = qla2xxx_map_queues,
+ 	.this_id		= -1,
+ 	.cmd_per_lun		= 3,
+ 	.sg_tablesize		= SG_ALL,
+ 
+ 	.max_sectors		= 0xFFFF,
+ 	.shost_attrs		= qla2x00_host_attrs,
+ 
+ 	.supported_mode		= MODE_INITIATOR,
+ 	.track_queue_depth	= 1,
+ };
+ 
++>>>>>>> 6515ad717bd7 (scsi: qla2xxx: Reduce the number of forward declarations)
  static const struct pci_error_handlers qla2xxx_err_handler = {
  	.error_detected = qla2xxx_pci_error_detected,
  	.mmio_enabled = qla2xxx_pci_mmio_enabled,
* Unmerged path drivers/scsi/qla2xxx/qla_os.c
