dm snapshot: fix oversights in optional discard support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Mike Snitzer <snitzer@redhat.com>
commit 3ee25485ba8e8271fe9401eef5003c20ab648ddf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/3ee25485.failed

__find_snapshots_sharing_cow() should always be used with _origins_lock
held so fix snapshot_io_hints() accordingly.  Also, once a snapshot is
being merged discards must not be allowed -- otherwise incorrect or
duplicate work will be performed.

Fixes: 2e6023850e177d ("dm snapshot: add optional discard support features")
	Reported-by: Nikos Tsironis <ntsironis@arrikto.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 3ee25485ba8e8271fe9401eef5003c20ab648ddf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-snap.c
diff --cc drivers/md/dm-snap.c
index 4f3251269638,f150f5c5492b..000000000000
--- a/drivers/md/dm-snap.c
+++ b/drivers/md/dm-snap.c
@@@ -1862,9 -2072,15 +1862,19 @@@ static int snapshot_merge_map(struct dm
  		return DM_MAPIO_REMAPPED;
  	}
  
++<<<<<<< HEAD
 +	chunk = sector_to_chunk(s->store, bio->bi_sector);
++=======
+ 	if (unlikely(bio_op(bio) == REQ_OP_DISCARD)) {
+ 		/* Once merging, discards no longer effect change */
+ 		bio_endio(bio);
+ 		return DM_MAPIO_SUBMITTED;
+ 	}
+ 
+ 	chunk = sector_to_chunk(s->store, bio->bi_iter.bi_sector);
++>>>>>>> 3ee25485ba8e (dm snapshot: fix oversights in optional discard support)
  
 -	down_write(&s->lock);
 +	mutex_lock(&s->lock);
  
  	/* Full merging snapshots are redirected to the origin */
  	if (!s->valid)
@@@ -2104,6 -2330,26 +2114,29 @@@ static int snapshot_iterate_devices(str
  	return r;
  }
  
++<<<<<<< HEAD
++=======
+ static void snapshot_io_hints(struct dm_target *ti, struct queue_limits *limits)
+ {
+ 	struct dm_snapshot *snap = ti->private;
+ 
+ 	if (snap->discard_zeroes_cow) {
+ 		struct dm_snapshot *snap_src = NULL, *snap_dest = NULL;
+ 
+ 		down_read(&_origins_lock);
+ 
+ 		(void) __find_snapshots_sharing_cow(snap, &snap_src, &snap_dest, NULL);
+ 		if (snap_src && snap_dest)
+ 			snap = snap_src;
+ 
+ 		/* All discards are split on chunk_size boundary */
+ 		limits->discard_granularity = snap->store->chunk_size;
+ 		limits->max_discard_sectors = snap->store->chunk_size;
+ 
+ 		up_read(&_origins_lock);
+ 	}
+ }
++>>>>>>> 3ee25485ba8e (dm snapshot: fix oversights in optional discard support)
  
  /*-----------------------------------------------------------------
   * Origin methods
* Unmerged path drivers/md/dm-snap.c
