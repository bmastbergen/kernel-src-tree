macvlan: allow setting LRO independently of lower device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Michal Kubeƒçek <mkubecek@suse.cz>
commit 62dbe83015ed15b307eb22b89568dd41091dda76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/62dbe830.failed

Since commit fbe168ba91f7 ("net: generic dev_disable_lro() stacked
device handling"), dev_disable_lro() zeroes NETIF_F_LRO feature flag
first for a macvlan device and then for its lower device. As an attempt
to set NETIF_F_LRO to zero is ignored, dev_disable_lro() issues a
warning and taints kernel.

Allowing NETIF_F_LRO to be set independently of the lower device
consists of three parts:

  - add the flag to hw_features to allow toggling it
  - allow setting it to 0 even if lower device has the flag set
  - add the flag to MACVLAN_FEATURES to restore copying from lower
    device on macvlan creation

	Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 62dbe83015ed15b307eb22b89568dd41091dda76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/macvlan.c
diff --cc drivers/net/macvlan.c
index f1b5a8c2df9b,10604db2a3a0..000000000000
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@@ -574,14 -741,13 +574,19 @@@ static int macvlan_change_mtu(struct ne
  static struct lock_class_key macvlan_netdev_xmit_lock_key;
  static struct lock_class_key macvlan_netdev_addr_lock_key;
  
 -#define ALWAYS_ON_FEATURES \
 -	(NETIF_F_SG | NETIF_F_GEN_CSUM | NETIF_F_GSO_SOFTWARE | NETIF_F_LLTX | \
 -	 NETIF_F_GSO_ROBUST)
 +#define ALWAYS_ON_OFFLOADS \
 +	(NETIF_F_SG | NETIF_F_HW_CSUM | NETIF_F_GSO_SOFTWARE)
 +
 +#define ALWAYS_ON_FEATURES (ALWAYS_ON_OFFLOADS | NETIF_F_LLTX)
  
  #define MACVLAN_FEATURES \
++<<<<<<< HEAD
 +	(NETIF_F_SG | NETIF_F_CSUM_MASK | NETIF_F_HIGHDMA | NETIF_F_FRAGLIST | \
 +	 NETIF_F_GSO | NETIF_F_TSO | NETIF_F_UFO | NETIF_F_GSO_ROBUST | \
++=======
+ 	(NETIF_F_SG | NETIF_F_ALL_CSUM | NETIF_F_HIGHDMA | NETIF_F_FRAGLIST | \
+ 	 NETIF_F_GSO | NETIF_F_TSO | NETIF_F_UFO | NETIF_F_LRO | \
++>>>>>>> 62dbe83015ed (macvlan: allow setting LRO independently of lower device)
  	 NETIF_F_TSO_ECN | NETIF_F_TSO6 | NETIF_F_GRO | NETIF_F_RXCSUM | \
  	 NETIF_F_HW_VLAN_CTAG_FILTER | NETIF_F_HW_VLAN_STAG_FILTER)
  
@@@ -612,9 -784,10 +617,10 @@@ static int macvlan_init(struct net_devi
  				  (lowerdev->state & MACVLAN_STATE_MASK);
  	dev->features 		= lowerdev->features & MACVLAN_FEATURES;
  	dev->features		|= ALWAYS_ON_FEATURES;
+ 	dev->hw_features	|= NETIF_F_LRO;
  	dev->vlan_features	= lowerdev->vlan_features & MACVLAN_FEATURES;
 +	dev->vlan_features	|= ALWAYS_ON_OFFLOADS;
  	dev->gso_max_size	= lowerdev->gso_max_size;
 -	dev->iflink		= lowerdev->ifindex;
  	dev->hard_header_len	= lowerdev->hard_header_len;
  
  	macvlan_set_lockdep_class(dev);
* Unmerged path drivers/net/macvlan.c
