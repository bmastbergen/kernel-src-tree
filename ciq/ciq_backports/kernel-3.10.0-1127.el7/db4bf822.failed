scsi: qla2xxx: Complain loudly about reference count underflow

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Bart Van Assche <bvanassche@acm.org>
commit db4bf822c58cd2b4a6718c982ce48a5292f5cc6a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/db4bf822.failed

A reference count underflow is a severe bug. Hence complain loudly if a
reference count underflow happens.

	Cc: Himanshu Madhani <hmadhani@marvell.com>
	Cc: Giridhar Malavali <gmalavali@marvell.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Acked-by: Himanshu Madhani <hmadhani@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit db4bf822c58cd2b4a6718c982ce48a5292f5cc6a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_nvme.c
#	drivers/scsi/qla2xxx/qla_os.c
diff --cc drivers/scsi/qla2xxx/qla_nvme.c
index 5e89029bba0e,22e3fba28e51..000000000000
--- a/drivers/scsi/qla2xxx/qla_nvme.c
+++ b/drivers/scsi/qla2xxx/qla_nvme.c
@@@ -131,14 -131,10 +131,11 @@@ static void qla_nvme_sp_ls_done(void *p
  	struct nvmefc_ls_req   *fd;
  	struct nvme_private *priv;
  
- 	if (atomic_read(&sp->ref_count) == 0) {
- 		ql_log(ql_log_warn, sp->fcport->vha, 0x2123,
- 		    "SP reference-count to ZERO on LS_done -- sp=%p.\n", sp);
+ 	if (WARN_ON_ONCE(atomic_read(&sp->ref_count) == 0))
  		return;
- 	}
  
 -	atomic_dec(&sp->ref_count);
 +	if (!atomic_dec_and_test(&sp->ref_count))
 +		return;
  
  	if (res)
  		res = -EINVAL;
@@@ -161,8 -157,10 +158,15 @@@ static void qla_nvme_sp_done(void *ptr
  	nvme = &sp->u.iocb_cmd;
  	fd = nvme->u.nvme.desc;
  
++<<<<<<< HEAD
 +	if (!atomic_dec_and_test(&sp->ref_count))
 +		return;
++=======
+ 	if (WARN_ON_ONCE(atomic_read(&sp->ref_count) == 0))
+ 		return;
+ 
+ 	atomic_dec(&sp->ref_count);
++>>>>>>> db4bf822c58c (scsi: qla2xxx: Complain loudly about reference count underflow)
  
  	if (res == QLA_SUCCESS) {
  		fd->rcv_rsplen = nvme->u.nvme.rsp_pyld_len;
diff --cc drivers/scsi/qla2xxx/qla_os.c
index 9b129f1fdd3e,e1c82a0a9745..000000000000
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@@ -764,17 -714,12 +764,17 @@@ qla2x00_sp_compl(void *ptr, int res
  {
  	srb_t *sp = ptr;
  	struct scsi_cmnd *cmd = GET_CMD_SP(sp);
 -	struct completion *comp = sp->comp;
  
- 	if (atomic_read(&sp->ref_count) == 0) {
- 		ql_dbg(ql_dbg_io, sp->vha, 0x3015,
- 		    "SP reference-count to ZERO -- sp=%p cmd=%p.\n",
- 		    sp, GET_CMD_SP(sp));
- 		if (ql2xextended_error_logging & ql_dbg_io)
- 			WARN_ON(atomic_read(&sp->ref_count) == 0);
+ 	if (WARN_ON_ONCE(atomic_read(&sp->ref_count) == 0))
  		return;
++<<<<<<< HEAD
 +	}
 +	if (!atomic_dec_and_test(&sp->ref_count))
 +		return;
++=======
+ 
+ 	atomic_dec(&sp->ref_count);
++>>>>>>> db4bf822c58c (scsi: qla2xxx: Complain loudly about reference count underflow)
  
  	sp->free(sp);
  	cmd->result = res;
@@@ -872,22 -819,20 +872,22 @@@ qla2xxx_qpair_sp_compl(void *ptr, int r
  {
  	srb_t *sp = ptr;
  	struct scsi_cmnd *cmd = GET_CMD_SP(sp);
 -	struct completion *comp = sp->comp;
 +
 +	cmd->result = res;
  
- 	if (atomic_read(&sp->ref_count) == 0) {
- 		ql_dbg(ql_dbg_io, sp->fcport->vha, 0x3079,
- 		    "SP reference-count to ZERO -- sp=%p cmd=%p.\n",
- 		    sp, GET_CMD_SP(sp));
- 		if (ql2xextended_error_logging & ql_dbg_io)
- 			WARN_ON(atomic_read(&sp->ref_count) == 0);
+ 	if (WARN_ON_ONCE(atomic_read(&sp->ref_count) == 0))
  		return;
++<<<<<<< HEAD
 +	}
 +	if (!atomic_dec_and_test(&sp->ref_count))
 +		return;
++=======
+ 
+ 	atomic_dec(&sp->ref_count);
++>>>>>>> db4bf822c58c (scsi: qla2xxx: Complain loudly about reference count underflow)
  
  	sp->free(sp);
 -	cmd->result = res;
 -	CMD_SP(cmd) = NULL;
  	cmd->scsi_done(cmd);
 -	if (comp)
 -		complete(comp);
 -	qla2xxx_rel_qpair_sp(sp->qpair, sp);
  }
  
  static int
* Unmerged path drivers/scsi/qla2xxx/qla_nvme.c
* Unmerged path drivers/scsi/qla2xxx/qla_os.c
