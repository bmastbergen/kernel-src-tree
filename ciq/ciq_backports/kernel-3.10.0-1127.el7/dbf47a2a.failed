net: sched: act_sample: fix psample group handling on overwrite

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [net] sched: act_sample: fix psample group handling on overwrite (Davide Caratti) [1750670]
Rebuild_FUZZ: 95.87%
commit-author Vlad Buslov <vladbu@mellanox.com>
commit dbf47a2a094edf58983265e323ca4bdcdb58b5ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/dbf47a2a.failed

Action sample doesn't properly handle psample_group pointer in overwrite
case. Following issues need to be fixed:

- In tcf_sample_init() function RCU_INIT_POINTER() is used to set
  s->psample_group, even though we neither setting the pointer to NULL, nor
  preventing concurrent readers from accessing the pointer in some way.
  Use rcu_swap_protected() instead to safely reset the pointer.

- Old value of s->psample_group is not released or deallocated in any way,
  which results resource leak. Use psample_group_put() on non-NULL value
  obtained with rcu_swap_protected().

- The function psample_group_put() that released reference to struct
  psample_group pointed by rcu-pointer s->psample_group doesn't respect rcu
  grace period when deallocating it. Extend struct psample_group with rcu
  head and use kfree_rcu when freeing it.

Fixes: 5c5670fae430 ("net/sched: Introduce sample tc action")
	Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dbf47a2a094edf58983265e323ca4bdcdb58b5ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_sample.c
diff --cc net/sched/act_sample.c
index a9983001170c,10229124a992..000000000000
--- a/net/sched/act_sample.c
+++ b/net/sched/act_sample.c
@@@ -73,27 -79,42 +73,42 @@@ static int tcf_sample_init(struct net *
  		tcf_idr_release(*a, bind);
  		return -EEXIST;
  	}
 -	err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);
 -	if (err < 0)
 -		goto release_idr;
 -
  	rate = nla_get_u32(tb[TCA_SAMPLE_RATE]);
  	if (!rate) {
 -		NL_SET_ERR_MSG(extack, "invalid sample rate");
 -		err = -EINVAL;
 -		goto put_chain;
 -	}
 -	psample_group_num = nla_get_u32(tb[TCA_SAMPLE_PSAMPLE_GROUP]);
 -	psample_group = psample_group_get(net, psample_group_num);
 -	if (!psample_group) {
 -		err = -ENOMEM;
 -		goto put_chain;
 +		tcf_idr_release(*a, bind);
 +		return -EINVAL;
  	}
 -
  	s = to_sample(*a);
  
 -	spin_lock_bh(&s->tcf_lock);
 -	goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);
 +	s->tcf_action = parm->action;
  	s->rate = rate;
++<<<<<<< HEAD
 +	s->psample_group_num = nla_get_u32(tb[TCA_SAMPLE_PSAMPLE_GROUP]);
 +	psample_group = psample_group_get(net, s->psample_group_num);
 +	if (!psample_group) {
 +		tcf_idr_release(*a, bind);
 +		return -ENOMEM;
 +	}
 +	RCU_INIT_POINTER(s->psample_group, psample_group);
++=======
+ 	s->psample_group_num = psample_group_num;
+ 	rcu_swap_protected(s->psample_group, psample_group,
+ 			   lockdep_is_held(&s->tcf_lock));
++>>>>>>> dbf47a2a094e (net: sched: act_sample: fix psample group handling on overwrite)
  
  	if (tb[TCA_SAMPLE_TRUNC_SIZE]) {
  		s->truncate = true;
  		s->trunc_size = nla_get_u32(tb[TCA_SAMPLE_TRUNC_SIZE]);
  	}
++<<<<<<< HEAD
++=======
+ 	spin_unlock_bh(&s->tcf_lock);
+ 
+ 	if (psample_group)
+ 		psample_group_put(psample_group);
+ 	if (goto_ch)
+ 		tcf_chain_put_by_act(goto_ch);
++>>>>>>> dbf47a2a094e (net: sched: act_sample: fix psample group handling on overwrite)
  
  	if (ret == ACT_P_CREATED)
  		tcf_idr_insert(tn, *a);
diff --git a/include/net/psample.h b/include/net/psample.h
index 8888b0e1a82e..7144988b438b 100644
--- a/include/net/psample.h
+++ b/include/net/psample.h
@@ -11,6 +11,7 @@ struct psample_group {
 	u32 group_num;
 	u32 refcount;
 	u32 seq;
+	struct rcu_head rcu;
 };
 
 struct psample_group *psample_group_get(struct net *net, u32 group_num);
diff --git a/net/psample/psample.c b/net/psample/psample.c
index 38c4022573c1..aec465c050ea 100644
--- a/net/psample/psample.c
+++ b/net/psample/psample.c
@@ -156,7 +156,7 @@ static void psample_group_destroy(struct psample_group *group)
 {
 	psample_group_notify(group, PSAMPLE_CMD_DEL_GROUP);
 	list_del(&group->list);
-	kfree(group);
+	kfree_rcu(group, rcu);
 }
 
 static struct psample_group *
* Unmerged path net/sched/act_sample.c
