nfp: use kvcalloc() to allocate SW buffer descriptor arrays

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 4662717038679520af832fcb8c4fefadb97facf8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/46627170.failed

Use kvcalloc() instead of tmp variable + kzalloc() when allocating
SW buffer information to allow falling back to vmalloc and to protect
from theoretical integer overflow.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4662717038679520af832fcb8c4fefadb97facf8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index b0b7dd7e8cb4,d02baefcb350..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -25,7 -53,7 +25,11 @@@
  #include <linux/interrupt.h>
  #include <linux/ip.h>
  #include <linux/ipv6.h>
++<<<<<<< HEAD
 +#include <linux/overflow.h>
++=======
+ #include <linux/mm.h>
++>>>>>>> 466271703867 (nfp: use kvcalloc() to allocate SW buffer descriptor arrays)
  #include <linux/page_ref.h>
  #include <linux/pci.h>
  #include <linux/pci_regs.h>
@@@ -2200,19 -2154,14 +2204,18 @@@ nfp_net_tx_ring_alloc(struct nfp_net_d
  
  	tx_ring->cnt = dp->txd_cnt;
  
 -	tx_ring->size = sizeof(*tx_ring->txds) * tx_ring->cnt;
 +	tx_ring->size = array_size(tx_ring->cnt, sizeof(*tx_ring->txds));
  	tx_ring->txds = dma_zalloc_coherent(dp->dev, tx_ring->size,
 -					    &tx_ring->dma, GFP_KERNEL);
 -	if (!tx_ring->txds)
 +					    &tx_ring->dma,
 +					    GFP_KERNEL | __GFP_NOWARN);
 +	if (!tx_ring->txds) {
 +		netdev_warn(dp->netdev, "failed to allocate TX descriptor ring memory, requested descriptor count: %d, consider lowering descriptor count\n",
 +			    tx_ring->cnt);
  		goto err_alloc;
 +	}
  
- 	sz = sizeof(*tx_ring->txbufs) * tx_ring->cnt;
- 	tx_ring->txbufs = kzalloc(sz, GFP_KERNEL);
+ 	tx_ring->txbufs = kvcalloc(tx_ring->cnt, sizeof(*tx_ring->txbufs),
+ 				   GFP_KERNEL);
  	if (!tx_ring->txbufs)
  		goto err_alloc;
  
@@@ -2359,18 -2308,14 +2362,18 @@@ nfp_net_rx_ring_alloc(struct nfp_net_d
  	}
  
  	rx_ring->cnt = dp->rxd_cnt;
 -	rx_ring->size = sizeof(*rx_ring->rxds) * rx_ring->cnt;
 +	rx_ring->size = array_size(rx_ring->cnt, sizeof(*rx_ring->rxds));
  	rx_ring->rxds = dma_zalloc_coherent(dp->dev, rx_ring->size,
 -					    &rx_ring->dma, GFP_KERNEL);
 -	if (!rx_ring->rxds)
 +					    &rx_ring->dma,
 +					    GFP_KERNEL | __GFP_NOWARN);
 +	if (!rx_ring->rxds) {
 +		netdev_warn(dp->netdev, "failed to allocate RX descriptor ring memory, requested descriptor count: %d, consider lowering descriptor count\n",
 +			    rx_ring->cnt);
  		goto err_alloc;
 +	}
  
- 	sz = sizeof(*rx_ring->rxbufs) * rx_ring->cnt;
- 	rx_ring->rxbufs = kzalloc(sz, GFP_KERNEL);
+ 	rx_ring->rxbufs = kvcalloc(rx_ring->cnt, sizeof(*rx_ring->rxbufs),
+ 				   GFP_KERNEL);
  	if (!rx_ring->rxbufs)
  		goto err_alloc;
  
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
