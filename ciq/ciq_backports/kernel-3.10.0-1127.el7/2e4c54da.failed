topology: Create core_cpus and die_cpus sysfs attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Len Brown <len.brown@intel.com>
commit 2e4c54dac7b360c3820399bdf06cde9134a4495b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/2e4c54da.failed

Create CPU topology sysfs attributes: "core_cpus" and "core_cpus_list"

These attributes represent all of the logical CPUs that share the
same core.

These attriutes is synonymous with the existing "thread_siblings" and
"thread_siblings_list" attribute, which will be deprecated.

Create CPU topology sysfs attributes: "die_cpus" and "die_cpus_list".
These attributes represent all of the logical CPUs that share the
same die.

	Suggested-by: Brice Goglin <Brice.Goglin@inria.fr>
	Signed-off-by: Len Brown <len.brown@intel.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Ingo Molnar <mingo@kernel.org>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lkml.kernel.org/r/071c23a298cd27ede6ed0b6460cae190d193364f.1557769318.git.len.brown@intel.com

(cherry picked from commit 2e4c54dac7b360c3820399bdf06cde9134a4495b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/topology.h
#	arch/x86/xen/smp_pv.c
#	drivers/base/topology.c
diff --cc arch/x86/include/asm/topology.h
index 4dea18d14c90,4b14d2318251..000000000000
--- a/arch/x86/include/asm/topology.h
+++ b/arch/x86/include/asm/topology.h
@@@ -119,11 -104,14 +119,17 @@@ static inline void setup_node_to_cpumas
  
  extern const struct cpumask *cpu_coregroup_mask(int cpu);
  
 -#define topology_logical_package_id(cpu)	(cpu_data(cpu).logical_proc_id)
 +#ifdef ENABLE_TOPO_DEFINES
 +#define topology_logical_package_id(cpu)	(rh_cpu_data(cpu).logical_proc_id)
  #define topology_physical_package_id(cpu)	(cpu_data(cpu).phys_proc_id)
 -#define topology_logical_die_id(cpu)		(cpu_data(cpu).logical_die_id)
  #define topology_die_id(cpu)			(cpu_data(cpu).cpu_die_id)
  #define topology_core_id(cpu)			(cpu_data(cpu).cpu_core_id)
++<<<<<<< HEAD
++=======
+ 
+ #ifdef CONFIG_SMP
+ #define topology_die_cpumask(cpu)		(per_cpu(cpu_die_map, cpu))
++>>>>>>> 2e4c54dac7b3 (topology: Create core_cpus and die_cpus sysfs attributes)
  #define topology_core_cpumask(cpu)		(per_cpu(cpu_core_map, cpu))
  #define topology_sibling_cpumask(cpu)		(per_cpu(cpu_sibling_map, cpu))
  
diff --cc drivers/base/topology.c
index 8d2924e98acd,4e033d4cc0dc..000000000000
--- a/drivers/base/topology.c
+++ b/drivers/base/topology.c
@@@ -107,15 -47,23 +107,29 @@@ define_id_show_func(die_id)
  static DEVICE_ATTR_RO(die_id);
  
  define_id_show_func(core_id);
 -static DEVICE_ATTR_RO(core_id);
 +define_one_ro(core_id);
  
 -define_siblings_show_func(thread_siblings, sibling_cpumask);
 -static DEVICE_ATTR_RO(thread_siblings);
 -static DEVICE_ATTR_RO(thread_siblings_list);
 +define_siblings_show_func(sibling_cpumask);
 +define_one_ro_named(thread_siblings, show_sibling_cpumask);
 +define_one_ro_named(thread_siblings_list, show_sibling_cpumask_list);
  
++<<<<<<< HEAD
 +define_siblings_show_func(core_cpumask);
 +define_one_ro_named(core_siblings, show_core_cpumask);
 +define_one_ro_named(core_siblings_list, show_core_cpumask_list);
++=======
+ define_siblings_show_func(core_cpus, sibling_cpumask);
+ static DEVICE_ATTR_RO(core_cpus);
+ static DEVICE_ATTR_RO(core_cpus_list);
+ 
+ define_siblings_show_func(core_siblings, core_cpumask);
+ static DEVICE_ATTR_RO(core_siblings);
+ static DEVICE_ATTR_RO(core_siblings_list);
++>>>>>>> 2e4c54dac7b3 (topology: Create core_cpus and die_cpus sysfs attributes)
+ 
+ define_siblings_show_func(die_cpus, die_cpumask);
+ static DEVICE_ATTR_RO(die_cpus);
+ static DEVICE_ATTR_RO(die_cpus_list);
  
  define_siblings_show_func(package_cpus, core_cpumask);
  static DEVICE_ATTR_RO(package_cpus);
* Unmerged path arch/x86/xen/smp_pv.c
diff --git a/Documentation/cputopology.txt b/Documentation/cputopology.txt
index 48af5c290e20..b90dafcc8237 100644
--- a/Documentation/cputopology.txt
+++ b/Documentation/cputopology.txt
@@ -36,15 +36,15 @@ drawer_id:
 	identifier (rather than the kernel's).	The actual value is
 	architecture and platform dependent.
 
-thread_siblings:
+core_cpus:
 
-	internal kernel map of cpuX's hardware threads within the same
-	core as cpuX.
+	internal kernel map of CPUs within the same core.
+	(deprecated name: "thread_siblings")
 
-thread_siblings_list:
+core_cpus_list:
 
-	human-readable list of cpuX's hardware threads within the same
-	core as cpuX.
+	human-readable list of CPUs within the same core.
+	(deprecated name: "thread_siblings_list");
 
 package_cpus:
 
@@ -56,6 +56,14 @@ package_cpus_list:
 	human-readable list of CPUs sharing the same physical_package_id.
 	(deprecated name: "core_siblings_list")
 
+die_cpus:
+
+	internal kernel map of CPUs within the same die.
+
+die_cpus_list:
+
+	human-readable list of CPUs within the same die.
+
 book_siblings:
 
 	internal kernel map of cpuX's hardware threads within the same
@@ -93,6 +101,7 @@ these macros in include/asm-XXX/topology.h::
 	#define topology_drawer_id(cpu)
 	#define topology_sibling_cpumask(cpu)
 	#define topology_core_cpumask(cpu)
+	#define topology_die_cpumask(cpu)
 	#define topology_book_cpumask(cpu)
 	#define topology_drawer_cpumask(cpu)
 
diff --git a/arch/x86/include/asm/smp.h b/arch/x86/include/asm/smp.h
index ef71c8882ee1..5cef7b85d81b 100644
--- a/arch/x86/include/asm/smp.h
+++ b/arch/x86/include/asm/smp.h
@@ -31,6 +31,7 @@ static inline bool cpu_has_ht_siblings(void)
 
 DECLARE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_sibling_map);
 DECLARE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_core_map);
+DECLARE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_die_map);
 /* cpus sharing the last level cache: */
 DECLARE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_llc_shared_map);
 DECLARE_PER_CPU_READ_MOSTLY(u16, cpu_llc_id);
* Unmerged path arch/x86/include/asm/topology.h
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 9f0076e739c1..fcc169dd2d5c 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -101,6 +101,10 @@ EXPORT_PER_CPU_SYMBOL(cpu_sibling_map);
 DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_core_map);
 EXPORT_PER_CPU_SYMBOL(cpu_core_map);
 
+/* representing HT, core, and die siblings of each logical CPU */
+DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_die_map);
+EXPORT_PER_CPU_SYMBOL(cpu_die_map);
+
 DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_llc_shared_map);
 
 /* Per CPU bogomips and other parameters */
@@ -461,6 +465,15 @@ static bool match_pkg(struct cpuinfo_x86 *c, struct cpuinfo_x86 *o)
 	return false;
 }
 
+static bool match_die(struct cpuinfo_x86 *c, struct cpuinfo_x86 *o)
+{
+	if ((c->phys_proc_id == o->phys_proc_id) &&
+		(c->cpu_die_id == o->cpu_die_id))
+		return true;
+	return false;
+}
+
+
 #if defined(CONFIG_SCHED_SMT) || defined(CONFIG_SCHED_MC)
 static inline int x86_sched_itmt_flags(void)
 {
@@ -523,6 +536,7 @@ void set_cpu_sibling_map(int cpu)
 		cpumask_set_cpu(cpu, topology_sibling_cpumask(cpu));
 		cpumask_set_cpu(cpu, cpu_llc_shared_mask(cpu));
 		cpumask_set_cpu(cpu, topology_core_cpumask(cpu));
+		cpumask_set_cpu(cpu, topology_die_cpumask(cpu));
 		c->booted_cores = 1;
 		return;
 	}
@@ -571,6 +585,9 @@ void set_cpu_sibling_map(int cpu)
 		}
 		if (match_pkg(c, o) && !topology_same_node(c, o))
 			x86_has_numa_in_package = true;
+
+		if ((i == cpu) || (has_mp && match_die(c, o)))
+			link_mask(topology_die_cpumask, cpu, i);
 	}
 
 	threads = cpumask_weight(topology_sibling_cpumask(cpu));
@@ -1148,6 +1165,7 @@ static __init void disable_smp(void)
 		physid_set_mask_of_physid(0, &phys_cpu_present_map);
 	cpumask_set_cpu(0, topology_sibling_cpumask(0));
 	cpumask_set_cpu(0, topology_core_cpumask(0));
+	cpumask_set_cpu(0, topology_die_cpumask(0));
 }
 
 /*
@@ -1281,6 +1299,7 @@ void __init native_smp_prepare_cpus(unsigned int max_cpus)
 	for_each_possible_cpu(i) {
 		zalloc_cpumask_var(&per_cpu(cpu_sibling_map, i), GFP_KERNEL);
 		zalloc_cpumask_var(&per_cpu(cpu_core_map, i), GFP_KERNEL);
+		zalloc_cpumask_var(&per_cpu(cpu_die_map, i), GFP_KERNEL);
 		zalloc_cpumask_var(&per_cpu(cpu_llc_shared_map, i), GFP_KERNEL);
 	}
 
@@ -1523,6 +1542,8 @@ static void remove_siblinginfo(int cpu)
 			cpu_data(sibling).booted_cores--;
 	}
 
+	for_each_cpu(sibling, topology_die_cpumask(cpu))
+		cpumask_clear_cpu(cpu, topology_die_cpumask(sibling));
 	for_each_cpu(sibling, topology_sibling_cpumask(cpu))
 		cpumask_clear_cpu(cpu, topology_sibling_cpumask(sibling));
 	for_each_cpu(sibling, cpu_llc_shared_mask(cpu))
@@ -1530,6 +1551,7 @@ static void remove_siblinginfo(int cpu)
 	cpumask_clear(cpu_llc_shared_mask(cpu));
 	cpumask_clear(topology_sibling_cpumask(cpu));
 	cpumask_clear(topology_core_cpumask(cpu));
+	cpumask_clear(topology_die_cpumask(cpu));
 	c->cpu_core_id = 0;
 	c->booted_cores = 0;
 	cpumask_clear_cpu(cpu, cpu_sibling_setup_mask);
* Unmerged path arch/x86/xen/smp_pv.c
* Unmerged path drivers/base/topology.c
diff --git a/include/linux/topology.h b/include/linux/topology.h
index dbad0bfe2c56..f83f801e062f 100644
--- a/include/linux/topology.h
+++ b/include/linux/topology.h
@@ -200,6 +200,9 @@ static inline int cpu_to_mem(int cpu)
 #ifndef topology_core_cpumask
 #define topology_core_cpumask(cpu)		cpumask_of(cpu)
 #endif
+#ifndef topology_die_cpumask
+#define topology_die_cpumask(cpu)		cpumask_of(cpu)
+#endif
 
 #ifdef CONFIG_SCHED_SMT
 static inline const struct cpumask *cpu_smt_mask(int cpu)
