sched/deadline: Fix the intention to re-evalute tick dependency for offline CPU

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Wanpeng Li <wanpeng.li@hotmail.com>
commit 61c7aca695b6fabe85d0fc424fe8ae2f66f267dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/61c7aca6.failed

The dl task will be replenished after dl task timer fire and start a
new period. It will be enqueued and to re-evaluate its dependency on
the tick in order to restart it. However, if the CPU is hot-unplugged,
irq_work_queue will splash since the target CPU is offline.

As a result we get:

    WARNING: CPU: 2 PID: 0 at kernel/irq_work.c:69 irq_work_queue_on+0xad/0xe0
    Call Trace:
     dump_stack+0x99/0xd0
     __warn+0xd1/0xf0
     warn_slowpath_null+0x1d/0x20
     irq_work_queue_on+0xad/0xe0
     tick_nohz_full_kick_cpu+0x44/0x50
     tick_nohz_dep_set_cpu+0x74/0xb0
     enqueue_task_dl+0x226/0x480
     activate_task+0x5c/0xa0
     dl_task_timer+0x19b/0x2c0
     ? push_dl_task.part.31+0x190/0x190

This can be triggered by hot-unplugging the full dynticks CPU which dl
task is running on.

We enqueue the dl task on the offline CPU, because we need to do
replenish for start_dl_timer(). So, as Juri pointed out, we would
need to do is calling replenish_dl_entity() directly, instead of
enqueue_task_dl(). pi_se shouldn't be a problem as the task shouldn't
be boosted if it was throttled.

This patch fixes it by avoiding the whole enqueue+dequeue+enqueue story, by
first migrating (set_task_cpu()) and then doing 1 enqueue.

	Suggested-by: Peter Zijlstra <peterz@infradead.org>
	Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Juri Lelli <juri.lelli@arm.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Luca Abeni <luca.abeni@unitn.it>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1472639264-3932-1-git-send-email-wanpeng.li@hotmail.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 61c7aca695b6fabe85d0fc424fe8ae2f66f267dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
diff --cc kernel/sched/deadline.c
index 162a8d64d022,0c75bc656178..000000000000
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@@ -910,21 -655,6 +916,24 @@@ static enum hrtimer_restart dl_task_tim
  
  #ifdef CONFIG_SMP
  	/*
++<<<<<<< HEAD
 +	 * Perform balancing operations here; after the replenishments.  We
 +	 * cannot drop rq->lock before this, otherwise the assertion in
 +	 * start_dl_timer() about not missing updates is not true.
 +	 *
 +	 * If we find that the rq the task was on is no longer available, we
 +	 * need to select a new rq.
 +	 *
 +	 * XXX figure out if select_task_rq_dl() deals with offline cpus.
 +	 */
 +	if (unlikely(!rq->online)) {
 +		rq = dl_task_offline_migration(rq, p);
 +		update_rq_clock(rq);
 +	}
 +
 +	/*
++=======
++>>>>>>> 61c7aca695b6 (sched/deadline: Fix the intention to re-evalute tick dependency for offline CPU)
  	 * Queueing this task back might have overloaded rq, check if we need
  	 * to kick someone away.
  	 */
* Unmerged path kernel/sched/deadline.c
