PCI: hv: Remove unused reason for refcount handler

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Stephen Hemminger <stephen@networkplumber.org>
commit 8c99e120ffcabc429d74e1e4d10db893c6888ef4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/8c99e120.failed

The get/put functions were taking a reason code. This appears to be
a debug infrastructure that is no longer used.

Move the functions to start of file to eliminate need for
forward declaration. Forward declarations are discouraged on
Linux.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
[lorenzo.pieralisi@arm.com: updated commit subject]
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
(cherry picked from commit 8c99e120ffcabc429d74e1e4d10db893c6888ef4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index 926a47aca5bf,522fd7687f07..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -821,17 -796,65 +817,78 @@@ static struct pci_ops hv_pcifront_ops 
  	.write = hv_pcifront_write_config,
  };
  
 +static inline struct pci_dev *msi_desc_to_pci_dev(struct msi_desc *desc)
 +{
 +        return desc->dev;
 +}
 +
 +struct irq_cfg *irqd_cfg(struct irq_data *irq_data)
 +{
 +        return irq_data->chip_data;
 +}
 +
  /* Interrupt management hooks */
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
++=======
+ static void hv_int_desc_free(struct hv_pci_dev *hpdev,
+ 			     struct tran_int_desc *int_desc)
+ {
+ 	struct pci_delete_interrupt *int_pkt;
+ 	struct {
+ 		struct pci_packet pkt;
+ 		u8 buffer[sizeof(struct pci_delete_interrupt)];
+ 	} ctxt;
+ 
+ 	memset(&ctxt, 0, sizeof(ctxt));
+ 	int_pkt = (struct pci_delete_interrupt *)&ctxt.pkt.message;
+ 	int_pkt->message_type.type =
+ 		PCI_DELETE_INTERRUPT_MESSAGE;
+ 	int_pkt->wslot.slot = hpdev->desc.win_slot.slot;
+ 	int_pkt->int_desc = *int_desc;
+ 	vmbus_sendpacket(hpdev->hbus->hdev->channel, int_pkt, sizeof(*int_pkt),
+ 			 (unsigned long)&ctxt.pkt, VM_PKT_DATA_INBAND, 0);
+ 	kfree(int_desc);
+ }
+ 
+ /**
+  * hv_msi_free() - Free the MSI.
+  * @domain:	The interrupt domain pointer
+  * @info:	Extra MSI-related context
+  * @irq:	Identifies the IRQ.
+  *
+  * The Hyper-V parent partition and hypervisor are tracking the
+  * messages that are in use, keeping the interrupt redirection
+  * table up to date.  This callback sends a message that frees
+  * the IRT entry and related tracking nonsense.
+  */
+ static void hv_msi_free(struct irq_domain *domain, struct msi_domain_info *info,
+ 			unsigned int irq)
+ {
+ 	struct hv_pcibus_device *hbus;
+ 	struct hv_pci_dev *hpdev;
+ 	struct pci_dev *pdev;
+ 	struct tran_int_desc *int_desc;
+ 	struct irq_data *irq_data = irq_domain_get_irq_data(domain, irq);
+ 	struct msi_desc *msi = irq_data_get_msi_desc(irq_data);
+ 
+ 	pdev = msi_desc_to_pci_dev(msi);
+ 	hbus = info->data;
+ 	int_desc = irq_data_get_irq_chip_data(irq_data);
+ 	if (!int_desc)
+ 		return;
+ 
+ 	irq_data->chip_data = NULL;
+ 	hpdev = get_pcichild_wslot(hbus, devfn_to_wslot(pdev->devfn));
+ 	if (!hpdev) {
+ 		kfree(int_desc);
+ 		return;
+ 	}
+ 
+ 	hv_int_desc_free(hpdev, int_desc);
+ 	put_pcichild(hpdev);
+ }
+ 
++>>>>>>> 8c99e120ffca (PCI: hv: Remove unused reason for refcount handler):drivers/pci/host/pci-hyperv.c
  static int hv_set_affinity(struct irq_data *data, const struct cpumask *dest,
  			   bool force)
  {
@@@ -1838,10 -1871,10 +1882,10 @@@ static void hv_eject_device_work(struc
  static void hv_pci_eject_device(struct hv_pci_dev *hpdev)
  {
  	hpdev->state = hv_pcichild_ejecting;
- 	get_pcichild(hpdev, hv_pcidev_ref_pnp);
+ 	get_pcichild(hpdev);
  	INIT_WORK(&hpdev->wrk, hv_eject_device_work);
  	get_hvpcibus(hpdev->hbus);
 -	queue_work(hpdev->hbus->wq, &hpdev->wrk);
 +	schedule_work(&hpdev->wrk);
  }
  
  /**
* Unmerged path drivers/pci/pci-hyperv.c
