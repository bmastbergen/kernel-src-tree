x86/io: add interface to reserve io memtype for a resource range. (v1.1)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Dave Airlie <airlied@redhat.com>
commit 8ef4227615e158faa4ee85a1d6466782f7e22f2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/8ef42276.failed

A recent change to the mm code in:
87744ab3832b mm: fix cache mode tracking in vm_insert_mixed()

started enforcing checking the memory type against the registered list for
amixed pfn insertion mappings. It happens that the drm drivers for a number
of gpus relied on this being broken. Currently the driver only inserted
VRAM mappings into the tracking table when they came from the kernel,
and userspace mappings never landed in the table. This led to a regression
where all the mapping end up as UC instead of WC now.

I've considered a number of solutions but since this needs to be fixed
in fixes and not next, and some of the solutions were going to introduce
overhead that hadn't been there before I didn't consider them viable at
this stage. These mainly concerned hooking into the TTM io reserve APIs,
but these API have a bunch of fast paths I didn't want to unwind to add
this to.

The solution I've decided on is to add a new API like the arch_phys_wc
APIs (these would have worked but wc_del didn't take a range), and
use them from the drivers to add a WC compatible mapping to the table
for all VRAM on those GPUs. This means we can then create userspace
mapping that won't get degraded to UC.

v1.1: use CONFIG_X86_PAT + add some comments in io.h

	Cc: Toshi Kani <toshi.kani@hp.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: x86@kernel.org
	Cc: mcgrof@suse.com
	Cc: Dan Williams <dan.j.williams@intel.com>
	Acked-by: Ingo Molnar <mingo@kernel.org>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Dave Airlie <airlied@redhat.com>
(cherry picked from commit 8ef4227615e158faa4ee85a1d6466782f7e22f2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/io.h
diff --cc arch/x86/include/asm/io.h
index 14102f6c4ca0,d34bd370074b..000000000000
--- a/arch/x86/include/asm/io.h
+++ b/arch/x86/include/asm/io.h
@@@ -394,12 -351,10 +394,20 @@@ extern void arch_phys_wc_del(int handle
  #define arch_phys_wc_add arch_phys_wc_add
  #endif
  
++<<<<<<< HEAD
 +extern bool arch_memremap_can_ram_remap(resource_size_t offset,
 +					unsigned long size,
 +					unsigned long flags);
 +#define arch_memremap_can_ram_remap arch_memremap_can_ram_remap
 +
 +extern bool phys_mem_access_encrypted(unsigned long phys_addr,
 +				      unsigned long size);
++=======
+ #ifdef CONFIG_X86_PAT
+ extern int arch_io_reserve_memtype_wc(resource_size_t start, resource_size_t size);
+ extern void arch_io_free_memtype_wc(resource_size_t start, resource_size_t size);
+ #define arch_io_reserve_memtype_wc arch_io_reserve_memtype_wc
+ #endif
++>>>>>>> 8ef4227615e1 (x86/io: add interface to reserve io memtype for a resource range. (v1.1))
  
  #endif /* _ASM_X86_IO_H */
* Unmerged path arch/x86/include/asm/io.h
diff --git a/arch/x86/mm/pat.c b/arch/x86/mm/pat.c
index 211f3f2dd71d..190c542f83c6 100644
--- a/arch/x86/mm/pat.c
+++ b/arch/x86/mm/pat.c
@@ -580,6 +580,20 @@ void io_free_memtype(resource_size_t start, resource_size_t end)
 	free_memtype(start, end);
 }
 
+int arch_io_reserve_memtype_wc(resource_size_t start, resource_size_t size)
+{
+	enum page_cache_mode type = _PAGE_CACHE_MODE_WC;
+
+	return io_reserve_memtype(start, start + size, &type);
+}
+EXPORT_SYMBOL(arch_io_reserve_memtype_wc);
+
+void arch_io_free_memtype_wc(resource_size_t start, resource_size_t size)
+{
+	io_free_memtype(start, start + size);
+}
+EXPORT_SYMBOL(arch_io_free_memtype_wc);
+
 pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
 				unsigned long size, pgprot_t vma_prot)
 {
diff --git a/include/linux/io.h b/include/linux/io.h
index b91e35402c73..91f07016ba46 100644
--- a/include/linux/io.h
+++ b/include/linux/io.h
@@ -132,4 +132,26 @@ enum {
 void *memremap(resource_size_t offset, size_t size, unsigned long flags);
 void memunmap(void *addr);
 
+/*
+ * On x86 PAT systems we have memory tracking that keeps track of
+ * the allowed mappings on memory ranges. This tracking works for
+ * all the in-kernel mapping APIs (ioremap*), but where the user
+ * wishes to map a range from a physical device into user memory
+ * the tracking won't be updated. This API is to be used by
+ * drivers which remap physical device pages into userspace,
+ * and wants to make sure they are mapped WC and not UC.
+ */
+#ifndef arch_io_reserve_memtype_wc
+static inline int arch_io_reserve_memtype_wc(resource_size_t base,
+					     resource_size_t size)
+{
+	return 0;
+}
+
+static inline void arch_io_free_memtype_wc(resource_size_t base,
+					   resource_size_t size)
+{
+}
+#endif
+
 #endif /* _LINUX_IO_H */
