percpu: stop printing kernel addresses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Matteo Croce <mcroce@redhat.com>
commit 00206a69ee32f03e6f40837684dcbe475ea02266
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/00206a69.failed

Since commit ad67b74d2469d9b8 ("printk: hash addresses printed with %p"),
at boot "____ptrval____" is printed instead of actual addresses:

    percpu: Embedded 38 pages/cpu @(____ptrval____) s124376 r0 d31272 u524288

Instead of changing the print to "%px", and leaking kernel addresses,
just remove the print completely, cfr. e.g. commit 071929dbdd865f77
("arm64: Stop printing the virtual memory layout").

	Signed-off-by: Matteo Croce <mcroce@redhat.com>
	Signed-off-by: Dennis Zhou <dennis@kernel.org>
(cherry picked from commit 00206a69ee32f03e6f40837684dcbe475ea02266)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/percpu.c
diff --cc mm/percpu.c
index 60a1f468f968,68dd2e7e73b5..000000000000
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@@ -2048,28 -2563,12 +2048,33 @@@ int __init pcpu_embed_first_chunk(size_
  	}
  
  	/* base address is now known, determine group base offsets */
 +	max_distance = 0;
  	for (group = 0; group < ai->nr_groups; group++) {
  		ai->groups[group].base_offset = areas[group] - base;
 +		max_distance = max_t(size_t, max_distance,
 +				     ai->groups[group].base_offset);
 +	}
 +	max_distance += ai->unit_size;
 +
 +	/* warn if maximum distance is further than 75% of vmalloc space */
 +	if (max_distance > VMALLOC_TOTAL * 3 / 4) {
 +		pr_warning("PERCPU: max_distance=0x%zx too large for vmalloc "
 +			   "space 0x%lx\n", max_distance,
 +			   VMALLOC_TOTAL);
 +#ifdef CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK
 +		/* and fail if we have fallback */
 +		rc = -EINVAL;
 +		goto out_free;
 +#endif
  	}
  
++<<<<<<< HEAD
 +	pr_info("PERCPU: Embedded %zu pages/cpu @%p s%zu r%zu d%zu u%zu\n",
 +		PFN_DOWN(size_sum), base, ai->static_size, ai->reserved_size,
++=======
+ 	pr_info("Embedded %zu pages/cpu s%zu r%zu d%zu u%zu\n",
+ 		PFN_DOWN(size_sum), ai->static_size, ai->reserved_size,
++>>>>>>> 00206a69ee32 (percpu: stop printing kernel addresses)
  		ai->dyn_size, ai->unit_size);
  
  	rc = pcpu_setup_first_chunk(ai, base);
@@@ -2182,8 -2692,8 +2187,13 @@@ int __init pcpu_page_first_chunk(size_
  	}
  
  	/* we're ready, commit */
++<<<<<<< HEAD
 +	pr_info("PERCPU: %d %s pages/cpu @%p s%zu r%zu d%zu\n",
 +		unit_pages, psize_str, vm.addr, ai->static_size,
++=======
+ 	pr_info("%d %s pages/cpu s%zu r%zu d%zu\n",
+ 		unit_pages, psize_str, ai->static_size,
++>>>>>>> 00206a69ee32 (percpu: stop printing kernel addresses)
  		ai->reserved_size, ai->dyn_size);
  
  	rc = pcpu_setup_first_chunk(ai, vm.addr);
* Unmerged path mm/percpu.c
