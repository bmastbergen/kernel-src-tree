sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Dave Chiluk <chiluk+linux@indeed.com>
commit de53fd7aedb100f03e5d2231cfce0e4993282425
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/de53fd7a.failed

It has been observed, that highly-threaded, non-cpu-bound applications
running under cpu.cfs_quota_us constraints can hit a high percentage of
periods throttled while simultaneously not consuming the allocated
amount of quota. This use case is typical of user-interactive non-cpu
bound applications, such as those running in kubernetes or mesos when
run on multiple cpu cores.

This has been root caused to cpu-local run queue being allocated per cpu
bandwidth slices, and then not fully using that slice within the period.
At which point the slice and quota expires. This expiration of unused
slice results in applications not being able to utilize the quota for
which they are allocated.

The non-expiration of per-cpu slices was recently fixed by
'commit 512ac999d275 ("sched/fair: Fix bandwidth timer clock drift
condition")'. Prior to that it appears that this had been broken since
at least 'commit 51f2176d74ac ("sched/fair: Fix unlocked reads of some
cfs_b->quota/period")' which was introduced in v3.16-rc1 in 2014. That
added the following conditional which resulted in slices never being
expired.

if (cfs_rq->runtime_expires != cfs_b->runtime_expires) {
	/* extend local deadline, drift is bounded above by 2 ticks */
	cfs_rq->runtime_expires += TICK_NSEC;

Because this was broken for nearly 5 years, and has recently been fixed
and is now being noticed by many users running kubernetes
(https://github.com/kubernetes/kubernetes/issues/67577) it is my opinion
that the mechanisms around expiring runtime should be removed
altogether.

This allows quota already allocated to per-cpu run-queues to live longer
than the period boundary. This allows threads on runqueues that do not
use much CPU to continue to use their remaining slice over a longer
period of time than cpu.cfs_period_us. However, this helps prevent the
above condition of hitting throttling while also not fully utilizing
your cpu quota.

This theoretically allows a machine to use slightly more than its
allotted quota in some periods. This overflow would be bounded by the
remaining quota left on each per-cpu runqueueu. This is typically no
more than min_cfs_rq_runtime=1ms per cpu. For CPU bound tasks this will
change nothing, as they should theoretically fully utilize all of their
quota in each period. For user-interactive tasks as described above this
provides a much better user/application experience as their cpu
utilization will more closely match the amount they requested when they
hit throttling. This means that cpu limits no longer strictly apply per
period for non-cpu bound applications, but that they are still accurate
over longer timeframes.

This greatly improves performance of high-thread-count, non-cpu bound
applications with low cfs_quota_us allocation on high-core-count
machines. In the case of an artificial testcase (10ms/100ms of quota on
80 CPU machine), this commit resulted in almost 30x performance
improvement, while still maintaining correct cpu quota restrictions.
That testcase is available at https://github.com/indeedeng/fibtest.

Fixes: 512ac999d275 ("sched/fair: Fix bandwidth timer clock drift condition")
	Signed-off-by: Dave Chiluk <chiluk+linux@indeed.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Phil Auld <pauld@redhat.com>
	Reviewed-by: Ben Segall <bsegall@google.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: John Hammond <jhammond@indeed.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Kyle Anderson <kwa@yelp.com>
	Cc: Gabriel Munos <gmunoz@netflix.com>
	Cc: Peter Oskolkov <posk@posk.io>
	Cc: Cong Wang <xiyou.wangcong@gmail.com>
	Cc: Brendan Gregg <bgregg@netflix.com>
Link: https://lkml.kernel.org/r/1563900266-19734-2-git-send-email-chiluk+linux@indeed.com
(cherry picked from commit de53fd7aedb100f03e5d2231cfce0e4993282425)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
#	kernel/sched/sched.h
diff --cc kernel/sched/fair.c
index c68fec18dead,7d8043fc8317..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -3548,9 -4658,9 +3499,9 @@@ next
   * period the timer is deactivated until scheduling resumes; cfs_b->idle is
   * used to track this state.
   */
 -static int do_sched_cfs_period_timer(struct cfs_bandwidth *cfs_b, int overrun, unsigned long flags)
 +static int do_sched_cfs_period_timer(struct cfs_bandwidth *cfs_b, int overrun)
  {
- 	u64 runtime, runtime_expires;
+ 	u64 runtime;
  	int throttled;
  
  	/* no need to continue the timer with no bandwidth constraint */
@@@ -3597,11 -4698,10 +3546,16 @@@
  	while (throttled && cfs_b->runtime > 0 && !cfs_b->distribute_running) {
  		runtime = cfs_b->runtime;
  		cfs_b->distribute_running = 1;
 -		raw_spin_unlock_irqrestore(&cfs_b->lock, flags);
 +		raw_spin_unlock(&cfs_b->lock);
  		/* we can't nest cfs_b->lock while distributing bandwidth */
++<<<<<<< HEAD
 +		runtime = distribute_cfs_runtime(cfs_b, runtime,
 +						 runtime_expires);
 +		raw_spin_lock(&cfs_b->lock);
++=======
+ 		runtime = distribute_cfs_runtime(cfs_b, runtime);
+ 		raw_spin_lock_irqsave(&cfs_b->lock, flags);
++>>>>>>> de53fd7aedb1 (sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices)
  
  		cfs_b->distribute_running = 0;
  		throttled = !list_empty(&cfs_b->throttled_cfs_rq);
@@@ -3710,12 -4814,13 +3663,16 @@@ static __always_inline void return_cfs_
  static void do_sched_cfs_slack_timer(struct cfs_bandwidth *cfs_b)
  {
  	u64 runtime = 0, slice = sched_cfs_bandwidth_slice();
++<<<<<<< HEAD
 +	u64 expires;
++=======
+ 	unsigned long flags;
++>>>>>>> de53fd7aedb1 (sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices)
  
  	/* confirm we're still not at a refresh boundary */
 -	raw_spin_lock_irqsave(&cfs_b->lock, flags);
 -	cfs_b->slack_started = false;
 +	raw_spin_lock(&cfs_b->lock);
  	if (cfs_b->distribute_running) {
 -		raw_spin_unlock_irqrestore(&cfs_b->lock, flags);
 +		raw_spin_unlock(&cfs_b->lock);
  		return;
  	}
  
@@@ -3736,13 -4840,12 +3692,18 @@@
  	if (!runtime)
  		return;
  
- 	runtime = distribute_cfs_runtime(cfs_b, runtime, expires);
+ 	runtime = distribute_cfs_runtime(cfs_b, runtime);
  
++<<<<<<< HEAD
 +	raw_spin_lock(&cfs_b->lock);
 +	if (expires == cfs_b->runtime_expires)
 +		cfs_b->runtime -= min(runtime, cfs_b->runtime);
++=======
+ 	raw_spin_lock_irqsave(&cfs_b->lock, flags);
+ 	lsub_positive(&cfs_b->runtime, runtime);
++>>>>>>> de53fd7aedb1 (sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices)
  	cfs_b->distribute_running = 0;
 -	raw_spin_unlock_irqrestore(&cfs_b->lock, flags);
 +	raw_spin_unlock(&cfs_b->lock);
  }
  
  /*
@@@ -3888,28 -4989,18 +3849,39 @@@ static void init_cfs_rq_runtime(struct 
  	INIT_LIST_HEAD(&cfs_rq->throttled_list);
  }
  
 -void start_cfs_bandwidth(struct cfs_bandwidth *cfs_b)
 +/* requires cfs_b->lock, may release to reprogram timer */
 +void __start_cfs_bandwidth(struct cfs_bandwidth *cfs_b, bool force)
  {
 -	u64 overrun;
 +	/*
 +	 * The timer may be active because we're trying to set a new bandwidth
 +	 * period or because we're racing with the tear-down path
 +	 * (timer_active==0 becomes visible before the hrtimer call-back
 +	 * terminates).  In either case we ensure that it's re-programmed
 +	 */
 +	while (unlikely(hrtimer_active(&cfs_b->period_timer)) &&
 +	       hrtimer_try_to_cancel(&cfs_b->period_timer) < 0) {
 +		/* bounce the lock to allow do_sched_cfs_period_timer to run */
 +		raw_spin_unlock(&cfs_b->lock);
 +		cpu_relax();
 +		raw_spin_lock(&cfs_b->lock);
 +		/* if someone else restarted the timer then we're done */
 +		if (!force && cfs_b->timer_active)
 +			return;
 +	}
  
++<<<<<<< HEAD
 +	cfs_b->timer_active = 1;
 +	start_bandwidth_timer(&cfs_b->period_timer, cfs_b->period);
++=======
+ 	lockdep_assert_held(&cfs_b->lock);
+ 
+ 	if (cfs_b->period_active)
+ 		return;
+ 
+ 	cfs_b->period_active = 1;
+ 	overrun = hrtimer_forward_now(&cfs_b->period_timer, cfs_b->period);
+ 	hrtimer_start_expires(&cfs_b->period_timer, HRTIMER_MODE_ABS_PINNED);
++>>>>>>> de53fd7aedb1 (sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices)
  }
  
  static void destroy_cfs_bandwidth(struct cfs_bandwidth *cfs_b)
diff --cc kernel/sched/sched.h
index 38c9ae998b34,ea48aa5daeee..000000000000
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@@ -228,25 -330,24 +228,33 @@@ extern struct list_head task_groups
  
  struct cfs_bandwidth {
  #ifdef CONFIG_CFS_BANDWIDTH
++<<<<<<< HEAD
 +	raw_spinlock_t lock;
 +	ktime_t period;
 +	u64 quota, runtime;
 +	s64 hierarchal_quota;
 +	u64 runtime_expires;
 +#ifndef __GENKSYMS__
 +	int expires_seq;
 +	short idle;
 +	short timer_active;
 +#else
 +	int idle, timer_active;
 +#endif
 +	struct hrtimer period_timer, slack_timer;
 +	struct list_head throttled_cfs_rq;
++=======
+ 	raw_spinlock_t		lock;
+ 	ktime_t			period;
+ 	u64			quota;
+ 	u64			runtime;
+ 	s64			hierarchical_quota;
++>>>>>>> de53fd7aedb1 (sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices)
  
 -	u8			idle;
 -	u8			period_active;
 -	u8			distribute_running;
 -	u8			slack_started;
 -	struct hrtimer		period_timer;
 -	struct hrtimer		slack_timer;
 -	struct list_head	throttled_cfs_rq;
 -
 -	/* Statistics: */
 -	int			nr_periods;
 -	int			nr_throttled;
 -	u64			throttled_time;
 +	/* statistics */
 +	int nr_periods, nr_throttled;
 +	u64 throttled_time;
 +	RH_KABI_EXTEND(bool distribute_running)
  #endif
  };
  
@@@ -431,30 -546,24 +439,35 @@@ struct cfs_rq 
  	 * a hierarchy). Non-leaf lrqs hold other higher schedulable entities
  	 * (like users, containers etc.)
  	 *
 -	 * leaf_cfs_rq_list ties together list of leaf cfs_rq's in a CPU.
 -	 * This list is used during load balance.
 +	 * leaf_cfs_rq_list ties together list of leaf cfs_rq's in a cpu. This
 +	 * list is used during load balance.
  	 */
 -	int			on_list;
 -	struct list_head	leaf_cfs_rq_list;
 -	struct task_group	*tg;	/* group that "owns" this runqueue */
 +	int on_list;
 +	struct list_head leaf_cfs_rq_list;
 +	struct task_group *tg;	/* group that "owns" this runqueue */
  
  #ifdef CONFIG_CFS_BANDWIDTH
++<<<<<<< HEAD
 +	int runtime_enabled;
 +	u64 runtime_expires;
 +	s64 runtime_remaining;
++=======
+ 	int			runtime_enabled;
+ 	s64			runtime_remaining;
++>>>>>>> de53fd7aedb1 (sched/fair: Fix low cpu usage with high throttling by removing expiration of cpu-local slices)
  
 -	u64			throttled_clock;
 -	u64			throttled_clock_task;
 -	u64			throttled_clock_task_time;
 -	int			throttled;
 -	int			throttle_count;
 -	struct list_head	throttled_list;
 +	u64 throttled_clock, throttled_clock_task;
 +	u64 throttled_clock_task_time;
 +	int throttled, throttle_count;
 +	struct list_head throttled_list;
  #endif /* CONFIG_CFS_BANDWIDTH */
 +#ifdef CONFIG_SMP
 +	RH_KABI_EXTEND(u64 last_h_load_update)
 +	RH_KABI_EXTEND(struct sched_entity *h_load_next)
 +#endif
 +#ifdef CONFIG_CFS_BANDWIDTH
 +	RH_KABI_EXTEND(int expires_seq)
 +#endif
  #endif /* CONFIG_FAIR_GROUP_SCHED */
  };
  
diff --git a/Documentation/scheduler/sched-bwc.txt b/Documentation/scheduler/sched-bwc.txt
index f6b1873f68ab..3397995168bb 100644
--- a/Documentation/scheduler/sched-bwc.txt
+++ b/Documentation/scheduler/sched-bwc.txt
@@ -8,15 +8,16 @@ CFS bandwidth control is a CONFIG_FAIR_GROUP_SCHED extension which allows the
 specification of the maximum CPU bandwidth available to a group or hierarchy.
 
 The bandwidth allowed for a group is specified using a quota and period. Within
-each given "period" (microseconds), a group is allowed to consume only up to
-"quota" microseconds of CPU time.  When the CPU bandwidth consumption of a
-group exceeds this limit (for that period), the tasks belonging to its
-hierarchy will be throttled and are not allowed to run again until the next
-period.
-
-A group's unused runtime is globally tracked, being refreshed with quota units
-above at each period boundary.  As threads consume this bandwidth it is
-transferred to cpu-local "silos" on a demand basis.  The amount transferred
+each given "period" (microseconds), a task group is allocated up to "quota"
+microseconds of CPU time. That quota is assigned to per-cpu run queues in
+slices as threads in the cgroup become runnable. Once all quota has been
+assigned any additional requests for quota will result in those threads being
+throttled. Throttled threads will not be able to run again until the next
+period when the quota is replenished.
+
+A group's unassigned quota is globally tracked, being refreshed back to
+cfs_quota units at each period boundary. As threads consume this bandwidth it
+is transferred to cpu-local "silos" on a demand basis. The amount transferred
 within each of these updates is tunable and described as the "slice".
 
 Management
@@ -33,12 +34,12 @@ The default values are:
 
 A value of -1 for cpu.cfs_quota_us indicates that the group does not have any
 bandwidth restriction in place, such a group is described as an unconstrained
-bandwidth group.  This represents the traditional work-conserving behavior for
+bandwidth group. This represents the traditional work-conserving behavior for
 CFS.
 
 Writing any (valid) positive value(s) will enact the specified bandwidth limit.
-The minimum quota allowed for the quota or period is 1ms.  There is also an
-upper bound on the period length of 1s.  Additional restrictions exist when
+The minimum quota allowed for the quota or period is 1ms. There is also an
+upper bound on the period length of 1s. Additional restrictions exist when
 bandwidth limits are used in a hierarchical fashion, these are explained in
 more detail below.
 
@@ -51,8 +52,8 @@ unthrottled if it is in a constrained state.
 System wide settings
 --------------------
 For efficiency run-time is transferred between the global pool and CPU local
-"silos" in a batch fashion.  This greatly reduces global accounting pressure
-on large systems.  The amount transferred each time such an update is required
+"silos" in a batch fashion. This greatly reduces global accounting pressure
+on large systems. The amount transferred each time such an update is required
 is described as the "slice".
 
 This is tunable via procfs:
@@ -90,6 +91,51 @@ There are two ways in which a group may become throttled:
 In case b) above, even though the child may have runtime remaining it will not
 be allowed to until the parent's runtime is refreshed.
 
+CFS Bandwidth Quota Caveats
+---------------------------
+Once a slice is assigned to a cpu it does not expire.  However all but 1ms of
+the slice may be returned to the global pool if all threads on that cpu become
+unrunnable. This is configured at compile time by the min_cfs_rq_runtime
+variable. This is a performance tweak that helps prevent added contention on
+the global lock.
+
+The fact that cpu-local slices do not expire results in some interesting corner
+cases that should be understood.
+
+For cgroup cpu constrained applications that are cpu limited this is a
+relatively moot point because they will naturally consume the entirety of their
+quota as well as the entirety of each cpu-local slice in each period. As a
+result it is expected that nr_periods roughly equal nr_throttled, and that
+cpuacct.usage will increase roughly equal to cfs_quota_us in each period.
+
+For highly-threaded, non-cpu bound applications this non-expiration nuance
+allows applications to briefly burst past their quota limits by the amount of
+unused slice on each cpu that the task group is running on (typically at most
+1ms per cpu or as defined by min_cfs_rq_runtime).  This slight burst only
+applies if quota had been assigned to a cpu and then not fully used or returned
+in previous periods. This burst amount will not be transferred between cores.
+As a result, this mechanism still strictly limits the task group to quota
+average usage, albeit over a longer time window than a single period.  This
+also limits the burst ability to no more than 1ms per cpu.  This provides
+better more predictable user experience for highly threaded applications with
+small quota limits on high core count machines. It also eliminates the
+propensity to throttle these applications while simultanously using less than
+quota amounts of cpu. Another way to say this, is that by allowing the unused
+portion of a slice to remain valid across periods we have decreased the
+possibility of wastefully expiring quota on cpu-local silos that don't need a
+full slice's amount of cpu time.
+
+The interaction between cpu-bound and non-cpu-bound-interactive applications
+should also be considered, especially when single core usage hits 100%. If you
+gave each of these applications half of a cpu-core and they both got scheduled
+on the same CPU it is theoretically possible that the non-cpu bound application
+will use up to 1ms additional quota in some periods, thereby preventing the
+cpu-bound application from fully using its quota by that same amount. In these
+instances it will be up to the CFS algorithm (see sched-design-CFS.rst) to
+decide which application is chosen to run, as they will both be runnable and
+have remaining quota. This runtime discrepancy will be made up in the following
+periods when the interactive application idles.
+
 Examples
 --------
 1. Limit a group to 1 CPU worth of runtime.
* Unmerged path kernel/sched/fair.c
* Unmerged path kernel/sched/sched.h
