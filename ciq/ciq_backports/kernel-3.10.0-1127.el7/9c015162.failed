percpu: update the header comment and pcpu_build_alloc_info comments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Dennis Zhou (Facebook) <dennisszhou@gmail.com>
commit 9c01516278ef872190fdda95aafaa8effdf6649a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/9c015162.failed

The header comment for percpu memory is a little hard to parse and is
not super clear about how the first chunk is managed. This adds a
little more clarity to the situation.

There is also quite a bit of tricky logic in the pcpu_build_alloc_info.
This adds a restructure of a comment to add a little more information.
Unfortunately, you will still have to piece together a handful of other
comments too, but should help direct you to the meaningful comments.

	Signed-off-by: Dennis Zhou <dennisszhou@gmail.com>
	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit 9c01516278ef872190fdda95aafaa8effdf6649a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/percpu.c
diff --cc mm/percpu.c
index 3c1f6f694380,29244fb076ba..000000000000
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@@ -43,7 -42,13 +42,17 @@@
   * Chunks can be determined from the address using the index field
   * in the page struct. The index field contains a pointer to the chunk.
   *
++<<<<<<< HEAD
 + * To use this allocator, arch code should do the followings.
++=======
+  * These chunks are organized into lists according to free_size and
+  * tries to allocate from the fullest chunk first. Each chunk maintains
+  * a maximum contiguous area size hint which is guaranteed to be equal
+  * to or larger than the maximum contiguous area in the chunk. This
+  * helps prevent the allocator from iterating over chunks unnecessarily.
+  *
+  * To use this allocator, arch code should do the following:
++>>>>>>> 9c01516278ef (percpu: update the header comment and pcpu_build_alloc_info comments)
   *
   * - define __addr_to_pcpu_ptr() and __pcpu_ptr_to_addr() to translate
   *   regular address to percpu pointer and back if they need to be
* Unmerged path mm/percpu.c
