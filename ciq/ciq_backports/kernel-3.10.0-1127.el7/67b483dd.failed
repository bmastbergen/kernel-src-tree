nvme-rdma: fix possible use-after-free in connect timeout

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Sagi Grimberg <sagi@grimberg.me>
commit 67b483dd03c4cd9e90e4c3943132dce514ea4e88
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/67b483dd.failed

If the connect times out, we may have already destroyed the
queue in the timeout handler, so test if the queue is still
allocated in the connect error handler.

	Reported-by: Yi Zhang <yi.zhang@redhat.com>
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
(cherry picked from commit 67b483dd03c4cd9e90e4c3943132dce514ea4e88)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/rdma.c
diff --cc drivers/nvme/host/rdma.c
index ddaa67fa3a70,4d280160dd3f..000000000000
--- a/drivers/nvme/host/rdma.c
+++ b/drivers/nvme/host/rdma.c
@@@ -635,11 -617,14 +635,19 @@@ static int nvme_rdma_start_queue(struc
  	else
  		ret = nvmf_connect_admin_queue(&ctrl->ctrl);
  
++<<<<<<< HEAD
 +	if (!ret)
 +		set_bit(NVME_RDMA_Q_LIVE, &ctrl->queues[idx].flags);
 +	else
++=======
+ 	if (!ret) {
+ 		set_bit(NVME_RDMA_Q_LIVE, &queue->flags);
+ 	} else {
+ 		if (test_bit(NVME_RDMA_Q_ALLOCATED, &queue->flags))
+ 			__nvme_rdma_stop_queue(queue);
++>>>>>>> 67b483dd03c4 (nvme-rdma: fix possible use-after-free in connect timeout)
  		dev_info(ctrl->ctrl.device,
  			"failed to connect queue: %d ret=%d\n", idx, ret);
 -	}
  	return ret;
  }
  
* Unmerged path drivers/nvme/host/rdma.c
