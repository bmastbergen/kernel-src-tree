IB/mlx5: Fix scatter to CQE in DCT QP creation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Guy Levi <guyle@mellanox.com>
commit 7249c8ea227a582c14f63e9e8853eb7369122f10
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/7249c8ea.failed

When scatter to CQE is enabled on a DCT QP it corrupts the mailbox command
since it tried to treat it as as QP create mailbox command instead of a
DCT create command.

The corrupted mailbox command causes userspace to malfunction as the
device doesn't create the QP as expected.

A new mlx5 capability is exposed to user-space which ensures that it will
not enable the feature on DCT without this fix in the kernel.

Fixes: 5d6ff1babe78 ("IB/mlx5: Support scatter to CQE for DC transport type")
	Signed-off-by: Guy Levi <guyle@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 7249c8ea227a582c14f63e9e8853eb7369122f10)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
#	include/uapi/rdma/mlx5-abi.h
diff --cc drivers/infiniband/hw/mlx5/main.c
index 94a0cdc2f350,241d9ead79eb..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -1078,6 -1116,11 +1078,14 @@@ static int mlx5_ib_query_device(struct 
  
  		if (MLX5_CAP_GEN(mdev, cqe_128_always))
  			resp.flags |= MLX5_IB_QUERY_DEV_RESP_FLAGS_CQE_128B_PAD;
++<<<<<<< HEAD
++=======
+ 		if (MLX5_CAP_GEN(mdev, qp_packet_based))
+ 			resp.flags |=
+ 				MLX5_IB_QUERY_DEV_RESP_PACKET_BASED_CREDIT_MODE;
+ 
+ 		resp.flags |= MLX5_IB_QUERY_DEV_RESP_FLAGS_SCAT2CQE_DCT;
++>>>>>>> 7249c8ea227a (IB/mlx5: Fix scatter to CQE in DCT QP creation)
  	}
  
  	if (field_avail(typeof(resp), sw_parsing_caps,
diff --cc include/uapi/rdma/mlx5-abi.h
index 5eb447b930a1,f4d4010b7e3e..000000000000
--- a/include/uapi/rdma/mlx5-abi.h
+++ b/include/uapi/rdma/mlx5-abi.h
@@@ -235,6 -237,8 +235,11 @@@ enum mlx5_ib_query_dev_resp_flags 
  	/* Support 128B CQE compression */
  	MLX5_IB_QUERY_DEV_RESP_FLAGS_CQE_128B_COMP = 1 << 0,
  	MLX5_IB_QUERY_DEV_RESP_FLAGS_CQE_128B_PAD  = 1 << 1,
++<<<<<<< HEAD
++=======
+ 	MLX5_IB_QUERY_DEV_RESP_PACKET_BASED_CREDIT_MODE = 1 << 2,
+ 	MLX5_IB_QUERY_DEV_RESP_FLAGS_SCAT2CQE_DCT = 1 << 3,
++>>>>>>> 7249c8ea227a (IB/mlx5: Fix scatter to CQE in DCT QP creation)
  };
  
  enum mlx5_ib_tunnel_offloads {
* Unmerged path drivers/infiniband/hw/mlx5/main.c
diff --git a/drivers/infiniband/hw/mlx5/qp.c b/drivers/infiniband/hw/mlx5/qp.c
index 4e299418db56..4bb98f12d026 100644
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@ -1698,13 +1698,16 @@ static void configure_responder_scat_cqe(struct ib_qp_init_attr *init_attr,
 
 	rcqe_sz = mlx5_ib_get_cqe_size(init_attr->recv_cq);
 
-	if (rcqe_sz == 128) {
-		MLX5_SET(qpc, qpc, cs_res, MLX5_RES_SCAT_DATA64_CQE);
+	if (init_attr->qp_type == MLX5_IB_QPT_DCT) {
+		if (rcqe_sz == 128)
+			MLX5_SET(dctc, qpc, cs_res, MLX5_RES_SCAT_DATA64_CQE);
+
 		return;
 	}
 
-	if (init_attr->qp_type != MLX5_IB_QPT_DCT)
-		MLX5_SET(qpc, qpc, cs_res, MLX5_RES_SCAT_DATA32_CQE);
+	MLX5_SET(qpc, qpc, cs_res,
+		 rcqe_sz == 128 ? MLX5_RES_SCAT_DATA64_CQE :
+				  MLX5_RES_SCAT_DATA32_CQE);
 }
 
 static void configure_requester_scat_cqe(struct mlx5_ib_dev *dev,
* Unmerged path include/uapi/rdma/mlx5-abi.h
