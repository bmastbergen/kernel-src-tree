mm, mempolicy: task->mempolicy must be NULL before dropping final reference

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author David Rientjes <rientjes@google.com>
commit c11600e4fed67ae4cd6a8096936afd445410e8ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/c11600e4.failed

KASAN allocates memory from the page allocator as part of
kmem_cache_free(), and that can reference current->mempolicy through any
number of allocation functions.  It needs to be NULL'd out before the
final reference is dropped to prevent a use-after-free bug:

	BUG: KASAN: use-after-free in alloc_pages_current+0x363/0x370 at addr ffff88010b48102c
	CPU: 0 PID: 15425 Comm: trinity-c2 Not tainted 4.8.0-rc2+ #140
	...
	Call Trace:
		dump_stack
		kasan_object_err
		kasan_report_error
		__asan_report_load2_noabort
		alloc_pages_current	<-- use after free
		depot_save_stack
		save_stack
		kasan_slab_free
		kmem_cache_free
		__mpol_put		<-- free
		do_exit

This patch sets current->mempolicy to NULL before dropping the final
reference.

Link: http://lkml.kernel.org/r/alpine.DEB.2.10.1608301442180.63329@chino.kir.corp.google.com
Fixes: cd11016e5f52 ("mm, kasan: stackdepot implementation. Enable stackdepot for SLAB")
	Signed-off-by: David Rientjes <rientjes@google.com>
	Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
	Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: <stable@vger.kernel.org>	[4.6+]
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c11600e4fed67ae4cd6a8096936afd445410e8ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/exit.c
diff --cc kernel/exit.c
index 148a7842928d,091a78be3b09..000000000000
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@@ -905,15 -841,14 +905,20 @@@ void do_exit(long code
  	/*
  	 * FIXME: do that only when needed, using sched_exit tracepoint
  	 */
 -	flush_ptrace_hw_breakpoint(tsk);
 +	ptrace_put_breakpoints(tsk);
  
 -	TASKS_RCU(preempt_disable());
 -	TASKS_RCU(tasks_rcu_i = __srcu_read_lock(&tasks_rcu_exit_srcu));
 -	TASKS_RCU(preempt_enable());
  	exit_notify(tsk, group_dead);
++<<<<<<< HEAD
 +#ifdef CONFIG_NUMA
 +	task_lock(tsk);
 +	mpol_put(tsk->mempolicy);
 +	tsk->mempolicy = NULL;
 +	task_unlock(tsk);
 +#endif
++=======
+ 	proc_exit_connector(tsk);
+ 	mpol_put_task_policy(tsk);
++>>>>>>> c11600e4fed6 (mm, mempolicy: task->mempolicy must be NULL before dropping final reference)
  #ifdef CONFIG_FUTEX
  	if (unlikely(current->pi_state_cache))
  		kfree(current->pi_state_cache);
diff --git a/include/linux/mempolicy.h b/include/linux/mempolicy.h
index 69b9a2b8f968..30b0c896f634 100644
--- a/include/linux/mempolicy.h
+++ b/include/linux/mempolicy.h
@@ -204,6 +204,7 @@ static inline int vma_migratable(struct vm_area_struct *vma)
 }
 
 extern int mpol_misplaced(struct page *, struct vm_area_struct *, unsigned long);
+extern void mpol_put_task_policy(struct task_struct *);
 
 #else
 
@@ -328,5 +329,8 @@ static inline int mpol_misplaced(struct page *page, struct vm_area_struct *vma,
 	return -1; /* no node preference */
 }
 
+static inline void mpol_put_task_policy(struct task_struct *task)
+{
+}
 #endif /* CONFIG_NUMA */
 #endif
* Unmerged path kernel/exit.c
diff --git a/mm/mempolicy.c b/mm/mempolicy.c
index f339cd117114..ea4122538f35 100644
--- a/mm/mempolicy.c
+++ b/mm/mempolicy.c
@@ -2401,6 +2401,23 @@ out:
 	return ret;
 }
 
+/*
+ * Drop the (possibly final) reference to task->mempolicy.  It needs to be
+ * dropped after task->mempolicy is set to NULL so that any allocation done as
+ * part of its kmem_cache_free(), such as by KASAN, doesn't reference a freed
+ * policy.
+ */
+void mpol_put_task_policy(struct task_struct *task)
+{
+	struct mempolicy *pol;
+
+	task_lock(task);
+	pol = task->mempolicy;
+	task->mempolicy = NULL;
+	task_unlock(task);
+	mpol_put(pol);
+}
+
 static void sp_delete(struct shared_policy *sp, struct sp_node *n)
 {
 	pr_debug("deleting %lx-l%lx\n", n->start, n->end);
