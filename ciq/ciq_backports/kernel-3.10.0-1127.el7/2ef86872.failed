net/mlx5e: Fix no rewrite fields with the same match

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Eli Britstein <elibr@mellanox.com>
commit 2ef86872d98d5558bfc852b47b1140e838d601d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/2ef86872.failed

With commit 27c11b6b844c ("net/mlx5e: Do not rewrite fields with the
same match") there are no rewrites if the rewrite value is the same as
the matched value. However, if the field is not matched, the rewrite is
also wrongly skipped. Fix it.

Fixes: 27c11b6b844c ("net/mlx5e: Do not rewrite fields with the same match")
	Signed-off-by: Eli Britstein <elibr@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 2ef86872d98d5558bfc852b47b1140e838d601d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index c47f64762949,4722ac70f0a9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -1900,39 -1908,83 +1900,79 @@@ struct mlx5_fields 
  	u8  field;
  	u8  size;
  	u32 offset;
 -	u32 match_offset;
  };
  
++<<<<<<< HEAD
 +#define OFFLOAD(fw_field, size, field, off) \
 +		{MLX5_ACTION_IN_FIELD_OUT_ ## fw_field, size, offsetof(struct pedit_headers, field) + (off)}
++=======
+ #define OFFLOAD(fw_field, size, field, off, match_field) \
+ 		{MLX5_ACTION_IN_FIELD_OUT_ ## fw_field, size, \
+ 		 offsetof(struct pedit_headers, field) + (off), \
+ 		 MLX5_BYTE_OFF(fte_match_set_lyr_2_4, match_field)}
+ 
+ /* masked values are the same and there are no rewrites that do not have a
+  * match.
+  */
+ #define SAME_VAL_MASK(type, valp, maskp, matchvalp, matchmaskp) ({ \
+ 	type matchmaskx = *(type *)(matchmaskp); \
+ 	type matchvalx = *(type *)(matchvalp); \
+ 	type maskx = *(type *)(maskp); \
+ 	type valx = *(type *)(valp); \
+ 	\
+ 	(valx & maskx) == (matchvalx & matchmaskx) && !(maskx & (maskx ^ \
+ 								 matchmaskx)); \
+ })
+ 
+ static bool cmp_val_mask(void *valp, void *maskp, void *matchvalp,
+ 			 void *matchmaskp, int size)
+ {
+ 	bool same = false;
+ 
+ 	switch (size) {
+ 	case sizeof(u8):
+ 		same = SAME_VAL_MASK(u8, valp, maskp, matchvalp, matchmaskp);
+ 		break;
+ 	case sizeof(u16):
+ 		same = SAME_VAL_MASK(u16, valp, maskp, matchvalp, matchmaskp);
+ 		break;
+ 	case sizeof(u32):
+ 		same = SAME_VAL_MASK(u32, valp, maskp, matchvalp, matchmaskp);
+ 		break;
+ 	}
+ 
+ 	return same;
+ }
++>>>>>>> 2ef86872d98d (net/mlx5e: Fix no rewrite fields with the same match)
  
  static struct mlx5_fields fields[] = {
 -	OFFLOAD(DMAC_47_16, 4, eth.h_dest[0], 0, dmac_47_16),
 -	OFFLOAD(DMAC_15_0,  2, eth.h_dest[4], 0, dmac_15_0),
 -	OFFLOAD(SMAC_47_16, 4, eth.h_source[0], 0, smac_47_16),
 -	OFFLOAD(SMAC_15_0,  2, eth.h_source[4], 0, smac_15_0),
 -	OFFLOAD(ETHERTYPE,  2, eth.h_proto, 0, ethertype),
 -	OFFLOAD(FIRST_VID,  2, vlan.h_vlan_TCI, 0, first_vid),
 -
 -	OFFLOAD(IP_TTL, 1, ip4.ttl,   0, ttl_hoplimit),
 -	OFFLOAD(SIPV4,  4, ip4.saddr, 0, src_ipv4_src_ipv6.ipv4_layout.ipv4),
 -	OFFLOAD(DIPV4,  4, ip4.daddr, 0, dst_ipv4_dst_ipv6.ipv4_layout.ipv4),
 -
 -	OFFLOAD(SIPV6_127_96, 4, ip6.saddr.s6_addr32[0], 0,
 -		src_ipv4_src_ipv6.ipv6_layout.ipv6[0]),
 -	OFFLOAD(SIPV6_95_64,  4, ip6.saddr.s6_addr32[1], 0,
 -		src_ipv4_src_ipv6.ipv6_layout.ipv6[4]),
 -	OFFLOAD(SIPV6_63_32,  4, ip6.saddr.s6_addr32[2], 0,
 -		src_ipv4_src_ipv6.ipv6_layout.ipv6[8]),
 -	OFFLOAD(SIPV6_31_0,   4, ip6.saddr.s6_addr32[3], 0,
 -		src_ipv4_src_ipv6.ipv6_layout.ipv6[12]),
 -	OFFLOAD(DIPV6_127_96, 4, ip6.daddr.s6_addr32[0], 0,
 -		dst_ipv4_dst_ipv6.ipv6_layout.ipv6[0]),
 -	OFFLOAD(DIPV6_95_64,  4, ip6.daddr.s6_addr32[1], 0,
 -		dst_ipv4_dst_ipv6.ipv6_layout.ipv6[4]),
 -	OFFLOAD(DIPV6_63_32,  4, ip6.daddr.s6_addr32[2], 0,
 -		dst_ipv4_dst_ipv6.ipv6_layout.ipv6[8]),
 -	OFFLOAD(DIPV6_31_0,   4, ip6.daddr.s6_addr32[3], 0,
 -		dst_ipv4_dst_ipv6.ipv6_layout.ipv6[12]),
 -	OFFLOAD(IPV6_HOPLIMIT, 1, ip6.hop_limit, 0, ttl_hoplimit),
 -
 -	OFFLOAD(TCP_SPORT, 2, tcp.source,  0, tcp_sport),
 -	OFFLOAD(TCP_DPORT, 2, tcp.dest,    0, tcp_dport),
 -	OFFLOAD(TCP_FLAGS, 1, tcp.ack_seq, 5, tcp_flags),
 -
 -	OFFLOAD(UDP_SPORT, 2, udp.source, 0, udp_sport),
 -	OFFLOAD(UDP_DPORT, 2, udp.dest,   0, udp_dport),
 +	OFFLOAD(DMAC_47_16, 4, eth.h_dest[0], 0),
 +	OFFLOAD(DMAC_15_0,  2, eth.h_dest[4], 0),
 +	OFFLOAD(SMAC_47_16, 4, eth.h_source[0], 0),
 +	OFFLOAD(SMAC_15_0,  2, eth.h_source[4], 0),
 +	OFFLOAD(ETHERTYPE,  2, eth.h_proto, 0),
 +	OFFLOAD(FIRST_VID,  2, vlan.h_vlan_TCI, 0),
 +
 +	OFFLOAD(IP_TTL, 1, ip4.ttl,   0),
 +	OFFLOAD(SIPV4,  4, ip4.saddr, 0),
 +	OFFLOAD(DIPV4,  4, ip4.daddr, 0),
 +
 +	OFFLOAD(SIPV6_127_96, 4, ip6.saddr.s6_addr32[0], 0),
 +	OFFLOAD(SIPV6_95_64,  4, ip6.saddr.s6_addr32[1], 0),
 +	OFFLOAD(SIPV6_63_32,  4, ip6.saddr.s6_addr32[2], 0),
 +	OFFLOAD(SIPV6_31_0,   4, ip6.saddr.s6_addr32[3], 0),
 +	OFFLOAD(DIPV6_127_96, 4, ip6.daddr.s6_addr32[0], 0),
 +	OFFLOAD(DIPV6_95_64,  4, ip6.daddr.s6_addr32[1], 0),
 +	OFFLOAD(DIPV6_63_32,  4, ip6.daddr.s6_addr32[2], 0),
 +	OFFLOAD(DIPV6_31_0,   4, ip6.daddr.s6_addr32[3], 0),
 +	OFFLOAD(IPV6_HOPLIMIT, 1, ip6.hop_limit, 0),
 +
 +	OFFLOAD(TCP_SPORT, 2, tcp.source,  0),
 +	OFFLOAD(TCP_DPORT, 2, tcp.dest,    0),
 +	OFFLOAD(TCP_FLAGS, 1, tcp.ack_seq, 5),
 +
 +	OFFLOAD(UDP_SPORT, 2, udp.source, 0),
 +	OFFLOAD(UDP_DPORT, 2, udp.dest,   0),
  };
  
  /* On input attr->max_mod_hdr_actions tells how many HW actions can be parsed at
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
