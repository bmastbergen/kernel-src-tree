nvme: Restart request timers in resetting state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Keith Busch <kbusch@kernel.org>
commit 92b98e88d59ab17e65f261fbb5db272143ccf414
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/92b98e88.failed

A controller in the resetting state has not yet completed its recovery
actions. The pci and fc transports were already handling this, so update
the remaining transports to not attempt additional recovery in this
state. Instead, just restart the request timer.

	Tested-by: Edmund Nadolski <edmund.nadolski@intel.com>
	Reviewed-by: James Smart <james.smart@broadcom.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Keith Busch <kbusch@kernel.org>
(cherry picked from commit 92b98e88d59ab17e65f261fbb5db272143ccf414)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/tcp.c
* Unmerged path drivers/nvme/host/tcp.c
diff --git a/drivers/nvme/host/rdma.c b/drivers/nvme/host/rdma.c
index ddaa67fa3a70..7971130963af 100644
--- a/drivers/nvme/host/rdma.c
+++ b/drivers/nvme/host/rdma.c
@@ -1691,6 +1691,14 @@ nvme_rdma_timeout(struct request *rq, bool reserved)
 	dev_warn(ctrl->ctrl.device, "I/O %d QID %d timeout\n",
 		 rq->tag, nvme_rdma_queue_idx(queue));
 
+	/*
+	 * Restart the timer if a controller reset is already scheduled. Any
+	 * timed out commands would be handled before entering the connecting
+	 * state.
+	 */
+	if (ctrl->ctrl.state == NVME_CTRL_RESETTING)
+		return BLK_EH_RESET_TIMER;
+
 	if (ctrl->ctrl.state != NVME_CTRL_LIVE) {
 		/*
 		 * Teardown immediately if controller times out while starting
* Unmerged path drivers/nvme/host/tcp.c
