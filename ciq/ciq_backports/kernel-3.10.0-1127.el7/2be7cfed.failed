mm/hugetlb.c: __get_user_pages ignores certain follow_hugetlb_page errors

jira LE-1907
cve CVE-2019-11487
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Daniel Jordan <daniel.m.jordan@oracle.com>
commit 2be7cfed995e25de1ffaffe14cc065b7ffb528e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/2be7cfed.failed

Commit 9a291a7c9428 ("mm/hugetlb: report -EHWPOISON not -EFAULT when
FOLL_HWPOISON is specified") causes __get_user_pages to ignore certain
errors from follow_hugetlb_page.  After such error, __get_user_pages
subsequently calls faultin_page on the same VMA and start address that
follow_hugetlb_page failed on instead of returning the error immediately
as it should.

In follow_hugetlb_page, when hugetlb_fault returns a value covered under
VM_FAULT_ERROR, follow_hugetlb_page returns it without setting nr_pages
to 0 as __get_user_pages expects in this case, which causes the
following to happen in __get_user_pages: the "while (nr_pages)" check
succeeds, we skip the "if (!vma..." check because we got a VMA the last
time around, we find no page with follow_page_mask, and we call
faultin_page, which calls hugetlb_fault for the second time.

This issue also slightly changes how __get_user_pages works.  Before, it
only returned error if it had made no progress (i = 0).  But now,
follow_hugetlb_page can clobber "i" with an error code since its new
return path doesn't check for progress.  So if "i" is nonzero before a
failing call to follow_hugetlb_page, that indication of progress is lost
and __get_user_pages can return error even if some pages were
successfully pinned.

To fix this, change follow_hugetlb_page so that it updates nr_pages,
allowing __get_user_pages to fail immediately and restoring the "error
only if no progress" behavior to __get_user_pages.

Tested that __get_user_pages returns when expected on error from
hugetlb_fault in follow_hugetlb_page.

Fixes: 9a291a7c9428 ("mm/hugetlb: report -EHWPOISON not -EFAULT when FOLL_HWPOISON is specified")
Link: http://lkml.kernel.org/r/1500406795-58462-1-git-send-email-daniel.m.jordan@oracle.com
	Signed-off-by: Daniel Jordan <daniel.m.jordan@oracle.com>
	Acked-by: Punit Agrawal <punit.agrawal@arm.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
	Cc: Gerald Schaefer <gerald.schaefer@de.ibm.com>
	Cc: James Morse <james.morse@arm.com>
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Mike Kravetz <mike.kravetz@oracle.com>
	Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Cc: zhong jiang <zhongjiang@huawei.com>
	Cc: <stable@vger.kernel.org>	[4.12.x]
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2be7cfed995e25de1ffaffe14cc065b7ffb528e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/hugetlb.c
diff --cc mm/hugetlb.c
index 601926def2e1,a1a0ac0ad6f6..000000000000
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@@ -4317,6 -4155,7 +4318,10 @@@ long follow_hugetlb_page(struct mm_stru
  			}
  			ret = hugetlb_fault(mm, vma, vaddr, fault_flags);
  			if (ret & VM_FAULT_ERROR) {
++<<<<<<< HEAD
++=======
+ 				err = vm_fault_to_errno(ret, flags);
++>>>>>>> 2be7cfed995e (mm/hugetlb.c: __get_user_pages ignores certain follow_hugetlb_page errors)
  				remainder = 0;
  				break;
  			}
@@@ -4371,9 -4210,17 +4376,9 @@@ same_page
  	 */
  	*position = vaddr;
  
- 	return i ? i : -EFAULT;
+ 	return i ? i : err;
  }
  
 -#ifndef __HAVE_ARCH_FLUSH_HUGETLB_TLB_RANGE
 -/*
 - * ARCHes with special requirements for evicting HUGETLB backing TLB entries can
 - * implement this.
 - */
 -#define flush_hugetlb_tlb_range(vma, addr, end)	flush_tlb_range(vma, addr, end)
 -#endif
 -
  unsigned long hugetlb_change_protection(struct vm_area_struct *vma,
  		unsigned long address, unsigned long end, pgprot_t newprot)
  {
* Unmerged path mm/hugetlb.c
