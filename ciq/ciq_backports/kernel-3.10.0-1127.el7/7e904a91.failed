efi: Use efi_mm in x86 as well as ARM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Sai Praneeth <sai.praneeth.prakhya@intel.com>
commit 7e904a91bf6049071ef9d605a52f863ae774081d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/7e904a91.failed

Presently, only ARM uses mm_struct to manage EFI page tables and EFI
runtime region mappings. As this is the preferred approach, let's make
this data structure common across architectures. Specially, for x86,
using this data structure improves code maintainability and readability.

	Tested-by: Bhupesh Sharma <bhsharma@redhat.com>
[ardb: don't #include the world to get a declaration of struct mm_struct]
	Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Reviewed-by: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Lee, Chun-Yi <jlee@suse.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michael S. Tsirkin <mst@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi Shankar <ravi.v.shankar@intel.com>
	Cc: Ricardo Neri <ricardo.neri@intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/20180312084500.10764-2-ard.biesheuvel@linaro.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 7e904a91bf6049071ef9d605a52f863ae774081d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/efi.h
#	drivers/firmware/efi/arm-runtime.c
#	drivers/firmware/efi/efi.c
diff --cc arch/x86/include/asm/efi.h
index 3e5392deef43,c62443fa7d0a..000000000000
--- a/arch/x86/include/asm/efi.h
+++ b/arch/x86/include/asm/efi.h
@@@ -5,7 -6,8 +5,12 @@@
  #include <asm/pgtable.h>
  #include <asm/processor-flags.h>
  #include <asm/tlb.h>
++<<<<<<< HEAD
 +#include <asm/spec_ctrl.h>
++=======
+ #include <asm/nospec-branch.h>
+ #include <asm/mmu_context.h>
++>>>>>>> 7e904a91bf60 (efi: Use efi_mm in x86 as well as ARM)
  
  /*
   * We map the EFI regions needed for runtime services non-contiguously,
diff --cc drivers/firmware/efi/efi.c
index c724e827bd97,232f4915223b..000000000000
--- a/drivers/firmware/efi/efi.c
+++ b/drivers/firmware/efi/efi.c
@@@ -55,11 -71,18 +55,22 @@@ static unsigned long *efi_tables[] = 
  	&efi.runtime,
  	&efi.config_table,
  	&efi.esrt,
 -	&efi.properties_table,
 -	&efi.mem_attr_table,
  };
  
++<<<<<<< HEAD
 +struct kobject *efi_kobj;
 +
 +struct workqueue_struct *efi_rts_wq;
++=======
+ struct mm_struct efi_mm = {
+ 	.mm_rb			= RB_ROOT,
+ 	.mm_users		= ATOMIC_INIT(2),
+ 	.mm_count		= ATOMIC_INIT(1),
+ 	.mmap_sem		= __RWSEM_INITIALIZER(efi_mm.mmap_sem),
+ 	.page_table_lock	= __SPIN_LOCK_UNLOCKED(efi_mm.page_table_lock),
+ 	.mmlist			= LIST_HEAD_INIT(efi_mm.mmlist),
+ };
++>>>>>>> 7e904a91bf60 (efi: Use efi_mm in x86 as well as ARM)
  
  static bool disable_runtime;
  static int __init setup_noefi(char *arg)
* Unmerged path drivers/firmware/efi/arm-runtime.c
* Unmerged path arch/x86/include/asm/efi.h
diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c
index 66a949fa7d66..cd4d75b37f2d 100644
--- a/arch/x86/platform/efi/efi_64.c
+++ b/arch/x86/platform/efi/efi_64.c
@@ -185,6 +185,9 @@ int __init efi_alloc_page_tables(void)
 
 	pgd_populate(NULL, pgd, pud);
 
+	mm_init_cpumask(&efi_mm);
+	init_new_context(NULL, &efi_mm);
+
 	return 0;
 }
 
* Unmerged path drivers/firmware/efi/arm-runtime.c
* Unmerged path drivers/firmware/efi/efi.c
diff --git a/include/linux/efi.h b/include/linux/efi.h
index d03ef62a0f4d..3ee4e60430e8 100644
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@ -872,6 +872,8 @@ extern struct efi {
 	RH_KABI_EXTEND(efi_query_variable_info_t *query_variable_info_nonblocking)
 } efi;
 
+extern struct mm_struct efi_mm;
+
 static inline int
 efi_guidcmp (efi_guid_t left, efi_guid_t right)
 {
