net/mlx5e: Expose new function for TIS destroy loop

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 3c14562663c603bc523b6619a2b19a411e1cdc8e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/3c145626.failed

For better modularity and code sharing.
Function internal change to be introduced in the next patches.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 3c14562663c603bc523b6619a2b19a411e1cdc8e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 5744af51d8f5,491c281416d0..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -935,10 -1107,14 +935,16 @@@ int mlx5e_create_tis(struct mlx5_core_d
  void mlx5e_destroy_tis(struct mlx5_core_dev *mdev, u32 tisn);
  
  int mlx5e_create_tises(struct mlx5e_priv *priv);
++<<<<<<< HEAD
 +void mlx5e_cleanup_nic_tx(struct mlx5e_priv *priv);
++=======
+ void mlx5e_destroy_tises(struct mlx5e_priv *priv);
+ int mlx5e_update_nic_rx(struct mlx5e_priv *priv);
+ void mlx5e_update_carrier(struct mlx5e_priv *priv);
++>>>>>>> 3c14562663c6 (net/mlx5e: Expose new function for TIS destroy loop)
  int mlx5e_close(struct net_device *netdev);
  int mlx5e_open(struct net_device *netdev);
 -void mlx5e_update_ndo_stats(struct mlx5e_priv *priv);
  
 -void mlx5e_queue_update_stats(struct mlx5e_priv *priv);
  int mlx5e_bits_invert(unsigned long a, int size);
  
  typedef int (*change_hw_mtu_cb)(struct mlx5e_priv *priv);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index ff66b971d5dc,1623cd32f303..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -1421,6 -1619,8 +1421,11 @@@ static void mlx5e_cleanup_rep_rx(struc
  
  static int mlx5e_init_rep_tx(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+ 	struct mlx5_rep_uplink_priv *uplink_priv;
++>>>>>>> 3c14562663c6 (net/mlx5e: Expose new function for TIS destroy loop)
  	int err;
  
  	err = mlx5e_create_tises(priv);
@@@ -1428,7 -1628,131 +1433,110 @@@
  		mlx5_core_warn(priv->mdev, "create tises failed, %d\n", err);
  		return err;
  	}
 -
 -	if (rpriv->rep->vport == MLX5_VPORT_UPLINK) {
 -		uplink_priv = &rpriv->uplink_priv;
 -
 -		mutex_init(&uplink_priv->unready_flows_lock);
 -		INIT_LIST_HEAD(&uplink_priv->unready_flows);
 -
 -		/* init shared tc flow table */
 -		err = mlx5e_tc_esw_init(&uplink_priv->tc_ht);
 -		if (err)
 -			goto destroy_tises;
 -
 -		mlx5_init_port_tun_entropy(&uplink_priv->tun_entropy, priv->mdev);
 -
 -		/* init indirect block notifications */
 -		INIT_LIST_HEAD(&uplink_priv->tc_indr_block_priv_list);
 -		uplink_priv->netdevice_nb.notifier_call = mlx5e_nic_rep_netdevice_event;
 -		err = register_netdevice_notifier(&uplink_priv->netdevice_nb);
 -		if (err) {
 -			mlx5_core_err(priv->mdev, "Failed to register netdev notifier\n");
 -			goto tc_esw_cleanup;
 -		}
 -	}
 -
  	return 0;
++<<<<<<< HEAD
++=======
+ 
+ tc_esw_cleanup:
+ 	mlx5e_tc_esw_cleanup(&uplink_priv->tc_ht);
+ destroy_tises:
+ 	mlx5e_destroy_tises(priv);
+ 	return err;
+ }
+ 
+ static void mlx5e_cleanup_rep_tx(struct mlx5e_priv *priv)
+ {
+ 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+ 
+ 	mlx5e_destroy_tises(priv);
+ 
+ 	if (rpriv->rep->vport == MLX5_VPORT_UPLINK) {
+ 		/* clean indirect TC block notifications */
+ 		unregister_netdevice_notifier(&rpriv->uplink_priv.netdevice_nb);
+ 		mlx5e_rep_indr_clean_block_privs(rpriv);
+ 
+ 		/* delete shared tc flow table */
+ 		mlx5e_tc_esw_cleanup(&rpriv->uplink_priv.tc_ht);
+ 		mutex_destroy(&rpriv->uplink_priv.unready_flows_lock);
+ 	}
+ }
+ 
+ static void mlx5e_rep_enable(struct mlx5e_priv *priv)
+ {
+ 	mlx5e_set_netdev_mtu_boundaries(priv);
+ }
+ 
+ static int mlx5e_update_rep_rx(struct mlx5e_priv *priv)
+ {
+ 	return 0;
+ }
+ 
+ static int uplink_rep_async_event(struct notifier_block *nb, unsigned long event, void *data)
+ {
+ 	struct mlx5e_priv *priv = container_of(nb, struct mlx5e_priv, events_nb);
+ 
+ 	if (event == MLX5_EVENT_TYPE_PORT_CHANGE) {
+ 		struct mlx5_eqe *eqe = data;
+ 
+ 		switch (eqe->sub_type) {
+ 		case MLX5_PORT_CHANGE_SUBTYPE_DOWN:
+ 		case MLX5_PORT_CHANGE_SUBTYPE_ACTIVE:
+ 			queue_work(priv->wq, &priv->update_carrier_work);
+ 			break;
+ 		default:
+ 			return NOTIFY_DONE;
+ 		}
+ 
+ 		return NOTIFY_OK;
+ 	}
+ 
+ 	if (event == MLX5_DEV_EVENT_PORT_AFFINITY) {
+ 		struct mlx5e_rep_priv *rpriv = priv->ppriv;
+ 
+ 		queue_work(priv->wq, &rpriv->uplink_priv.reoffload_flows_work);
+ 
+ 		return NOTIFY_OK;
+ 	}
+ 
+ 	return NOTIFY_DONE;
+ }
+ 
+ static void mlx5e_uplink_rep_enable(struct mlx5e_priv *priv)
+ {
+ 	struct net_device *netdev = priv->netdev;
+ 	struct mlx5_core_dev *mdev = priv->mdev;
+ 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+ 	u16 max_mtu;
+ 
+ 	netdev->min_mtu = ETH_MIN_MTU;
+ 	mlx5_query_port_max_mtu(priv->mdev, &max_mtu, 1);
+ 	netdev->max_mtu = MLX5E_HW2SW_MTU(&priv->channels.params, max_mtu);
+ 	mlx5e_set_dev_port_mtu(priv);
+ 
+ 	INIT_WORK(&rpriv->uplink_priv.reoffload_flows_work,
+ 		  mlx5e_tc_reoffload_flows_work);
+ 
+ 	mlx5_lag_add(mdev, netdev);
+ 	priv->events_nb.notifier_call = uplink_rep_async_event;
+ 	mlx5_notifier_register(mdev, &priv->events_nb);
+ #ifdef CONFIG_MLX5_CORE_EN_DCB
+ 	mlx5e_dcbnl_initialize(priv);
+ 	mlx5e_dcbnl_init_app(priv);
+ #endif
+ }
+ 
+ static void mlx5e_uplink_rep_disable(struct mlx5e_priv *priv)
+ {
+ 	struct mlx5_core_dev *mdev = priv->mdev;
+ 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+ 
+ #ifdef CONFIG_MLX5_CORE_EN_DCB
+ 	mlx5e_dcbnl_delete_app(priv);
+ #endif
+ 	mlx5_notifier_unregister(mdev, &priv->events_nb);
+ 	cancel_work_sync(&rpriv->uplink_priv.reoffload_flows_work);
+ 	mlx5_lag_remove(mdev);
++>>>>>>> 3c14562663c6 (net/mlx5e: Expose new function for TIS destroy loop)
  }
  
  static const struct mlx5e_profile mlx5e_rep_profile = {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index d37dec6676a5..852686f50977 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -3137,6 +3137,14 @@ void mlx5e_destroy_tis(struct mlx5_core_dev *mdev, u32 tisn)
 	mlx5_core_destroy_tis(mdev, tisn);
 }
 
+void mlx5e_destroy_tises(struct mlx5e_priv *priv)
+{
+	int tc;
+
+	for (tc = 0; tc < priv->profile->max_tc; tc++)
+		mlx5e_destroy_tis(priv->mdev, priv->tisn[tc]);
+}
+
 int mlx5e_create_tises(struct mlx5e_priv *priv)
 {
 	int err;
@@ -3166,10 +3174,7 @@ err_close_tises:
 
 void mlx5e_cleanup_nic_tx(struct mlx5e_priv *priv)
 {
-	int tc;
-
-	for (tc = 0; tc < priv->profile->max_tc; tc++)
-		mlx5e_destroy_tis(priv->mdev, priv->tisn[tc]);
+	mlx5e_destroy_tises(priv);
 }
 
 static void mlx5e_build_indir_tir_ctx(struct mlx5e_priv *priv,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
