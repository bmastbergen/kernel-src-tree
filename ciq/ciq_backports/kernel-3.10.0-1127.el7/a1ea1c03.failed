x86: Cleanly separate use of asm-generic/mm_hooks.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit a1ea1c032b8f8c23d86ef4db6d061527e9417f19
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/a1ea1c03.failed

asm-generic/mm_hooks.h provides some generic fillers for the 90%
of architectures that do not need to hook some mmap-manipulation
functions.  A comment inside says:

> Define generic no-op hooks for arch_dup_mmap and
> arch_exit_mmap, to be included in asm-FOO/mmu_context.h
> for any arch FOO which doesn't need to hook these.

So, does x86 need to hook these?  It depends on CONFIG_PARAVIRT.
We *conditionally* include this generic header if we have
CONFIG_PARAVIRT=n.  That's madness.

With this patch, x86 stops using asm-generic/mmu_hooks.h entirely.
We use our own copies of the functions.  The paravirt code
provides some stubs if it is disabled, and we always call those
stubs in our x86-private versions of arch_exit_mmap() and
arch_dup_mmap().

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: x86@kernel.org
Link: http://lkml.kernel.org/r/20141118182349.14567FA5@viggo.jf.intel.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit a1ea1c032b8f8c23d86ef4db6d061527e9417f19)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/mmu_context.h
diff --cc arch/x86/include/asm/mmu_context.h
index 2533f1ea6556,be91d5736e08..000000000000
--- a/arch/x86/include/asm/mmu_context.h
+++ b/arch/x86/include/asm/mmu_context.h
@@@ -7,11 -11,7 +7,9 @@@
  #include <asm/tlbflush.h>
  #include <asm/paravirt.h>
  #include <asm/mpx.h>
 +#include <linux/pkeys.h>
 +#include <asm/spec_ctrl.h>
  #ifndef CONFIG_PARAVIRT
- #include <asm-generic/mm_hooks.h>
- 
  static inline void paravirt_activate_mm(struct mm_struct *prev,
  					struct mm_struct *next)
  {
@@@ -207,18 -101,16 +205,31 @@@ do {						
  } while (0)
  #endif
  
++<<<<<<< HEAD
 +#ifdef CONFIG_X86_64
 +static inline bool is_64bit_mm(struct mm_struct *mm)
 +{
 +	return  !config_enabled(CONFIG_IA32_EMULATION) ||
 +		!(mm->context.ia32_compat == TIF_IA32);
 +}
 +#else
 +static inline bool is_64bit_mm(struct mm_struct *mm)
 +{
 +	return false;
 +}
 +#endif
++=======
+ static inline void arch_dup_mmap(struct mm_struct *oldmm,
+ 				 struct mm_struct *mm)
+ {
+ 	paravirt_arch_dup_mmap(oldmm, mm);
+ }
+ 
+ static inline void arch_exit_mmap(struct mm_struct *mm)
+ {
+ 	paravirt_arch_exit_mmap(mm);
+ }
++>>>>>>> a1ea1c032b8f (x86: Cleanly separate use of asm-generic/mm_hooks.h)
  
  static inline void arch_bprm_mm_init(struct mm_struct *mm,
  		struct vm_area_struct *vma)
* Unmerged path arch/x86/include/asm/mmu_context.h
diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h
index f0c1105601e8..b62cb9297173 100644
--- a/arch/x86/include/asm/paravirt.h
+++ b/arch/x86/include/asm/paravirt.h
@@ -297,13 +297,13 @@ static inline void paravirt_activate_mm(struct mm_struct *prev,
 	PVOP_VCALL2(pv_mmu_ops.activate_mm, prev, next);
 }
 
-static inline void arch_dup_mmap(struct mm_struct *oldmm,
-				 struct mm_struct *mm)
+static inline void paravirt_arch_dup_mmap(struct mm_struct *oldmm,
+					  struct mm_struct *mm)
 {
 	PVOP_VCALL2(pv_mmu_ops.dup_mmap, oldmm, mm);
 }
 
-static inline void arch_exit_mmap(struct mm_struct *mm)
+static inline void paravirt_arch_exit_mmap(struct mm_struct *mm)
 {
 	PVOP_VCALL1(pv_mmu_ops.exit_mmap, mm);
 }
@@ -967,5 +967,15 @@ extern void default_banner(void);
 #endif /* __ASSEMBLY__ */
 #else  /* CONFIG_PARAVIRT */
 # define default_banner x86_init_noop
+#ifndef __ASSEMBLY__
+static inline void paravirt_arch_dup_mmap(struct mm_struct *oldmm,
+					  struct mm_struct *mm)
+{
+}
+
+static inline void paravirt_arch_exit_mmap(struct mm_struct *mm)
+{
+}
+#endif /* __ASSEMBLY__ */
 #endif /* !CONFIG_PARAVIRT */
 #endif /* _ASM_X86_PARAVIRT_H */
