ipc: delete seq_max field in struct ipc_ids

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [ipc] delete seq_max field in struct ipc_ids (Waiman Long) [1373519]
Rebuild_FUZZ: 93.83%
commit-author Davidlohr Bueso <davidlohr@hp.com>
commit daf948c7d1a080041ae19aca07625efec670695a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/daf948c7.failed

This field is only used to reset the ids seq number if it exceeds the
smaller of INT_MAX/SEQ_MULTIPLIER and USHRT_MAX, and can therefore be
moved out of the structure and into its own macro.  Since each
ipc_namespace contains a table of 3 pointers to struct ipc_ids we can
save space in instruction text:

   text    data     bss     dec     hex filename
  56232    2348      24   58604    e4ec ipc/built-in.o
  56216    2348      24   58588    e4dc ipc/built-in.o-after

	Signed-off-by: Davidlohr Bueso <davidlohr@hp.com>
	Reviewed-by: Jonathan Gonzalez <jgonzalez@linets.cl>
	Cc: Aswin Chandramouleeswaran <aswin@hp.com>
	Cc: Rik van Riel <riel@redhat.com>
	Acked-by: Manfred Spraul <manfred@colorfullife.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit daf948c7d1a080041ae19aca07625efec670695a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	ipc/util.c
diff --cc ipc/util.c
index 496c9b0095ff,e1b4c6db8aa0..000000000000
--- a/ipc/util.c
+++ b/ipc/util.c
@@@ -131,28 -131,18 +131,30 @@@ static int __init ipc_init(void
  __initcall(ipc_init);
  
  /**
 - * ipc_init_ids	- initialise ipc identifiers
 - * @ids: ipc identifier set
 + *	ipc_init_ids		-	initialise IPC identifiers
 + *	@ids: Identifier set
   *
 - * Set up the sequence range to use for the ipc identifier range (limited
 - * below IPCMNI) then initialise the ids idr.
 + *	Set up the sequence range to use for the ipc identifier range (limited
 + *	below IPCMNI) then initialise the ids idr.
   */
 + 
  void ipc_init_ids(struct ipc_ids *ids)
  {
- 	init_rwsem(&ids->rwsem);
- 
  	ids->in_use = 0;
  	ids->seq = 0;
  	ids->next_id = -1;
++<<<<<<< HEAD
 +	{
 +		int seq_limit = INT_MAX/SEQ_MULTIPLIER;
 +		if (seq_limit > USHRT_MAX)
 +			ids->seq_max = USHRT_MAX;
 +		 else
 +		 	ids->seq_max = seq_limit;
 +	}
 +
++=======
+ 	init_rwsem(&ids->rwsem);
++>>>>>>> daf948c7d1a0 (ipc: delete seq_max field in struct ipc_ids)
  	idr_init(&ids->ipcs_idr);
  }
  
@@@ -306,9 -289,13 +308,9 @@@ int ipc_addid(struct ipc_ids* ids, stru
  
  	ids->in_use++;
  
 -	current_euid_egid(&euid, &egid);
 -	new->cuid = new->uid = euid;
 -	new->gid = new->cgid = egid;
 -
  	if (next_id < 0) {
  		new->seq = ids->seq++;
- 		if (ids->seq > ids->seq_max)
+ 		if (ids->seq > IPCID_SEQ_MAX)
  			ids->seq = 0;
  	} else {
  		new->seq = ipcid_to_seqx(next_id);
diff --git a/include/linux/ipc_namespace.h b/include/linux/ipc_namespace.h
index 3077f12384f0..ba182de198e5 100644
--- a/include/linux/ipc_namespace.h
+++ b/include/linux/ipc_namespace.h
@@ -21,7 +21,6 @@ struct user_namespace;
 struct ipc_ids {
 	int in_use;
 	unsigned short seq;
-	unsigned short seq_max;
 	struct rw_semaphore rwsem;
 	struct idr ipcs_idr;
 	int next_id;
* Unmerged path ipc/util.c
diff --git a/ipc/util.h b/ipc/util.h
index a1cbc3aaf25a..bea6888020da 100644
--- a/ipc/util.h
+++ b/ipc/util.h
@@ -100,6 +100,7 @@ void __init ipc_init_proc_interface(const char *path, const char *header,
 
 #define ipcid_to_idx(id) ((id) % SEQ_MULTIPLIER)
 #define ipcid_to_seqx(id) ((id) / SEQ_MULTIPLIER)
+#define IPCID_SEQ_MAX min_t(int, INT_MAX/SEQ_MULTIPLIER, USHRT_MAX)
 
 /* must be called with ids->rwsem acquired for writing */
 int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);
