don't bother with {get,put}_write_access() on non-regular files

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
Rebuild_CHGLOG: - [fs] don't bother with {get, put}_write_access() on non-regular files (Miklos Szeredi) [1679829]
Rebuild_FUZZ: 99.21%
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit dd20908a8a06b22c171f6c3fcdbdbd65bed07505
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/dd20908a.failed

it's pointless and actually leads to wrong behaviour in at least one
moderately convoluted case (pipe(), close one end, try to get to
another via /proc/*/fd and run into ETXTBUSY).

	Cc: stable@vger.kernel.org
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit dd20908a8a06b22c171f6c3fcdbdbd65bed07505)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/open.c
diff --cc fs/open.c
index 0bdd69faf284,2ed7325f713e..000000000000
--- a/fs/open.c
+++ b/fs/open.c
@@@ -722,8 -678,8 +711,13 @@@ static int do_dentry_open(struct file *
  		f->f_mode = FMODE_PATH;
  
  	path_get(&f->f_path);
++<<<<<<< HEAD
 +	f->f_inode = inode;
 +	if (f->f_mode & FMODE_WRITE) {
++=======
+ 	inode = f->f_inode = f->f_path.dentry->d_inode;
+ 	if (f->f_mode & FMODE_WRITE && !special_file(inode->i_mode)) {
++>>>>>>> dd20908a8a06 (don't bother with {get,put}_write_access() on non-regular files)
  		error = __get_file_write_access(inode, f->f_path.mnt);
  		if (error)
  			goto cleanup_file;
diff --git a/fs/file_table.c b/fs/file_table.c
index cfd92eac323a..b28227b6d6ca 100644
--- a/fs/file_table.c
+++ b/fs/file_table.c
@@ -210,10 +210,10 @@ static void drop_file_write_access(struct file *file)
 	struct vfsmount *mnt = file->f_path.mnt;
 	struct inode *inode = file->f_inode;
 
-	put_write_access(inode);
-
 	if (special_file(inode->i_mode))
 		return;
+
+	put_write_access(inode);
 	if (file_check_writeable(file) != 0)
 		return;
 	__mnt_drop_write(mnt);
* Unmerged path fs/open.c
