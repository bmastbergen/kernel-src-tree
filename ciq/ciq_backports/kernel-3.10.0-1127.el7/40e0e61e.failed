gfs2: add a helper function to get_log_header that can be used elsewhere

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Abhi Das <adas@redhat.com>
commit 40e0e61e366bed56b71edb3b970245165090ec9a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/40e0e61e.failed

Move and re-order the error checks and hash/crc computations into another
function __get_log_header() so it can be used in scenarios where buffer_heads
are not being used for the log header.

	Signed-off-by: Abhi Das <adas@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 40e0e61e366bed56b71edb3b970245165090ec9a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/recovery.c
diff --cc fs/gfs2/recovery.c
index 489aaf82cabb,2dac43065382..000000000000
--- a/fs/gfs2/recovery.c
+++ b/fs/gfs2/recovery.c
@@@ -117,22 -120,35 +117,54 @@@ void gfs2_revoke_clean(struct gfs2_jdes
  	}
  }
  
++<<<<<<< HEAD
 +static int gfs2_log_header_in(struct gfs2_log_header_host *lh, const void *buf)
 +{
 +	const struct gfs2_log_header *str = buf;
 +
 +	if (str->lh_header.mh_magic != cpu_to_be32(GFS2_MAGIC) ||
 +	    str->lh_header.mh_type != cpu_to_be32(GFS2_METATYPE_LH))
 +		return 1;
 +
 +	lh->lh_sequence = be64_to_cpu(str->lh_sequence);
 +	lh->lh_flags = be32_to_cpu(str->lh_flags);
 +	lh->lh_tail = be32_to_cpu(str->lh_tail);
 +	lh->lh_blkno = be32_to_cpu(str->lh_blkno);
 +	lh->lh_hash = be32_to_cpu(str->lh_hash);
 +	return 0;
 +}
 +
++=======
+ int __get_log_header(struct gfs2_sbd *sdp, const struct gfs2_log_header *lh,
+ 		     unsigned int blkno, struct gfs2_log_header_host *head)
+ {
+ 	u32 hash, crc;
+ 
+ 	if (lh->lh_header.mh_magic != cpu_to_be32(GFS2_MAGIC) ||
+ 	    lh->lh_header.mh_type != cpu_to_be32(GFS2_METATYPE_LH) ||
+ 	    (blkno && be32_to_cpu(lh->lh_blkno) != blkno))
+ 		return 1;
+ 
+ 	hash = crc32(~0, lh, LH_V1_SIZE - 4);
+ 	hash = ~crc32_le_shift(hash, 4); /* assume lh_hash is zero */
+ 
+ 	if (be32_to_cpu(lh->lh_hash) != hash)
+ 		return 1;
+ 
+ 	crc = crc32c(~0, (void *)lh + LH_V1_SIZE + 4,
+ 		     sdp->sd_sb.sb_bsize - LH_V1_SIZE - 4);
+ 
+ 	if ((lh->lh_crc != 0 && be32_to_cpu(lh->lh_crc) != crc))
+ 		return 1;
+ 
+ 	head->lh_sequence = be64_to_cpu(lh->lh_sequence);
+ 	head->lh_flags = be32_to_cpu(lh->lh_flags);
+ 	head->lh_tail = be32_to_cpu(lh->lh_tail);
+ 	head->lh_blkno = be32_to_cpu(lh->lh_blkno);
+ 
+ 	return 0;
+ }
++>>>>>>> 40e0e61e366b (gfs2: add a helper function to get_log_header that can be used elsewhere)
  /**
   * get_log_header - read the log header for a given segment
   * @jd: the journal
@@@ -150,29 -166,19 +182,42 @@@
  static int get_log_header(struct gfs2_jdesc *jd, unsigned int blk,
  			  struct gfs2_log_header_host *head)
  {
++<<<<<<< HEAD
 +	struct buffer_head *bh;
 +	struct gfs2_log_header_host uninitialized_var(lh);
 +	const u32 nothing = 0;
 +	u32 hash;
++=======
+ 	struct gfs2_sbd *sdp = GFS2_SB(jd->jd_inode);
+ 	struct buffer_head *bh;
++>>>>>>> 40e0e61e366b (gfs2: add a helper function to get_log_header that can be used elsewhere)
  	int error;
  
  	error = gfs2_replay_read_block(jd, blk, &bh);
  	if (error)
  		return error;
  
++<<<<<<< HEAD
 +	hash = crc32_le((u32)~0, bh->b_data, sizeof(struct gfs2_log_header) -
 +					     sizeof(u32));
 +	hash = crc32_le(hash, (unsigned char const *)&nothing, sizeof(nothing));
 +	hash ^= (u32)~0;
 +	error = gfs2_log_header_in(&lh, bh->b_data);
 +	brelse(bh);
 +
 +	if (error || lh.lh_blkno != blk || lh.lh_hash != hash)
 +		return 1;
 +
 +	*head = lh;
 +
 +	return 0;
++=======
+ 	error = __get_log_header(sdp, (const struct gfs2_log_header *)bh->b_data,
+ 				 blk, head);
+ 	brelse(bh);
+ 
+ 	return error;
++>>>>>>> 40e0e61e366b (gfs2: add a helper function to get_log_header that can be used elsewhere)
  }
  
  /**
* Unmerged path fs/gfs2/recovery.c
diff --git a/fs/gfs2/recovery.h b/fs/gfs2/recovery.h
index 11fdfab4bf99..11d81248be85 100644
--- a/fs/gfs2/recovery.h
+++ b/fs/gfs2/recovery.h
@@ -31,6 +31,9 @@ extern int gfs2_find_jhead(struct gfs2_jdesc *jd,
 		    struct gfs2_log_header_host *head);
 extern int gfs2_recover_journal(struct gfs2_jdesc *gfs2_jd, bool wait);
 extern void gfs2_recover_func(struct work_struct *work);
+extern int __get_log_header(struct gfs2_sbd *sdp,
+			    const struct gfs2_log_header *lh, unsigned int blkno,
+			    struct gfs2_log_header_host *head);
 
 #endif /* __RECOVERY_DOT_H__ */
 
