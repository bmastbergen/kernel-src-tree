xfs: check type in quota verifier during quotacheck

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Eric Sandeen <sandeen@sandeen.net>
commit 57ab324553bbfedc8e732eb570edfac0f5cfe57e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/57ab3245.failed

During quotacheck we send in the quota type, so verify that as well.

	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 57ab324553bbfedc8e732eb570edfac0f5cfe57e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_dquot_buf.c
diff --cc fs/xfs/libxfs/xfs_dquot_buf.c
index 74b0867f3ece,c00174f32f0d..000000000000
--- a/fs/xfs/libxfs/xfs_dquot_buf.c
+++ b/fs/xfs/libxfs/xfs_dquot_buf.c
@@@ -47,12 -47,8 +47,16 @@@ xfs_dqcheck
  	struct xfs_mount *mp,
  	xfs_disk_dquot_t *ddq,
  	xfs_dqid_t	 id,
++<<<<<<< HEAD
 +	uint		 type,	  /* used only when IO_dorepair is true */
 +	uint		 flags,
 +	const char	 *str)
++=======
+ 	uint		 type)	  /* used only during quotacheck */
++>>>>>>> 57ab324553bb (xfs: check type in quota verifier during quotacheck)
  {
 +	int		errs = 0;
 +
  	/*
  	 * We can encounter an uninitialized dquot buffer for 2 reasons:
  	 * 1. If we crash while deleting the quotainode(s), and those blks got
@@@ -68,77 -64,40 +72,79 @@@
  	 * This is all fine; things are still consistent, and we haven't lost
  	 * any quota information. Just don't complain about bad dquot blks.
  	 */
 -	if (ddq->d_magic != cpu_to_be16(XFS_DQUOT_MAGIC))
 -		return __this_address;
 -	if (ddq->d_version != XFS_DQUOT_VERSION)
 -		return __this_address;
 +	if (ddq->d_magic != cpu_to_be16(XFS_DQUOT_MAGIC)) {
 +		if (flags & XFS_QMOPT_DOWARN)
 +			xfs_alert(mp,
 +			"%s : XFS dquot ID 0x%x, magic 0x%x != 0x%x",
 +			str, id, be16_to_cpu(ddq->d_magic), XFS_DQUOT_MAGIC);
 +		errs++;
 +	}
 +	if (ddq->d_version != XFS_DQUOT_VERSION) {
 +		if (flags & XFS_QMOPT_DOWARN)
 +			xfs_alert(mp,
 +			"%s : XFS dquot ID 0x%x, version 0x%x != 0x%x",
 +			str, id, ddq->d_version, XFS_DQUOT_VERSION);
 +		errs++;
 +	}
  
+ 	if (type && ddq->d_flags != type)
+ 		return __this_address;
  	if (ddq->d_flags != XFS_DQ_USER &&
  	    ddq->d_flags != XFS_DQ_PROJ &&
 -	    ddq->d_flags != XFS_DQ_GROUP)
 -		return __this_address;
 -
 -	if (id != -1 && id != be32_to_cpu(ddq->d_id))
 -		return __this_address;
 -
 -	if (!ddq->d_id)
 -		return NULL;
 -
 -	if (ddq->d_blk_softlimit &&
 -	    be64_to_cpu(ddq->d_bcount) > be64_to_cpu(ddq->d_blk_softlimit) &&
 -	    !ddq->d_btimer)
 -		return __this_address;
 +	    ddq->d_flags != XFS_DQ_GROUP) {
 +		if (flags & XFS_QMOPT_DOWARN)
 +			xfs_alert(mp,
 +			"%s : XFS dquot ID 0x%x, unknown flags 0x%x",
 +			str, id, ddq->d_flags);
 +		errs++;
 +	}
  
 -	if (ddq->d_ino_softlimit &&
 -	    be64_to_cpu(ddq->d_icount) > be64_to_cpu(ddq->d_ino_softlimit) &&
 -	    !ddq->d_itimer)
 -		return __this_address;
 +	if (id != -1 && id != be32_to_cpu(ddq->d_id)) {
 +		if (flags & XFS_QMOPT_DOWARN)
 +			xfs_alert(mp,
 +			"%s : ondisk-dquot 0x%p, ID mismatch: "
 +			"0x%x expected, found id 0x%x",
 +			str, ddq, id, be32_to_cpu(ddq->d_id));
 +		errs++;
 +	}
  
 -	if (ddq->d_rtb_softlimit &&
 -	    be64_to_cpu(ddq->d_rtbcount) > be64_to_cpu(ddq->d_rtb_softlimit) &&
 -	    !ddq->d_rtbtimer)
 -		return __this_address;
 +	if (!errs && ddq->d_id) {
 +		if (ddq->d_blk_softlimit &&
 +		    be64_to_cpu(ddq->d_bcount) >
 +				be64_to_cpu(ddq->d_blk_softlimit)) {
 +			if (!ddq->d_btimer) {
 +				if (flags & XFS_QMOPT_DOWARN)
 +					xfs_alert(mp,
 +			"%s : Dquot ID 0x%x (0x%p) BLK TIMER NOT STARTED",
 +					str, (int)be32_to_cpu(ddq->d_id), ddq);
 +				errs++;
 +			}
 +		}
 +		if (ddq->d_ino_softlimit &&
 +		    be64_to_cpu(ddq->d_icount) >
 +				be64_to_cpu(ddq->d_ino_softlimit)) {
 +			if (!ddq->d_itimer) {
 +				if (flags & XFS_QMOPT_DOWARN)
 +					xfs_alert(mp,
 +			"%s : Dquot ID 0x%x (0x%p) INODE TIMER NOT STARTED",
 +					str, (int)be32_to_cpu(ddq->d_id), ddq);
 +				errs++;
 +			}
 +		}
 +		if (ddq->d_rtb_softlimit &&
 +		    be64_to_cpu(ddq->d_rtbcount) >
 +				be64_to_cpu(ddq->d_rtb_softlimit)) {
 +			if (!ddq->d_rtbtimer) {
 +				if (flags & XFS_QMOPT_DOWARN)
 +					xfs_alert(mp,
 +			"%s : Dquot ID 0x%x (0x%p) RTBLK TIMER NOT STARTED",
 +					str, (int)be32_to_cpu(ddq->d_id), ddq);
 +				errs++;
 +			}
 +		}
 +	}
  
 -	return NULL;
 +	return errs;
  }
  
  /*
* Unmerged path fs/xfs/libxfs/xfs_dquot_buf.c
