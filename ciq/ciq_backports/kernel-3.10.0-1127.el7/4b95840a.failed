net/mlx5e: Fix matching of speed to PRM link modes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1127.el7
commit-author Aya Levin <ayal@mellanox.com>
commit 4b95840a6ced0634082f6d962ba9aa0ce797f12f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1127.el7/4b95840a.failed

Speed translation is performed based on legacy or extended PTYS
register. Translate speed with respect to:
1) Capability bit of extended PTYS table.
2) User request:
 a) When auto-negotiation is turned on, inspect advertisement whether it
 contains extended link modes.
 b) When auto-negotiation is turned off, speed > 100Gbps (maximal
 speed supported in legacy mode).
With both conditions fulfilled translation is done with extended PTYS
table otherwise use legacy PTYS table.
Without this patch 25/50/100 Gbps speed cannot be set, since try to
configure in extended mode but read from legacy mode.

Fixes: dd1b9e09c12b ("net/mlx5: ethtool, Allow legacy link-modes configuration via non-extended ptys")
	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 4b95840a6ced0634082f6d962ba9aa0ce797f12f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 196cfa0f83a6,03bed714bac3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -929,7 -939,8 +929,12 @@@ static int mlx5e_get_link_ksettings(str
  	get_supported(mdev, eth_proto_cap, link_ksettings);
  	get_advertising(eth_proto_admin, tx_pause, rx_pause, link_ksettings,
  			admin_ext);
++<<<<<<< HEAD
 +	get_speed_duplex(netdev, eth_proto_oper, link_ksettings);
++=======
+ 	get_speed_duplex(priv->netdev, eth_proto_oper, !admin_ext,
+ 			 link_ksettings);
++>>>>>>> 4b95840a6ced (net/mlx5e: Fix matching of speed to PRM link modes)
  
  	eth_proto_oper = eth_proto_oper ? eth_proto_oper : eth_proto_cap;
  
@@@ -998,12 -1017,36 +1003,42 @@@ static u32 mlx5e_ethtool2ptys_ext_adver
  	return ptys_modes;
  }
  
++<<<<<<< HEAD
 +static int mlx5e_set_link_ksettings(struct net_device *netdev,
 +				    const struct ethtool_link_ksettings *link_ksettings)
++=======
+ static bool ext_link_mode_requested(const unsigned long *adver)
+ {
+ #define MLX5E_MIN_PTYS_EXT_LINK_MODE_BIT ETHTOOL_LINK_MODE_50000baseKR_Full_BIT
+ 	int size = __ETHTOOL_LINK_MODE_MASK_NBITS - MLX5E_MIN_PTYS_EXT_LINK_MODE_BIT;
+ 	__ETHTOOL_DECLARE_LINK_MODE_MASK(modes);
+ 
+ 	bitmap_set(modes, MLX5E_MIN_PTYS_EXT_LINK_MODE_BIT, size);
+ 	return bitmap_intersects(modes, adver, __ETHTOOL_LINK_MODE_MASK_NBITS);
+ }
+ 
+ static bool ext_speed_requested(u32 speed)
+ {
+ #define MLX5E_MAX_PTYS_LEGACY_SPEED 100000
+ 	return !!(speed > MLX5E_MAX_PTYS_LEGACY_SPEED);
+ }
+ 
+ static bool ext_requested(u8 autoneg, const unsigned long *adver, u32 speed)
+ {
+ 	bool ext_link_mode = ext_link_mode_requested(adver);
+ 	bool ext_speed = ext_speed_requested(speed);
+ 
+ 	return  autoneg == AUTONEG_ENABLE ? ext_link_mode : ext_speed;
+ }
+ 
+ int mlx5e_ethtool_set_link_ksettings(struct mlx5e_priv *priv,
+ 				     const struct ethtool_link_ksettings *link_ksettings)
++>>>>>>> 4b95840a6ced (net/mlx5e: Fix matching of speed to PRM link modes)
  {
 +	struct mlx5e_priv *priv    = netdev_priv(netdev);
  	struct mlx5_core_dev *mdev = priv->mdev;
  	struct mlx5e_port_eth_proto eproto;
+ 	const unsigned long *adver;
  	bool an_changes = false;
  	u8 an_disable_admin;
  	bool ext_supported;
@@@ -1017,21 -1061,20 +1053,20 @@@
  
  	u32 (*ethtool2ptys_adver_func)(const unsigned long *adver);
  
- #define MLX5E_PTYS_EXT ((1ULL << ETHTOOL_LINK_MODE_50000baseKR_Full_BIT) - 1)
+ 	adver = link_ksettings->link_modes.advertising;
+ 	autoneg = link_ksettings->base.autoneg;
+ 	speed = link_ksettings->base.speed;
  
- 	ext_requested = !!(link_ksettings->link_modes.advertising[0] >
- 			MLX5E_PTYS_EXT ||
- 			link_ksettings->link_modes.advertising[1]);
+ 	ext = ext_requested(autoneg, adver, speed),
  	ext_supported = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
- 	ext_requested &= ext_supported;
+ 	if (!ext_supported && ext)
+ 		return -EOPNOTSUPP;
  
- 	speed = link_ksettings->base.speed;
- 	ethtool2ptys_adver_func = ext_requested ?
- 				  mlx5e_ethtool2ptys_ext_adver_link :
+ 	ethtool2ptys_adver_func = ext ? mlx5e_ethtool2ptys_ext_adver_link :
  				  mlx5e_ethtool2ptys_adver_link;
- 	err = mlx5_port_query_eth_proto(mdev, 1, ext_requested, &eproto);
+ 	err = mlx5_port_query_eth_proto(mdev, 1, ext, &eproto);
  	if (err) {
 -		netdev_err(priv->netdev, "%s: query port eth proto failed: %d\n",
 +		netdev_err(netdev, "%s: query port eth proto failed: %d\n",
  			   __func__, err);
  		goto out;
  	}
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/port.c b/drivers/net/ethernet/mellanox/mlx5/core/en/port.c
index d5e5afbdca6d..f777994f3005 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/port.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/port.c
@@ -78,9 +78,10 @@ static const u32 mlx5e_ext_link_speed[MLX5E_EXT_LINK_MODES_NUMBER] = {
 };
 
 static void mlx5e_port_get_speed_arr(struct mlx5_core_dev *mdev,
-				     const u32 **arr, u32 *size)
+				     const u32 **arr, u32 *size,
+				     bool force_legacy)
 {
-	bool ext = MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
+	bool ext = force_legacy ? false : MLX5_CAP_PCAM_FEATURE(mdev, ptys_extended_ethernet);
 
 	*size = ext ? ARRAY_SIZE(mlx5e_ext_link_speed) :
 		      ARRAY_SIZE(mlx5e_link_speed);
@@ -152,7 +153,8 @@ int mlx5_port_set_eth_ptys(struct mlx5_core_dev *dev, bool an_disable,
 			    sizeof(out), MLX5_REG_PTYS, 0, 1);
 }
 
-u32 mlx5e_port_ptys2speed(struct mlx5_core_dev *mdev, u32 eth_proto_oper)
+u32 mlx5e_port_ptys2speed(struct mlx5_core_dev *mdev, u32 eth_proto_oper,
+			  bool force_legacy)
 {
 	unsigned long temp = eth_proto_oper;
 	const u32 *table;
@@ -160,7 +162,7 @@ u32 mlx5e_port_ptys2speed(struct mlx5_core_dev *mdev, u32 eth_proto_oper)
 	u32 max_size;
 	int i;
 
-	mlx5e_port_get_speed_arr(mdev, &table, &max_size);
+	mlx5e_port_get_speed_arr(mdev, &table, &max_size, force_legacy);
 	i = find_first_bit(&temp, max_size);
 	if (i < max_size)
 		speed = table[i];
@@ -170,6 +172,7 @@ u32 mlx5e_port_ptys2speed(struct mlx5_core_dev *mdev, u32 eth_proto_oper)
 int mlx5e_port_linkspeed(struct mlx5_core_dev *mdev, u32 *speed)
 {
 	struct mlx5e_port_eth_proto eproto;
+	bool force_legacy = false;
 	bool ext;
 	int err;
 
@@ -177,8 +180,13 @@ int mlx5e_port_linkspeed(struct mlx5_core_dev *mdev, u32 *speed)
 	err = mlx5_port_query_eth_proto(mdev, 1, ext, &eproto);
 	if (err)
 		goto out;
-
-	*speed = mlx5e_port_ptys2speed(mdev, eproto.oper);
+	if (ext && !eproto.admin) {
+		force_legacy = true;
+		err = mlx5_port_query_eth_proto(mdev, 1, false, &eproto);
+		if (err)
+			goto out;
+	}
+	*speed = mlx5e_port_ptys2speed(mdev, eproto.oper, force_legacy);
 	if (!(*speed))
 		err = -EINVAL;
 
@@ -201,7 +209,7 @@ int mlx5e_port_max_linkspeed(struct mlx5_core_dev *mdev, u32 *speed)
 	if (err)
 		return err;
 
-	mlx5e_port_get_speed_arr(mdev, &table, &max_size);
+	mlx5e_port_get_speed_arr(mdev, &table, &max_size, false);
 	for (i = 0; i < max_size; ++i)
 		if (eproto.cap & MLX5E_PROT_MASK(i))
 			max_speed = max(max_speed, table[i]);
@@ -210,14 +218,15 @@ int mlx5e_port_max_linkspeed(struct mlx5_core_dev *mdev, u32 *speed)
 	return 0;
 }
 
-u32 mlx5e_port_speed2linkmodes(struct mlx5_core_dev *mdev, u32 speed)
+u32 mlx5e_port_speed2linkmodes(struct mlx5_core_dev *mdev, u32 speed,
+			       bool force_legacy)
 {
 	u32 link_modes = 0;
 	const u32 *table;
 	u32 max_size;
 	int i;
 
-	mlx5e_port_get_speed_arr(mdev, &table, &max_size);
+	mlx5e_port_get_speed_arr(mdev, &table, &max_size, force_legacy);
 	for (i = 0; i < max_size; ++i) {
 		if (table[i] == speed)
 			link_modes |= MLX5E_PROT_MASK(i);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/port.h b/drivers/net/ethernet/mellanox/mlx5/core/en/port.h
index 70f536ec51c4..4a7f4497692b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/port.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/port.h
@@ -48,10 +48,12 @@ void mlx5_port_query_eth_autoneg(struct mlx5_core_dev *dev, u8 *an_status,
 				 u8 *an_disable_cap, u8 *an_disable_admin);
 int mlx5_port_set_eth_ptys(struct mlx5_core_dev *dev, bool an_disable,
 			   u32 proto_admin, bool ext);
-u32 mlx5e_port_ptys2speed(struct mlx5_core_dev *mdev, u32 eth_proto_oper);
+u32 mlx5e_port_ptys2speed(struct mlx5_core_dev *mdev, u32 eth_proto_oper,
+			  bool force_legacy);
 int mlx5e_port_linkspeed(struct mlx5_core_dev *mdev, u32 *speed);
 int mlx5e_port_max_linkspeed(struct mlx5_core_dev *mdev, u32 *speed);
-u32 mlx5e_port_speed2linkmodes(struct mlx5_core_dev *mdev, u32 speed);
+u32 mlx5e_port_speed2linkmodes(struct mlx5_core_dev *mdev, u32 speed,
+			       bool force_legacy);
 
 int mlx5e_port_query_pbmc(struct mlx5_core_dev *mdev, void *out);
 int mlx5e_port_set_pbmc(struct mlx5_core_dev *mdev, void *in);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
