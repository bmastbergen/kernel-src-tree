x86/mm: Build arch/x86/mm/tlb.c even on !SMP

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.31.1.el7
commit-author Andy Lutomirski <luto@kernel.org>
commit e1074888c326038340a1ada9129d679e661f2ea6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.31.1.el7/e1074888.failed

Currently all of the functions that live in tlb.c are inlined on
!SMP builds.  One can debate whether this is a good idea (in many
respects the code in tlb.c is better than the inlined UP code).

Regardless, I want to add code that needs to be built on UP and SMP
kernels and relates to tlb flushing, so arrange for tlb.c to be
compiled unconditionally.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/f0d778f0d828fc46e5d1946bca80f0aaf9abf032.1461688545.git.luto@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e1074888c326038340a1ada9129d679e661f2ea6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/tlb.c
diff --cc arch/x86/mm/tlb.c
index bbb1a2b21ef2,a4530e2e20d7..000000000000
--- a/arch/x86/mm/tlb.c
+++ b/arch/x86/mm/tlb.c
@@@ -321,5 -354,6 +323,11 @@@ static int __init create_tlb_flushall_s
  			    arch_debugfs_dir, NULL, &fops_tlbflush);
  	return 0;
  }
++<<<<<<< HEAD
 +late_initcall(create_tlb_flushall_shift);
 +#endif
++=======
+ late_initcall(create_tlb_single_page_flush_ceiling);
+ 
+ #endif /* CONFIG_SMP */
++>>>>>>> e1074888c326 (x86/mm: Build arch/x86/mm/tlb.c even on !SMP)
diff --git a/arch/x86/mm/Makefile b/arch/x86/mm/Makefile
index 9d968eeb964f..740a58f66d67 100644
--- a/arch/x86/mm/Makefile
+++ b/arch/x86/mm/Makefile
@@ -1,5 +1,5 @@
 obj-y	:=  init.o init_$(BITS).o fault.o ioremap.o extable.o pageattr.o mmap.o \
-	    pat.o pgtable.o physaddr.o gup.o setup_nx.o
+	    pat.o pgtable.o physaddr.o gup.o setup_nx.o tlb.o
 
 # Make sure __phys_addr has no stackprotector
 nostackp := $(call cc-option, -fno-stack-protector)
@@ -9,7 +9,6 @@ CFLAGS_setup_nx.o		:= $(nostackp)
 CFLAGS_fault.o := -I$(src)/../include/asm/trace
 
 obj-$(CONFIG_X86_PAT)		+= pat_rbtree.o
-obj-$(CONFIG_SMP)		+= tlb.o
 
 obj-$(CONFIG_X86_32)		+= pgtable_32.o iomap_32.o
 
* Unmerged path arch/x86/mm/tlb.c
