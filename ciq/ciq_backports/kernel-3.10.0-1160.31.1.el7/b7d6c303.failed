block: fix use-after-free on cached last_lookup partition

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.31.1.el7
commit-author Ming Lei <ming.lei@redhat.com>
commit b7d6c30333239f77f8e51423064a623acc7fd127
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.31.1.el7/b7d6c303.failed

delete_partition() clears the cached last_lookup partition. However the
.last_lookup cache may be overwritten by one IO path after it is cleared
from delete_partition(). Then another IO path may use the cached deleting
partition after hd_struct_free() is called, then use-after-free is triggered
on the cached partition.

Fixes the issue by the following approach:

1) always get the partition's refcount via hd_struct_try_get() before
setting .last_lookup

2) move clearing .last_lookup from delete_partition() to hd_struct_free()
which is the release handle of the partition's percpu-refcount, so that no
IO path can cache deleteing partition via .last_lookup.

It is one candidate approach of Yufen's patch[1] which adds overhead
in fast path by indirect lookup which may introduce one extra cacheline
in IO path. Also this patch relies on percpu-refcount's protection, and
it is easier to understand and verify.

[1] https://lore.kernel.org/linux-block/20200109013551.GB9655@ming.t460p/T/#t

	Reported-by: Yufen Yu <yuyufen@huawei.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@infradead.org>
	Cc: Christoph Hellwig <hch@infradead.org>
	Cc: Hou Tao <houtao1@huawei.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b7d6c30333239f77f8e51423064a623acc7fd127)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
#	block/partitions/core.c
diff --cc block/blk-core.c
index 4adca224bd03,409e1a6b73b0..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -2592,23 -1359,9 +2592,26 @@@ void blk_account_io_start(struct reques
  
  	if (!new_io) {
  		part = rq->part;
 -		part_stat_inc(part, merges[rw]);
 +		part_stat_inc(cpu, part, merges[rw]);
  	} else {
  		part = disk_map_sector_rcu(rq->rq_disk, blk_rq_pos(rq));
++<<<<<<< HEAD
 +		if (!hd_struct_try_get(part)) {
 +			/*
 +			 * The partition is already being removed,
 +			 * the request will be accounted on the disk only
 +			 *
 +			 * We take a reference on disk->part0 although that
 +			 * partition will never be deleted, so we can treat
 +			 * it as any other partition.
 +			 */
 +			part = &rq->rq_disk->part0;
 +			hd_struct_get(part);
 +		}
 +		if (!is_mq)
 +			part_round_stats(rq->q, cpu, part);
++=======
++>>>>>>> b7d6c3033323 (block: fix use-after-free on cached last_lookup partition)
  		part_inc_in_flight(rq->q, part, rw);
  		rq->part = part;
  	}
* Unmerged path block/partitions/core.c
* Unmerged path block/blk-core.c
diff --git a/block/genhd.c b/block/genhd.c
index 685d60b41b59..8df97685515b 100644
--- a/block/genhd.c
+++ b/block/genhd.c
@@ -258,11 +258,12 @@ static inline int sector_in_part(struct hd_struct *part, sector_t sector)
  * primarily used for stats accounting.
  *
  * CONTEXT:
- * RCU read locked.  The returned partition pointer is valid only
- * while preemption is disabled.
+ * RCU read locked.  The returned partition pointer is always valid
+ * because its refcount is grabbed.
  *
  * RETURNS:
  * Found partition on success, part0 is returned if no partition matches
+ * or the matched partition is being deleted.
  */
 struct hd_struct *disk_map_sector_rcu(struct gendisk *disk, sector_t sector)
 {
@@ -273,17 +274,25 @@ struct hd_struct *disk_map_sector_rcu(struct gendisk *disk, sector_t sector)
 	ptbl = rcu_dereference(disk->part_tbl);
 
 	part = rcu_dereference(ptbl->last_lookup);
-	if (part && sector_in_part(part, sector))
+	if (part && sector_in_part(part, sector) && hd_struct_try_get(part))
 		return part;
 
 	for (i = 1; i < ptbl->len; i++) {
 		part = rcu_dereference(ptbl->part[i]);
 
 		if (part && sector_in_part(part, sector)) {
+			/*
+			 * only live partition can be cached for lookup,
+			 * so use-after-free on cached & deleting partition
+			 * can be avoided
+			 */
+			if (!hd_struct_try_get(part))
+				break;
 			rcu_assign_pointer(ptbl->last_lookup, part);
 			return part;
 		}
 	}
+	hd_struct_get(&disk->part0);
 	return &disk->part0;
 }
 EXPORT_SYMBOL_GPL(disk_map_sector_rcu);
* Unmerged path block/partitions/core.c
