scsi: hpsa: Correct dev cmds outstanding for retried cmds

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.31.1.el7
commit-author Don Brace <don.brace@microchip.com>
commit f749d8b7a9896bc6e5ffe104cc64345037e0b152
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.31.1.el7/f749d8b7.failed

Prevent incrementing device->commands_outstanding for ioaccel command
retries that are driver initiated.  If the command goes through the retry
path, the device->commands_outstanding counter has already accounted for
the number of commands outstanding to the device.  Only commands going
through function hpsa_cmd_resolve_events decrement this counter.

 - ioaccel commands go to either HBA disks or to logical volumes comprised
   of SSDs.

The extra increment is causing device resets to hang.

 - Resets wait for all device outstanding commands to complete before
   returning.

Replace unused field abort_pending with retry_pending. This is a
maintenance driver so these changes have the least impact/risk.

Link: https://lore.kernel.org/r/161342801747.29388.13045495968308188518.stgit@brunhilda
	Tested-by: Joe Szczypek <jszczype@redhat.com>
	Reviewed-by: Scott Benesh <scott.benesh@microchip.com>
	Reviewed-by: Scott Teel <scott.teel@microchip.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Signed-off-by: Don Brace <don.brace@microchip.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit f749d8b7a9896bc6e5ffe104cc64345037e0b152)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/hpsa.c
diff --cc drivers/scsi/hpsa.c
index 93d4a13ab868,38369766511c..000000000000
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@@ -5656,11 -5724,16 +5674,22 @@@ static int hpsa_scsi_queue_command(stru
  	/*
  	 * Call alternate submit routine for I/O accelerated commands.
  	 * Retries always go down the normal I/O path.
+ 	 * Note: If cmd->retries is non-zero, then this is a SML
+ 	 *       initiated retry and not a driver initiated retry.
+ 	 *       This command has been obtained from cmd_tagged_alloc
+ 	 *       and is therefore a brand-new command.
  	 */
  	if (likely(cmd->retries == 0 &&
++<<<<<<< HEAD
 +		cmd->request->cmd_type == REQ_TYPE_FS &&
 +		h->acciopath_status)) {
 +		rc = hpsa_ioaccel_submit(h, c, cmd);
++=======
+ 			!blk_rq_is_passthrough(cmd->request) &&
+ 			h->acciopath_status)) {
+ 		/* Submit with the retry_pending flag unset. */
+ 		rc = hpsa_ioaccel_submit(h, c, cmd, false);
++>>>>>>> f749d8b7a989 (scsi: hpsa: Correct dev cmds outstanding for retried cmds)
  		if (rc == 0)
  			return 0;
  		if (rc == SCSI_MLQUEUE_HOST_BUSY) {
* Unmerged path drivers/scsi/hpsa.c
diff --git a/drivers/scsi/hpsa_cmd.h b/drivers/scsi/hpsa_cmd.h
index 7825cbfea4dc..06e21a06ee0c 100644
--- a/drivers/scsi/hpsa_cmd.h
+++ b/drivers/scsi/hpsa_cmd.h
@@ -447,7 +447,7 @@ struct CommandList {
 	 */
 	struct hpsa_scsi_dev_t *phys_disk;
 
-	int abort_pending;
+	bool retry_pending;
 	struct hpsa_scsi_dev_t *device;
 	atomic_t refcount; /* Must be last to avoid memset in hpsa_cmd_init() */
 } __aligned(COMMANDLIST_ALIGNMENT);
