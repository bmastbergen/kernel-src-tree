bpf: Refuse unused attributes in bpf_prog_{attach,detach}

jira LE-1907
Rebuild_History Non-Buildable kernel-5.14.0-427.18.1.el9_4
commit-author Lorenz Bauer <lmb@isovalent.com>
commit ba62d61128bda71fd02622f320ac59d861fc4baa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-427.18.1.el9_4/ba62d611.failed

The recently added tcx attachment extended the BPF UAPI for attaching and
detaching by a couple of fields. Those fields are currently only supported
for tcx, other types like cgroups and flow dissector silently ignore the
new fields except for the new flags.

This is problematic once we extend bpf_mprog to older attachment types, since
it's hard to figure out whether the syscall really was successful if the
kernel silently ignores non-zero values.

Explicitly reject non-zero fields relevant to bpf_mprog for attachment types
which don't use the latter yet.

Fixes: e420bed02507 ("bpf: Add fd-based tcx multi-prog infra with link support")
	Signed-off-by: Lorenz Bauer <lmb@isovalent.com>
Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/r/20231006220655.1653-3-daniel@iogearbox.net
	Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
(cherry picked from commit ba62d61128bda71fd02622f320ac59d861fc4baa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/syscall.c
diff --cc kernel/bpf/syscall.c
index 62481af02f05,d77b2f8b9364..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -3811,6 -3804,16 +3811,19 @@@ static int bpf_prog_attach(const union 
  	ptype = attach_type_to_prog_type(attr->attach_type);
  	if (ptype == BPF_PROG_TYPE_UNSPEC)
  		return -EINVAL;
++<<<<<<< HEAD
++=======
+ 	if (bpf_mprog_supported(ptype)) {
+ 		if (attr->attach_flags & ~BPF_F_ATTACH_MASK_MPROG)
+ 			return -EINVAL;
+ 	} else {
+ 		if (attr->attach_flags & ~BPF_F_ATTACH_MASK_BASE)
+ 			return -EINVAL;
+ 		if (attr->relative_fd ||
+ 		    attr->expected_revision)
+ 			return -EINVAL;
+ 	}
++>>>>>>> ba62d61128bd (bpf: Refuse unused attributes in bpf_prog_{attach,detach})
  
  	prog = bpf_prog_get_type(attr->attach_bpf_fd, ptype);
  	if (IS_ERR(prog))
@@@ -3865,6 -3873,21 +3878,24 @@@ static int bpf_prog_detach(const union 
  		return -EINVAL;
  
  	ptype = attach_type_to_prog_type(attr->attach_type);
++<<<<<<< HEAD
++=======
+ 	if (bpf_mprog_supported(ptype)) {
+ 		if (ptype == BPF_PROG_TYPE_UNSPEC)
+ 			return -EINVAL;
+ 		if (attr->attach_flags & ~BPF_F_ATTACH_MASK_MPROG)
+ 			return -EINVAL;
+ 		if (attr->attach_bpf_fd) {
+ 			prog = bpf_prog_get_type(attr->attach_bpf_fd, ptype);
+ 			if (IS_ERR(prog))
+ 				return PTR_ERR(prog);
+ 		}
+ 	} else if (attr->attach_flags ||
+ 		   attr->relative_fd ||
+ 		   attr->expected_revision) {
+ 		return -EINVAL;
+ 	}
++>>>>>>> ba62d61128bd (bpf: Refuse unused attributes in bpf_prog_{attach,detach})
  
  	switch (ptype) {
  	case BPF_PROG_TYPE_SK_MSG:
* Unmerged path kernel/bpf/syscall.c
