cpufreq: handle calls to ->target_index() in separate routine

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] handle calls to ->target_index() in separate routine (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 92.04%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit 8d65775d17941d6d41f5913fc6a99a134c588e01
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/8d65775d.failed

Handling calls to ->target_index() has got complex over time and might become
more complex. So, its better to take target_index() bits out in another routine
__target_index() for better code readability. Shouldn't have any functional
impact.

	Tested-by: Stephen Warren <swarren@nvidia.com>
	Reviewed-by: Doug Anderson <dianders@chromium.org>
	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8d65775d17941d6d41f5913fc6a99a134c588e01)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq.c
diff --cc drivers/cpufreq/cpufreq.c
index a029f5bcbc1e,ae11dd51f81d..000000000000
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@@ -1621,7 -1877,32 +1652,36 @@@ int __cpufreq_driver_target(struct cpuf
  
  	if (cpufreq_driver->target)
  		retval = cpufreq_driver->target(policy, target_freq, relation);
++<<<<<<< HEAD
++
++=======
+ 	else if (cpufreq_driver->target_index) {
+ 		struct cpufreq_frequency_table *freq_table;
+ 		int index;
+ 
+ 		freq_table = cpufreq_frequency_get_table(policy->cpu);
+ 		if (unlikely(!freq_table)) {
+ 			pr_err("%s: Unable to find freq_table\n", __func__);
+ 			goto out;
+ 		}
+ 
+ 		retval = cpufreq_frequency_table_target(policy, freq_table,
+ 				target_freq, relation, &index);
+ 		if (unlikely(retval)) {
+ 			pr_err("%s: Unable to find matching freq\n", __func__);
+ 			goto out;
+ 		}
+ 
+ 		if (freq_table[index].frequency == policy->cur) {
+ 			retval = 0;
+ 			goto out;
+ 		}
  
+ 		retval = __target_index(policy, freq_table, index);
+ 	}
+ 
+ out:
++>>>>>>> 8d65775d1794 (cpufreq: handle calls to ->target_index() in separate routine)
  	return retval;
  }
  EXPORT_SYMBOL_GPL(__cpufreq_driver_target);
* Unmerged path drivers/cpufreq/cpufreq.c
