crypto: fips - only panic on bad/missing crypto mod signatures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [crypto] fips: only panic on bad/missing crypto mod signatures (Jarod Wilson) [903562]
Rebuild_FUZZ: 90.43%
commit-author Jarod Wilson <jarod@redhat.com>
commit 002c77a48b479b094b834b02ef78be47ceac76fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/002c77a4.failed

Per further discussion with NIST, the requirements for FIPS state that
we only need to panic the system on failed kernel module signature checks
for crypto subsystem modules. This moves the fips-mode-only module
signature check out of the generic module loading code, into the crypto
subsystem, at points where we can catch both algorithm module loads and
mode module loads. At the same time, make CONFIG_CRYPTO_FIPS dependent on
CONFIG_MODULE_SIG, as this is entirely necessary for FIPS mode.

v2: remove extraneous blank line, perform checks in static inline
function, drop no longer necessary fips.h include.

CC: "David S. Miller" <davem@davemloft.net>
CC: Rusty Russell <rusty@rustcorp.com.au>
CC: Stephan Mueller <stephan.mueller@atsec.com>
	Signed-off-by: Jarod Wilson <jarod@redhat.com>
	Acked-by: Neil Horman <nhorman@tuxdriver.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 002c77a48b479b094b834b02ef78be47ceac76fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/Kconfig
#	kernel/module.c
diff --cc crypto/Kconfig
index 8ca52c54f265,1dca374bbd82..000000000000
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@@ -23,7 -23,8 +23,12 @@@ comment "Crypto core or helper
  
  config CRYPTO_FIPS
  	bool "FIPS 200 compliance"
++<<<<<<< HEAD
 +	depends on CRYPTO_ANSI_CPRNG && !CRYPTO_MANAGER_DISABLE_TESTS
++=======
+ 	depends on (CRYPTO_ANSI_CPRNG || CRYTPO_DRBG) && !CRYPTO_MANAGER_DISABLE_TESTS
+ 	depends on MODULE_SIG
++>>>>>>> 002c77a48b47 (crypto: fips - only panic on bad/missing crypto mod signatures)
  	help
  	  This options enables the fips boot option which is
  	  required if you want to system to operate in a FIPS 200
diff --cc kernel/module.c
index 1192791d4a4a,ae79ce615cb9..000000000000
--- a/kernel/module.c
+++ b/kernel/module.c
@@@ -2468,10 -2447,7 +2467,14 @@@ static int module_sig_check(struct load
  	}
  
  	/* Not having a signature is only an error if we're strict. */
++<<<<<<< HEAD
 +	if (err < 0 && fips_enabled)
 +		panic("Module verification failed with error %d in FIPS mode\n",
 +		      err);
 +	if ((err == -ENOKEY && !sig_enforce) && (get_securelevel() <= 0))
++=======
+ 	if (err == -ENOKEY && !sig_enforce)
++>>>>>>> 002c77a48b47 (crypto: fips - only panic on bad/missing crypto mod signatures)
  		err = 0;
  
  	return err;
* Unmerged path crypto/Kconfig
diff --git a/crypto/algapi.c b/crypto/algapi.c
index 7a1ae87f1683..e8d3a7dca8c4 100644
--- a/crypto/algapi.c
+++ b/crypto/algapi.c
@@ -41,8 +41,20 @@ static inline int crypto_set_driver_name(struct crypto_alg *alg)
 	return 0;
 }
 
+static inline void crypto_check_module_sig(struct module *mod)
+{
+#ifdef CONFIG_CRYPTO_FIPS
+	if (fips_enabled && mod && !mod->sig_ok)
+		panic("Module %s signature verification failed in FIPS mode\n",
+		      mod->name);
+#endif
+	return;
+}
+
 static int crypto_check_alg(struct crypto_alg *alg)
 {
+	crypto_check_module_sig(alg->cra_module);
+
 	if (alg->cra_alignmask & (alg->cra_alignmask + 1))
 		return -EINVAL;
 
@@ -430,6 +442,8 @@ int crypto_register_template(struct crypto_template *tmpl)
 
 	down_write(&crypto_alg_sem);
 
+	crypto_check_module_sig(tmpl->module);
+
 	list_for_each_entry(q, &crypto_template_list, list) {
 		if (q == tmpl)
 			goto out;
* Unmerged path kernel/module.c
