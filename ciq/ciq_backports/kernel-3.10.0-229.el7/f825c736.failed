mm/cma: Move dma contiguous changes into a seperate config

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [mm] cma: Move dma contiguous changes into a seperate config (Luiz Capitulino) [996763]
Rebuild_FUZZ: 97.35%
commit-author Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
commit f825c736e75b11adb59ec52a4a1096efddd2ec97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f825c736.failed

We want to use CMA for allocating hash page table and real mode area for
PPC64. Hence move DMA contiguous related changes into a seperate config
so that ppc64 can enable CMA without requiring DMA contiguous.

	Acked-by: Michal Nazarewicz <mina86@mina86.com>
	Acked-by: Paul Mackerras <paulus@samba.org>
	Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
[removed defconfig changes]
	Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
(cherry picked from commit f825c736e75b11adb59ec52a4a1096efddd2ec97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/Kconfig
diff --cc mm/Kconfig
index 344efb638352,26a5f815cfc3..000000000000
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@@ -480,32 -478,26 +480,58 @@@ config FRONTSWA
  
  	  If unsure, say Y to enable frontswap.
  
++<<<<<<< HEAD
 +config ZBUD
 +	tristate
 +	default n
 +	help
 +	  A special purpose allocator for storing compressed pages.
 +	  It is designed to store up to two compressed pages per physical
 +	  page.  While this design limits storage density, it has simple and
 +	  deterministic reclaim properties that make it preferable to a higher
 +	  density approach when reclaim will be used.
 +
 +config ZSWAP
 +	bool "Compressed cache for swap pages (EXPERIMENTAL)"
 +	depends on FRONTSWAP && CRYPTO=y
 +	select CRYPTO_LZO
 +	select ZBUD
 +	default n
 +	help
 +	  A lightweight compressed cache for swap pages.  It takes
 +	  pages that are in the process of being swapped out and attempts to
 +	  compress them into a dynamically allocated RAM-based memory pool.
 +	  This can result in a significant I/O reduction on swap device and,
 +	  in the case where decompressing from RAM is faster that swap device
 +	  reads, can also improve workload performance.
 +
 +	  This is marked experimental because it is a new feature (as of
 +	  v3.11) that interacts heavily with memory reclaim.  While these
 +	  interactions don't cause any known issues on simple memory setups,
 +	  they have not be fully explored on the large set of potential
 +	  configurations and workloads that exist.
++=======
+ config CMA
+ 	bool "Contiguous Memory Allocator"
+ 	depends on HAVE_MEMBLOCK
+ 	select MIGRATION
+ 	select MEMORY_ISOLATION
+ 	help
+ 	  This enables the Contiguous Memory Allocator which allows other
+ 	  subsystems to allocate big physically-contiguous blocks of memory.
+ 	  CMA reserves a region of memory and allows only movable pages to
+ 	  be allocated from it. This way, the kernel can use the memory for
+ 	  pagecache and when a subsystem requests for contiguous area, the
+ 	  allocated pages are migrated away to serve the contiguous request.
+ 
+ 	  If unsure, say "n".
+ 
+ config CMA_DEBUG
+ 	bool "CMA debug messages (DEVELOPMENT)"
+ 	depends on DEBUG_KERNEL && CMA
+ 	help
+ 	  Turns on debug messages in CMA.  This produces KERN_DEBUG
+ 	  messages for every CMA call as well as various messages while
+ 	  processing calls such as dma_alloc_from_contiguous().
+ 	  This option does not affect warning and error messages.
++>>>>>>> f825c736e75b (mm/cma: Move dma contiguous changes into a seperate config)
diff --git a/arch/arm/include/asm/dma-contiguous.h b/arch/arm/include/asm/dma-contiguous.h
index 3ed37b4d93da..e072bb2ba1b1 100644
--- a/arch/arm/include/asm/dma-contiguous.h
+++ b/arch/arm/include/asm/dma-contiguous.h
@@ -2,7 +2,7 @@
 #define ASMARM_DMA_CONTIGUOUS_H
 
 #ifdef __KERNEL__
-#ifdef CONFIG_CMA
+#ifdef CONFIG_DMA_CMA
 
 #include <linux/types.h>
 #include <asm-generic/dma-contiguous.h>
diff --git a/arch/arm/mm/dma-mapping.c b/arch/arm/mm/dma-mapping.c
index ef3e0f3aac96..1fb40dc37ec2 100644
--- a/arch/arm/mm/dma-mapping.c
+++ b/arch/arm/mm/dma-mapping.c
@@ -358,7 +358,7 @@ static int __init atomic_pool_init(void)
 	if (!pages)
 		goto no_pages;
 
-	if (IS_ENABLED(CONFIG_CMA))
+	if (IS_ENABLED(CONFIG_DMA_CMA))
 		ptr = __alloc_from_contiguous(NULL, pool->size, prot, &page,
 					      atomic_pool_init);
 	else
@@ -670,7 +670,7 @@ static void *__dma_alloc(struct device *dev, size_t size, dma_addr_t *handle,
 		addr = __alloc_simple_buffer(dev, size, gfp, &page);
 	else if (!(gfp & __GFP_WAIT))
 		addr = __alloc_from_pool(size, &page);
-	else if (!IS_ENABLED(CONFIG_CMA))
+	else if (!IS_ENABLED(CONFIG_DMA_CMA))
 		addr = __alloc_remap_buffer(dev, size, gfp, prot, &page, caller);
 	else
 		addr = __alloc_from_contiguous(dev, size, prot, &page, caller);
@@ -759,7 +759,7 @@ static void __arm_dma_free(struct device *dev, size_t size, void *cpu_addr,
 		__dma_free_buffer(page, size);
 	} else if (__free_from_pool(cpu_addr, size)) {
 		return;
-	} else if (!IS_ENABLED(CONFIG_CMA)) {
+	} else if (!IS_ENABLED(CONFIG_DMA_CMA)) {
 		__dma_free_remap(cpu_addr, size);
 		__dma_free_buffer(page, size);
 	} else {
diff --git a/drivers/base/Kconfig b/drivers/base/Kconfig
index 5daa2599ed48..e373671652b0 100644
--- a/drivers/base/Kconfig
+++ b/drivers/base/Kconfig
@@ -200,11 +200,9 @@ config DMA_SHARED_BUFFER
 	  APIs extension; the file's descriptor can then be passed on to other
 	  driver.
 
-config CMA
-	bool "Contiguous Memory Allocator"
-	depends on HAVE_DMA_CONTIGUOUS && HAVE_MEMBLOCK
-	select MIGRATION
-	select MEMORY_ISOLATION
+config DMA_CMA
+	bool "DMA Contiguous Memory Allocator"
+	depends on HAVE_DMA_CONTIGUOUS && CMA
 	help
 	  This enables the Contiguous Memory Allocator which allows drivers
 	  to allocate big physically-contiguous blocks of memory for use with
@@ -213,17 +211,7 @@ config CMA
 	  For more information see <include/linux/dma-contiguous.h>.
 	  If unsure, say "n".
 
-if CMA
-
-config CMA_DEBUG
-	bool "CMA debug messages (DEVELOPMENT)"
-	depends on DEBUG_KERNEL
-	help
-	  Turns on debug messages in CMA.  This produces KERN_DEBUG
-	  messages for every CMA call as well as various messages while
-	  processing calls such as dma_alloc_from_contiguous().
-	  This option does not affect warning and error messages.
-
+if  DMA_CMA
 comment "Default contiguous memory area size:"
 
 config CMA_SIZE_MBYTES
diff --git a/drivers/base/Makefile b/drivers/base/Makefile
index 48029aa477d9..94e8a80e87f8 100644
--- a/drivers/base/Makefile
+++ b/drivers/base/Makefile
@@ -6,7 +6,7 @@ obj-y			:= core.o bus.o dd.o syscore.o \
 			   attribute_container.o transport_class.o \
 			   topology.o
 obj-$(CONFIG_DEVTMPFS)	+= devtmpfs.o
-obj-$(CONFIG_CMA) += dma-contiguous.o
+obj-$(CONFIG_DMA_CMA) += dma-contiguous.o
 obj-y			+= power/
 obj-$(CONFIG_HAS_DMA)	+= dma-mapping.o
 obj-$(CONFIG_HAVE_GENERIC_DMA_COHERENT) += dma-coherent.o
diff --git a/include/linux/dma-contiguous.h b/include/linux/dma-contiguous.h
index 01b5c84be828..00141d3325fe 100644
--- a/include/linux/dma-contiguous.h
+++ b/include/linux/dma-contiguous.h
@@ -57,7 +57,7 @@ struct cma;
 struct page;
 struct device;
 
-#ifdef CONFIG_CMA
+#ifdef CONFIG_DMA_CMA
 
 /*
  * There is always at least global CMA area and a few optional device
* Unmerged path mm/Kconfig
