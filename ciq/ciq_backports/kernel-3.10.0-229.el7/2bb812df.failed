dm cache: discard block size must be a multiple of cache block size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [md] dm-cache: discard block size must be a multiple of cache block size (Mike Snitzer) [1165050]
Rebuild_FUZZ: 98.51%
commit-author Joe Thornber <ejt@redhat.com>
commit 2bb812df63bbd246bd39d10f2e810b2a0a59e99e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/2bb812df.failed

Otherwise the cache blocks may span two discard blocks, which we don't
handle when doing the discard lookup.

	Signed-off-by: Joe Thornber <ejt@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 2bb812df63bbd246bd39d10f2e810b2a0a59e99e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-cache-target.c
diff --cc drivers/md/dm-cache-target.c
index 4d267cffe09b,fd7f61387283..000000000000
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@@ -2176,6 -2274,45 +2176,48 @@@ static int create_cache_policy(struct c
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * We want the discard block size to be at least the size of the cache
+  * block size and have no more than 2^14 discard blocks across the origin.
+  */
+ #define MAX_DISCARD_BLOCKS (1 << 14)
+ 
+ static bool too_many_discard_blocks(sector_t discard_block_size,
+ 				    sector_t origin_size)
+ {
+ 	(void) sector_div(origin_size, discard_block_size);
+ 
+ 	return origin_size > MAX_DISCARD_BLOCKS;
+ }
+ 
+ static sector_t calculate_discard_block_size(sector_t cache_block_size,
+ 					     sector_t origin_size)
+ {
+ 	sector_t discard_block_size = cache_block_size;
+ 
+ 	if (origin_size)
+ 		while (too_many_discard_blocks(discard_block_size, origin_size))
+ 			discard_block_size *= 2;
+ 
+ 	return discard_block_size;
+ }
+ 
+ static void set_cache_size(struct cache *cache, dm_cblock_t size)
+ {
+ 	dm_block_t nr_blocks = from_cblock(size);
+ 
+ 	if (nr_blocks > (1 << 20) && cache->cache_size != size)
+ 		DMWARN_LIMIT("You have created a cache device with a lot of individual cache blocks (%llu)\n"
+ 			     "All these mappings can consume a lot of kernel memory, and take some time to read/write.\n"
+ 			     "Please consider increasing the cache block size to reduce the overall cache block count.",
+ 			     (unsigned long long) nr_blocks);
+ 
+ 	cache->cache_size = size;
+ }
+ 
++>>>>>>> 2bb812df63bb (dm cache: discard block size must be a multiple of cache block size)
  #define DEFAULT_MIGRATION_THRESHOLD 2048
  
  static int cache_create(struct cache_args *ca, struct cache **result)
* Unmerged path drivers/md/dm-cache-target.c
