openvswitch: Simplify genetlink code.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] openvswitch: Simplify genetlink code (Jiri Benc) [1110384]
Rebuild_FUZZ: 98.63%
commit-author Pravin B Shelar <pshelar@nicira.com>
commit 0c200ef94c9492205e18a18c25650cf27939889c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0c200ef9.failed

Following patch get rid of struct genl_family_and_ops which is
redundant due to changes to struct genl_family.

	Signed-off-by: Kyle Mestery <mestery@noironetworks.com>
	Acked-by: Kyle Mestery <mestery@noironetworks.com>
	Signed-off-by: Pravin B Shelar <pshelar@nicira.com>
(cherry picked from commit 0c200ef94c9492205e18a18c25650cf27939889c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/datapath.c
diff --cc net/openvswitch/datapath.c
index d01b30b9528a,0d407bca81e3..000000000000
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@@ -62,11 -62,36 +62,34 @@@
  
  int ovs_net_id __read_mostly;
  
++<<<<<<< HEAD
 +static void ovs_notify(struct sk_buff *skb, struct genl_info *info,
 +		       struct genl_multicast_group *grp)
++=======
+ static struct genl_family dp_packet_genl_family;
+ static struct genl_family dp_flow_genl_family;
+ static struct genl_family dp_datapath_genl_family;
+ 
+ static struct genl_multicast_group ovs_dp_flow_multicast_group = {
+ 	.name = OVS_FLOW_MCGROUP
+ };
+ 
+ static struct genl_multicast_group ovs_dp_datapath_multicast_group = {
+ 	.name = OVS_DATAPATH_MCGROUP
+ };
+ 
+ struct genl_multicast_group ovs_dp_vport_multicast_group = {
+ 	.name = OVS_VPORT_MCGROUP
+ };
+ 
+ /* Check if need to build a reply message.
+  * OVS userspace sets the NLM_F_ECHO flag if it needs the reply. */
+ static bool ovs_must_notify(struct genl_info *info,
+ 			    const struct genl_multicast_group *grp)
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  {
 -	return info->nlhdr->nlmsg_flags & NLM_F_ECHO ||
 -		netlink_has_listeners(genl_info_net(info)->genl_sock, 0);
 -}
 -
 -static void ovs_notify(struct genl_family *family,
 -		       struct sk_buff *skb, struct genl_info *info)
 -{
 -	genl_notify(family, skb, genl_info_net(info), info->snd_portid,
 -		    0, info->nlhdr, GFP_KERNEL);
 +	genl_notify(skb, genl_info_net(info), info->snd_portid,
 +		    grp->id, info->nlhdr, GFP_KERNEL);
  }
  
  /**
@@@ -1037,6 -1184,12 +1042,15 @@@ static int ovs_flow_cmd_dump(struct sk_
  	return skb->len;
  }
  
++<<<<<<< HEAD
++=======
+ static const struct nla_policy flow_policy[OVS_FLOW_ATTR_MAX + 1] = {
+ 	[OVS_FLOW_ATTR_KEY] = { .type = NLA_NESTED },
+ 	[OVS_FLOW_ATTR_ACTIONS] = { .type = NLA_NESTED },
+ 	[OVS_FLOW_ATTR_CLEAR] = { .type = NLA_FLAG },
+ };
+ 
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  static struct genl_ops dp_flow_genl_ops[] = {
  	{ .cmd = OVS_FLOW_CMD_NEW,
  	  .flags = GENL_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */
@@@ -1428,6 -1572,12 +1436,15 @@@ static int ovs_dp_cmd_dump(struct sk_bu
  	return skb->len;
  }
  
++<<<<<<< HEAD
++=======
+ static const struct nla_policy datapath_policy[OVS_DP_ATTR_MAX + 1] = {
+ 	[OVS_DP_ATTR_NAME] = { .type = NLA_NUL_STRING, .len = IFNAMSIZ - 1 },
+ 	[OVS_DP_ATTR_UPCALL_PID] = { .type = NLA_U32 },
+ 	[OVS_DP_ATTR_USER_FEATURES] = { .type = NLA_U32 },
+ };
+ 
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  static struct genl_ops dp_datapath_genl_ops[] = {
  	{ .cmd = OVS_DP_CMD_NEW,
  	  .flags = GENL_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */
@@@ -1452,27 -1602,18 +1469,38 @@@
  	},
  };
  
++<<<<<<< HEAD
 +static const struct nla_policy vport_policy[OVS_VPORT_ATTR_MAX + 1] = {
 +	[OVS_VPORT_ATTR_NAME] = { .type = NLA_NUL_STRING, .len = IFNAMSIZ - 1 },
 +	[OVS_VPORT_ATTR_STATS] = { .len = sizeof(struct ovs_vport_stats) },
 +	[OVS_VPORT_ATTR_PORT_NO] = { .type = NLA_U32 },
 +	[OVS_VPORT_ATTR_TYPE] = { .type = NLA_U32 },
 +	[OVS_VPORT_ATTR_UPCALL_PID] = { .type = NLA_U32 },
 +	[OVS_VPORT_ATTR_OPTIONS] = { .type = NLA_NESTED },
 +};
 +
 +static struct genl_family dp_vport_genl_family = {
++=======
+ static struct genl_family dp_datapath_genl_family = {
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  	.id = GENL_ID_GENERATE,
  	.hdrsize = sizeof(struct ovs_header),
- 	.name = OVS_VPORT_FAMILY,
- 	.version = OVS_VPORT_VERSION,
- 	.maxattr = OVS_VPORT_ATTR_MAX,
+ 	.name = OVS_DATAPATH_FAMILY,
+ 	.version = OVS_DATAPATH_VERSION,
+ 	.maxattr = OVS_DP_ATTR_MAX,
  	.netnsok = true,
  	.parallel_ops = true,
++<<<<<<< HEAD
 +};
 +
 +struct genl_multicast_group ovs_dp_vport_multicast_group = {
 +	.name = OVS_VPORT_MCGROUP
++=======
+ 	.ops = dp_datapath_genl_ops,
+ 	.n_ops = ARRAY_SIZE(dp_datapath_genl_ops),
+ 	.mcgrps = &ovs_dp_datapath_multicast_group,
+ 	.n_mcgrps = 1,
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  };
  
  /* Called with ovs_mutex or RCU read lock. */
@@@ -1790,6 -1936,15 +1818,18 @@@ out
  	return skb->len;
  }
  
++<<<<<<< HEAD
++=======
+ static const struct nla_policy vport_policy[OVS_VPORT_ATTR_MAX + 1] = {
+ 	[OVS_VPORT_ATTR_NAME] = { .type = NLA_NUL_STRING, .len = IFNAMSIZ - 1 },
+ 	[OVS_VPORT_ATTR_STATS] = { .len = sizeof(struct ovs_vport_stats) },
+ 	[OVS_VPORT_ATTR_PORT_NO] = { .type = NLA_U32 },
+ 	[OVS_VPORT_ATTR_TYPE] = { .type = NLA_U32 },
+ 	[OVS_VPORT_ATTR_UPCALL_PID] = { .type = NLA_U32 },
+ 	[OVS_VPORT_ATTR_OPTIONS] = { .type = NLA_NESTED },
+ };
+ 
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  static struct genl_ops dp_vport_genl_ops[] = {
  	{ .cmd = OVS_VPORT_CMD_NEW,
  	  .flags = GENL_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */
@@@ -1814,26 -1969,25 +1854,33 @@@
  	},
  };
  
++<<<<<<< HEAD
 +struct genl_family_and_ops {
 +	struct genl_family *family;
 +	struct genl_ops *ops;
 +	int n_ops;
 +	struct genl_multicast_group *group;
++=======
+ struct genl_family dp_vport_genl_family = {
+ 	.id = GENL_ID_GENERATE,
+ 	.hdrsize = sizeof(struct ovs_header),
+ 	.name = OVS_VPORT_FAMILY,
+ 	.version = OVS_VPORT_VERSION,
+ 	.maxattr = OVS_VPORT_ATTR_MAX,
+ 	.netnsok = true,
+ 	.parallel_ops = true,
+ 	.ops = dp_vport_genl_ops,
+ 	.n_ops = ARRAY_SIZE(dp_vport_genl_ops),
+ 	.mcgrps = &ovs_dp_vport_multicast_group,
+ 	.n_mcgrps = 1,
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  };
  
- static const struct genl_family_and_ops dp_genl_families[] = {
- 	{ &dp_datapath_genl_family,
- 	  dp_datapath_genl_ops, ARRAY_SIZE(dp_datapath_genl_ops),
- 	  &ovs_dp_datapath_multicast_group },
- 	{ &dp_vport_genl_family,
- 	  dp_vport_genl_ops, ARRAY_SIZE(dp_vport_genl_ops),
- 	  &ovs_dp_vport_multicast_group },
- 	{ &dp_flow_genl_family,
- 	  dp_flow_genl_ops, ARRAY_SIZE(dp_flow_genl_ops),
- 	  &ovs_dp_flow_multicast_group },
- 	{ &dp_packet_genl_family,
- 	  dp_packet_genl_ops, ARRAY_SIZE(dp_packet_genl_ops),
- 	  NULL },
+ static struct genl_family * const dp_genl_families[] = {
+ 	&dp_datapath_genl_family,
+ 	&dp_vport_genl_family,
+ 	&dp_flow_genl_family,
+ 	&dp_packet_genl_family,
  };
  
  static void dp_unregister_genl(int n_families)
@@@ -1849,22 -2003,11 +1896,25 @@@ static int dp_register_genl(void
  	int err;
  	int i;
  
- 	n_registered = 0;
  	for (i = 0; i < ARRAY_SIZE(dp_genl_families); i++) {
- 		const struct genl_family_and_ops *f = &dp_genl_families[i];
  
++<<<<<<< HEAD
 +		err = genl_register_family_with_ops(f->family, f->ops,
 +						    f->n_ops);
 +		if (err)
 +			goto error;
 +		n_registered++;
 +
 +		if (f->group) {
 +			err = genl_register_mc_group(f->family, f->group);
 +			if (err)
 +				goto error;
 +		}
++=======
+ 		err = genl_register_family(dp_genl_families[i]);
+ 		if (err)
+ 			goto error;
++>>>>>>> 0c200ef94c94 (openvswitch: Simplify genetlink code.)
  	}
  
  	return 0;
* Unmerged path net/openvswitch/datapath.c
