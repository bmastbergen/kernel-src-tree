i40e: Correct mask assignment value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Kevin Scott <kevin.c.scott@intel.com>
commit 0b9754e9324b268d5ca14a0900ede7f350be489a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0b9754e9.failed

Make mask value of all 1s.  Value of -1 can't be used for u32 type.

Change-ID: I49d58b77639939fe7447a229dbf1f4a1bf7419ce
	Signed-off-by: Kevin Scott <kevin.c.scott@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 0b9754e9324b268d5ca14a0900ede7f350be489a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_lan_hmc.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_lan_hmc.c
index d5d98fe2691d,0d74b46d177f..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_lan_hmc.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_lan_hmc.c
@@@ -751,6 -747,194 +751,197 @@@ static struct i40e_context_ele i40e_hmc
  };
  
  /**
++<<<<<<< HEAD
++=======
+  * i40e_write_byte - replace HMC context byte
+  * @hmc_bits: pointer to the HMC memory
+  * @ce_info: a description of the struct to be read from
+  * @src: the struct to be read from
+  **/
+ static void i40e_write_byte(u8 *hmc_bits,
+ 			    struct i40e_context_ele *ce_info,
+ 			    u8 *src)
+ {
+ 	u8 src_byte, dest_byte, mask;
+ 	u8 *from, *dest;
+ 	u16 shift_width;
+ 
+ 	/* copy from the next struct field */
+ 	from = src + ce_info->offset;
+ 
+ 	/* prepare the bits and mask */
+ 	shift_width = ce_info->lsb % 8;
+ 	mask = ((u8)1 << ce_info->width) - 1;
+ 
+ 	src_byte = *from;
+ 	src_byte &= mask;
+ 
+ 	/* shift to correct alignment */
+ 	mask <<= shift_width;
+ 	src_byte <<= shift_width;
+ 
+ 	/* get the current bits from the target bit string */
+ 	dest = hmc_bits + (ce_info->lsb / 8);
+ 
+ 	memcpy(&dest_byte, dest, sizeof(dest_byte));
+ 
+ 	dest_byte &= ~mask;	/* get the bits not changing */
+ 	dest_byte |= src_byte;	/* add in the new bits */
+ 
+ 	/* put it all back */
+ 	memcpy(dest, &dest_byte, sizeof(dest_byte));
+ }
+ 
+ /**
+  * i40e_write_word - replace HMC context word
+  * @hmc_bits: pointer to the HMC memory
+  * @ce_info: a description of the struct to be read from
+  * @src: the struct to be read from
+  **/
+ static void i40e_write_word(u8 *hmc_bits,
+ 			    struct i40e_context_ele *ce_info,
+ 			    u8 *src)
+ {
+ 	u16 src_word, mask;
+ 	u8 *from, *dest;
+ 	u16 shift_width;
+ 	__le16 dest_word;
+ 
+ 	/* copy from the next struct field */
+ 	from = src + ce_info->offset;
+ 
+ 	/* prepare the bits and mask */
+ 	shift_width = ce_info->lsb % 8;
+ 	mask = ((u16)1 << ce_info->width) - 1;
+ 
+ 	/* don't swizzle the bits until after the mask because the mask bits
+ 	 * will be in a different bit position on big endian machines
+ 	 */
+ 	src_word = *(u16 *)from;
+ 	src_word &= mask;
+ 
+ 	/* shift to correct alignment */
+ 	mask <<= shift_width;
+ 	src_word <<= shift_width;
+ 
+ 	/* get the current bits from the target bit string */
+ 	dest = hmc_bits + (ce_info->lsb / 8);
+ 
+ 	memcpy(&dest_word, dest, sizeof(dest_word));
+ 
+ 	dest_word &= ~(cpu_to_le16(mask));	/* get the bits not changing */
+ 	dest_word |= cpu_to_le16(src_word);	/* add in the new bits */
+ 
+ 	/* put it all back */
+ 	memcpy(dest, &dest_word, sizeof(dest_word));
+ }
+ 
+ /**
+  * i40e_write_dword - replace HMC context dword
+  * @hmc_bits: pointer to the HMC memory
+  * @ce_info: a description of the struct to be read from
+  * @src: the struct to be read from
+  **/
+ static void i40e_write_dword(u8 *hmc_bits,
+ 			     struct i40e_context_ele *ce_info,
+ 			     u8 *src)
+ {
+ 	u32 src_dword, mask;
+ 	u8 *from, *dest;
+ 	u16 shift_width;
+ 	__le32 dest_dword;
+ 
+ 	/* copy from the next struct field */
+ 	from = src + ce_info->offset;
+ 
+ 	/* prepare the bits and mask */
+ 	shift_width = ce_info->lsb % 8;
+ 
+ 	/* if the field width is exactly 32 on an x86 machine, then the shift
+ 	 * operation will not work because the SHL instructions count is masked
+ 	 * to 5 bits so the shift will do nothing
+ 	 */
+ 	if (ce_info->width < 32)
+ 		mask = ((u32)1 << ce_info->width) - 1;
+ 	else
+ 		mask = 0xFFFFFFFF;
+ 
+ 	/* don't swizzle the bits until after the mask because the mask bits
+ 	 * will be in a different bit position on big endian machines
+ 	 */
+ 	src_dword = *(u32 *)from;
+ 	src_dword &= mask;
+ 
+ 	/* shift to correct alignment */
+ 	mask <<= shift_width;
+ 	src_dword <<= shift_width;
+ 
+ 	/* get the current bits from the target bit string */
+ 	dest = hmc_bits + (ce_info->lsb / 8);
+ 
+ 	memcpy(&dest_dword, dest, sizeof(dest_dword));
+ 
+ 	dest_dword &= ~(cpu_to_le32(mask));	/* get the bits not changing */
+ 	dest_dword |= cpu_to_le32(src_dword);	/* add in the new bits */
+ 
+ 	/* put it all back */
+ 	memcpy(dest, &dest_dword, sizeof(dest_dword));
+ }
+ 
+ /**
+  * i40e_write_qword - replace HMC context qword
+  * @hmc_bits: pointer to the HMC memory
+  * @ce_info: a description of the struct to be read from
+  * @src: the struct to be read from
+  **/
+ static void i40e_write_qword(u8 *hmc_bits,
+ 			     struct i40e_context_ele *ce_info,
+ 			     u8 *src)
+ {
+ 	u64 src_qword, mask;
+ 	u8 *from, *dest;
+ 	u16 shift_width;
+ 	__le64 dest_qword;
+ 
+ 	/* copy from the next struct field */
+ 	from = src + ce_info->offset;
+ 
+ 	/* prepare the bits and mask */
+ 	shift_width = ce_info->lsb % 8;
+ 
+ 	/* if the field width is exactly 64 on an x86 machine, then the shift
+ 	 * operation will not work because the SHL instructions count is masked
+ 	 * to 6 bits so the shift will do nothing
+ 	 */
+ 	if (ce_info->width < 64)
+ 		mask = ((u64)1 << ce_info->width) - 1;
+ 	else
+ 		mask = 0xFFFFFFFFFFFFFFFF;
+ 
+ 	/* don't swizzle the bits until after the mask because the mask bits
+ 	 * will be in a different bit position on big endian machines
+ 	 */
+ 	src_qword = *(u64 *)from;
+ 	src_qword &= mask;
+ 
+ 	/* shift to correct alignment */
+ 	mask <<= shift_width;
+ 	src_qword <<= shift_width;
+ 
+ 	/* get the current bits from the target bit string */
+ 	dest = hmc_bits + (ce_info->lsb / 8);
+ 
+ 	memcpy(&dest_qword, dest, sizeof(dest_qword));
+ 
+ 	dest_qword &= ~(cpu_to_le64(mask));	/* get the bits not changing */
+ 	dest_qword |= cpu_to_le64(src_qword);	/* add in the new bits */
+ 
+ 	/* put it all back */
+ 	memcpy(dest, &dest_qword, sizeof(dest_qword));
+ }
+ 
+ /**
++>>>>>>> 0b9754e9324b (i40e: Correct mask assignment value)
   * i40e_clear_hmc_context - zero out the HMC context bits
   * @hw:       the hardware struct
   * @context_bytes: pointer to the context bit array (DMA memory)
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_lan_hmc.c
