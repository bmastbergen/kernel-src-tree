be2net: add a few log messages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Sathya Perla <sathya.perla@emulex.com>
commit acbafeb1e9daa18d601e9d91b68925e863cc4f6e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/acbafeb1.failed

This patch adds the following log messages to help debugging
failure cases:
1) log FW version number: this is useful when driver initialization
fails and the FW version number cannot be queried via ethtool
2) per function resource limits for BEx chips: these values are
currently being printed only for Skyhawk and Lancer
3) PCI BAR mapping failure
4) function_mode/caps queried from FW: this helps catch any FW bugs
that could advertise wrong capabilities to the driver

	Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit acbafeb1e9daa18d601e9d91b68925e863cc4f6e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be_main.c
diff --cc drivers/net/ethernet/emulex/benet/be_main.c
index d491c67b96dd,76567028934f..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@@ -3334,24 -3413,16 +3334,35 @@@ static int be_get_resources(struct be_a
  		if (be_roce_supported(adapter))
  			res.max_evt_qs /= 2;
  		adapter->res = res;
++<<<<<<< HEAD
 +
 +		if (be_physfn(adapter)) {
 +			status = be_cmd_get_profile_config(adapter, &res, 0);
 +			if (status)
 +				return status;
 +			adapter->res.max_vfs = res.max_vfs;
 +			adapter->res.vf_if_cap_flags = res.vf_if_cap_flags;
 +		}
 +
 +		dev_info(dev, "Max: txqs %d, rxqs %d, rss %d, eqs %d, vfs %d\n",
 +			 be_max_txqs(adapter), be_max_rxqs(adapter),
 +			 be_max_rss(adapter), be_max_eqs(adapter),
 +			 be_max_vfs(adapter));
 +		dev_info(dev, "Max: uc-macs %d, mc-macs %d, vlans %d\n",
 +			 be_max_uc(adapter), be_max_mc(adapter),
 +			 be_max_vlans(adapter));
++=======
++>>>>>>> acbafeb1e9da (be2net: add a few log messages)
  	}
  
+ 	dev_info(dev, "Max: txqs %d, rxqs %d, rss %d, eqs %d, vfs %d\n",
+ 		 be_max_txqs(adapter), be_max_rxqs(adapter),
+ 		 be_max_rss(adapter), be_max_eqs(adapter),
+ 		 be_max_vfs(adapter));
+ 	dev_info(dev, "Max: uc-macs %d, mc-macs %d, vlans %d\n",
+ 		 be_max_uc(adapter), be_max_mc(adapter),
+ 		 be_max_vlans(adapter));
+ 
  	return 0;
  }
  
diff --git a/drivers/net/ethernet/emulex/benet/be_cmds.c b/drivers/net/ethernet/emulex/benet/be_cmds.c
index 6daf37310986..16991a793de6 100644
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@ -1771,6 +1771,7 @@ int be_cmd_get_fw_ver(struct be_adapter *adapter)
 	status = be_mcc_notify_wait(adapter);
 	if (!status) {
 		struct be_cmd_resp_get_fw_version *resp = embedded_payload(wrb);
+
 		strcpy(adapter->fw_ver, resp->firmware_version_string);
 		strcpy(adapter->fw_on_flash, resp->fw_on_flash_version_string);
 	}
@@ -2018,6 +2019,9 @@ int be_cmd_query_fw_cfg(struct be_adapter *adapter)
 		adapter->function_mode = le32_to_cpu(resp->function_mode);
 		adapter->function_caps = le32_to_cpu(resp->function_caps);
 		adapter->asic_rev = le32_to_cpu(resp->asic_revision) & 0xFF;
+		dev_info(&adapter->pdev->dev,
+			 "FW config: function_mode=0x%x, function_caps=0x%x\n",
+			 adapter->function_mode, adapter->function_caps);
 	}
 
 	mutex_unlock(&adapter->mbox_lock);
* Unmerged path drivers/net/ethernet/emulex/benet/be_main.c
