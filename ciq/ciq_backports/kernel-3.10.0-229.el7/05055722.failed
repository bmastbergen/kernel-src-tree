xprtrdma: Disable completions for FAST_REG_MR Work Requests

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 050557220e34ed5acc830c9bf6cd993f6b4ea33e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/05055722.failed

Instead of relying on a completion to change the state of an FRMR
to FRMR_IS_VALID, set it in advance. If an error occurs, a completion
will fire anyway and mark the FRMR FRMR_IS_STALE.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Tested-by: Steve Wise <swise@opengridcomputing.com>
	Tested-by: Shirley Ma <shirley.ma@oracle.com>
	Tested-by: Devesh Sharma <devesh.sharma@emulex.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit 050557220e34ed5acc830c9bf6cd993f6b4ea33e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtrdma/verbs.c
diff --cc net/sunrpc/xprtrdma/verbs.c
index 499e0d7e7773,3e8b3881548d..000000000000
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@@ -142,91 -144,132 +142,169 @@@ rpcrdma_cq_async_error_upcall(struct ib
  	}
  }
  
++<<<<<<< HEAD
 +static inline
 +void rpcrdma_event_process(struct ib_wc *wc)
++=======
+ static void
+ rpcrdma_sendcq_process_wc(struct ib_wc *wc)
+ {
+ 	struct rpcrdma_mw *frmr = (struct rpcrdma_mw *)(unsigned long)wc->wr_id;
+ 
+ 	dprintk("RPC:       %s: frmr %p status %X opcode %d\n",
+ 		__func__, frmr, wc->status, wc->opcode);
+ 
+ 	if (wc->wr_id == 0ULL)
+ 		return;
+ 	if (wc->status != IB_WC_SUCCESS) {
+ 		frmr->r.frmr.fr_state = FRMR_IS_STALE;
+ 		return;
+ 	}
+ 
+ 	frmr->r.frmr.fr_state = FRMR_IS_INVALID;
+ }
+ 
+ static int
+ rpcrdma_sendcq_poll(struct ib_cq *cq, struct rpcrdma_ep *ep)
+ {
+ 	struct ib_wc *wcs;
+ 	int budget, count, rc;
+ 
+ 	budget = RPCRDMA_WC_BUDGET / RPCRDMA_POLLSIZE;
+ 	do {
+ 		wcs = ep->rep_send_wcs;
+ 
+ 		rc = ib_poll_cq(cq, RPCRDMA_POLLSIZE, wcs);
+ 		if (rc <= 0)
+ 			return rc;
+ 
+ 		count = rc;
+ 		while (count-- > 0)
+ 			rpcrdma_sendcq_process_wc(wcs++);
+ 	} while (rc == RPCRDMA_POLLSIZE && --budget);
+ 	return 0;
+ }
+ 
+ /*
+  * Handle send, fast_reg_mr, and local_inv completions.
+  *
+  * Send events are typically suppressed and thus do not result
+  * in an upcall. Occasionally one is signaled, however. This
+  * prevents the provider's completion queue from wrapping and
+  * losing a completion.
+  */
+ static void
+ rpcrdma_sendcq_upcall(struct ib_cq *cq, void *cq_context)
+ {
+ 	struct rpcrdma_ep *ep = (struct rpcrdma_ep *)cq_context;
+ 	int rc;
+ 
+ 	rc = rpcrdma_sendcq_poll(cq, ep);
+ 	if (rc) {
+ 		dprintk("RPC:       %s: ib_poll_cq failed: %i\n",
+ 			__func__, rc);
+ 		return;
+ 	}
+ 
+ 	rc = ib_req_notify_cq(cq,
+ 			IB_CQ_NEXT_COMP | IB_CQ_REPORT_MISSED_EVENTS);
+ 	if (rc == 0)
+ 		return;
+ 	if (rc < 0) {
+ 		dprintk("RPC:       %s: ib_req_notify_cq failed: %i\n",
+ 			__func__, rc);
+ 		return;
+ 	}
+ 
+ 	rpcrdma_sendcq_poll(cq, ep);
+ }
+ 
+ static void
+ rpcrdma_recvcq_process_wc(struct ib_wc *wc)
++>>>>>>> 050557220e34 (xprtrdma: Disable completions for FAST_REG_MR Work Requests)
  {
 +	struct rpcrdma_mw *frmr;
  	struct rpcrdma_rep *rep =
 -			(struct rpcrdma_rep *)(unsigned long)wc->wr_id;
 +			(struct rpcrdma_rep *)(unsigned long) wc->wr_id;
  
 -	dprintk("RPC:       %s: rep %p status %X opcode %X length %u\n",
 +	dprintk("RPC:       %s: event rep %p status %X opcode %X length %u\n",
  		__func__, rep, wc->status, wc->opcode, wc->byte_len);
  
 -	if (wc->status != IB_WC_SUCCESS) {
 +	if (!rep) /* send or bind completion that we don't care about */
 +		return;
 +
 +	if (IB_WC_SUCCESS != wc->status) {
 +		dprintk("RPC:       %s: WC opcode %d status %X, connection lost\n",
 +			__func__, wc->opcode, wc->status);
  		rep->rr_len = ~0U;
 -		goto out_schedule;
 -	}
 -	if (wc->opcode != IB_WC_RECV)
 +		if (wc->opcode != IB_WC_FAST_REG_MR && wc->opcode != IB_WC_LOCAL_INV)
 +			rpcrdma_schedule_tasklet(rep);
  		return;
 +	}
  
 -	rep->rr_len = wc->byte_len;
 -	ib_dma_sync_single_for_cpu(rdmab_to_ia(rep->rr_buffer)->ri_id->device,
 +	switch (wc->opcode) {
 +	case IB_WC_FAST_REG_MR:
 +		frmr = (struct rpcrdma_mw *)(unsigned long)wc->wr_id;
 +		frmr->r.frmr.state = FRMR_IS_VALID;
 +		break;
 +	case IB_WC_LOCAL_INV:
 +		frmr = (struct rpcrdma_mw *)(unsigned long)wc->wr_id;
 +		frmr->r.frmr.state = FRMR_IS_INVALID;
 +		break;
 +	case IB_WC_RECV:
 +		rep->rr_len = wc->byte_len;
 +		ib_dma_sync_single_for_cpu(
 +			rdmab_to_ia(rep->rr_buffer)->ri_id->device,
  			rep->rr_iov.addr, rep->rr_len, DMA_FROM_DEVICE);
 -
 -	if (rep->rr_len >= 16) {
 -		struct rpcrdma_msg *p = (struct rpcrdma_msg *)rep->rr_base;
 -		unsigned int credits = ntohl(p->rm_credit);
 -
 -		if (credits == 0)
 -			credits = 1;	/* don't deadlock */
 -		else if (credits > rep->rr_buffer->rb_max_requests)
 -			credits = rep->rr_buffer->rb_max_requests;
 -		atomic_set(&rep->rr_buffer->rb_credits, credits);
 +		/* Keep (only) the most recent credits, after check validity */
 +		if (rep->rr_len >= 16) {
 +			struct rpcrdma_msg *p =
 +					(struct rpcrdma_msg *) rep->rr_base;
 +			unsigned int credits = ntohl(p->rm_credit);
 +			if (credits == 0) {
 +				dprintk("RPC:       %s: server"
 +					" dropped credits to 0!\n", __func__);
 +				/* don't deadlock */
 +				credits = 1;
 +			} else if (credits > rep->rr_buffer->rb_max_requests) {
 +				dprintk("RPC:       %s: server"
 +					" over-crediting: %d (%d)\n",
 +					__func__, credits,
 +					rep->rr_buffer->rb_max_requests);
 +				credits = rep->rr_buffer->rb_max_requests;
 +			}
 +			atomic_set(&rep->rr_buffer->rb_credits, credits);
 +		}
 +		/* fall through */
 +	case IB_WC_BIND_MW:
 +		rpcrdma_schedule_tasklet(rep);
 +		break;
 +	default:
 +		dprintk("RPC:       %s: unexpected WC event %X\n",
 +			__func__, wc->opcode);
 +		break;
  	}
 -
 -out_schedule:
 -	rpcrdma_schedule_tasklet(rep);
  }
  
 -static int
 -rpcrdma_recvcq_poll(struct ib_cq *cq, struct rpcrdma_ep *ep)
 +static inline int
 +rpcrdma_cq_poll(struct ib_cq *cq)
  {
 -	struct ib_wc *wcs;
 -	int budget, count, rc;
 -
 -	budget = RPCRDMA_WC_BUDGET / RPCRDMA_POLLSIZE;
 -	do {
 -		wcs = ep->rep_recv_wcs;
 +	struct ib_wc wc;
 +	int rc;
  
 -		rc = ib_poll_cq(cq, RPCRDMA_POLLSIZE, wcs);
 -		if (rc <= 0)
 +	for (;;) {
 +		rc = ib_poll_cq(cq, 1, &wc);
 +		if (rc < 0) {
 +			dprintk("RPC:       %s: ib_poll_cq failed %i\n",
 +				__func__, rc);
  			return rc;
 +		}
 +		if (rc == 0)
 +			break;
 +
 +		rpcrdma_event_process(&wc);
 +	}
  
 -		count = rc;
 -		while (count-- > 0)
 -			rpcrdma_recvcq_process_wc(wcs++);
 -	} while (rc == RPCRDMA_POLLSIZE && --budget);
  	return 0;
  }
  
@@@ -1541,32 -1722,15 +1619,36 @@@ rpcrdma_register_frmr_external(struct r
  			break;
  	}
  	dprintk("RPC:       %s: Using frmr %p to map %d segments\n",
 -		__func__, mw, i);
 +		__func__, seg1->mr_chunk.rl_mw, i);
  
++<<<<<<< HEAD
 +	if (unlikely(seg1->mr_chunk.rl_mw->r.frmr.state == FRMR_IS_VALID)) {
 +		dprintk("RPC:       %s: frmr %x left valid, posting invalidate.\n",
 +			__func__,
 +			seg1->mr_chunk.rl_mw->r.frmr.fr_mr->rkey);
 +		/* Invalidate before using. */
 +		memset(&invalidate_wr, 0, sizeof invalidate_wr);
 +		invalidate_wr.wr_id = (unsigned long)(void *)seg1->mr_chunk.rl_mw;
 +		invalidate_wr.next = &frmr_wr;
 +		invalidate_wr.opcode = IB_WR_LOCAL_INV;
 +		invalidate_wr.send_flags = IB_SEND_SIGNALED;
 +		invalidate_wr.ex.invalidate_rkey =
 +			seg1->mr_chunk.rl_mw->r.frmr.fr_mr->rkey;
 +		DECR_CQCOUNT(&r_xprt->rx_ep);
 +		post_wr = &invalidate_wr;
 +	} else
 +		post_wr = &frmr_wr;
 +
 +	/* Prepare FRMR WR */
++=======
+ 	frmr->fr_state = FRMR_IS_VALID;
+ 
++>>>>>>> 050557220e34 (xprtrdma: Disable completions for FAST_REG_MR Work Requests)
  	memset(&frmr_wr, 0, sizeof frmr_wr);
 -	frmr_wr.wr_id = (unsigned long)(void *)mw;
 +	frmr_wr.wr_id = (unsigned long)(void *)seg1->mr_chunk.rl_mw;
  	frmr_wr.opcode = IB_WR_FAST_REG_MR;
- 	frmr_wr.send_flags = IB_SEND_SIGNALED;
  	frmr_wr.wr.fast_reg.iova_start = seg1->mr_dma;
 -	frmr_wr.wr.fast_reg.page_list = frmr->fr_pgl;
 +	frmr_wr.wr.fast_reg.page_list = seg1->mr_chunk.rl_mw->r.frmr.fr_pgl;
  	frmr_wr.wr.fast_reg.page_list_len = page_no;
  	frmr_wr.wr.fast_reg.page_shift = PAGE_SHIFT;
  	frmr_wr.wr.fast_reg.length = page_no << PAGE_SHIFT;
* Unmerged path net/sunrpc/xprtrdma/verbs.c
