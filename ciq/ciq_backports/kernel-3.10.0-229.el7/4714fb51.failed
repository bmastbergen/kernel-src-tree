nfs: remove pgio_header refcount, related cleanup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Weston Andros Adamson <dros@primarydata.com>
commit 4714fb51fd03a14d8c73001438283e7f7b752f1e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/4714fb51.failed

The refcounting on nfs_pgio_header was related to there being (possibly)
more than one nfs_pgio_data. Now that nfs_pgio_data has been merged into
nfs_pgio_header, there is no reason to do this ref counting.  Just call
the completion callback on nfs_pgio_release/nfs_pgio_error.

	Signed-off-by: Weston Andros Adamson <dros@primarydata.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 4714fb51fd03a14d8c73001438283e7f7b752f1e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/pagelist.c
#	fs/nfs/pnfs.c
#	include/linux/nfs_xdr.h
diff --cc fs/nfs/pagelist.c
index 00f3d2d2a504,580fc0c982e6..000000000000
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@@ -307,6 -452,178 +307,181 @@@ size_t nfs_generic_pg_test(struct nfs_p
  }
  EXPORT_SYMBOL_GPL(nfs_generic_pg_test);
  
++<<<<<<< HEAD
++=======
+ struct nfs_pgio_header *nfs_pgio_header_alloc(const struct nfs_rw_ops *ops)
+ {
+ 	struct nfs_pgio_header *hdr = ops->rw_alloc_header();
+ 
+ 	if (hdr) {
+ 		INIT_LIST_HEAD(&hdr->pages);
+ 		spin_lock_init(&hdr->lock);
+ 		hdr->rw_ops = ops;
+ 	}
+ 	return hdr;
+ }
+ EXPORT_SYMBOL_GPL(nfs_pgio_header_alloc);
+ 
+ /*
+  * nfs_pgio_header_free - Free a read or write header
+  * @hdr: The header to free
+  */
+ void nfs_pgio_header_free(struct nfs_pgio_header *hdr)
+ {
+ 	hdr->rw_ops->rw_free_header(hdr);
+ }
+ EXPORT_SYMBOL_GPL(nfs_pgio_header_free);
+ 
+ /**
+  * nfs_pgio_data_destroy - make @hdr suitable for reuse
+  *
+  * Frees memory and releases refs from nfs_generic_pgio, so that it may
+  * be called again.
+  *
+  * @hdr: A header that has had nfs_generic_pgio called
+  */
+ void nfs_pgio_data_destroy(struct nfs_pgio_header *hdr)
+ {
+ 	put_nfs_open_context(hdr->args.context);
+ 	if (hdr->page_array.pagevec != hdr->page_array.page_array)
+ 		kfree(hdr->page_array.pagevec);
+ }
+ EXPORT_SYMBOL_GPL(nfs_pgio_data_destroy);
+ 
+ /**
+  * nfs_pgio_rpcsetup - Set up arguments for a pageio call
+  * @hdr: The pageio hdr
+  * @count: Number of bytes to read
+  * @offset: Initial offset
+  * @how: How to commit data (writes only)
+  * @cinfo: Commit information for the call (writes only)
+  */
+ static void nfs_pgio_rpcsetup(struct nfs_pgio_header *hdr,
+ 			      unsigned int count, unsigned int offset,
+ 			      int how, struct nfs_commit_info *cinfo)
+ {
+ 	struct nfs_page *req = hdr->req;
+ 
+ 	/* Set up the RPC argument and reply structs
+ 	 * NB: take care not to mess about with hdr->commit et al. */
+ 
+ 	hdr->args.fh     = NFS_FH(hdr->inode);
+ 	hdr->args.offset = req_offset(req) + offset;
+ 	/* pnfs_set_layoutcommit needs this */
+ 	hdr->mds_offset = hdr->args.offset;
+ 	hdr->args.pgbase = req->wb_pgbase + offset;
+ 	hdr->args.pages  = hdr->page_array.pagevec;
+ 	hdr->args.count  = count;
+ 	hdr->args.context = get_nfs_open_context(req->wb_context);
+ 	hdr->args.lock_context = req->wb_lock_context;
+ 	hdr->args.stable  = NFS_UNSTABLE;
+ 	switch (how & (FLUSH_STABLE | FLUSH_COND_STABLE)) {
+ 	case 0:
+ 		break;
+ 	case FLUSH_COND_STABLE:
+ 		if (nfs_reqs_to_commit(cinfo))
+ 			break;
+ 	default:
+ 		hdr->args.stable = NFS_FILE_SYNC;
+ 	}
+ 
+ 	hdr->res.fattr   = &hdr->fattr;
+ 	hdr->res.count   = count;
+ 	hdr->res.eof     = 0;
+ 	hdr->res.verf    = &hdr->verf;
+ 	nfs_fattr_init(&hdr->fattr);
+ }
+ 
+ /**
+  * nfs_pgio_prepare - Prepare pageio hdr to go over the wire
+  * @task: The current task
+  * @calldata: pageio header to prepare
+  */
+ static void nfs_pgio_prepare(struct rpc_task *task, void *calldata)
+ {
+ 	struct nfs_pgio_header *hdr = calldata;
+ 	int err;
+ 	err = NFS_PROTO(hdr->inode)->pgio_rpc_prepare(task, hdr);
+ 	if (err)
+ 		rpc_exit(task, err);
+ }
+ 
+ int nfs_initiate_pgio(struct rpc_clnt *clnt, struct nfs_pgio_header *hdr,
+ 		      const struct rpc_call_ops *call_ops, int how, int flags)
+ {
+ 	struct inode *inode = hdr->inode;
+ 	struct rpc_task *task;
+ 	struct rpc_message msg = {
+ 		.rpc_argp = &hdr->args,
+ 		.rpc_resp = &hdr->res,
+ 		.rpc_cred = hdr->cred,
+ 	};
+ 	struct rpc_task_setup task_setup_data = {
+ 		.rpc_client = clnt,
+ 		.task = &hdr->task,
+ 		.rpc_message = &msg,
+ 		.callback_ops = call_ops,
+ 		.callback_data = hdr,
+ 		.workqueue = nfsiod_workqueue,
+ 		.flags = RPC_TASK_ASYNC | flags,
+ 	};
+ 	int ret = 0;
+ 
+ 	hdr->rw_ops->rw_initiate(hdr, &msg, &task_setup_data, how);
+ 
+ 	dprintk("NFS: %5u initiated pgio call "
+ 		"(req %s/%llu, %u bytes @ offset %llu)\n",
+ 		hdr->task.tk_pid,
+ 		inode->i_sb->s_id,
+ 		(unsigned long long)NFS_FILEID(inode),
+ 		hdr->args.count,
+ 		(unsigned long long)hdr->args.offset);
+ 
+ 	task = rpc_run_task(&task_setup_data);
+ 	if (IS_ERR(task)) {
+ 		ret = PTR_ERR(task);
+ 		goto out;
+ 	}
+ 	if (how & FLUSH_SYNC) {
+ 		ret = rpc_wait_for_completion_task(task);
+ 		if (ret == 0)
+ 			ret = task->tk_status;
+ 	}
+ 	rpc_put_task(task);
+ out:
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(nfs_initiate_pgio);
+ 
+ /**
+  * nfs_pgio_error - Clean up from a pageio error
+  * @desc: IO descriptor
+  * @hdr: pageio header
+  */
+ static int nfs_pgio_error(struct nfs_pageio_descriptor *desc,
+ 			  struct nfs_pgio_header *hdr)
+ {
+ 	set_bit(NFS_IOHDR_REDO, &hdr->flags);
+ 	nfs_pgio_data_destroy(hdr);
+ 	hdr->completion_ops->completion(hdr);
+ 	desc->pg_completion_ops->error_cleanup(&desc->pg_list);
+ 	return -ENOMEM;
+ }
+ 
+ /**
+  * nfs_pgio_release - Release pageio data
+  * @calldata: The pageio header to release
+  */
+ static void nfs_pgio_release(void *calldata)
+ {
+ 	struct nfs_pgio_header *hdr = calldata;
+ 	if (hdr->rw_ops->rw_release)
+ 		hdr->rw_ops->rw_release(hdr);
+ 	nfs_pgio_data_destroy(hdr);
+ 	hdr->completion_ops->completion(hdr);
+ }
+ 
++>>>>>>> 4714fb51fd03 (nfs: remove pgio_header refcount, related cleanup)
  /**
   * nfs_pageio_init - initialise a page io descriptor
   * @desc: pointer to descriptor
@@@ -340,6 -659,87 +515,90 @@@ void nfs_pageio_init(struct nfs_pageio_
  }
  EXPORT_SYMBOL_GPL(nfs_pageio_init);
  
++<<<<<<< HEAD
++=======
+ /**
+  * nfs_pgio_result - Basic pageio error handling
+  * @task: The task that ran
+  * @calldata: Pageio header to check
+  */
+ static void nfs_pgio_result(struct rpc_task *task, void *calldata)
+ {
+ 	struct nfs_pgio_header *hdr = calldata;
+ 	struct inode *inode = hdr->inode;
+ 
+ 	dprintk("NFS: %s: %5u, (status %d)\n", __func__,
+ 		task->tk_pid, task->tk_status);
+ 
+ 	if (hdr->rw_ops->rw_done(task, hdr, inode) != 0)
+ 		return;
+ 	if (task->tk_status < 0)
+ 		nfs_set_pgio_error(hdr, task->tk_status, hdr->args.offset);
+ 	else
+ 		hdr->rw_ops->rw_result(task, hdr);
+ }
+ 
+ /*
+  * Create an RPC task for the given read or write request and kick it.
+  * The page must have been locked by the caller.
+  *
+  * It may happen that the page we're passed is not marked dirty.
+  * This is the case if nfs_updatepage detects a conflicting request
+  * that has been written but not committed.
+  */
+ int nfs_generic_pgio(struct nfs_pageio_descriptor *desc,
+ 		     struct nfs_pgio_header *hdr)
+ {
+ 	struct nfs_page		*req;
+ 	struct page		**pages;
+ 	struct list_head *head = &desc->pg_list;
+ 	struct nfs_commit_info cinfo;
+ 	unsigned int pagecount;
+ 
+ 	pagecount = nfs_page_array_len(desc->pg_base, desc->pg_count);
+ 	if (!nfs_pgarray_set(&hdr->page_array, pagecount))
+ 		return nfs_pgio_error(desc, hdr);
+ 
+ 	nfs_init_cinfo(&cinfo, desc->pg_inode, desc->pg_dreq);
+ 	pages = hdr->page_array.pagevec;
+ 	while (!list_empty(head)) {
+ 		req = nfs_list_entry(head->next);
+ 		nfs_list_remove_request(req);
+ 		nfs_list_add_request(req, &hdr->pages);
+ 		*pages++ = req->wb_page;
+ 	}
+ 
+ 	if ((desc->pg_ioflags & FLUSH_COND_STABLE) &&
+ 	    (desc->pg_moreio || nfs_reqs_to_commit(&cinfo)))
+ 		desc->pg_ioflags &= ~FLUSH_COND_STABLE;
+ 
+ 	/* Set up the argument struct */
+ 	nfs_pgio_rpcsetup(hdr, desc->pg_count, 0, desc->pg_ioflags, &cinfo);
+ 	desc->pg_rpc_callops = &nfs_pgio_common_ops;
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(nfs_generic_pgio);
+ 
+ static int nfs_generic_pg_pgios(struct nfs_pageio_descriptor *desc)
+ {
+ 	struct nfs_pgio_header *hdr;
+ 	int ret;
+ 
+ 	hdr = nfs_pgio_header_alloc(desc->pg_rw_ops);
+ 	if (!hdr) {
+ 		desc->pg_completion_ops->error_cleanup(&desc->pg_list);
+ 		return -ENOMEM;
+ 	}
+ 	nfs_pgheader_init(desc, hdr, nfs_pgio_header_free);
+ 	ret = nfs_generic_pgio(desc, hdr);
+ 	if (ret == 0)
+ 		ret = nfs_initiate_pgio(NFS_CLIENT(hdr->inode),
+ 					hdr, desc->pg_rpc_callops,
+ 					desc->pg_ioflags, 0);
+ 	return ret;
+ }
+ 
++>>>>>>> 4714fb51fd03 (nfs: remove pgio_header refcount, related cleanup)
  static bool nfs_match_open_context(const struct nfs_open_context *ctx1,
  		const struct nfs_open_context *ctx2)
  {
diff --cc fs/nfs/pnfs.c
index eed474e3fcc7,ecbed4632d11..000000000000
--- a/fs/nfs/pnfs.c
+++ b/fs/nfs/pnfs.c
@@@ -1613,18 -1600,14 +1613,26 @@@ pnfs_generic_pg_writepages(struct nfs_p
  		desc->pg_lseg = NULL;
  		return -ENOMEM;
  	}
 +	hdr = &whdr->header;
  	nfs_pgheader_init(desc, hdr, pnfs_writehdr_free);
  	hdr->lseg = pnfs_get_lseg(desc->pg_lseg);
++<<<<<<< HEAD
 +	atomic_inc(&hdr->refcnt);
 +	ret = nfs_generic_flush(desc, hdr);
++=======
+ 	ret = nfs_generic_pgio(desc, hdr);
++>>>>>>> 4714fb51fd03 (nfs: remove pgio_header refcount, related cleanup)
  	if (ret != 0) {
  		pnfs_put_lseg(desc->pg_lseg);
  		desc->pg_lseg = NULL;
  	} else
++<<<<<<< HEAD
 +		pnfs_do_multiple_writes(desc, &hdr->rpc_list, desc->pg_ioflags);
 +	if (atomic_dec_and_test(&hdr->refcnt))
 +		hdr->completion_ops->completion(hdr);
++=======
+ 		pnfs_do_write(desc, hdr, desc->pg_ioflags);
++>>>>>>> 4714fb51fd03 (nfs: remove pgio_header refcount, related cleanup)
  	return ret;
  }
  EXPORT_SYMBOL_GPL(pnfs_generic_pg_writepages);
@@@ -1772,18 -1740,14 +1780,26 @@@ pnfs_generic_pg_readpages(struct nfs_pa
  		desc->pg_lseg = NULL;
  		return ret;
  	}
 +	hdr = &rhdr->header;
  	nfs_pgheader_init(desc, hdr, pnfs_readhdr_free);
  	hdr->lseg = pnfs_get_lseg(desc->pg_lseg);
++<<<<<<< HEAD
 +	atomic_inc(&hdr->refcnt);
 +	ret = nfs_generic_pagein(desc, hdr);
++=======
+ 	ret = nfs_generic_pgio(desc, hdr);
++>>>>>>> 4714fb51fd03 (nfs: remove pgio_header refcount, related cleanup)
  	if (ret != 0) {
  		pnfs_put_lseg(desc->pg_lseg);
  		desc->pg_lseg = NULL;
  	} else
++<<<<<<< HEAD
 +		pnfs_do_multiple_reads(desc, &hdr->rpc_list);
 +	if (atomic_dec_and_test(&hdr->refcnt))
 +		hdr->completion_ops->completion(hdr);
++=======
+ 		pnfs_do_read(desc, hdr);
++>>>>>>> 4714fb51fd03 (nfs: remove pgio_header refcount, related cleanup)
  	return ret;
  }
  EXPORT_SYMBOL_GPL(pnfs_generic_pg_readpages);
diff --cc include/linux/nfs_xdr.h
index 381f832b03c6,81cbbf313272..000000000000
--- a/include/linux/nfs_xdr.h
+++ b/include/linux/nfs_xdr.h
@@@ -1274,10 -1259,8 +1274,13 @@@ struct nfs_pgio_header 
  	struct inode		*inode;
  	struct rpc_cred		*cred;
  	struct list_head	pages;
++<<<<<<< HEAD
 +	struct list_head	rpc_list;
 +	atomic_t		refcnt;
++=======
++>>>>>>> 4714fb51fd03 (nfs: remove pgio_header refcount, related cleanup)
  	struct nfs_page		*req;
 -	struct nfs_writeverf	verf;		/* Used for writes */
 +	struct nfs_writeverf	*verf;
  	struct pnfs_layout_segment *lseg;
  	loff_t			io_start;
  	const struct rpc_call_ops *mds_ops;
* Unmerged path fs/nfs/pagelist.c
* Unmerged path fs/nfs/pnfs.c
* Unmerged path include/linux/nfs_xdr.h
