perf tools: Get rid of on_exit() feature test

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Get rid of on_exit() feature test (Jiri Olsa) [1134356]
Rebuild_FUZZ: 92.86%
commit-author Namhyung Kim <namhyung@kernel.org>
commit bac1e4d103f7e3d82e5dc7423c04edcb8c899c22
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/bac1e4d1.failed

The on_exit() function was only used in perf record but it's gone in
previous patch.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Acked-by: Stephane Eranian <eranian@google.com>
	Cc: Bernhard Rosenkraenzer <Bernhard.Rosenkranzer@linaro.org>
	Cc: Irina Tirdea <irina.tirdea@intel.com>
Link: http://lkml.kernel.org/r/1399855645-25815-2-git-send-email-namhyung@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit bac1e4d103f7e3d82e5dc7423c04edcb8c899c22)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
#	tools/perf/config/Makefile
#	tools/perf/config/feature-checks/Makefile
diff --cc tools/perf/builtin-record.c
index b60a6b649ad7,e4c85b8f46c2..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -30,37 -30,6 +30,40 @@@
  #include <sched.h>
  #include <sys/mman.h>
  
++<<<<<<< HEAD
 +#ifndef HAVE_ON_EXIT
 +#ifndef ATEXIT_MAX
 +#define ATEXIT_MAX 32
 +#endif
 +static int __on_exit_count = 0;
 +typedef void (*on_exit_func_t) (int, void *);
 +static on_exit_func_t __on_exit_funcs[ATEXIT_MAX];
 +static void *__on_exit_args[ATEXIT_MAX];
 +static int __exitcode = 0;
 +static void __handle_on_exit_funcs(void);
 +static int on_exit(on_exit_func_t function, void *arg);
 +#define exit(x) (exit)(__exitcode = (x))
 +
 +static int on_exit(on_exit_func_t function, void *arg)
 +{
 +	if (__on_exit_count == ATEXIT_MAX)
 +		return -ENOMEM;
 +	else if (__on_exit_count == 0)
 +		atexit(__handle_on_exit_funcs);
 +	__on_exit_funcs[__on_exit_count] = function;
 +	__on_exit_args[__on_exit_count++] = arg;
 +	return 0;
 +}
 +
 +static void __handle_on_exit_funcs(void)
 +{
 +	int i;
 +	for (i = 0; i < __on_exit_count; i++)
 +		__on_exit_funcs[i] (__exitcode, __on_exit_args[i]);
 +}
 +#endif
++=======
++>>>>>>> bac1e4d103f7 (perf tools: Get rid of on_exit() feature test)
  
  struct record {
  	struct perf_tool	tool;
diff --cc tools/perf/config/Makefile
index 8a0483155189,f2edc593a7a7..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -102,20 -147,76 +102,59 @@@ ende
  #
  # Build the feature check binaries in parallel, ignore errors, ignore return value and suppress output:
  #
 +$(info )
 +$(info Auto-detecting system features:)
  
++<<<<<<< HEAD
 +FEATURE_TESTS =				\
 +	hello				\
++=======
+ #
+ # Note that this is not a complete list of all feature tests, just
+ # those that are typically built on a fully configured system.
+ #
+ # [ Feature tests not mentioned here have to be built explicitly in
+ #   the rule that uses them - an example for that is the 'bionic'
+ #   feature check. ]
+ #
+ CORE_FEATURE_TESTS =			\
+ 	backtrace			\
+ 	dwarf				\
+ 	fortify-source			\
+ 	glibc				\
+ 	gtk2				\
+ 	gtk2-infobar			\
+ 	libaudit			\
+ 	libbfd				\
+ 	libelf				\
+ 	libelf-getphdrnum		\
+ 	libelf-mmap			\
+ 	libnuma				\
+ 	libperl				\
+ 	libpython			\
+ 	libpython-version		\
+ 	libslang			\
+ 	libunwind			\
++>>>>>>> bac1e4d103f7 (perf tools: Get rid of on_exit() feature test)
  	stackprotector-all		\
 -	timerfd				\
 -	libdw-dwarf-unwind
 -
 -LIB_FEATURE_TESTS =			\
 -	dwarf				\
 -	glibc				\
 -	gtk2				\
 -	libaudit			\
 -	libbfd				\
 -	libelf				\
 -	libnuma				\
 -	libperl				\
 -	libpython			\
 -	libslang			\
 -	libunwind			\
 -	libdw-dwarf-unwind
 -
 -VF_FEATURE_TESTS =			\
 -	backtrace			\
 +	stackprotector			\
 +	volatile-register-var		\
  	fortify-source			\
++<<<<<<< HEAD
++=======
+ 	gtk2-infobar			\
+ 	libelf-getphdrnum		\
+ 	libelf-mmap			\
+ 	libpython-version		\
+ 	stackprotector-all		\
+ 	timerfd				\
+ 	libunwind-debug-frame		\
++>>>>>>> bac1e4d103f7 (perf tools: Get rid of on_exit() feature test)
  	bionic				\
 -	liberty				\
 -	liberty-z			\
 -	cplus-demangle
 -
 -# Set FEATURE_CHECK_(C|LD)FLAGS-all for all CORE_FEATURE_TESTS features.
 -# If in the future we need per-feature checks/flags for features not
 -# mentioned in this list we need to refactor this ;-).
 -set_test_all_flags = $(eval $(set_test_all_flags_code))
 -define set_test_all_flags_code
 -  FEATURE_CHECK_CFLAGS-all  += $(FEATURE_CHECK_CFLAGS-$(1))
 -  FEATURE_CHECK_LDFLAGS-all += $(FEATURE_CHECK_LDFLAGS-$(1))
 -endef
 -
 -$(foreach feat,$(CORE_FEATURE_TESTS),$(call set_test_all_flags,$(feat)))
 +	libelf				\
 +	glibc				\
 +	dwarf				\
 +	libnuma
  
  #
  # Special fast-path for the 'all features are available' case:
@@@ -459,21 -565,13 +498,24 @@@ els
    endif
  endif
  
 -ifneq ($(filter -lbfd,$(EXTLIBS)),)
 -  CFLAGS += -DHAVE_LIBBFD_SUPPORT
 +ifndef NO_STRLCPY
 +  ifeq ($(call try-cc,$(SOURCE_STRLCPY),,-DHAVE_STRLCPY),y)
 +    CFLAGS += -DHAVE_STRLCPY
 +  endif
  endif
  
++<<<<<<< HEAD
 +ifndef NO_ON_EXIT
 +  ifeq ($(call try-cc,$(SOURCE_ON_EXIT),,-DHAVE_ON_EXIT),y)
 +    CFLAGS += -DHAVE_ON_EXIT
 +  endif
 +endif
 +
++=======
++>>>>>>> bac1e4d103f7 (perf tools: Get rid of on_exit() feature test)
  ifndef NO_BACKTRACE
 -  ifeq ($(feature-backtrace), 1)
 -    CFLAGS += -DHAVE_BACKTRACE_SUPPORT
 +  ifeq ($(call try-cc,$(SOURCE_BACKTRACE),,-DBACKTRACE_SUPPORT),y)
 +    CFLAGS += -DBACKTRACE_SUPPORT
    endif
  endif
  
diff --cc tools/perf/config/feature-checks/Makefile
index 5910d275aba0,64c84e5f0514..000000000000
--- a/tools/perf/config/feature-checks/Makefile
+++ b/tools/perf/config/feature-checks/Makefile
@@@ -1,17 -1,35 +1,47 @@@
  
  FILES=					\
++<<<<<<< HEAD
 +	test-hello			\
 +	test-stackprotector-all		\
 +	test-stackprotector		\
 +	test-volatile-register-var	\
 +	test-fortify-source		\
 +	test-bionic			\
 +	test-libelf			\
 +	test-glibc			\
 +	test-dwarf			\
 +	test-libnuma
++=======
+ 	test-all.bin			\
+ 	test-backtrace.bin		\
+ 	test-bionic.bin			\
+ 	test-dwarf.bin			\
+ 	test-fortify-source.bin		\
+ 	test-glibc.bin			\
+ 	test-gtk2.bin			\
+ 	test-gtk2-infobar.bin		\
+ 	test-hello.bin			\
+ 	test-libaudit.bin		\
+ 	test-libbfd.bin			\
+ 	test-liberty.bin		\
+ 	test-liberty-z.bin		\
+ 	test-cplus-demangle.bin		\
+ 	test-libelf.bin			\
+ 	test-libelf-getphdrnum.bin	\
+ 	test-libelf-mmap.bin		\
+ 	test-libnuma.bin		\
+ 	test-libperl.bin		\
+ 	test-libpython.bin		\
+ 	test-libpython-version.bin	\
+ 	test-libslang.bin		\
+ 	test-libunwind.bin		\
+ 	test-libunwind-debug-frame.bin	\
+ 	test-stackprotector-all.bin	\
+ 	test-timerfd.bin		\
+ 	test-libdw-dwarf-unwind.bin
++>>>>>>> bac1e4d103f7 (perf tools: Get rid of on_exit() feature test)
  
 -CC := $(CROSS_COMPILE)gcc -MD
 -PKG_CONFIG := $(CROSS_COMPILE)pkg-config
 +CC := $(CC) -MD
  
  all: $(FILES)
  
@@@ -19,40 -37,111 +49,115 @@@ BUILD = $(CC) -o $(OUTPUT)$@ $@.
  
  ###############################
  
 -test-all.bin:
 -	$(BUILD) -Werror -fstack-protector-all -O2 -Werror -D_FORTIFY_SOURCE=2 -ldw -lelf -lnuma -lelf -laudit -I/usr/include/slang -lslang $(shell $(PKG_CONFIG) --libs --cflags gtk+-2.0 2>/dev/null) $(FLAGS_PERL_EMBED) $(FLAGS_PYTHON_EMBED) -DPACKAGE='"perf"' -lbfd -ldl
 +test-all:
 +	$(BUILD) -Werror -fstack-protector -fstack-protector-all -Wvolatile-register-var -O2 -Werror -D_FORTIFY_SOURCE=2 -ldw -lelf -lnuma -lunwind -lunwind-x86_64 -lelf -laudit -I/usr/include/slang -lslang $(shell pkg-config --libs --cflags gtk+-2.0 2>/dev/null) $(FLAGS_PERL_EMBED) $(FLAGS_PYTHON_EMBED) -DPACKAGE='perf' -DPACKAGE=perf -lbfd -ldl
  
 -test-hello.bin:
 +test-hello:
  	$(BUILD)
  
 -test-stackprotector-all.bin:
 +test-stackprotector-all:
  	$(BUILD) -Werror -fstack-protector-all
  
 -test-fortify-source.bin:
 +test-stackprotector:
 +	$(BUILD) -Werror -fstack-protector -Wstack-protector
 +
 +test-volatile-register-var:
 +	$(BUILD) -Werror -Wvolatile-register-var
 +
 +test-fortify-source:
  	$(BUILD) -O2 -Werror -D_FORTIFY_SOURCE=2
  
 -test-bionic.bin:
 +test-bionic:
  	$(BUILD)
  
 -test-libelf.bin:
 +test-libelf:
  	$(BUILD) -lelf
  
 -test-glibc.bin:
 +test-glibc:
  	$(BUILD)
  
 -test-dwarf.bin:
 +test-dwarf:
  	$(BUILD) -ldw
  
 -test-libelf-mmap.bin:
 -	$(BUILD) -lelf
 -
 -test-libelf-getphdrnum.bin:
 -	$(BUILD) -lelf
 -
 -test-libnuma.bin:
 +test-libnuma:
  	$(BUILD) -lnuma
  
++<<<<<<< HEAD
 +-include *.d */*.d
++=======
+ test-libunwind.bin:
+ 	$(BUILD) -lelf
+ 
+ test-libunwind-debug-frame.bin:
+ 	$(BUILD) -lelf
+ 
+ test-libaudit.bin:
+ 	$(BUILD) -laudit
+ 
+ test-libslang.bin:
+ 	$(BUILD) -I/usr/include/slang -lslang
+ 
+ test-gtk2.bin:
+ 	$(BUILD) $(shell $(PKG_CONFIG) --libs --cflags gtk+-2.0 2>/dev/null)
+ 
+ test-gtk2-infobar.bin:
+ 	$(BUILD) $(shell $(PKG_CONFIG) --libs --cflags gtk+-2.0 2>/dev/null)
+ 
+ grep-libs  = $(filter -l%,$(1))
+ strip-libs = $(filter-out -l%,$(1))
+ 
+ PERL_EMBED_LDOPTS = $(shell perl -MExtUtils::Embed -e ldopts 2>/dev/null)
+ PERL_EMBED_LDFLAGS = $(call strip-libs,$(PERL_EMBED_LDOPTS))
+ PERL_EMBED_LIBADD = $(call grep-libs,$(PERL_EMBED_LDOPTS))
+ PERL_EMBED_CCOPTS = `perl -MExtUtils::Embed -e ccopts 2>/dev/null`
+ FLAGS_PERL_EMBED=$(PERL_EMBED_CCOPTS) $(PERL_EMBED_LDOPTS)
+ 
+ test-libperl.bin:
+ 	$(BUILD) $(FLAGS_PERL_EMBED)
+ 
+ override PYTHON := python
+ override PYTHON_CONFIG := python-config
+ 
+ escape-for-shell-sq =  $(subst ','\'',$(1))
+ shell-sq = '$(escape-for-shell-sq)'
+ 
+ PYTHON_CONFIG_SQ = $(call shell-sq,$(PYTHON_CONFIG))
+ 
+ PYTHON_EMBED_LDOPTS = $(shell $(PYTHON_CONFIG_SQ) --ldflags 2>/dev/null)
+ PYTHON_EMBED_LDFLAGS = $(call strip-libs,$(PYTHON_EMBED_LDOPTS))
+ PYTHON_EMBED_LIBADD = $(call grep-libs,$(PYTHON_EMBED_LDOPTS))
+ PYTHON_EMBED_CCOPTS = $(shell $(PYTHON_CONFIG_SQ) --cflags 2>/dev/null)
+ FLAGS_PYTHON_EMBED = $(PYTHON_EMBED_CCOPTS) $(PYTHON_EMBED_LDOPTS)
+ 
+ test-libpython.bin:
+ 	$(BUILD) $(FLAGS_PYTHON_EMBED)
+ 
+ test-libpython-version.bin:
+ 	$(BUILD) $(FLAGS_PYTHON_EMBED)
+ 
+ test-libbfd.bin:
+ 	$(BUILD) -DPACKAGE='"perf"' -lbfd -lz -liberty -ldl
+ 
+ test-liberty.bin:
+ 	$(CC) -o $(OUTPUT)$@ test-libbfd.c -DPACKAGE='"perf"' -lbfd -ldl -liberty
+ 
+ test-liberty-z.bin:
+ 	$(CC) -o $(OUTPUT)$@ test-libbfd.c -DPACKAGE='"perf"' -lbfd -ldl -liberty -lz
+ 
+ test-cplus-demangle.bin:
+ 	$(BUILD) -liberty
+ 
+ test-backtrace.bin:
+ 	$(BUILD)
+ 
+ test-timerfd.bin:
+ 	$(BUILD)
+ 
+ test-libdw-dwarf-unwind.bin:
+ 	$(BUILD)
+ 
+ -include *.d
++>>>>>>> bac1e4d103f7 (perf tools: Get rid of on_exit() feature test)
  
  ###############################
  
* Unmerged path tools/perf/builtin-record.c
* Unmerged path tools/perf/config/Makefile
* Unmerged path tools/perf/config/feature-checks/Makefile
diff --git a/tools/perf/config/feature-checks/test-all.c b/tools/perf/config/feature-checks/test-all.c
index 50d431892a0c..66b556dfd6fc 100644
--- a/tools/perf/config/feature-checks/test-all.c
+++ b/tools/perf/config/feature-checks/test-all.c
@@ -69,10 +69,6 @@
 # include "test-libbfd.c"
 #undef main
 
-#define main main_test_on_exit
-# include "test-on-exit.c"
-#undef main
-
 #define main main_test_backtrace
 # include "test-backtrace.c"
 #undef main
@@ -98,7 +94,6 @@ int main(int argc, char *argv[])
 	main_test_gtk2(argc, argv);
 	main_test_gtk2_infobar(argc, argv);
 	main_test_libbfd();
-	main_test_on_exit();
 	main_test_backtrace();
 	main_test_libnuma();
 
