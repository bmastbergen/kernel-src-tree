powerpc/powernv: Don't escalate non-existing frozen PE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] powernv: Don't escalate non-existing frozen PE (Don Zickus) [1127366]
Rebuild_FUZZ: 92.00%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 71b540adffd9832e025dd9401178a8ef8c814e50
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/71b540ad.failed

Commit cb5b242c ("powerpc/eeh: Escalate error on non-existing PE")
escalates the frozen state on non-existing PE to fenced PHB. It
was to improve kdump reliability. After that, commit 361f2a2a
("powrpc/powernv: Reset PHB in kdump kernel") was introduced to
issue complete reset on all PHBs to increase the reliability of
kdump kernel.

Commit cb5b242c becomes unuseful and it would be reverted.

	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 71b540adffd9832e025dd9401178a8ef8c814e50)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/eeh-ioda.c
diff --cc arch/powerpc/platforms/powernv/eeh-ioda.c
index be33a16408be,5711f6f1fda6..000000000000
--- a/arch/powerpc/platforms/powernv/eeh-ioda.c
+++ b/arch/powerpc/platforms/powernv/eeh-ioda.c
@@@ -847,18 -793,81 +847,40 @@@ static int ioda_eeh_next_error(struct e
  
  			break;
  		case OPAL_EEH_PE_ERROR:
++<<<<<<< HEAD
 +			if (ioda_eeh_get_pe(hose, frozen_pe_no, pe))
 +				break;
++=======
+ 			/*
+ 			 * If we can't find the corresponding PE, we
+ 			 * just try to unfreeze.
+ 			 */
+ 			if (ioda_eeh_get_pe(hose,
+ 					    be64_to_cpu(frozen_pe_no), pe)) {
+ 				/* Try best to clear it */
+ 				pr_info("EEH: Clear non-existing PHB#%x-PE#%llx\n",
+ 					hose->global_number, frozen_pe_no);
+ 				opal_pci_eeh_freeze_clear(phb->opal_id, frozen_pe_no,
+ 					OPAL_EEH_ACTION_CLEAR_FREEZE_ALL);
+ 				ret = EEH_NEXT_ERR_NONE;
+ 			} else if ((*pe)->state & EEH_PE_ISOLATED) {
+ 				ret = EEH_NEXT_ERR_NONE;
+ 			} else {
+ 				pr_err("EEH: Frozen PE#%x on PHB#%x detected\n",
+ 					(*pe)->addr, (*pe)->phb->global_number);
+ 				ret = EEH_NEXT_ERR_FROZEN_PE;
+ 			}
++>>>>>>> 71b540adffd9 (powerpc/powernv: Don't escalate non-existing frozen PE)
  
 -			break;
 -		default:
 -			pr_warn("%s: Unexpected error type %d\n",
 -				__func__, be16_to_cpu(err_type));
 -		}
 -
 -		/*
 -		 * EEH core will try recover from fenced PHB or
 -		 * frozen PE. In the time for frozen PE, EEH core
 -		 * enable IO path for that before collecting logs,
 -		 * but it ruins the site. So we have to dump the
 -		 * log in advance here.
 -		 */
 -		if ((ret == EEH_NEXT_ERR_FROZEN_PE  ||
 -		    ret == EEH_NEXT_ERR_FENCED_PHB) &&
 -		    !((*pe)->state & EEH_PE_ISOLATED)) {
 -			eeh_pe_state_mark(*pe, EEH_PE_ISOLATED);
 -			ioda_eeh_phb_diag(hose);
 -		}
 -
 -		/*
 -		 * We probably have the frozen parent PE out there and
 -		 * we need have to handle frozen parent PE firstly.
 -		 */
 -		if (ret == EEH_NEXT_ERR_FROZEN_PE) {
 -			parent_pe = (*pe)->parent;
 -			while (parent_pe) {
 -				/* Hit the ceiling ? */
 -				if (parent_pe->type & EEH_PE_PHB)
 -					break;
 -
 -				/* Frozen parent PE ? */
 -				state = ioda_eeh_get_state(parent_pe);
 -				if (state > 0 &&
 -				    (state & active_flags) != active_flags)
 -					*pe = parent_pe;
 -
 -				/* Next parent level */
 -				parent_pe = parent_pe->parent;
 -			}
 -
 -			/* We possibly migrate to another PE */
 -			eeh_pe_state_mark(*pe, EEH_PE_ISOLATED);
 +			pr_err("EEH: Frozen PE#%x on PHB#%x detected\n",
 +				(*pe)->addr, (*pe)->phb->global_number);
 +			ret = 1;
 +			goto out;
  		}
 -
 -		/*
 -		 * If we have no errors on the specific PHB or only
 -		 * informative error there, we continue poking it.
 -		 * Otherwise, we need actions to be taken by upper
 -		 * layer.
 -		 */
 -		if (ret > EEH_NEXT_ERR_INF)
 -			break;
  	}
  
 +	ret = 0;
 +out:
  	return ret;
  }
  
* Unmerged path arch/powerpc/platforms/powernv/eeh-ioda.c
