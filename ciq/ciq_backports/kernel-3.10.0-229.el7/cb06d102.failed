igb: Fix Null-pointer dereference in igb_reset_q_vector

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Christoph Paasch <christoph.paasch@uclouvain.be>
commit cb06d102327eadcd1bdc480bfd9f8876251d1007
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/cb06d102.failed

When igb_set_interrupt_capability() calls
igb_reset_interrupt_capability() (e.g., because CONFIG_PCI_MSI is unset),
num_q_vectors has been set but no vector has yet been allocated.

igb_reset_interrupt_capability() will then call igb_reset_q_vector,
which assumes that the vector is allocated. As this is not the case, we
are accessing a NULL-pointer.

This patch fixes it by checking that q_vector is indeed different from
NULL.

Fixes: 02ef6e1d0b0023 (igb: Fix queue allocation method to accommodate changing during runtime)
	Cc: Carolyn Wyborny <carolyn.wyborny@intel.com>
	Signed-off-by: Christoph Paasch <christoph.paasch@uclouvain.be>
	Tested-by: Jeff Pieper <jeffrey.e.pieper@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit cb06d102327eadcd1bdc480bfd9f8876251d1007)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igb/igb_main.c
diff --cc drivers/net/ethernet/intel/igb/igb_main.c
index cb524e99ea44,6acf7873d733..000000000000
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@@ -1028,6 -1015,32 +1028,35 @@@ static void igb_free_q_vector(struct ig
  {
  	struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
  
++<<<<<<< HEAD
++=======
+ 	adapter->q_vector[v_idx] = NULL;
+ 
+ 	/* igb_get_stats64() might access the rings on this vector,
+ 	 * we must wait a grace period before freeing it.
+ 	 */
+ 	kfree_rcu(q_vector, rcu);
+ }
+ 
+ /**
+  *  igb_reset_q_vector - Reset config for interrupt vector
+  *  @adapter: board private structure to initialize
+  *  @v_idx: Index of vector to be reset
+  *
+  *  If NAPI is enabled it will delete any references to the
+  *  NAPI struct. This is preparation for igb_free_q_vector.
+  **/
+ static void igb_reset_q_vector(struct igb_adapter *adapter, int v_idx)
+ {
+ 	struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
+ 
+ 	/* Coming from igb_set_interrupt_capability, the vectors are not yet
+ 	 * allocated. So, q_vector is NULL so we should stop here.
+ 	 */
+ 	if (!q_vector)
+ 		return;
+ 
++>>>>>>> cb06d102327e (igb: Fix Null-pointer dereference in igb_reset_q_vector)
  	if (q_vector->tx.ring)
  		adapter->tx_ring[q_vector->tx.ring->queue_index] = NULL;
  
* Unmerged path drivers/net/ethernet/intel/igb/igb_main.c
