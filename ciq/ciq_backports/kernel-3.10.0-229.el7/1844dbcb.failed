perf tools: Introduce hists__inc_nr_samples()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Introduce hists__inc_nr_samples() (Jiri Olsa) [1134356]
Rebuild_FUZZ: 92.86%
commit-author Namhyung Kim <namhyung@kernel.org>
commit 1844dbcbe78503e0f4a8996d69da725d5e7a5177
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/1844dbcb.failed

There're some duplicate code for counting number of samples.  Add
hists__inc_nr_samples() and reuse it.

	Suggested-by: Jiri Olsa <jolsa@kernel.org>
	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/1401335910-16832-2-git-send-email-namhyung@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit 1844dbcbe78503e0f4a8996d69da725d5e7a5177)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-annotate.c
#	tools/perf/builtin-report.c
#	tools/perf/tests/hists_filter.c
#	tools/perf/util/hist.h
diff --cc tools/perf/builtin-annotate.c
index 36e3a284497c,bf52461a88bd..000000000000
--- a/tools/perf/builtin-annotate.c
+++ b/tools/perf/builtin-annotate.c
@@@ -69,8 -70,7 +69,12 @@@ static int perf_evsel__add_sample(struc
  		return -ENOMEM;
  
  	ret = hist_entry__inc_addr_samples(he, evsel->idx, al->addr);
++<<<<<<< HEAD
 +	evsel->hists.stats.total_period += sample->period;
 +	hists__inc_nr_events(&evsel->hists, PERF_RECORD_SAMPLE);
++=======
+ 	hists__inc_nr_samples(&evsel->hists, true);
++>>>>>>> 1844dbcbe785 (perf tools: Introduce hists__inc_nr_samples())
  	return ret;
  }
  
diff --cc tools/perf/builtin-report.c
index 899259cddfcd,4a3b84dd4f41..000000000000
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@@ -74,31 -76,29 +74,49 @@@ static int report__config(const char *v
  	return perf_default_config(var, value, cb);
  }
  
 -static void report__inc_stats(struct report *rep, struct hist_entry *he)
 +static int report__resolve_callchain(struct report *rep, struct symbol **parent,
 +				     struct perf_evsel *evsel, struct addr_location *al,
 +				     struct perf_sample *sample, struct machine *machine)
  {
++<<<<<<< HEAD
 +	if ((sort__has_parent || symbol_conf.use_callchain) && sample->callchain) {
 +		return machine__resolve_callchain(machine, evsel, al->thread, sample,
 +						  parent, al, rep->max_stack);
 +	}
 +	return 0;
++=======
+ 	/*
+ 	 * The @he is either of a newly created one or an existing one
+ 	 * merging current sample.  We only want to count a new one so
+ 	 * checking ->nr_events being 1.
+ 	 */
+ 	if (he->stat.nr_events == 1)
+ 		rep->nr_entries++;
+ 
+ 	/*
+ 	 * Only counts number of samples at this stage as it's more
+ 	 * natural to do it here and non-sample events are also
+ 	 * counted in perf_session_deliver_event().  The dump_trace
+ 	 * requires this info is ready before going to the output tree.
+ 	 */
+ 	hists__inc_nr_samples(he->hists, he->filtered);
++>>>>>>> 1844dbcbe785 (perf tools: Introduce hists__inc_nr_samples())
  }
  
 -static int report__add_mem_hist_entry(struct report *rep, struct addr_location *al,
 -				      struct perf_sample *sample, struct perf_evsel *evsel)
 +static int hist_entry__append_callchain(struct hist_entry *he, struct perf_sample *sample)
  {
 +	if (!symbol_conf.use_callchain)
 +		return 0;
 +	return callchain_append(he->callchain, &callchain_cursor, sample->period);
 +}
 +
 +static int report__add_mem_hist_entry(struct perf_tool *tool, struct addr_location *al,
 +				      struct perf_sample *sample, struct perf_evsel *evsel,
 +				      struct machine *machine, union perf_event *event)
 +{
 +	struct report *rep = container_of(tool, struct report, tool);
  	struct symbol *parent = NULL;
 +	u8 cpumode = event->header.misc & PERF_RECORD_MISC_CPUMODE_MASK;
  	struct hist_entry *he;
  	struct mem_info *mi, *mx;
  	uint64_t cost;
diff --cc tools/perf/util/hist.h
index 4b860e6a25f0,03ae1dbb1b15..000000000000
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@@ -115,8 -116,10 +115,15 @@@ void hists__decay_entries(struct hists 
  void hists__output_recalc_col_len(struct hists *hists, int max_rows);
  
  u64 hists__total_period(struct hists *hists);
++<<<<<<< HEAD
 +void hists__inc_nr_entries(struct hists *hists, struct hist_entry *h);
 +void hists__inc_nr_events(struct hists *self, u32 type);
++=======
+ void hists__reset_stats(struct hists *hists);
+ void hists__inc_stats(struct hists *hists, struct hist_entry *h);
+ void hists__inc_nr_events(struct hists *hists, u32 type);
+ void hists__inc_nr_samples(struct hists *hists, bool filtered);
++>>>>>>> 1844dbcbe785 (perf tools: Introduce hists__inc_nr_samples())
  void events_stats__inc(struct events_stats *stats, u32 type);
  size_t events_stats__fprintf(struct events_stats *stats, FILE *fp);
  
* Unmerged path tools/perf/tests/hists_filter.c
* Unmerged path tools/perf/builtin-annotate.c
* Unmerged path tools/perf/builtin-report.c
diff --git a/tools/perf/builtin-sched.c b/tools/perf/builtin-sched.c
index d8b6a3e4a1e3..c95438a7298b 100644
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@ -1428,7 +1428,7 @@ static int perf_sched__process_tracepoint_sample(struct perf_tool *tool __maybe_
 	int err = 0;
 
 	evsel->hists.stats.total_period += sample->period;
-	hists__inc_nr_events(&evsel->hists, PERF_RECORD_SAMPLE);
+	hists__inc_nr_samples(&evsel->hists, true);
 
 	if (evsel->handler != NULL) {
 		tracepoint_handler f = evsel->handler;
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 610f8ed9ce3e..07bb37bab6d0 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -250,10 +250,7 @@ static struct hist_entry *perf_evsel__add_hist_entry(struct perf_evsel *evsel,
 	if (he == NULL)
 		return NULL;
 
-	hists__inc_nr_events(&evsel->hists, PERF_RECORD_SAMPLE);
-	if (!he->filtered)
-		evsel->hists.stats.nr_non_filtered_samples++;
-
+	hists__inc_nr_samples(&evsel->hists, he->filtered);
 	return he;
 }
 
* Unmerged path tools/perf/tests/hists_filter.c
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index 9820956c30b9..f93333fecea5 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -781,6 +781,13 @@ void hists__inc_nr_events(struct hists *hists, u32 type)
 	events_stats__inc(&hists->stats, type);
 }
 
+void hists__inc_nr_samples(struct hists *hists, bool filtered)
+{
+	events_stats__inc(&hists->stats, PERF_RECORD_SAMPLE);
+	if (!filtered)
+		hists->stats.nr_non_filtered_samples++;
+}
+
 static struct hist_entry *hists__add_dummy_entry(struct hists *hists,
 						 struct hist_entry *pair)
 {
* Unmerged path tools/perf/util/hist.h
