net: checksum: fix warning in skb_checksum

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] checksum: fix warning in skb_checksum (Daniel Borkmann) [1054215]
Rebuild_FUZZ: 93.67%
commit-author Daniel Borkmann <dborkman@redhat.com>
commit cea80ea8d2a4c646f240a8fd6ece5c8e7bc969d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/cea80ea8.failed

This patch fixes a build warning in skb_checksum() by wrapping the
csum_partial() usage in skb_checksum(). The problem is that on a few
architectures, csum_partial is used with prefix asmlinkage whereas
on most architectures it's not. So fix this up generically as we did
with csum_block_add_ext() to match the signature. Introduced by
2817a336d4d ("net: skb_checksum: allow custom update/combine for
walking skb").

	Reported-by: Fengguang Wu <fengguang.wu@intel.com>
	Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cea80ea8d2a4c646f240a8fd6ece5c8e7bc969d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/skbuff.c
diff --cc net/core/skbuff.c
index dd3aefbfd232,e4115597b38b..000000000000
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@@ -1996,6 -1997,18 +1996,21 @@@ __wsum skb_checksum(const struct sk_buf
  
  	return csum;
  }
++<<<<<<< HEAD
++=======
+ EXPORT_SYMBOL(__skb_checksum);
+ 
+ __wsum skb_checksum(const struct sk_buff *skb, int offset,
+ 		    int len, __wsum csum)
+ {
+ 	const struct skb_checksum_ops ops = {
+ 		.update  = csum_partial_ext,
+ 		.combine = csum_block_add_ext,
+ 	};
+ 
+ 	return __skb_checksum(skb, offset, len, csum, &ops);
+ }
++>>>>>>> cea80ea8d2a4 (net: checksum: fix warning in skb_checksum)
  EXPORT_SYMBOL(skb_checksum);
  
  /* Both of above in one bottle. */
diff --git a/include/net/checksum.h b/include/net/checksum.h
index 600d1d705bb8..e42bd1844767 100644
--- a/include/net/checksum.h
+++ b/include/net/checksum.h
@@ -92,6 +92,11 @@ static inline __wsum csum_unfold(__sum16 n)
 	return (__force __wsum)n;
 }
 
+static inline __wsum csum_partial_ext(const void *buff, int len, __wsum sum)
+{
+	return csum_partial(buff, len, sum);
+}
+
 #define CSUM_MANGLED_0 ((__force __sum16)0xffff)
 
 static inline void csum_replace4(__sum16 *sum, __be32 from, __be32 to)
* Unmerged path net/core/skbuff.c
