ixgbe: fix ixgbe_check_reset_blocked() declaration

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jean Sacren <sakiwit@gmail.com>
commit 6425f0f353b91c2edad65a7e7d1362d1787d26fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/6425f0f3.failed

The commit c97506ab0e22 ("ixgbe: Add check for FW veto bit")
introduced the new function ixgbe_check_reset_blocked() with a minor
issue in declaration. Fix the declaration by changing the type
specifier to bool as the definition returns a boolean value.
Additionally all ixgbe_check_reset_blocked() callers are expected to
return a boolean value.

	Signed-off-by: Jean Sacren <sakiwit@gmail.com>
	Acked-by: Don Skidmore <donald.c.skidmore@intel.com>
	Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 6425f0f353b91c2edad65a7e7d1362d1787d26fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
#	drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
index 994e3ba61aa8,23f765263f12..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
@@@ -98,6 -99,32 +98,35 @@@ s32 ixgbe_identify_phy_generic(struct i
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * ixgbe_check_reset_blocked - check status of MNG FW veto bit
+  * @hw: pointer to the hardware structure
+  *
+  * This function checks the MMNGC.MNG_VETO bit to see if there are
+  * any constraints on link from manageability.  For MAC's that don't
+  * have this bit just return false since the link can not be blocked
+  * via this method.
+  **/
+ bool ixgbe_check_reset_blocked(struct ixgbe_hw *hw)
+ {
+ 	u32 mmngc;
+ 
+ 	/* If we don't have this bit, it can't be blocking */
+ 	if (hw->mac.type == ixgbe_mac_82598EB)
+ 		return false;
+ 
+ 	mmngc = IXGBE_READ_REG(hw, IXGBE_MMNGC);
+ 	if (mmngc & IXGBE_MMNGC_MNG_VETO) {
+ 		hw_dbg(hw, "MNG_VETO bit detected.\n");
+ 		return true;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ /**
++>>>>>>> 6425f0f353b9 (ixgbe: fix ixgbe_check_reset_blocked() declaration)
   *  ixgbe_get_phy_id - Get the phy type
   *  @hw: pointer to hardware structure
   *
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
index 5549a26b0d68,0bb047f751c2..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
@@@ -132,6 -128,7 +132,10 @@@ s32 ixgbe_setup_phy_link_speed_generic(
  s32 ixgbe_get_copper_link_capabilities_generic(struct ixgbe_hw *hw,
                                                 ixgbe_link_speed *speed,
                                                 bool *autoneg);
++<<<<<<< HEAD
++=======
+ bool ixgbe_check_reset_blocked(struct ixgbe_hw *hw);
++>>>>>>> 6425f0f353b9 (ixgbe: fix ixgbe_check_reset_blocked() declaration)
  
  /* PHY specific */
  s32 ixgbe_check_phy_link_tnx(struct ixgbe_hw *hw,
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
