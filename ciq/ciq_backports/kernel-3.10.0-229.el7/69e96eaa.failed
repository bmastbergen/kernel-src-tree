perf probe: Improve an error message of perf probe --vars mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/probe: Improve an error message of perf probe --vars mode (Jiri Olsa) [1134356]
Rebuild_FUZZ: 98.39%
commit-author Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
commit 69e96eaa4fef04ad543eda3eab787dbae99d8912
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/69e96eaa.failed

Fix an error message when failed to find given address in --vars
mode.

Without this fix, perf probe -V doesn't show the final "Error"
message if it fails to find given source line. Moreover, it
tells it fails to find "variables" instead of the source line.
  -----
  # perf probe -V foo@bar
  Failed to find variables at foo@bar (0)
  -----
The result also shows mysterious error code. Actually the error
returns 0 or -ENOENT means that it just fails to find the address
of given source line. (0 means there is no matching address,
and -ENOENT means there is an entry(DIE) but it has no instance,
e.g. an empty inlined function)

This fixes it to show what happened and the final error message
as below.
  -----
  # perf probe -V foo@bar
  Failed to find the address of foo@bar
    Error: Failed to show vars.
  -----

	Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/20140606071359.6788.84716.stgit@kbuild-fedora.novalocal
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 69e96eaa4fef04ad543eda3eab787dbae99d8912)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/probe-finder.c
diff --cc tools/perf/util/probe-finder.c
index 88cca6850d6c,98e304766416..000000000000
--- a/tools/perf/util/probe-finder.c
+++ b/tools/perf/util/probe-finder.c
@@@ -1332,8 -1280,12 +1332,17 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +/* Find available variables at given probe point */
 +int debuginfo__find_available_vars_at(struct debuginfo *self,
++=======
+ /*
+  * Find available variables at given probe point
+  * Return the number of found probe points. Return 0 if there is no
+  * matched probe point. Return <0 if an error occurs.
+  */
+ int debuginfo__find_available_vars_at(struct debuginfo *dbg,
++>>>>>>> 69e96eaa4fef (perf probe: Improve an error message of perf probe --vars mode)
  				      struct perf_probe_event *pev,
  				      struct variable_list **vls,
  				      int max_vls, bool externs)
diff --git a/tools/perf/util/probe-event.c b/tools/perf/util/probe-event.c
index 1c9c96559614..03f6d30a0a7e 100644
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@ -565,9 +565,14 @@ static int show_available_vars_at(struct debuginfo *dinfo,
 	ret = debuginfo__find_available_vars_at(dinfo, pev, &vls,
 						max_vls, externs);
 	if (ret <= 0) {
-		pr_err("Failed to find variables at %s (%d)\n", buf, ret);
+		if (ret == 0 || ret == -ENOENT) {
+			pr_err("Failed to find the address of %s\n", buf);
+			ret = -ENOENT;
+		} else
+			pr_warning("Debuginfo analysis failed.\n");
 		goto end;
 	}
+
 	/* Some variables are found */
 	fprintf(stdout, "Available variables at %s\n", buf);
 	for (i = 0; i < ret; i++) {
* Unmerged path tools/perf/util/probe-finder.c
