perf probe: Show source-level or symbol-level info for uprobes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/probe: Show source-level or symbol-level info for uprobes (Jiri Olsa) [1134356]
Rebuild_FUZZ: 98.39%
commit-author Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
commit 5a6f63145491f905de1c5c6c46c5cd62c004d0d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/5a6f6314.failed

Show source-level or symbol-level information for uprobe events.

Without this change;
  # ./perf probe -l
    probe_perf:dso__load_vmlinux (on 0x000000000006d110 in /kbuild/ksrc/linux-3/tools/perf/perf)

With this change;
  # ./perf probe -l
    probe_perf:dso__load_vmlinux (on dso__load_vmlinux@util/symbol.c in /kbuild/ksrc/linux-3/tools/perf/perf)

Changes from v2:
 - Update according to previous patches.

Changes from v1:
 - Rewrite the code based on new series.

	Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: "David A. Long" <dave.long@linaro.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: yrl.pp-manager.tt@hitachi.com
Link: http://lkml.kernel.org/r/20140206053223.29635.51280.stgit@kbuild-fedora.yrl.intra.hitachi.co.jp
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 5a6f63145491f905de1c5c6c46c5cd62c004d0d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/probe-event.c
diff --cc tools/perf/util/probe-event.c
index 1c9c96559614,3c35b7af2adb..000000000000
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@@ -186,21 -247,9 +186,25 @@@ static int init_user_exec(void
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int convert_to_perf_probe_point(struct probe_trace_point *tp,
 +					struct perf_probe_point *pp)
 +{
 +	pp->function = strdup(tp->symbol);
 +
 +	if (pp->function == NULL)
 +		return -ENOMEM;
 +
 +	pp->offset = tp->offset;
 +	pp->retprobe = tp->retprobe;
 +
 +	return 0;
 +}
 +
 +#ifdef DWARF_SUPPORT
++=======
+ #ifdef HAVE_DWARF_SUPPORT
++>>>>>>> 5a6f63145491 (perf probe: Show source-level or symbol-level info for uprobes)
  /* Open new debuginfo of given module */
  static struct debuginfo *open_debuginfo(const char *module)
  {
@@@ -221,44 -270,117 +225,158 @@@
  	return debuginfo__new(path);
  }
  
++<<<<<<< HEAD
 +/*
 + * Convert trace point to probe point with debuginfo
 + * Currently only handles kprobes.
 + */
 +static int kprobe_convert_to_perf_probe(struct probe_trace_point *tp,
 +					struct perf_probe_point *pp)
 +{
 +	struct symbol *sym;
 +	struct map *map;
 +	u64 addr;
 +	int ret = -ENOENT;
 +	struct debuginfo *dinfo;
 +
 +	sym = __find_kernel_function_by_name(tp->symbol, &map);
 +	if (sym) {
 +		addr = map->unmap_ip(map, sym->start + tp->offset);
 +		pr_debug("try to find %s+%ld@%" PRIx64 "\n", tp->symbol,
 +			 tp->offset, addr);
 +
 +		dinfo = debuginfo__new_online_kernel(addr);
 +		if (dinfo) {
 +			ret = debuginfo__find_probe_point(dinfo,
 +						 (unsigned long)addr, pp);
 +			debuginfo__delete(dinfo);
 +		} else {
 +			pr_debug("Failed to open debuginfo at 0x%" PRIx64 "\n",
 +				 addr);
 +			ret = -ENOENT;
 +		}
 +	}
 +	if (ret <= 0) {
 +		pr_debug("Failed to find corresponding probes from "
 +			 "debuginfo. Use kprobe event information.\n");
 +		return convert_to_perf_probe_point(tp, pp);
 +	}
 +	pp->retprobe = tp->retprobe;
 +
 +	return 0;
++=======
+ static int get_text_start_address(const char *exec, unsigned long *address)
+ {
+ 	Elf *elf;
+ 	GElf_Ehdr ehdr;
+ 	GElf_Shdr shdr;
+ 	int fd, ret = -ENOENT;
+ 
+ 	fd = open(exec, O_RDONLY);
+ 	if (fd < 0)
+ 		return -errno;
+ 
+ 	elf = elf_begin(fd, PERF_ELF_C_READ_MMAP, NULL);
+ 	if (elf == NULL)
+ 		return -EINVAL;
+ 
+ 	if (gelf_getehdr(elf, &ehdr) == NULL)
+ 		goto out;
+ 
+ 	if (!elf_section_by_name(elf, &ehdr, &shdr, ".text", NULL))
+ 		goto out;
+ 
+ 	*address = shdr.sh_addr - shdr.sh_offset;
+ 	ret = 0;
+ out:
+ 	elf_end(elf);
+ 	return ret;
+ }
+ 
+ /*
+  * Convert trace point to probe point with debuginfo
+  */
+ static int find_perf_probe_point_from_dwarf(struct probe_trace_point *tp,
+ 					    struct perf_probe_point *pp,
+ 					    bool is_kprobe)
+ {
+ 	struct debuginfo *dinfo = NULL;
+ 	unsigned long stext = 0;
+ 	u64 addr = tp->address;
+ 	int ret = -ENOENT;
+ 
+ 	/* convert the address to dwarf address */
+ 	if (!is_kprobe) {
+ 		if (!addr) {
+ 			ret = -EINVAL;
+ 			goto error;
+ 		}
+ 		ret = get_text_start_address(tp->module, &stext);
+ 		if (ret < 0)
+ 			goto error;
+ 		addr += stext;
+ 	} else {
+ 		addr = kernel_get_symbol_address_by_name(tp->symbol, false);
+ 		if (addr == 0)
+ 			goto error;
+ 		addr += tp->offset;
+ 	}
+ 
+ 	pr_debug("try to find information at %" PRIx64 " in %s\n", addr,
+ 		 tp->module ? : "kernel");
+ 
+ 	dinfo = open_debuginfo(tp->module);
+ 	if (dinfo) {
+ 		ret = debuginfo__find_probe_point(dinfo,
+ 						 (unsigned long)addr, pp);
+ 		debuginfo__delete(dinfo);
+ 	} else {
+ 		pr_debug("Failed to open debuginfo at 0x%" PRIx64 "\n", addr);
+ 		ret = -ENOENT;
+ 	}
+ 
+ 	if (ret > 0) {
+ 		pp->retprobe = tp->retprobe;
+ 		return 0;
+ 	}
+ error:
+ 	pr_debug("Failed to find corresponding probes from debuginfo.\n");
+ 	return ret ? : -ENOENT;
+ }
+ 
+ static int add_exec_to_probe_trace_events(struct probe_trace_event *tevs,
+ 					  int ntevs, const char *exec)
+ {
+ 	int i, ret = 0;
+ 	unsigned long offset, stext = 0;
+ 	char buf[32];
+ 
+ 	if (!exec)
+ 		return 0;
+ 
+ 	ret = get_text_start_address(exec, &stext);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	for (i = 0; i < ntevs && ret >= 0; i++) {
+ 		/* point.address is the addres of point.symbol + point.offset */
+ 		offset = tevs[i].point.address - stext;
+ 		tevs[i].point.offset = 0;
+ 		zfree(&tevs[i].point.symbol);
+ 		ret = e_snprintf(buf, 32, "0x%lx", offset);
+ 		if (ret < 0)
+ 			break;
+ 		tevs[i].point.module = strdup(exec);
+ 		tevs[i].point.symbol = strdup(buf);
+ 		if (!tevs[i].point.symbol || !tevs[i].point.module) {
+ 			ret = -ENOMEM;
+ 			break;
+ 		}
+ 		tevs[i].uprobes = true;
+ 	}
+ 
+ 	return ret;
++>>>>>>> 5a6f63145491 (perf probe: Show source-level or symbol-level info for uprobes)
  }
  
  static int add_module_to_probe_trace_events(struct probe_trace_event *tevs,
@@@ -627,12 -796,16 +745,14 @@@ int show_available_vars(struct perf_pro
  	return ret;
  }
  
 -#else	/* !HAVE_DWARF_SUPPORT */
 +#else	/* !DWARF_SUPPORT */
  
- static int kprobe_convert_to_perf_probe(struct probe_trace_point *tp,
- 					struct perf_probe_point *pp)
+ static int
+ find_perf_probe_point_from_dwarf(struct probe_trace_point *tp __maybe_unused,
+ 				 struct perf_probe_point *pp __maybe_unused,
+ 				 bool is_kprobe __maybe_unused)
  {
- 	return convert_to_perf_probe_point(tp, pp);
+ 	return -ENOSYS;
  }
  
  static int try_to_find_probe_trace_events(struct perf_probe_event *pev,
* Unmerged path tools/perf/util/probe-event.c
