perf report: Move histogram entries collapsing to separate function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/report: Move histogram entries collapsing to separate function (Jiri Olsa) [1133083]
Rebuild_FUZZ: 98.51%
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit f6d8b0571c9ac8f273d18c112c2fc3c9533c9f0a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f6d8b057.failed

Further uncluttering the main 'report' function by group related code in
separate function.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/n/tip-b594zsbwke8khir13kudwqmj@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit f6d8b0571c9ac8f273d18c112c2fc3c9533c9f0a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-report.c
diff --cc tools/perf/builtin-report.c
index e3b253d3e27e,cff9465847f2..000000000000
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@@ -442,13 -441,100 +442,107 @@@ static void report__warn_kptr_restrict(
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static int report__gtk_browse_hists(struct report *rep, const char *help)
+ {
+ 	int (*hist_browser)(struct perf_evlist *evlist, const char *help,
+ 			    struct hist_browser_timer *timer, float min_pcnt);
+ 
+ 	hist_browser = dlsym(perf_gtk_handle, "perf_evlist__gtk_browse_hists");
+ 
+ 	if (hist_browser == NULL) {
+ 		ui__error("GTK browser not found!\n");
+ 		return -1;
+ 	}
+ 
+ 	return hist_browser(rep->session->evlist, help, NULL, rep->min_percent);
+ }
+ 
+ static int report__browse_hists(struct report *rep)
+ {
+ 	int ret;
+ 	struct perf_session *session = rep->session;
+ 	struct perf_evlist *evlist = session->evlist;
+ 	const char *help = "For a higher level overview, try: perf report --sort comm,dso";
+ 
+ 	switch (use_browser) {
+ 	case 1:
+ 		ret = perf_evlist__tui_browse_hists(evlist, help, NULL,
+ 						    rep->min_percent,
+ 						    &session->header.env);
+ 		/*
+ 		 * Usually "ret" is the last pressed key, and we only
+ 		 * care if the key notifies us to switch data file.
+ 		 */
+ 		if (ret != K_SWITCH_INPUT_DATA)
+ 			ret = 0;
+ 		break;
+ 	case 2:
+ 		ret = report__gtk_browse_hists(rep, help);
+ 		break;
+ 	default:
+ 		ret = perf_evlist__tty_browse_hists(evlist, rep, help);
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static u64 report__collapse_hists(struct report *rep)
+ {
+ 	struct ui_progress prog;
+ 	struct perf_evsel *pos;
+ 	u64 nr_samples = 0;
+ 	/*
+  	 * Count number of histogram entries to use when showing progress,
+  	 * reusing nr_samples variable.
+  	 */
+ 	list_for_each_entry(pos, &rep->session->evlist->entries, node)
+ 		nr_samples += pos->hists.nr_entries;
+ 
+ 	ui_progress__init(&prog, nr_samples, "Merging related events...");
+ 	/*
+ 	 * Count total number of samples, will be used to check if this
+  	 * session had any.
+  	 */
+ 	nr_samples = 0;
+ 
+ 	list_for_each_entry(pos, &rep->session->evlist->entries, node) {
+ 		struct hists *hists = &pos->hists;
+ 
+ 		if (pos->idx == 0)
+ 			hists->symbol_filter_str = rep->symbol_filter_str;
+ 
+ 		hists__collapse_resort(hists, &prog);
+ 		nr_samples += hists->stats.nr_events[PERF_RECORD_SAMPLE];
+ 
+ 		/* Non-group events are considered as leader */
+ 		if (symbol_conf.event_group &&
+ 		    !perf_evsel__is_group_leader(pos)) {
+ 			struct hists *leader_hists = &pos->leader->hists;
+ 
+ 			hists__match(leader_hists, hists);
+ 			hists__link(leader_hists, hists);
+ 		}
+ 	}
+ 
+ 	ui_progress__finish();
+ 
+ 	return nr_samples;
+ }
+ 
++>>>>>>> f6d8b0571c9a (perf report: Move histogram entries collapsing to separate function)
  static int __cmd_report(struct report *rep)
  {
- 	int ret = -EINVAL;
+ 	int ret;
  	u64 nr_samples;
  	struct perf_session *session = rep->session;
  	struct perf_evsel *pos;
++<<<<<<< HEAD
 +	const char *help = "For a higher level overview, try: perf report --sort comm,dso";
++=======
++>>>>>>> f6d8b0571c9a (perf report: Move histogram entries collapsing to separate function)
  	struct perf_data_file *file = session->file;
  
  	signal(SIGINT, sig_handler);
@@@ -486,25 -572,7 +580,29 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	nr_samples = 0;
 +	list_for_each_entry(pos, &session->evlist->entries, node) {
 +		struct hists *hists = &pos->hists;
 +
 +		if (pos->idx == 0)
 +			hists->symbol_filter_str = rep->symbol_filter_str;
 +
 +		hists__collapse_resort(hists);
 +		nr_samples += hists->stats.nr_events[PERF_RECORD_SAMPLE];
 +
 +		/* Non-group events are considered as leader */
 +		if (symbol_conf.event_group &&
 +		    !perf_evsel__is_group_leader(pos)) {
 +			struct hists *leader_hists = &pos->leader->hists;
 +
 +			hists__match(leader_hists, hists);
 +			hists__link(leader_hists, hists);
 +		}
 +	}
++=======
+ 	nr_samples = report__collapse_hists(rep);
++>>>>>>> f6d8b0571c9a (perf report: Move histogram entries collapsing to separate function)
  
  	if (session_done())
  		return 0;
* Unmerged path tools/perf/builtin-report.c
