cpufreq: rename __cpufreq_set_policy() as cpufreq_set_policy()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] rename __cpufreq_set_policy() as cpufreq_set_policy() (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 92.17%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit 037ce8397d23b2f84ccfb879cf4b43277b0454e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/037ce839.failed

Earlier there used to be two functions named __cpufreq_set_policy() and
cpufreq_set_policy(), but now we only have a single routine lets name it
cpufreq_set_policy() instead of __cpufreq_set_policy().

This also removes some invalid comments or fixes some incorrect comments.

	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 037ce8397d23b2f84ccfb879cf4b43277b0454e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq.c
diff --cc drivers/cpufreq/cpufreq.c
index 006b599e5bea,3a811df43e14..000000000000
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@@ -426,8 -412,8 +426,13 @@@ show_one(scaling_min_freq, min)
  show_one(scaling_max_freq, max);
  show_one(scaling_cur_freq, cur);
  
++<<<<<<< HEAD
 +static int __cpufreq_set_policy(struct cpufreq_policy *data,
 +				struct cpufreq_policy *policy);
++=======
+ static int cpufreq_set_policy(struct cpufreq_policy *policy,
+ 				struct cpufreq_policy *new_policy);
++>>>>>>> 037ce8397d23 (cpufreq: rename __cpufreq_set_policy() as cpufreq_set_policy())
  
  /**
   * cpufreq_per_cpu_attr_write() / store_##file_name() - sysfs write access
@@@ -857,8 -832,8 +858,13 @@@ static void cpufreq_init_policy(struct 
  	struct cpufreq_policy new_policy;
  	int ret = 0;
  
++<<<<<<< HEAD
 +	memcpy(&new_policy, policy, sizeof(struct cpufreq_policy));
 +	/* assure that the starting sequence is run in __cpufreq_set_policy */
++=======
+ 	memcpy(&new_policy, policy, sizeof(*policy));
+ 	/* assure that the starting sequence is run in cpufreq_set_policy */
++>>>>>>> 037ce8397d23 (cpufreq: rename __cpufreq_set_policy() as cpufreq_set_policy())
  	policy->governor = NULL;
  
  	/* set default policy */
@@@ -1744,11 -1842,11 +1750,16 @@@ int cpufreq_get_policy(struct cpufreq_p
  EXPORT_SYMBOL(cpufreq_get_policy);
  
  /*
-  * data   : current policy.
-  * policy : policy to be set.
+  * policy : current policy.
+  * new_policy: policy to be set.
   */
++<<<<<<< HEAD
 +static int __cpufreq_set_policy(struct cpufreq_policy *data,
 +				struct cpufreq_policy *policy)
++=======
+ static int cpufreq_set_policy(struct cpufreq_policy *policy,
+ 				struct cpufreq_policy *new_policy)
++>>>>>>> 037ce8397d23 (cpufreq: rename __cpufreq_set_policy() as cpufreq_set_policy())
  {
  	int ret = 0, failed = 1;
  
@@@ -1897,7 -1991,7 +1908,11 @@@ int cpufreq_update_policy(unsigned int 
  		}
  	}
  
++<<<<<<< HEAD
 +	ret = __cpufreq_set_policy(data, &policy);
++=======
+ 	ret = cpufreq_set_policy(policy, &new_policy);
++>>>>>>> 037ce8397d23 (cpufreq: rename __cpufreq_set_policy() as cpufreq_set_policy())
  
  	unlock_policy_rwsem_write(cpu);
  
* Unmerged path drivers/cpufreq/cpufreq.c
