cpufreq: stats: Remove redundant cpufreq_cpu_get() call

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] stats: Remove redundant cpufreq_cpu_get() call (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 91.09%
commit-author Saravana Kannan <skannan@codeaurora.org>
commit b24a5b6512a6fb89f3b99b9b0f829b4448e62db0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/b24a5b65.failed

__cpufreq_stats_create_table always gets pass the valid and real policy
struct. So, there's no need to call cpufreq_cpu_get() to get the policy
again.

	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Saravana Kannan <skannan@codeaurora.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit b24a5b6512a6fb89f3b99b9b0f829b4448e62db0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq_stats.c
diff --cc drivers/cpufreq/cpufreq_stats.c
index 04c5a81b41f0,e4bd27f1a9d8..000000000000
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@@ -193,7 -185,6 +193,10 @@@ static int cpufreq_stats_create_table(s
  {
  	unsigned int i, j, count = 0, ret = 0;
  	struct cpufreq_stats *stat;
++<<<<<<< HEAD
 +	struct cpufreq_policy *data;
++=======
++>>>>>>> b24a5b6512a6 (cpufreq: stats: Remove redundant cpufreq_cpu_get() call)
  	unsigned int alloc_size;
  	unsigned int cpu = policy->cpu;
  	if (per_cpu(cpufreq_stats_table, cpu))
@@@ -202,13 -193,7 +205,17 @@@
  	if ((stat) == NULL)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	data = cpufreq_cpu_get(cpu);
 +	if (data == NULL) {
 +		ret = -EINVAL;
 +		goto error_get_fail;
 +	}
 +
 +	ret = sysfs_create_group(&data->kobj, &stats_attr_group);
++=======
+ 	ret = sysfs_create_group(&policy->kobj, &stats_attr_group);
++>>>>>>> b24a5b6512a6 (cpufreq: stats: Remove redundant cpufreq_cpu_get() call)
  	if (ret)
  		goto error_out;
  
@@@ -251,13 -236,8 +258,19 @@@
  	stat->last_time = get_jiffies_64();
  	stat->last_index = freq_table_get_index(stat, policy->cur);
  	spin_unlock(&cpufreq_stats_lock);
++<<<<<<< HEAD
 +	cpufreq_cpu_put(data);
++=======
++>>>>>>> b24a5b6512a6 (cpufreq: stats: Remove redundant cpufreq_cpu_get() call)
  	return 0;
 +error_alloc:
 +	sysfs_remove_group(&policy->kobj, &stats_attr_group);
  error_out:
++<<<<<<< HEAD
 +	cpufreq_cpu_put(data);
 +error_get_fail:
++=======
++>>>>>>> b24a5b6512a6 (cpufreq: stats: Remove redundant cpufreq_cpu_get() call)
  	kfree(stat);
  	per_cpu(cpufreq_stats_table, cpu) = NULL;
  	return ret;
* Unmerged path drivers/cpufreq/cpufreq_stats.c
