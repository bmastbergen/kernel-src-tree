emulex: Remove extern from function prototypes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [ethernet] e1000e: Remove extern from function prototypes (John Greene) [1091119]
Rebuild_FUZZ: 91.30%
commit-author Joe Perches <joe@perches.com>
commit 31886e87bdb1ca4f1b4e03f2c061938fd47ac163
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/31886e87.failed

There are a mix of function prototypes with and without extern
in the kernel sources.  Standardize on not using extern for
function prototypes.

Function prototypes don't need to be written with extern.
extern is assumed by the compiler.  Its use is as unnecessary as
using auto to declare automatic/local variables in a block.

	Signed-off-by: Joe Perches <joe@perches.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 31886e87bdb1ca4f1b4e03f2c061938fd47ac163)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be.h
#	drivers/net/ethernet/emulex/benet/be_cmds.h
diff --cc drivers/net/ethernet/emulex/benet/be.h
index eaf292cab06b,4a0d3b786288..000000000000
--- a/drivers/net/ethernet/emulex/benet/be.h
+++ b/drivers/net/ethernet/emulex/benet/be.h
@@@ -733,115 -694,6 +733,118 @@@ static inline int qnq_async_evt_rcvd(st
  	return adapter->flags & BE_FLAGS_QNQ_ASYNC_EVT_RCVD;
  }
  
++<<<<<<< HEAD
 +static inline int fw_major_num(const char *fw_ver)
 +{
 +	int fw_major = 0;
 +
 +	sscanf(fw_ver, "%d.", &fw_major);
 +
 +	return fw_major;
 +}
 +
 +#ifdef CONFIG_NET_RX_BUSY_POLL
 +static inline bool be_lock_napi(struct be_eq_obj *eqo)
 +{
 +	bool status = true;
 +
 +	spin_lock(&eqo->lock); /* BH is already disabled */
 +	if (eqo->state & BE_EQ_LOCKED) {
 +		WARN_ON(eqo->state & BE_EQ_NAPI);
 +		eqo->state |= BE_EQ_NAPI_YIELD;
 +		status = false;
 +	} else {
 +		eqo->state = BE_EQ_NAPI;
 +	}
 +	spin_unlock(&eqo->lock);
 +	return status;
 +}
 +
 +static inline void be_unlock_napi(struct be_eq_obj *eqo)
 +{
 +	spin_lock(&eqo->lock); /* BH is already disabled */
 +
 +	WARN_ON(eqo->state & (BE_EQ_POLL | BE_EQ_NAPI_YIELD));
 +	eqo->state = BE_EQ_IDLE;
 +
 +	spin_unlock(&eqo->lock);
 +}
 +
 +static inline bool be_lock_busy_poll(struct be_eq_obj *eqo)
 +{
 +	bool status = true;
 +
 +	spin_lock_bh(&eqo->lock);
 +	if (eqo->state & BE_EQ_LOCKED) {
 +		eqo->state |= BE_EQ_POLL_YIELD;
 +		status = false;
 +	} else {
 +		eqo->state |= BE_EQ_POLL;
 +	}
 +	spin_unlock_bh(&eqo->lock);
 +	return status;
 +}
 +
 +static inline void be_unlock_busy_poll(struct be_eq_obj *eqo)
 +{
 +	spin_lock_bh(&eqo->lock);
 +
 +	WARN_ON(eqo->state & (BE_EQ_NAPI));
 +	eqo->state = BE_EQ_IDLE;
 +
 +	spin_unlock_bh(&eqo->lock);
 +}
 +
 +static inline void be_enable_busy_poll(struct be_eq_obj *eqo)
 +{
 +	spin_lock_init(&eqo->lock);
 +	eqo->state = BE_EQ_IDLE;
 +}
 +
 +static inline void be_disable_busy_poll(struct be_eq_obj *eqo)
 +{
 +	local_bh_disable();
 +
 +	/* It's enough to just acquire napi lock on the eqo to stop
 +	 * be_busy_poll() from processing any queueus.
 +	 */
 +	while (!be_lock_napi(eqo))
 +		mdelay(1);
 +
 +	local_bh_enable();
 +}
 +
 +#else /* CONFIG_NET_RX_BUSY_POLL */
 +
 +static inline bool be_lock_napi(struct be_eq_obj *eqo)
 +{
 +	return true;
 +}
 +
 +static inline void be_unlock_napi(struct be_eq_obj *eqo)
 +{
 +}
 +
 +static inline bool be_lock_busy_poll(struct be_eq_obj *eqo)
 +{
 +	return false;
 +}
 +
 +static inline void be_unlock_busy_poll(struct be_eq_obj *eqo)
 +{
 +}
 +
 +static inline void be_enable_busy_poll(struct be_eq_obj *eqo)
 +{
 +}
 +
 +static inline void be_disable_busy_poll(struct be_eq_obj *eqo)
 +{
 +}
 +#endif /* CONFIG_NET_RX_BUSY_POLL */
 +
++=======
++>>>>>>> 31886e87bdb1 (emulex: Remove extern from function prototypes)
  void be_cq_notify(struct be_adapter *adapter, u16 qid, bool arm,
  		  u16 num_popped);
  void be_link_status_update(struct be_adapter *adapter, u8 link_status);
diff --cc drivers/net/ethernet/emulex/benet/be_cmds.h
index fc4e076dc202,84f8c5243655..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_cmds.h
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.h
@@@ -2002,9 -1894,10 +2002,16 @@@ int lancer_cmd_get_pport_stats(struct b
  			       struct be_dma_mem *nonemb_cmd);
  int be_cmd_get_fw_ver(struct be_adapter *adapter, char *fw_ver,
  		      char *fw_on_flash);
++<<<<<<< HEAD
 +int be_cmd_modify_eqd(struct be_adapter *adapter, struct be_set_eqd *, int num);
 +int be_cmd_vlan_config(struct be_adapter *adapter, u32 if_id, u16 *vtag_array,
 +		       u32 num, bool promiscuous);
++=======
+ 
+ int be_cmd_modify_eqd(struct be_adapter *adapter, u32 eq_id, u32 eqd);
+ int be_cmd_vlan_config(struct be_adapter *adapter, u32 if_id, u16 *vtag_array,
+ 		       u32 num, bool untagged, bool promiscuous);
++>>>>>>> 31886e87bdb1 (emulex: Remove extern from function prototypes)
  int be_cmd_rx_filter(struct be_adapter *adapter, u32 flags, u32 status);
  int be_cmd_set_flow_control(struct be_adapter *adapter, u32 tx_fc, u32 rx_fc);
  int be_cmd_get_flow_control(struct be_adapter *adapter, u32 *tx_fc, u32 *rx_fc);
@@@ -2057,10 -1950,8 +2064,15 @@@ int be_cmd_get_fn_privileges(struct be_
  int be_cmd_set_fn_privileges(struct be_adapter *adapter, u32 privileges,
  			     u32 vf_num);
  int be_cmd_get_mac_from_list(struct be_adapter *adapter, u8 *mac,
++<<<<<<< HEAD
 +			     bool *pmac_id_active, u32 *pmac_id,
 +			     u32 if_handle, u8 domain);
 +int be_cmd_get_active_mac(struct be_adapter *adapter, u32 pmac_id, u8 *mac,
 +			  u32 if_handle, bool active, u32 domain);
++=======
+ 			     bool *pmac_id_active, u32 *pmac_id, u8 domain);
+ int be_cmd_get_active_mac(struct be_adapter *adapter, u32 pmac_id, u8 *mac);
++>>>>>>> 31886e87bdb1 (emulex: Remove extern from function prototypes)
  int be_cmd_get_perm_mac(struct be_adapter *adapter, u8 *mac);
  int be_cmd_set_mac_list(struct be_adapter *adapter, u8 *mac_array, u8 mac_count,
  			u32 domain);
@@@ -2070,13 -1961,12 +2082,20 @@@ int be_cmd_set_hsw_config(struct be_ada
  int be_cmd_get_hsw_config(struct be_adapter *adapter, u16 *pvid, u32 domain,
  			  u16 intf_id, u8 *mode);
  int be_cmd_get_acpi_wol_cap(struct be_adapter *adapter);
++<<<<<<< HEAD
 +int be_cmd_set_fw_log_level(struct be_adapter *adapter, u32 level);
 +int be_cmd_get_fw_log_level(struct be_adapter *adapter);
++=======
++>>>>>>> 31886e87bdb1 (emulex: Remove extern from function prototypes)
  int be_cmd_get_ext_fat_capabilites(struct be_adapter *adapter,
  				   struct be_dma_mem *cmd);
  int be_cmd_set_ext_fat_capabilites(struct be_adapter *adapter,
  				   struct be_dma_mem *cmd,
  				   struct be_fat_conf_params *cfgs);
++<<<<<<< HEAD
++=======
+ int lancer_wait_ready(struct be_adapter *adapter);
++>>>>>>> 31886e87bdb1 (emulex: Remove extern from function prototypes)
  int lancer_physdev_ctrl(struct be_adapter *adapter, u32 mask);
  int lancer_initiate_dump(struct be_adapter *adapter);
  bool dump_present(struct be_adapter *adapter);
@@@ -2087,7 -1977,6 +2106,10 @@@ int be_cmd_get_func_config(struct be_ad
  int be_cmd_get_profile_config(struct be_adapter *adapter,
  			      struct be_resources *res, u8 domain);
  int be_cmd_set_profile_config(struct be_adapter *adapter, u32 bps, u8 domain);
++<<<<<<< HEAD
 +int be_cmd_get_active_profile(struct be_adapter *adapter, u16 *profile);
++=======
++>>>>>>> 31886e87bdb1 (emulex: Remove extern from function prototypes)
  int be_cmd_get_if_id(struct be_adapter *adapter, struct be_vf_cfg *vf_cfg,
  		     int vf_num);
  int be_cmd_enable_vf(struct be_adapter *adapter, u8 domain);
* Unmerged path drivers/net/ethernet/emulex/benet/be.h
* Unmerged path drivers/net/ethernet/emulex/benet/be_cmds.h
