cpufreq: stats: create sysfs entries when cpufreq_stats is a module

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] stats: create sysfs entries when cpufreq_stats is a module (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 92.80%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit b3f9ff88db6e149086dc111e5652106005fd5923
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/b3f9ff88.failed

When cpufreq_stats is compiled in as a module, cpufreq driver would
have already been registered. And so the CPUFREQ_CREATE_POLICY
notifiers wouldn't be called for it. Hence no sysfs entries for stats. :(

This patch calls cpufreq_stats_create_table() for each online CPU from
cpufreq_stats_init() and so if policy is already created for CPUx then
we will register sysfs stats for it.

When its not compiled as module, we will return early as policy wouldn't
be found for any of the CPUs.

	Acked-by: Nicolas Pitre <nico@linaro.org>
	Tested-by: Nicolas Pitre <nico@linaro.org>
	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit b3f9ff88db6e149086dc111e5652106005fd5923)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq_stats.c
diff --cc drivers/cpufreq/cpufreq_stats.c
index ee6a6db3cbe4,5793e1447fb1..000000000000
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@@ -292,10 -302,13 +312,20 @@@ static int cpufreq_stat_notifier_policy
  	table = cpufreq_frequency_get_table(cpu);
  	if (!table)
  		return 0;
++<<<<<<< HEAD
 +	ret = cpufreq_stats_create_table(policy, table);
 +	if (ret)
 +		return ret;
 +	return 0;
++=======
+ 
+ 	if (val == CPUFREQ_CREATE_POLICY)
+ 		ret = __cpufreq_stats_create_table(policy, table);
+ 	else if (val == CPUFREQ_REMOVE_POLICY)
+ 		__cpufreq_stats_free_table(policy);
+ 
+ 	return ret;
++>>>>>>> b3f9ff88db6e (cpufreq: stats: create sysfs entries when cpufreq_stats is a module)
  }
  
  static int cpufreq_stat_notifier_trans(struct notifier_block *nb,
@@@ -378,7 -366,8 +408,12 @@@ static int __init cpufreq_stats_init(vo
  	if (ret)
  		return ret;
  
++<<<<<<< HEAD
 +	register_hotcpu_notifier(&cpufreq_stat_cpu_notifier);
++=======
+ 	for_each_online_cpu(cpu)
+ 		cpufreq_stats_create_table(cpu);
++>>>>>>> b3f9ff88db6e (cpufreq: stats: create sysfs entries when cpufreq_stats is a module)
  
  	ret = cpufreq_register_notifier(&notifier_trans_block,
  				CPUFREQ_TRANSITION_NOTIFIER);
* Unmerged path drivers/cpufreq/cpufreq_stats.c
