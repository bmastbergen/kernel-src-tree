netfilter: ipset: remove unused code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 02eca9d2cc541806e8f03b4131c7ee9120246df7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/02eca9d2.failed

Function never used in current upstream code.

	Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 02eca9d2cc541806e8f03b4131c7ee9120246df7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netfilter/ipset/ip_set.h
#	net/netfilter/ipset/ip_set_core.c
diff --cc include/linux/netfilter/ipset/ip_set.h
index d80e2753847c,0c7d01eae56c..000000000000
--- a/include/linux/netfilter/ipset/ip_set.h
+++ b/include/linux/netfilter/ipset/ip_set.h
@@@ -247,13 -316,23 +247,22 @@@ ip_set_init_counter(struct ip_set_count
  		atomic64_set(&(counter)->packets, (long long)(ext->packets));
  }
  
 -/* Netlink CB args */
 -enum {
 -	IPSET_CB_NET = 0,
 -	IPSET_CB_DUMP,
 -	IPSET_CB_INDEX,
 -	IPSET_CB_ARG0,
 -	IPSET_CB_ARG1,
 -	IPSET_CB_ARG2,
 -};
 -
  /* register and unregister set references */
++<<<<<<< HEAD
 +extern ip_set_id_t ip_set_get_byname(const char *name, struct ip_set **set);
 +extern void ip_set_put_byindex(ip_set_id_t index);
 +extern const char *ip_set_name_byindex(ip_set_id_t index);
 +extern ip_set_id_t ip_set_nfnl_get(const char *name);
 +extern ip_set_id_t ip_set_nfnl_get_byindex(ip_set_id_t index);
 +extern void ip_set_nfnl_put(ip_set_id_t index);
++=======
+ extern ip_set_id_t ip_set_get_byname(struct net *net,
+ 				     const char *name, struct ip_set **set);
+ extern void ip_set_put_byindex(struct net *net, ip_set_id_t index);
+ extern const char *ip_set_name_byindex(struct net *net, ip_set_id_t index);
+ extern ip_set_id_t ip_set_nfnl_get_byindex(struct net *net, ip_set_id_t index);
+ extern void ip_set_nfnl_put(struct net *net, ip_set_id_t index);
++>>>>>>> 02eca9d2cc54 (netfilter: ipset: remove unused code)
  
  /* API for iptables set match, and SET target */
  
diff --cc net/netfilter/ipset/ip_set_core.c
index f77139007983,de770ec39e51..000000000000
--- a/net/netfilter/ipset/ip_set_core.c
+++ b/net/netfilter/ipset/ip_set_core.c
@@@ -540,33 -625,6 +540,36 @@@ EXPORT_SYMBOL_GPL(ip_set_name_byindex)
   */
  
  /*
++<<<<<<< HEAD
 + * Find set by name, reference it once. The reference makes sure the
 + * thing pointed to, does not go away under our feet.
 + *
 + * The nfnl mutex is used in the function.
 + */
 +ip_set_id_t
 +ip_set_nfnl_get(const char *name)
 +{
 +	ip_set_id_t i, index = IPSET_INVALID_ID;
 +	struct ip_set *s;
 +
 +	nfnl_lock(NFNL_SUBSYS_IPSET);
 +	for (i = 0; i < ip_set_max; i++) {
 +		s = nfnl_set(i);
 +		if (s != NULL && STREQ(s->name, name)) {
 +			__ip_set_get(s);
 +			index = i;
 +			break;
 +		}
 +	}
 +	nfnl_unlock(NFNL_SUBSYS_IPSET);
 +
 +	return index;
 +}
 +EXPORT_SYMBOL_GPL(ip_set_nfnl_get);
 +
 +/*
++=======
++>>>>>>> 02eca9d2cc54 (netfilter: ipset: remove unused code)
   * Find set by index, reference it once. The reference makes sure the
   * thing pointed to, does not go away under our feet.
   *
* Unmerged path include/linux/netfilter/ipset/ip_set.h
* Unmerged path net/netfilter/ipset/ip_set_core.c
