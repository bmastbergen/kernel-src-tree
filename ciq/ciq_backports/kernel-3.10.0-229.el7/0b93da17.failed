perf tools: Add hist.percentage config option

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Add hist.percentage config option (Jiri Olsa) [1134356]
Rebuild_FUZZ: 92.86%
commit-author Namhyung Kim <namhyung@kernel.org>
commit 0b93da1756df4fe930ee0220a6addce263a6e0ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0b93da17.failed

Add hist.percentage option for setting default value of the
symbol_conf.filter_relative.  It affects the output of various perf
commands (like perf report, top and diff) only if filter(s) applied.

An user can write .perfconfig file like below to show absolute
percentage of filtered entries by default:

  $ cat ~/.perfconfig
  [hist]
  percentage = absolute

And it can be changed through command line:

  $ perf report --percentage relative

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/1397145720-8063-6-git-send-email-namhyung@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@redhat.com>
(cherry picked from commit 0b93da1756df4fe930ee0220a6addce263a6e0ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.c
#	tools/perf/util/hist.h
diff --cc tools/perf/util/hist.c
index dac7beaabd9c,5a892477aa50..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -951,3 -943,24 +951,27 @@@ u64 hists__total_period(struct hists *h
  	return symbol_conf.filter_relative ? hists->stats.total_non_filtered_period :
  		hists->stats.total_period;
  }
++<<<<<<< HEAD
++=======
+ 
+ int parse_filter_percentage(const struct option *opt __maybe_unused,
+ 			    const char *arg, int unset __maybe_unused)
+ {
+ 	if (!strcmp(arg, "relative"))
+ 		symbol_conf.filter_relative = true;
+ 	else if (!strcmp(arg, "absolute"))
+ 		symbol_conf.filter_relative = false;
+ 	else
+ 		return -1;
+ 
+ 	return 0;
+ }
+ 
+ int perf_hist_config(const char *var, const char *value)
+ {
+ 	if (!strcmp(var, "hist.percentage"))
+ 		return parse_filter_percentage(NULL, value, 0);
+ 
+ 	return 0;
+ }
++>>>>>>> 0b93da1756df (perf tools: Add hist.percentage config option)
diff --cc tools/perf/util/hist.h
index a496262fcc29,5a0343eb22e2..000000000000
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@@ -258,20 -253,11 +258,29 @@@ static inline int script_browse(const c
  #define K_SWITCH_INPUT_DATA -3000
  #endif
  
++<<<<<<< HEAD
 +#ifdef GTK2_SUPPORT
 +int perf_evlist__gtk_browse_hists(struct perf_evlist *evlist, const char *help,
 +				  struct hist_browser_timer *hbt __maybe_unused,
 +				  float min_pcnt);
 +#else
 +static inline
 +int perf_evlist__gtk_browse_hists(struct perf_evlist *evlist __maybe_unused,
 +				  const char *help __maybe_unused,
 +				  struct hist_browser_timer *hbt __maybe_unused,
 +				  float min_pcnt __maybe_unused)
 +{
 +	return 0;
 +}
 +#endif
++=======
+ unsigned int hists__sort_list_width(struct hists *hists);
+ 
+ struct option;
+ int parse_filter_percentage(const struct option *opt __maybe_unused,
+ 			    const char *arg, int unset __maybe_unused);
+ int perf_hist_config(const char *var, const char *value);
++>>>>>>> 0b93da1756df (perf tools: Add hist.percentage config option)
  
 +unsigned int hists__sort_list_width(struct hists *self);
  #endif	/* __PERF_HIST_H */
diff --git a/tools/perf/builtin-diff.c b/tools/perf/builtin-diff.c
index 891f993f523b..e77d3f49baf5 100644
--- a/tools/perf/builtin-diff.c
+++ b/tools/perf/builtin-diff.c
@@ -1133,6 +1133,8 @@ static int data_init(int argc, const char **argv)
 
 int cmd_diff(int argc, const char **argv, const char *prefix __maybe_unused)
 {
+	perf_config(perf_default_config, NULL);
+
 	sort_order = diff__default_sort_order;
 	argc = parse_options(argc, argv, options, diff_usage, 0);
 
diff --git a/tools/perf/util/config.c b/tools/perf/util/config.c
index 3e0fdd369ccb..24519e14ac56 100644
--- a/tools/perf/util/config.c
+++ b/tools/perf/util/config.c
@@ -11,6 +11,7 @@
 #include "util.h"
 #include "cache.h"
 #include "exec_cmd.h"
+#include "util/hist.h"  /* perf_hist_config */
 
 #define MAXNAME (256)
 
@@ -355,6 +356,9 @@ int perf_default_config(const char *var, const char *value,
 	if (!prefixcmp(var, "core."))
 		return perf_default_core_config(var, value);
 
+	if (!prefixcmp(var, "hist."))
+		return perf_hist_config(var, value);
+
 	/* Add other config variables here. */
 	return 0;
 }
* Unmerged path tools/perf/util/hist.c
* Unmerged path tools/perf/util/hist.h
