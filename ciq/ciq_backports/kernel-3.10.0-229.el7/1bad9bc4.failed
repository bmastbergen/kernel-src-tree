dm cache: revert "remove remainder of distinct discard block size"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [md] dm-cache: revert "remove remainder of distinct discard block size" (Mike Snitzer) [1159001]
Rebuild_FUZZ: 98.48%
commit-author Joe Thornber <ejt@redhat.com>
commit 1bad9bc4ee899a108499e5eac6baafff018b4d0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/1bad9bc4.failed

This reverts commit 64ab346a360a4b15c28fb8531918d4a01f4eabd9 because we
actually do want to allow the discard blocksize to be larger than the
cache blocksize.  Further dm-cache discard changes will make this
possible.

	Signed-off-by: Joe Thornber <ejt@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 1bad9bc4ee899a108499e5eac6baafff018b4d0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-cache-metadata.c
#	drivers/md/dm-cache-target.c
diff --cc drivers/md/dm-cache-metadata.c
index d2899e7eb3aa,9fc616c2755e..000000000000
--- a/drivers/md/dm-cache-metadata.c
+++ b/drivers/md/dm-cache-metadata.c
@@@ -329,8 -329,8 +329,13 @@@ static int __write_initial_superblock(s
  	disk_super->hint_root = cpu_to_le64(cmd->hint_root);
  	disk_super->discard_root = cpu_to_le64(cmd->discard_root);
  	disk_super->discard_block_size = cpu_to_le64(cmd->discard_block_size);
++<<<<<<< HEAD
 +	disk_super->discard_nr_blocks = cpu_to_le64(from_oblock(cmd->discard_nr_blocks));
 +	disk_super->metadata_block_size = cpu_to_le32(DM_CACHE_METADATA_BLOCK_SIZE >> SECTOR_SHIFT);
++=======
+ 	disk_super->discard_nr_blocks = cpu_to_le64(from_dblock(cmd->discard_nr_blocks));
+ 	disk_super->metadata_block_size = cpu_to_le32(DM_CACHE_METADATA_BLOCK_SIZE);
++>>>>>>> 1bad9bc4ee89 (dm cache: revert "remove remainder of distinct discard block size")
  	disk_super->data_block_size = cpu_to_le32(cmd->data_block_size);
  	disk_super->cache_blocks = cpu_to_le32(0);
  
diff --cc drivers/md/dm-cache-target.c
index e75d70ec363a,ced7fd4adddb..000000000000
--- a/drivers/md/dm-cache-target.c
+++ b/drivers/md/dm-cache-target.c
@@@ -1294,15 -1317,15 +1311,21 @@@ static void process_flush_bio(struct ca
   */
  static void process_discard_bio(struct cache *cache, struct bio *bio)
  {
++<<<<<<< HEAD
 +	dm_block_t start_block = dm_sector_div_up(bio->bi_sector,
 +						  cache->sectors_per_block);
 +	dm_block_t end_block = bio->bi_sector + bio_sectors(bio);
++=======
+ 	dm_block_t start_block = dm_sector_div_up(bio->bi_iter.bi_sector,
+ 						  cache->discard_block_size);
+ 	dm_block_t end_block = bio_end_sector(bio);
++>>>>>>> 1bad9bc4ee89 (dm cache: revert "remove remainder of distinct discard block size")
  	dm_block_t b;
  
- 	end_block = block_div(end_block, cache->sectors_per_block);
+ 	end_block = block_div(end_block, cache->discard_block_size);
  
  	for (b = start_block; b < end_block; b++)
- 		set_discard(cache, to_oblock(b));
+ 		set_discard(cache, to_dblock(b));
  
  	bio_endio(bio, 0);
  }
diff --git a/drivers/md/dm-cache-block-types.h b/drivers/md/dm-cache-block-types.h
index aac0e2df06be..bed4ad4e1b7c 100644
--- a/drivers/md/dm-cache-block-types.h
+++ b/drivers/md/dm-cache-block-types.h
@@ -19,6 +19,7 @@
 
 typedef dm_block_t __bitwise__ dm_oblock_t;
 typedef uint32_t __bitwise__ dm_cblock_t;
+typedef dm_block_t __bitwise__ dm_dblock_t;
 
 static inline dm_oblock_t to_oblock(dm_block_t b)
 {
@@ -40,4 +41,14 @@ static inline uint32_t from_cblock(dm_cblock_t b)
 	return (__force uint32_t) b;
 }
 
+static inline dm_dblock_t to_dblock(dm_block_t b)
+{
+	return (__force dm_dblock_t) b;
+}
+
+static inline dm_block_t from_dblock(dm_dblock_t b)
+{
+	return (__force dm_block_t) b;
+}
+
 #endif /* DM_CACHE_BLOCK_TYPES_H */
* Unmerged path drivers/md/dm-cache-metadata.c
diff --git a/drivers/md/dm-cache-metadata.h b/drivers/md/dm-cache-metadata.h
index cd70a78623a3..f0fb1dd26524 100644
--- a/drivers/md/dm-cache-metadata.h
+++ b/drivers/md/dm-cache-metadata.h
@@ -72,14 +72,14 @@ dm_cblock_t dm_cache_size(struct dm_cache_metadata *cmd);
 
 int dm_cache_discard_bitset_resize(struct dm_cache_metadata *cmd,
 				   sector_t discard_block_size,
-				   dm_oblock_t new_nr_entries);
+				   dm_dblock_t new_nr_entries);
 
 typedef int (*load_discard_fn)(void *context, sector_t discard_block_size,
-			       dm_oblock_t dblock, bool discarded);
+			       dm_dblock_t dblock, bool discarded);
 int dm_cache_load_discards(struct dm_cache_metadata *cmd,
 			   load_discard_fn fn, void *context);
 
-int dm_cache_set_discard(struct dm_cache_metadata *cmd, dm_oblock_t dblock, bool discard);
+int dm_cache_set_discard(struct dm_cache_metadata *cmd, dm_dblock_t dblock, bool discard);
 
 int dm_cache_remove_mapping(struct dm_cache_metadata *cmd, dm_cblock_t cblock);
 int dm_cache_insert_mapping(struct dm_cache_metadata *cmd, dm_cblock_t cblock, dm_oblock_t oblock);
* Unmerged path drivers/md/dm-cache-target.c
