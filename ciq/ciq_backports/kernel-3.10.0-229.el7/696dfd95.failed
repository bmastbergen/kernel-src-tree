KVM: vmx: disable APIC virtualization in nested guests

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [virt] kvm/vmx: disable APIC virtualization in nested guests (Paolo Bonzini) [1116936]
Rebuild_FUZZ: 97.20%
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit 696dfd95ba9838327a7013e5988ff3ba60dcc8c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/696dfd95.failed

While running a nested guest, we should disable APIC virtualization
controls (virtualized APIC register accesses, virtual interrupt
delivery and posted interrupts), because we do not expose them to
the nested guest.

	Reported-by: Hu Yaohui <loki2441@gmail.com>
	Suggested-by: Abel Gordon <abel@stratoscale.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 696dfd95ba9838327a7013e5988ff3ba60dcc8c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx.c
diff --cc arch/x86/kvm/vmx.c
index af8c63a8e17b,138ceffc6377..000000000000
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@@ -7745,13 -7776,15 +7745,21 @@@ static void prepare_vmcs02(struct kvm_v
  
  	vmcs_write64(VMCS_LINK_POINTER, -1ull);
  
++<<<<<<< HEAD
 +	vmcs_write32(PIN_BASED_VM_EXEC_CONTROL,
 +		(vmcs_config.pin_based_exec_ctrl |
 +		 vmcs12->pin_based_vm_exec_control));
++=======
+ 	exec_control = vmcs12->pin_based_vm_exec_control;
+ 	exec_control |= vmcs_config.pin_based_exec_ctrl;
+ 	exec_control &= ~(PIN_BASED_VMX_PREEMPTION_TIMER |
+                           PIN_BASED_POSTED_INTR);
+ 	vmcs_write32(PIN_BASED_VM_EXEC_CONTROL, exec_control);
++>>>>>>> 696dfd95ba98 (KVM: vmx: disable APIC virtualization in nested guests)
  
 -	vmx->nested.preemption_timer_expired = false;
 -	if (nested_cpu_has_preemption_timer(vmcs12))
 -		vmx_start_preemption_timer(vcpu);
 +	if (vmcs12->pin_based_vm_exec_control & PIN_BASED_VMX_PREEMPTION_TIMER)
 +		vmcs_write32(VMX_PREEMPTION_TIMER_VALUE,
 +			     vmcs12->vmx_preemption_timer_value);
  
  	/*
  	 * Whether page-faults are trapped is determined by a combination of
* Unmerged path arch/x86/kvm/vmx.c
