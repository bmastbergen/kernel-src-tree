perf unwinding: Use the per-feature check flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/unwinding: Use the per-feature check flags (Jiri Olsa) [1133083]
Rebuild_FUZZ: 97.87%
commit-author Jean Pihet <jean.pihet@linaro.org>
commit 1448fef40af6079de38380c3a81bcf9994a1037d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/1448fef4.failed

Use the per-feature check flags for the unwinding feature in order to
correctly compile the test-all, libunwind and libunwind-debug-frame
feature checks.

Tested on x86_64, ARMv7 and ARMv8 with and without LIBUNWIND_DIR set in
'make -C tools/perf'

	Signed-off-by: Jean Pihet <jean.pihet@linaro.org>
	Acked-by: Ingo Molnar <mingo@kernel.org>
	Acked-by: Jiri Olsa <jolsa@redhat.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: linaro-kernel@lists.linaro.org
	Cc: patches@linaro.org
Link: http://lkml.kernel.org/r/1386678244-13535-3-git-send-email-jean.pihet@linaro.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1448fef40af6079de38380c3a81bcf9994a1037d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/config/Makefile
#	tools/perf/config/feature-checks/Makefile
diff --cc tools/perf/config/Makefile
index 374f88fe17c5,5a1f4df3c3a8..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -23,15 -23,45 +23,39 @@@ ifeq ($(ARCH),x86_64
    endif
    ifeq (${IS_X86_64}, 1)
      RAW_ARCH := x86_64
 -    CFLAGS += -DHAVE_ARCH_X86_64_SUPPORT
 +    CFLAGS += -DARCH_X86_64
      ARCH_INCLUDE = ../../arch/x86/lib/memcpy_64.S ../../arch/x86/lib/memset_64.S
 -    LIBUNWIND_LIBS = -lunwind -lunwind-x86_64
 -  else
 -    LIBUNWIND_LIBS = -lunwind -lunwind-x86
    endif
    NO_PERF_REGS := 0
 -endif
 -ifeq ($(ARCH),arm)
 -  NO_PERF_REGS := 0
 -  LIBUNWIND_LIBS = -lunwind -lunwind-arm
 +  LIBUNWIND_LIBS = -lunwind -lunwind-x86_64
  endif
  
+ ifeq ($(LIBUNWIND_LIBS),)
+   NO_LIBUNWIND := 1
+ else
+   #
+   # For linking with debug library, run like:
+   #
+   #   make DEBUG=1 LIBUNWIND_DIR=/opt/libunwind/
+   #
+   ifdef LIBUNWIND_DIR
+     LIBUNWIND_CFLAGS  = -I$(LIBUNWIND_DIR)/include
+     LIBUNWIND_LDFLAGS = -L$(LIBUNWIND_DIR)/lib
+   endif
+   LIBUNWIND_LDFLAGS += $(LIBUNWIND_LIBS)
+ 
+   # Set per-feature check compilation flags
+   FEATURE_CHECK_CFLAGS-libunwind = $(LIBUNWIND_CFLAGS)
+   FEATURE_CHECK_LDFLAGS-libunwind = $(LIBUNWIND_LDFLAGS)
+   FEATURE_CHECK_CFLAGS-libunwind-debug-frame = $(LIBUNWIND_CFLAGS)
+   FEATURE_CHECK_LDFLAGS-libunwind-debug-frame = $(LIBUNWIND_LDFLAGS)
+   #  and the flags for the test-all case
+   FEATURE_CHECK_CFLAGS-all += $(LIBUNWIND_CFLAGS)
+   FEATURE_CHECK_LDFLAGS-all += $(LIBUNWIND_LDFLAGS)
+ endif
+ 
  ifeq ($(NO_PERF_REGS),0)
 -  CFLAGS += -DHAVE_PERF_REGS_SUPPORT
 +  CFLAGS += -DHAVE_PERF_REGS
  endif
  
  ifeq ($(src-perf),)
@@@ -89,9 -119,14 +113,13 @@@ CFLAGS += -std=gnu9
  
  EXTLIBS = -lelf -lpthread -lrt -lm -ldl
  
 -ifneq ($(OUTPUT),)
 -  OUTPUT_FEATURES = $(OUTPUT)config/feature-checks/
 -  $(shell mkdir -p $(OUTPUT_FEATURES))
 -endif
 -
  feature_check = $(eval $(feature_check_code))
  define feature_check_code
++<<<<<<< HEAD
 +  feature-$(1) := $(shell $(MAKE) -C config/feature-checks test-$1 >/dev/null 2>/dev/null && echo 1 || echo 0)
++=======
+   feature-$(1) := $(shell $(MAKE) OUTPUT=$(OUTPUT_FEATURES) CFLAGS="$(EXTRA_CFLAGS) $(FEATURE_CHECK_CFLAGS-$(1))" LDFLAGS="$(LDFLAGS) $(FEATURE_CHECK_LDFLAGS-$(1))" -C config/feature-checks test-$1 >/dev/null 2>/dev/null && echo 1 || echo 0)
++>>>>>>> 1448fef40af6 (perf unwinding: Use the per-feature check flags)
  endef
  
  feature_set = $(eval $(feature_set_code))
@@@ -232,69 -304,56 +260,94 @@@ els
  endif # NO_LIBELF
  
  ifndef NO_LIBELF
 -  CFLAGS += -DHAVE_LIBELF_SUPPORT
 +CFLAGS += -DLIBELF_SUPPORT
 +FLAGS_LIBELF=$(CFLAGS) $(LDFLAGS) $(EXTLIBS)
 +ifeq ($(call try-cc,$(SOURCE_ELF_MMAP),$(FLAGS_LIBELF),-DLIBELF_MMAP),y)
 +  CFLAGS += -DLIBELF_MMAP
 +endif
 +ifeq ($(call try-cc,$(SOURCE_ELF_GETPHDRNUM),$(FLAGS_LIBELF),-DHAVE_ELF_GETPHDRNUM),y)
 +  CFLAGS += -DHAVE_ELF_GETPHDRNUM
 +endif
  
 -  ifeq ($(feature-libelf-mmap), 1)
 -    CFLAGS += -DHAVE_LIBELF_MMAP_SUPPORT
 -  endif
 +# include ARCH specific config
 +-include $(src-perf)/arch/$(ARCH)/Makefile
  
 -  ifeq ($(feature-libelf-getphdrnum), 1)
 -    CFLAGS += -DHAVE_ELF_GETPHDRNUM_SUPPORT
 -  endif
 +ifndef NO_DWARF
 +ifeq ($(origin PERF_HAVE_DWARF_REGS), undefined)
 +  msg := $(warning DWARF register mappings have not been defined for architecture $(ARCH), DWARF support disabled);
 +  NO_DWARF := 1
 +else
 +  CFLAGS += -DDWARF_SUPPORT $(LIBDW_CFLAGS)
 +  LDFLAGS += $(LIBDW_LDFLAGS)
 +  EXTLIBS += -lelf -ldw
 +endif # PERF_HAVE_DWARF_REGS
 +endif # NO_DWARF
  
 -  # include ARCH specific config
 -  -include $(src-perf)/arch/$(ARCH)/Makefile
 +endif # NO_LIBELF
  
 -  ifndef NO_DWARF
 -    ifeq ($(origin PERF_HAVE_DWARF_REGS), undefined)
 -      msg := $(warning DWARF register mappings have not been defined for architecture $(ARCH), DWARF support disabled);
 -      NO_DWARF := 1
 -    else
 -      CFLAGS += -DHAVE_DWARF_SUPPORT $(LIBDW_CFLAGS)
 -      LDFLAGS += $(LIBDW_LDFLAGS)
 -      EXTLIBS += -lelf -ldw
 -    endif # PERF_HAVE_DWARF_REGS
 -  endif # NO_DWARF
++<<<<<<< HEAD
 +ifndef NO_LIBELF
 +CFLAGS += -DLIBELF_SUPPORT
 +FLAGS_LIBELF=$(CFLAGS) $(LDFLAGS) $(EXTLIBS)
 +ifeq ($(call try-cc,$(SOURCE_ELF_MMAP),$(FLAGS_LIBELF),-DLIBELF_MMAP),y)
 +  CFLAGS += -DLIBELF_MMAP
 +endif # try-cc
  endif # NO_LIBELF
  
 +# There's only x86 (both 32 and 64) support for CFI unwind so far
 +ifneq ($(ARCH),x86)
 +  NO_LIBUNWIND := 1
 +endif
 +
 +ifndef NO_LIBUNWIND
 +  # for linking with debug library, run like:
 +  # make DEBUG=1 LIBUNWIND_DIR=/opt/libunwind/
 +  ifdef LIBUNWIND_DIR
 +    LIBUNWIND_CFLAGS  := -I$(LIBUNWIND_DIR)/include
 +    LIBUNWIND_LDFLAGS := -L$(LIBUNWIND_DIR)/lib
 +  endif
 +
 +  FLAGS_UNWIND=$(LIBUNWIND_CFLAGS) $(CFLAGS) $(LIBUNWIND_LDFLAGS) $(LDFLAGS) $(EXTLIBS) $(LIBUNWIND_LIBS)
 +  ifneq ($(call try-cc,$(SOURCE_LIBUNWIND),$(FLAGS_UNWIND),libunwind),y)
 +    msg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 0.99);
 +    NO_LIBUNWIND := 1
 +  endif
 +endif
 +
 +ifndef NO_LIBUNWIND
 +  CFLAGS += -DLIBUNWIND_SUPPORT
 +  EXTLIBS += $(LIBUNWIND_LIBS)
 +  CFLAGS += $(LIBUNWIND_CFLAGS)
 +  LDFLAGS += $(LIBUNWIND_LDFLAGS)
 +endif # NO_LIBUNWIND
++=======
+ ifndef NO_LIBUNWIND
+   ifneq ($(feature-libunwind), 1)
+     msg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 1.1);
+     NO_LIBUNWIND := 1
+   else
+     ifeq ($(ARCH),arm)
+       $(call feature_check,libunwind-debug-frame)
+       ifneq ($(feature-libunwind-debug-frame), 1)
+         msg := $(warning No debug_frame support found in libunwind);
+         CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME
+       endif
+     else
+       # non-ARM has no dwarf_find_debug_frame() function:
+       CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME
+     endif
+ 
+     CFLAGS += -DHAVE_LIBUNWIND_SUPPORT
+     EXTLIBS += $(LIBUNWIND_LIBS)
+     CFLAGS += $(LIBUNWIND_CFLAGS)
+     LDFLAGS += $(LIBUNWIND_LDFLAGS)
+   endif # ifneq ($(feature-libunwind), 1)
+ endif
++>>>>>>> 1448fef40af6 (perf unwinding: Use the per-feature check flags)
  
  ifndef NO_LIBAUDIT
 -  ifneq ($(feature-libaudit), 1)
 +  FLAGS_LIBAUDIT = $(CFLAGS) $(LDFLAGS) -laudit
 +  ifneq ($(call try-cc,$(SOURCE_LIBAUDIT),$(FLAGS_LIBAUDIT),libaudit),y)
      msg := $(warning No libaudit.h found, disables 'trace' tool, please install audit-libs-devel or libaudit-dev);
      NO_LIBAUDIT := 1
    else
diff --cc tools/perf/config/feature-checks/Makefile
index 5910d275aba0,bc86462e80a2..000000000000
--- a/tools/perf/config/feature-checks/Makefile
+++ b/tools/perf/config/feature-checks/Makefile
@@@ -15,12 -32,12 +15,20 @@@ CC := $(CC) -M
  
  all: $(FILES)
  
++<<<<<<< HEAD
 +BUILD = $(CC) -o $(OUTPUT)$@ $@.c
++=======
+ BUILD = $(CC) $(CFLAGS) -o $(OUTPUT)$@ $@.c $(LDFLAGS)
++>>>>>>> 1448fef40af6 (perf unwinding: Use the per-feature check flags)
  
  ###############################
  
  test-all:
++<<<<<<< HEAD
 +	$(BUILD) -Werror -fstack-protector -fstack-protector-all -Wvolatile-register-var -O2 -Werror -D_FORTIFY_SOURCE=2 -ldw -lelf -lnuma -lunwind -lunwind-x86_64 -lelf -laudit -I/usr/include/slang -lslang $(shell pkg-config --libs --cflags gtk+-2.0 2>/dev/null) $(FLAGS_PERL_EMBED) $(FLAGS_PYTHON_EMBED) -DPACKAGE='perf' -DPACKAGE=perf -lbfd -ldl
++=======
+ 	$(BUILD) -Werror -fstack-protector-all -O2 -Werror -D_FORTIFY_SOURCE=2 -ldw -lelf -lnuma -lelf -laudit -I/usr/include/slang -lslang $(shell pkg-config --libs --cflags gtk+-2.0 2>/dev/null) $(FLAGS_PERL_EMBED) $(FLAGS_PYTHON_EMBED) -DPACKAGE='"perf"' -lbfd -ldl
++>>>>>>> 1448fef40af6 (perf unwinding: Use the per-feature check flags)
  
  test-hello:
  	$(BUILD)
@@@ -52,7 -63,84 +60,82 @@@ test-dwarf
  test-libnuma:
  	$(BUILD) -lnuma
  
++<<<<<<< HEAD
 +-include *.d */*.d
++=======
+ test-libunwind:
+ 	$(BUILD) -lelf
+ 
+ test-libunwind-debug-frame:
+ 	$(BUILD) -lelf
+ 
+ test-libaudit:
+ 	$(BUILD) -laudit
+ 
+ test-libslang:
+ 	$(BUILD) -I/usr/include/slang -lslang
+ 
+ test-gtk2:
+ 	$(BUILD) $(shell pkg-config --libs --cflags gtk+-2.0 2>/dev/null)
+ 
+ test-gtk2-infobar:
+ 	$(BUILD) $(shell pkg-config --libs --cflags gtk+-2.0 2>/dev/null)
+ 
+ grep-libs  = $(filter -l%,$(1))
+ strip-libs = $(filter-out -l%,$(1))
+ 
+ PERL_EMBED_LDOPTS = $(shell perl -MExtUtils::Embed -e ldopts 2>/dev/null)
+ PERL_EMBED_LDFLAGS = $(call strip-libs,$(PERL_EMBED_LDOPTS))
+ PERL_EMBED_LIBADD = $(call grep-libs,$(PERL_EMBED_LDOPTS))
+ PERL_EMBED_CCOPTS = `perl -MExtUtils::Embed -e ccopts 2>/dev/null`
+ FLAGS_PERL_EMBED=$(PERL_EMBED_CCOPTS) $(PERL_EMBED_LDOPTS)
+ 
+ test-libperl:
+ 	$(BUILD) $(FLAGS_PERL_EMBED)
+ 
+ override PYTHON := python
+ override PYTHON_CONFIG := python-config
+ 
+ escape-for-shell-sq =  $(subst ','\'',$(1))
+ shell-sq = '$(escape-for-shell-sq)'
+ 
+ PYTHON_CONFIG_SQ = $(call shell-sq,$(PYTHON_CONFIG))
+ 
+ PYTHON_EMBED_LDOPTS = $(shell $(PYTHON_CONFIG_SQ) --ldflags 2>/dev/null)
+ PYTHON_EMBED_LDFLAGS = $(call strip-libs,$(PYTHON_EMBED_LDOPTS))
+ PYTHON_EMBED_LIBADD = $(call grep-libs,$(PYTHON_EMBED_LDOPTS))
+ PYTHON_EMBED_CCOPTS = $(shell $(PYTHON_CONFIG_SQ) --cflags 2>/dev/null)
+ FLAGS_PYTHON_EMBED = $(PYTHON_EMBED_CCOPTS) $(PYTHON_EMBED_LDOPTS)
+ 
+ test-libpython:
+ 	$(BUILD) $(FLAGS_PYTHON_EMBED)
+ 
+ test-libpython-version:
+ 	$(BUILD) $(FLAGS_PYTHON_EMBED)
+ 
+ test-libbfd:
+ 	$(BUILD) -DPACKAGE='"perf"' -lbfd -ldl
+ 
+ test-liberty:
+ 	$(CC) -o $(OUTPUT)$@ test-libbfd.c -DPACKAGE='"perf"' -lbfd -ldl -liberty
+ 
+ test-liberty-z:
+ 	$(CC) -o $(OUTPUT)$@ test-libbfd.c -DPACKAGE='"perf"' -lbfd -ldl -liberty -lz
+ 
+ test-cplus-demangle:
+ 	$(BUILD) -liberty
+ 
+ test-on-exit:
+ 	$(BUILD)
+ 
+ test-backtrace:
+ 	$(BUILD)
+ 
+ test-timerfd:
+ 	$(BUILD)
+ 
+ -include *.d
++>>>>>>> 1448fef40af6 (perf unwinding: Use the per-feature check flags)
  
  ###############################
  
* Unmerged path tools/perf/config/Makefile
* Unmerged path tools/perf/config/feature-checks/Makefile
