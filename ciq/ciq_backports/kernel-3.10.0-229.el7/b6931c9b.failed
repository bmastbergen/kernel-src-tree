enic: fix possible deadlock in enic_stop/ enic_rfs_flw_tbl_free

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Govindarajulu Varadarajan <_govind@gmx.com>
commit b6931c9ba728d60c542c39ff037fe6f595c074a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/b6931c9b.failed

The following warning is shown when spinlock debug is enabled.

This occurs when enic_flow_may_expire timer function is running and
enic_stop is called on same CPU.

Fix this by using spink_lock_bh().

=================================
[ INFO: inconsistent lock state ]
3.17.0-netnext-05504-g59f35b8 #268 Not tainted
---------------------------------
inconsistent {IN-SOFTIRQ-W} -> {SOFTIRQ-ON-W} usage.
ifconfig/443 [HC0[0]:SC0[0]:HE1:SE1] takes:
 (&(&enic->rfs_h.lock)->rlock){+.?...}, at:
enic_rfs_flw_tbl_free+0x34/0xd0 [enic]
{IN-SOFTIRQ-W} state was registered at:
  [<ffffffff810a25af>] __lock_acquire+0x83f/0x21c0
  [<ffffffff810a45f2>] lock_acquire+0xa2/0xd0
  [<ffffffff814913fc>] _raw_spin_lock+0x3c/0x80
  [<ffffffffa029c3d5>] enic_flow_may_expire+0x25/0x130[enic]
  [<ffffffff810bcd07>] call_timer_fn+0x77/0x100
  [<ffffffff810bd8e3>] run_timer_softirq+0x1e3/0x270
  [<ffffffff8105f9ae>] __do_softirq+0x14e/0x280
  [<ffffffff8105fdae>] irq_exit+0x8e/0xb0
  [<ffffffff8103da0f>] smp_apic_timer_interrupt+0x3f/0x50
  [<ffffffff81493742>] apic_timer_interrupt+0x72/0x80
  [<ffffffff81018143>] default_idle+0x13/0x20
  [<ffffffff81018a6a>] arch_cpu_idle+0xa/0x10
  [<ffffffff81097676>] cpu_startup_entry+0x2c6/0x330
  [<ffffffff8103b7ad>] start_secondary+0x21d/0x290
irq event stamp: 2997
hardirqs last  enabled at (2997): [<ffffffff81491865>] _raw_spin_unlock_irqrestore+0x65/0x90
hardirqs last disabled at (2996): [<ffffffff814915e6>] _raw_spin_lock_irqsave+0x26/0x90
softirqs last  enabled at (2968): [<ffffffff813b57a3>] dev_deactivate_many+0x213/0x260
softirqs last disabled at (2966): [<ffffffff813b5783>] dev_deactivate_many+0x1f3/0x260

other info that might help us debug this:
 Possible unsafe locking scenario:

       CPU0
       ----
  lock(&(&enic->rfs_h.lock)->rlock);
  <Interrupt>
    lock(&(&enic->rfs_h.lock)->rlock);

 *** DEADLOCK ***

	Reported-by: Jan Stancek <jstancek@redhat.com>
	Signed-off-by: Govindarajulu Varadarajan <_govind@gmx.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b6931c9ba728d60c542c39ff037fe6f595c074a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cisco/enic/enic_clsf.c
diff --cc drivers/net/ethernet/cisco/enic/enic_clsf.c
index 4dbdcfb81638,0be6850be8a2..000000000000
--- a/drivers/net/ethernet/cisco/enic/enic_clsf.c
+++ b/drivers/net/ethernet/cisco/enic/enic_clsf.c
@@@ -65,6 -65,62 +65,65 @@@ int enic_delfltr(struct enic *enic, u1
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ /* enic_rfs_flw_tbl_init - initialize enic->rfs_h members
+  *	@enic: enic data
+  */
+ void enic_rfs_flw_tbl_init(struct enic *enic)
+ {
+ 	int i;
+ 
+ 	spin_lock_init(&enic->rfs_h.lock);
+ 	for (i = 0; i <= ENIC_RFS_FLW_MASK; i++)
+ 		INIT_HLIST_HEAD(&enic->rfs_h.ht_head[i]);
+ 	enic->rfs_h.max = enic->config.num_arfs;
+ 	enic->rfs_h.free = enic->rfs_h.max;
+ 	enic->rfs_h.toclean = 0;
+ 	enic_rfs_timer_start(enic);
+ }
+ 
+ void enic_rfs_flw_tbl_free(struct enic *enic)
+ {
+ 	int i;
+ 
+ 	enic_rfs_timer_stop(enic);
+ 	spin_lock_bh(&enic->rfs_h.lock);
+ 	enic->rfs_h.free = 0;
+ 	for (i = 0; i < (1 << ENIC_RFS_FLW_BITSHIFT); i++) {
+ 		struct hlist_head *hhead;
+ 		struct hlist_node *tmp;
+ 		struct enic_rfs_fltr_node *n;
+ 
+ 		hhead = &enic->rfs_h.ht_head[i];
+ 		hlist_for_each_entry_safe(n, tmp, hhead, node) {
+ 			enic_delfltr(enic, n->fltr_id);
+ 			hlist_del(&n->node);
+ 			kfree(n);
+ 		}
+ 	}
+ 	spin_unlock_bh(&enic->rfs_h.lock);
+ }
+ 
+ struct enic_rfs_fltr_node *htbl_fltr_search(struct enic *enic, u16 fltr_id)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < (1 << ENIC_RFS_FLW_BITSHIFT); i++) {
+ 		struct hlist_head *hhead;
+ 		struct hlist_node *tmp;
+ 		struct enic_rfs_fltr_node *n;
+ 
+ 		hhead = &enic->rfs_h.ht_head[i];
+ 		hlist_for_each_entry_safe(n, tmp, hhead, node)
+ 			if (n->fltr_id == fltr_id)
+ 				return n;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
++>>>>>>> b6931c9ba728 (enic: fix possible deadlock in enic_stop/ enic_rfs_flw_tbl_free)
  #ifdef CONFIG_RFS_ACCEL
  void enic_flow_may_expire(unsigned long data)
  {
* Unmerged path drivers/net/ethernet/cisco/enic/enic_clsf.c
