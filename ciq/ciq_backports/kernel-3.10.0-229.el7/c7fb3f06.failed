SUNRPC: svc_tcp_write_space: don't clear SOCK_NOSPACE prematurely

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [fs] sunrpc: svc_tcp_write_space: don't clear SOCK_NOSPACE prematurely ("J. Bruce Fields") [1044798 1123721 1141932]
Rebuild_FUZZ: 99.24%
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit c7fb3f0631b8d66b90e0642a95b948febb3f3cee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/c7fb3f06.failed

If requests are queued in the socket inbuffer waiting for an
svc_tcp_has_wspace() requirement to be satisfied, then we do not want
to clear the SOCK_NOSPACE flag until we've satisfied that requirement.

	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit c7fb3f0631b8d66b90e0642a95b948febb3f3cee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/svcsock.c
diff --cc net/sunrpc/svcsock.c
index 2cfe7d45e1e7,88db211d4264..000000000000
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@@ -446,11 -446,31 +446,35 @@@ static void svc_write_space(struct soc
  	}
  }
  
+ static int svc_tcp_has_wspace(struct svc_xprt *xprt)
+ {
+ 	struct svc_sock *svsk =	container_of(xprt, struct svc_sock, sk_xprt);
+ 	struct svc_serv *serv = svsk->sk_xprt.xpt_server;
+ 	int required;
+ 
+ 	if (test_bit(XPT_LISTENER, &xprt->xpt_flags))
+ 		return 1;
+ 	required = atomic_read(&xprt->xpt_reserved) + serv->sv_max_mesg;
+ 	if (sk_stream_wspace(svsk->sk_sk) >= required ||
+ 	    (sk_stream_min_wspace(svsk->sk_sk) == 0 &&
+ 	     atomic_read(&xprt->xpt_reserved) == 0))
+ 		return 1;
+ 	set_bit(SOCK_NOSPACE, &svsk->sk_sock->flags);
+ 	return 0;
+ }
+ 
  static void svc_tcp_write_space(struct sock *sk)
  {
+ 	struct svc_sock *svsk = (struct svc_sock *)(sk->sk_user_data);
  	struct socket *sock = sk->sk_socket;
  
++<<<<<<< HEAD
 +	if (sk_stream_wspace(sk) >= sk_stream_min_wspace(sk) && sock)
++=======
+ 	if (!sk_stream_is_writeable(sk) || !sock)
+ 		return;
+ 	if (!svsk || svc_tcp_has_wspace(&svsk->sk_xprt))
++>>>>>>> c7fb3f0631b8 (SUNRPC: svc_tcp_write_space: don't clear SOCK_NOSPACE prematurely)
  		clear_bit(SOCK_NOSPACE, &sock->flags);
  	svc_write_space(sk);
  }
* Unmerged path net/sunrpc/svcsock.c
