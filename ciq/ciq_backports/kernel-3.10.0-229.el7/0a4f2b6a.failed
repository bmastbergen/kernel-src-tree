perf tools: Setup default dwarf post unwinder

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Setup default dwarf post unwinder (Jiri Olsa) [1134356]
Rebuild_FUZZ: 92.86%
commit-author Jiri Olsa <jolsa@redhat.com>
commit 0a4f2b6a3ba5066947a8cbd7cfa26fb8a9280625
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0a4f2b6a.failed

Factor NO_LIBDW_DWARF_UNWIND makefile variable and code that selects
default DWARf post unwinder based on detected features (libdw and
libunwind support)

If both are detected the libunwind is selected as default.  Simple
'make' will try to add:

  - libunwind unwinder if present
  - libdw unwinder if present
  - disable dwarf unwind if non of libunwind and libdw
    libraries are present

If one of the DWARF unwind libraries is detected, message is displayed
which one (libunwind/libdw) is compiled in.

Examples:
  - compile in libdw unwinder if present:

    $ make NO_LIBUNWIND=1

  - compile in libdw (with libdw installation directory) unwinder if present:

    $ make LIBDW_DIR=/opt/elfutils/ NO_LIBUNWIND=1
      BUILD:   Doing 'make -j4' parallel build

    Auto-detecting system features:
    ...                         dwarf: [ on  ]
    ...                         glibc: [ on  ]
    ...                          gtk2: [ on  ]
    ...                      libaudit: [ on  ]
    ...                        libbfd: [ on  ]
    ...                        libelf: [ on  ]
    ...                       libnuma: [ on  ]
    ...                       libperl: [ on  ]
    ...                     libpython: [ on  ]
    ...                      libslang: [ on  ]
    ...                     libunwind: [ on  ]
    ...            libdw-dwarf-unwind: [ on  ]
    ...     DWARF post unwind library: libdw

  - disable post dwarf unwind completely:

    $ make NO_LIBUNWIND=1 NO_LIBDW_DWARF_UNWIND=1
      BUILD:   Doing 'make -j4' parallel build

    Auto-detecting system features:
    ...                         dwarf: [ on  ]
    ...                         glibc: [ on  ]
    ...                          gtk2: [ on  ]
    ...                      libaudit: [ on  ]
    ...                        libbfd: [ on  ]
    ...                        libelf: [ on  ]
    ...                       libnuma: [ on  ]
    ...                       libperl: [ on  ]
    ...                     libpython: [ on  ]
    ...                      libslang: [ on  ]
    ...                     libunwind: [ on  ]
    ...            libdw-dwarf-unwind: [ on  ]
    ...     DWARF post unwind library: libunwind

	Signed-off-by: Jiri Olsa <jolsa@redhat.com>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jean Pihet <jean.pihet@linaro.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1392825179-5228-6-git-send-email-jolsa@redhat.com
[ Add suggestion about setting LIBDW_DIR when not finding libdw ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0a4f2b6a3ba5066947a8cbd7cfa26fb8a9280625)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
#	tools/perf/arch/x86/Makefile
#	tools/perf/config/Makefile
diff --cc tools/perf/Makefile.perf
index d61a8858cf15,1f7ec48ac959..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -411,6 -409,11 +408,14 @@@ endi
  LIB_OBJS += $(OUTPUT)tests/code-reading.o
  LIB_OBJS += $(OUTPUT)tests/sample-parsing.o
  LIB_OBJS += $(OUTPUT)tests/parse-no-sample-id-all.o
++<<<<<<< HEAD
++=======
+ ifndef NO_DWARF_UNWIND
+ ifeq ($(ARCH),x86)
+ LIB_OBJS += $(OUTPUT)tests/dwarf-unwind.o
+ endif
+ endif
++>>>>>>> 0a4f2b6a3ba5 (perf tools: Setup default dwarf post unwinder)
  
  BUILTIN_OBJS += $(OUTPUT)builtin-annotate.o
  BUILTIN_OBJS += $(OUTPUT)builtin-bench.o
diff --cc tools/perf/arch/x86/Makefile
index a56b3eaa3dfe,1641542e3636..000000000000
--- a/tools/perf/arch/x86/Makefile
+++ b/tools/perf/arch/x86/Makefile
@@@ -3,7 -3,7 +3,11 @@@ PERF_HAVE_DWARF_REGS := 
  LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/dwarf-regs.o
  endif
  ifndef NO_LIBUNWIND
++<<<<<<< HEAD
 +LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/unwind.o
++=======
+ LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/unwind-libunwind.o
++>>>>>>> 0a4f2b6a3ba5 (perf tools: Setup default dwarf post unwinder)
  endif
  ifndef NO_LIBDW_DWARF_UNWIND
  LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/unwind-libdw.o
diff --cc tools/perf/config/Makefile
index d9a8a953dbaa,f7c81d3e2422..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -102,20 -130,75 +102,42 @@@ ende
  #
  # Build the feature check binaries in parallel, ignore errors, ignore return value and suppress output:
  #
 +$(info )
 +$(info Auto-detecting system features:)
  
 -#
 -# Note that this is not a complete list of all feature tests, just
 -# those that are typically built on a fully configured system.
 -#
 -# [ Feature tests not mentioned here have to be built explicitly in
 -#   the rule that uses them - an example for that is the 'bionic'
 -#   feature check. ]
 -#
 -CORE_FEATURE_TESTS =			\
 -	backtrace			\
 -	dwarf				\
 -	fortify-source			\
 -	glibc				\
 -	gtk2				\
 -	gtk2-infobar			\
 -	libaudit			\
 -	libbfd				\
 -	libelf				\
 -	libelf-getphdrnum		\
 -	libelf-mmap			\
 -	libnuma				\
 -	libperl				\
 -	libpython			\
 -	libpython-version		\
 -	libslang			\
 -	libunwind			\
 -	on-exit				\
 +FEATURE_TESTS =				\
 +	hello				\
  	stackprotector-all		\
++<<<<<<< HEAD
 +	stackprotector			\
 +	volatile-register-var		\
++=======
+ 	timerfd				\
+ 	libdw-dwarf-unwind
+ 
+ LIB_FEATURE_TESTS =			\
+ 	dwarf				\
+ 	glibc				\
+ 	gtk2				\
+ 	libaudit			\
+ 	libbfd				\
+ 	libelf				\
+ 	libnuma				\
+ 	libperl				\
+ 	libpython			\
+ 	libslang			\
+ 	libunwind			\
+ 	libdw-dwarf-unwind
+ 
+ VF_FEATURE_TESTS =			\
+ 	backtrace			\
++>>>>>>> 0a4f2b6a3ba5 (perf tools: Setup default dwarf post unwinder)
  	fortify-source			\
 -	gtk2-infobar			\
 -	libelf-getphdrnum		\
 -	libelf-mmap			\
 -	libpython-version		\
 -	on-exit				\
 -	stackprotector-all		\
 -	timerfd				\
 -	libunwind-debug-frame		\
 -	bionic
 -
 -# Set FEATURE_CHECK_(C|LD)FLAGS-all for all CORE_FEATURE_TESTS features.
 -# If in the future we need per-feature checks/flags for features not
 -# mentioned in this list we need to refactor this ;-).
 -set_test_all_flags = $(eval $(set_test_all_flags_code))
 -define set_test_all_flags_code
 -  FEATURE_CHECK_CFLAGS-all  += $(FEATURE_CHECK_CFLAGS-$(1))
 -  FEATURE_CHECK_LDFLAGS-all += $(FEATURE_CHECK_LDFLAGS-$(1))
 -endef
 -
 -$(foreach feat,$(CORE_FEATURE_TESTS),$(call set_test_all_flags,$(feat)))
 +	bionic				\
 +	libelf				\
 +	glibc				\
 +	dwarf				\
 +	libnuma
  
  #
  # Special fast-path for the 'all features are available' case:
@@@ -218,13 -282,12 +240,22 @@@ els
        msg := $(error No gnu/libc-version.h found, please install glibc-dev[el]/glibc-static);
      endif
    else
++<<<<<<< HEAD
 +    # for linking with debug library, run like:
 +    # make DEBUG=1 LIBDW_DIR=/opt/libdw/
 +    ifdef LIBDW_DIR
 +      LIBDW_CFLAGS  := -I$(LIBDW_DIR)/include
 +      LIBDW_LDFLAGS := -L$(LIBDW_DIR)/lib
 +    endif
 +
++=======
+     ifndef NO_LIBDW_DWARF_UNWIND
+       ifneq ($(feature-libdw-dwarf-unwind),1)
+         NO_LIBDW_DWARF_UNWIND := 1
+         msg := $(warning No libdw DWARF unwind found, Please install elfutils-devel/libdw-dev >= 0.158 and/or set LIBDW_DIR);
+       endif
+     endif
++>>>>>>> 0a4f2b6a3ba5 (perf tools: Setup default dwarf post unwinder)
      ifneq ($(feature-dwarf), 1)
        msg := $(warning No libdw.h found or old libdw.h found or elfutils is older than 0.138, disables dwarf support. Please install new elfutils-devel/libdw-dev);
        NO_DWARF := 1
@@@ -233,69 -296,82 +264,144 @@@
  endif # NO_LIBELF
  
  ifndef NO_LIBELF
++<<<<<<< HEAD
 +CFLAGS += -DLIBELF_SUPPORT
 +FLAGS_LIBELF=$(CFLAGS) $(LDFLAGS) $(EXTLIBS)
 +ifeq ($(call try-cc,$(SOURCE_ELF_MMAP),$(FLAGS_LIBELF),-DLIBELF_MMAP),y)
 +  CFLAGS += -DLIBELF_MMAP
 +endif
 +ifeq ($(call try-cc,$(SOURCE_ELF_GETPHDRNUM),$(FLAGS_LIBELF),-DHAVE_ELF_GETPHDRNUM),y)
 +  CFLAGS += -DHAVE_ELF_GETPHDRNUM
++=======
+   CFLAGS += -DHAVE_LIBELF_SUPPORT
+ 
+   ifeq ($(feature-libelf-mmap), 1)
+     CFLAGS += -DHAVE_LIBELF_MMAP_SUPPORT
+   endif
+ 
+   ifeq ($(feature-libelf-getphdrnum), 1)
+     CFLAGS += -DHAVE_ELF_GETPHDRNUM_SUPPORT
+   endif
+ 
+   # include ARCH specific config
+   -include $(src-perf)/arch/$(ARCH)/Makefile
+ 
+   ifndef NO_DWARF
+     ifeq ($(origin PERF_HAVE_DWARF_REGS), undefined)
+       msg := $(warning DWARF register mappings have not been defined for architecture $(ARCH), DWARF support disabled);
+       NO_DWARF := 1
+     else
+       CFLAGS += -DHAVE_DWARF_SUPPORT $(LIBDW_CFLAGS)
+       LDFLAGS += $(LIBDW_LDFLAGS)
+       EXTLIBS += -lelf -ldw
+     endif # PERF_HAVE_DWARF_REGS
+   endif # NO_DWARF
+ endif # NO_LIBELF
+ 
+ ifndef NO_LIBUNWIND
+   ifneq ($(feature-libunwind), 1)
+     msg := $(warning No libunwind found. Please install libunwind-dev[el] >= 1.1 and/or set LIBUNWIND_DIR);
+     NO_LIBUNWIND := 1
+   endif
+ endif
+ 
+ dwarf-post-unwind := 1
+ dwarf-post-unwind-text := BUG
+ 
+ # setup DWARF post unwinder
+ ifdef NO_LIBUNWIND
+   ifdef NO_LIBDW_DWARF_UNWIND
+     msg := $(warning Disabling post unwind, no support found.);
+     dwarf-post-unwind := 0
+   else
+     dwarf-post-unwind-text := libdw
+   endif
+ else
+   dwarf-post-unwind-text := libunwind
+   # Enable libunwind support by default.
+   ifndef NO_LIBDW_DWARF_UNWIND
+     NO_LIBDW_DWARF_UNWIND := 1
+   endif
+ endif
+ 
+ ifeq ($(dwarf-post-unwind),1)
+   CFLAGS += -DHAVE_DWARF_UNWIND_SUPPORT
+ else
+   NO_DWARF_UNWIND := 1
+ endif
+ 
+ ifndef NO_LIBUNWIND
+   ifeq ($(ARCH),arm)
+     $(call feature_check,libunwind-debug-frame)
+     ifneq ($(feature-libunwind-debug-frame), 1)
+       msg := $(warning No debug_frame support found in libunwind);
+       CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME
+     endif
+   else
+     # non-ARM has no dwarf_find_debug_frame() function:
+     CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME
+   endif
+   CFLAGS  += -DHAVE_LIBUNWIND_SUPPORT
+   EXTLIBS += $(LIBUNWIND_LIBS)
+   CFLAGS  += $(LIBUNWIND_CFLAGS)
+   LDFLAGS += $(LIBUNWIND_LDFLAGS)
++>>>>>>> 0a4f2b6a3ba5 (perf tools: Setup default dwarf post unwinder)
  endif
  
 +# include ARCH specific config
 +-include $(src-perf)/arch/$(ARCH)/Makefile
 +
 +ifndef NO_DWARF
 +ifeq ($(origin PERF_HAVE_DWARF_REGS), undefined)
 +  msg := $(warning DWARF register mappings have not been defined for architecture $(ARCH), DWARF support disabled);
 +  NO_DWARF := 1
 +else
 +  CFLAGS += -DDWARF_SUPPORT $(LIBDW_CFLAGS)
 +  LDFLAGS += $(LIBDW_LDFLAGS)
 +  EXTLIBS += -lelf -ldw
 +endif # PERF_HAVE_DWARF_REGS
 +endif # NO_DWARF
 +
 +endif # NO_LIBELF
 +
 +ifndef NO_LIBELF
 +CFLAGS += -DLIBELF_SUPPORT
 +FLAGS_LIBELF=$(CFLAGS) $(LDFLAGS) $(EXTLIBS)
 +ifeq ($(call try-cc,$(SOURCE_ELF_MMAP),$(FLAGS_LIBELF),-DLIBELF_MMAP),y)
 +  CFLAGS += -DLIBELF_MMAP
 +endif # try-cc
 +endif # NO_LIBELF
 +
 +# There's only x86 (both 32 and 64) support for CFI unwind so far
 +ifneq ($(ARCH),x86)
 +  NO_LIBUNWIND := 1
 +endif
 +
 +ifndef NO_LIBUNWIND
 +  # for linking with debug library, run like:
 +  # make DEBUG=1 LIBUNWIND_DIR=/opt/libunwind/
 +  ifdef LIBUNWIND_DIR
 +    LIBUNWIND_CFLAGS  := -I$(LIBUNWIND_DIR)/include
 +    LIBUNWIND_LDFLAGS := -L$(LIBUNWIND_DIR)/lib
 +  endif
 +
 +  FLAGS_UNWIND=$(LIBUNWIND_CFLAGS) $(CFLAGS) $(LIBUNWIND_LDFLAGS) $(LDFLAGS) $(EXTLIBS) $(LIBUNWIND_LIBS)
 +  ifneq ($(call try-cc,$(SOURCE_LIBUNWIND),$(FLAGS_UNWIND),libunwind),y)
 +    msg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 0.99);
 +    NO_LIBUNWIND := 1
 +  endif
 +endif
 +
 +ifndef NO_LIBUNWIND
 +  CFLAGS += -DLIBUNWIND_SUPPORT
 +  EXTLIBS += $(LIBUNWIND_LIBS)
 +  CFLAGS += $(LIBUNWIND_CFLAGS)
 +  LDFLAGS += $(LIBUNWIND_LDFLAGS)
 +endif # NO_LIBUNWIND
 +
  ifndef NO_LIBAUDIT
 -  ifneq ($(feature-libaudit), 1)
 +  FLAGS_LIBAUDIT = $(CFLAGS) $(LDFLAGS) -laudit
 +  ifneq ($(call try-cc,$(SOURCE_LIBAUDIT),$(FLAGS_LIBAUDIT),libaudit),y)
      msg := $(warning No libaudit.h found, disables 'trace' tool, please install audit-libs-devel or libaudit-dev);
      NO_LIBAUDIT := 1
    else
@@@ -540,3 -619,92 +646,95 @@@ els
  perfexec_instdir = $(prefix)/$(perfexecdir)
  endif
  perfexec_instdir_SQ = $(subst ','\'',$(perfexec_instdir))
++<<<<<<< HEAD
++=======
+ 
+ # If we install to $(HOME) we keep the traceevent default:
+ # $(HOME)/.traceevent/plugins
+ # Otherwise we install plugins into the global $(libdir).
+ ifdef DESTDIR
+ plugindir=$(libdir)/traceevent/plugins
+ plugindir_SQ= $(subst ','\'',$(plugindir))
+ endif
+ 
+ #
+ # Print the result of the feature test:
+ #
+ feature_print_status = $(eval $(feature_print_status_code)) $(info $(MSG))
+ 
+ define feature_print_status_code
+   ifeq ($(feature-$(1)), 1)
+     MSG = $(shell printf '...%30s: [ \033[32mon\033[m  ]' $(1))
+   else
+     MSG = $(shell printf '...%30s: [ \033[31mOFF\033[m ]' $(1))
+   endif
+ endef
+ 
+ feature_print_var = $(eval $(feature_print_var_code)) $(info $(MSG))
+ define feature_print_var_code
+     MSG = $(shell printf '...%30s: %s' $(1) $($(1)))
+ endef
+ 
+ feature_print_text = $(eval $(feature_print_text_code)) $(info $(MSG))
+ define feature_print_text_code
+     MSG = $(shell printf '...%30s: %s' $(1) $(2))
+ endef
+ 
+ PERF_FEATURES := $(foreach feat,$(LIB_FEATURE_TESTS),feature-$(feat)($(feature-$(feat))))
+ PERF_FEATURES_FILE := $(shell touch $(OUTPUT)PERF-FEATURES; cat $(OUTPUT)PERF-FEATURES)
+ 
+ ifeq ($(dwarf-post-unwind),1)
+   PERF_FEATURES += dwarf-post-unwind($(dwarf-post-unwind-text))
+ endif
+ 
+ # The $(display_lib) controls the default detection message
+ # output. It's set if:
+ # - detected features differes from stored features from
+ #   last build (in PERF-FEATURES file)
+ # - one of the $(LIB_FEATURE_TESTS) is not detected
+ # - VF is enabled
+ 
+ ifneq ("$(PERF_FEATURES)","$(PERF_FEATURES_FILE)")
+   $(shell echo "$(PERF_FEATURES)" > $(OUTPUT)PERF-FEATURES)
+   display_lib := 1
+ endif
+ 
+ feature_check = $(eval $(feature_check_code))
+ define feature_check_code
+   ifneq ($(feature-$(1)), 1)
+     display_lib := 1
+   endif
+ endef
+ 
+ $(foreach feat,$(LIB_FEATURE_TESTS),$(call feature_check,$(feat)))
+ 
+ ifeq ($(VF),1)
+   display_lib := 1
+   display_vf := 1
+ endif
+ 
+ ifeq ($(display_lib),1)
+   $(info )
+   $(info Auto-detecting system features:)
+   $(foreach feat,$(LIB_FEATURE_TESTS),$(call feature_print_status,$(feat),))
+ 
+   ifeq ($(dwarf-post-unwind),1)
+     $(call feature_print_text,"DWARF post unwind library", $(dwarf-post-unwind-text))
+   endif
+ endif
+ 
+ ifeq ($(display_vf),1)
+   $(foreach feat,$(VF_FEATURE_TESTS),$(call feature_print_status,$(feat),))
+   $(info )
+   $(call feature_print_var,prefix)
+   $(call feature_print_var,bindir)
+   $(call feature_print_var,libdir)
+   $(call feature_print_var,sysconfdir)
+   $(call feature_print_var,LIBUNWIND_DIR)
+   $(call feature_print_var,LIBDW_DIR)
+ endif
+ 
+ ifeq ($(display_lib),1)
+   $(info )
+ endif
++>>>>>>> 0a4f2b6a3ba5 (perf tools: Setup default dwarf post unwinder)
* Unmerged path tools/perf/Makefile.perf
* Unmerged path tools/perf/arch/x86/Makefile
* Unmerged path tools/perf/config/Makefile
