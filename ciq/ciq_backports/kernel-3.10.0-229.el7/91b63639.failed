blk-mq: bidi support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 91b63639c7d59dbf86da5311faff43691dcae832
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/91b63639.failed

Add two unlinkely branches to make sure the resid is initialized correctly
for bidi request pairs, and the second request gets properly freed.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 91b63639c7d59dbf86da5311faff43691dcae832)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 9a84bbb2459d,963a82109386..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -286,20 -274,47 +286,26 @@@ void blk_mq_free_request(struct reques
  	__blk_mq_free_request(hctx, ctx, rq);
  }
  
 -/*
 - * Clone all relevant state from a request that has been put on hold in
 - * the flush state machine into the preallocated flush request that hangs
 - * off the request queue.
 - *
 - * For a driver the flush request should be invisible, that's why we are
 - * impersonating the original request here.
 - */
 -void blk_mq_clone_flush_request(struct request *flush_rq,
 -		struct request *orig_rq)
 +bool blk_mq_end_io_partial(struct request *rq, int error, unsigned int nr_bytes)
  {
 -	struct blk_mq_hw_ctx *hctx =
 -		orig_rq->q->mq_ops->map_queue(orig_rq->q, orig_rq->mq_ctx->cpu);
 -
 -	flush_rq->mq_ctx = orig_rq->mq_ctx;
 -	flush_rq->tag = orig_rq->tag;
 -	memcpy(blk_mq_rq_to_pdu(flush_rq), blk_mq_rq_to_pdu(orig_rq),
 -		hctx->cmd_size);
 -}
 +	if (blk_update_request(rq, error, blk_rq_bytes(rq)))
 +		return true;
  
 -inline void __blk_mq_end_io(struct request *rq, int error)
 -{
  	blk_account_io_done(rq);
  
- 	if (rq->end_io)
+ 	if (rq->end_io) {
  		rq->end_io(rq, error);
- 	else
+ 	} else {
+ 		if (unlikely(blk_bidi_rq(rq)))
+ 			blk_mq_free_request(rq->next_rq);
  		blk_mq_free_request(rq);
++<<<<<<< HEAD
 +	return false;
++=======
+ 	}
++>>>>>>> 91b63639c7d5 (blk-mq: bidi support)
  }
 -EXPORT_SYMBOL(__blk_mq_end_io);
 -
 -void blk_mq_end_io(struct request *rq, int error)
 -{
 -	if (blk_update_request(rq, error, blk_rq_bytes(rq)))
 -		BUG();
 -	__blk_mq_end_io(rq, error);
 -}
 -EXPORT_SYMBOL(blk_mq_end_io);
 +EXPORT_SYMBOL(blk_mq_end_io_partial);
  
  static void __blk_mq_complete_request_remote(void *data)
  {
* Unmerged path block/blk-mq.c
