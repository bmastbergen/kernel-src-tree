bna: Support TSO and partial checksum with non-accelerated vlans.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [ethernet] bna: Support TSO and partial checksum with non-accelerated vlans (Ivan Vecera) [1136912]
Rebuild_FUZZ: 99.22%
commit-author Vlad Yasevich <vyasevich@gmail.com>
commit 1c53730a04fb651e35af0a12bd35f6a00481f53c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/1c53730a.failed

This device claims TSO and checksum support for vlans.  It also
allows a user to control vlan acceleration offloading.  As such,
it is possible to turn off vlan acceleration and configure a vlan
which will continue to support TSO.

In such situation the packet passed down the the device will contain
a vlan header and skb->protocol will be set to ETH_P_8021Q.
The device assumes that skb->protocol contains network protocol
value and uses that value to set up TSO information.  This results
in corrupted frames sent on the wire.

This patch extract the protocol value correctly and corrects TSO
and checksums for non-accelerated traffic.

CC: Rasesh Mody <rmody@brocade.com>
	Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1c53730a04fb651e35af0a12bd35f6a00481f53c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/brocade/bna/bnad.c
diff --cc drivers/net/ethernet/brocade/bna/bnad.c
index d08a4eb49a35,ffc92a41d75b..000000000000
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@@ -2872,13 -2870,13 +2872,21 @@@ bnad_txq_wi_prepare(struct bnad *bnad, 
  		}
  
  		if (skb->ip_summed == CHECKSUM_PARTIAL) {
+ 			__be16 net_proto = vlan_get_protocol(skb);
  			u8 proto = 0;
  
++<<<<<<< HEAD
 +			if (skb->protocol == __constant_htons(ETH_P_IP))
 +				proto = ip_hdr(skb)->protocol;
 +#ifdef NETIF_F_IPV6_CSUM
 +			else if (skb->protocol ==
 +				 __constant_htons(ETH_P_IPV6)) {
++=======
+ 			if (net_proto == htons(ETH_P_IP))
+ 				proto = ip_hdr(skb)->protocol;
+ #ifdef NETIF_F_IPV6_CSUM
+ 			else if (net_proto == htons(ETH_P_IPV6)) {
++>>>>>>> 1c53730a04fb (bna: Support TSO and partial checksum with non-accelerated vlans.)
  				/* nexthdr may not be TCP immediately. */
  				proto = ipv6_hdr(skb)->nexthdr;
  			}
* Unmerged path drivers/net/ethernet/brocade/bna/bnad.c
