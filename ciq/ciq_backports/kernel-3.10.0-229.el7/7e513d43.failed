rbd: enable extended devt in single-major mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Ilya Dryomov <ilya.dryomov@inktank.com>
commit 7e513d43669a0505ee3b122344176147a674bcbf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/7e513d43.failed

If single-major device number allocation scheme is turned on, instead
of reserving 256 minors per device, which imposes a limit of 4096
images mapped at once, reserve 16 minors per device and enable extended
devt feature.  This results in a theoretical limit of 65536 images
mapped at once, and still allows to have more than 15 partititions:
partitions starting with 16th are mapped under major 259 (Block
Extended Major):

$ rbd showmapped
id pool image snap device
0  rbd  b5    -    /dev/rbd0    # no partitions
1  rbd  b2    -    /dev/rbd1    # 40 partitions
2  rbd  b3    -    /dev/rbd2    #  2 partitions

$ cat /proc/partitions
 251        0       1024 rbd0
 251       16       1024 rbd1
 251       17          0 rbd1p1
 251       18          0 rbd1p2
 ...
 251       30          0 rbd1p14
 251       31          0 rbd1p15
 259        0          0 rbd1p16
 259        1          0 rbd1p17
 ...
 259       23          0 rbd1p39
 259       24          0 rbd1p40
 251       32       1024 rbd2
 251       33          0 rbd2p1
 251       34          0 rbd2p2

(major 251 was assigned dynamically at module load time)

	Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
	Reviewed-by: Josh Durgin <josh.durgin@inktank.com>
(cherry picked from commit 7e513d43669a0505ee3b122344176147a674bcbf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/rbd.c
diff --cc drivers/block/rbd.c
index d5c35879051c,11ae4c1238a6..000000000000
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@@ -91,7 -91,8 +91,12 @@@ static int atomic_dec_return_safe(atomi
  
  #define RBD_DRV_NAME "rbd"
  
++<<<<<<< HEAD
 +#define RBD_MINORS_PER_MAJOR	256		/* max minors per blkdev */
++=======
+ #define RBD_MINORS_PER_MAJOR		256
+ #define RBD_SINGLE_MAJOR_PART_SHIFT	4
++>>>>>>> 7e513d43669a (rbd: enable extended devt in single-major mode)
  
  #define RBD_SNAP_DEV_NAME_PREFIX	"snap_"
  #define RBD_MAX_SNAP_NAME_LEN	\
@@@ -400,15 -410,53 +405,39 @@@ static ssize_t rbd_remove(struct bus_ty
  static int rbd_dev_image_probe(struct rbd_device *rbd_dev, bool mapping);
  static void rbd_spec_put(struct rbd_spec *spec);
  
++<<<<<<< HEAD
 +static struct bus_attribute rbd_bus_attrs[] = {
 +	__ATTR(add, S_IWUSR, NULL, rbd_add),
 +	__ATTR(remove, S_IWUSR, NULL, rbd_remove),
 +	__ATTR_NULL
++=======
+ static int rbd_dev_id_to_minor(int dev_id)
+ {
+ 	return dev_id << RBD_SINGLE_MAJOR_PART_SHIFT;
+ }
+ 
+ static int minor_to_rbd_dev_id(int minor)
+ {
+ 	return minor >> RBD_SINGLE_MAJOR_PART_SHIFT;
+ }
+ 
+ static BUS_ATTR(add, S_IWUSR, NULL, rbd_add);
+ static BUS_ATTR(remove, S_IWUSR, NULL, rbd_remove);
+ static BUS_ATTR(add_single_major, S_IWUSR, NULL, rbd_add_single_major);
+ static BUS_ATTR(remove_single_major, S_IWUSR, NULL, rbd_remove_single_major);
+ 
+ static struct attribute *rbd_bus_attrs[] = {
+ 	&bus_attr_add.attr,
+ 	&bus_attr_remove.attr,
+ 	&bus_attr_add_single_major.attr,
+ 	&bus_attr_remove_single_major.attr,
+ 	NULL,
++>>>>>>> 7e513d43669a (rbd: enable extended devt in single-major mode)
  };
  
 -static umode_t rbd_bus_is_visible(struct kobject *kobj,
 -				  struct attribute *attr, int index)
 -{
 -	if (!single_major &&
 -	    (attr == &bus_attr_add_single_major.attr ||
 -	     attr == &bus_attr_remove_single_major.attr))
 -		return 0;
 -
 -	return attr->mode;
 -}
 -
 -static const struct attribute_group rbd_bus_group = {
 -	.attrs = rbd_bus_attrs,
 -	.is_visible = rbd_bus_is_visible,
 -};
 -__ATTRIBUTE_GROUPS(rbd_bus);
 -
  static struct bus_type rbd_bus_type = {
  	.name		= "rbd",
 -	.bus_groups	= rbd_bus_groups,
 +	.bus_attrs	= rbd_bus_attrs,
  };
  
  static void rbd_root_dev_release(struct device *dev)
@@@ -3387,7 -3435,9 +3416,13 @@@ static int rbd_init_disk(struct rbd_dev
  	u64 segment_size;
  
  	/* create gendisk info */
++<<<<<<< HEAD
 +	disk = alloc_disk(RBD_MINORS_PER_MAJOR);
++=======
+ 	disk = alloc_disk(single_major ?
+ 			  (1 << RBD_SINGLE_MAJOR_PART_SHIFT) :
+ 			  RBD_MINORS_PER_MAJOR);
++>>>>>>> 7e513d43669a (rbd: enable extended devt in single-major mode)
  	if (!disk)
  		return -ENOMEM;
  
* Unmerged path drivers/block/rbd.c
