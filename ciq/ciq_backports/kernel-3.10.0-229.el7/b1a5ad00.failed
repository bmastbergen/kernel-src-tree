IB/isert: Adjust CQ size to HW limits

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [IB] isert: Adjust CQ size to HW limits (Andy Grover) [1166314]
Rebuild_FUZZ: 95.77%
commit-author Chris Moore <Chris.Moore@Emulex.Com>
commit b1a5ad006b34ded9dc7ec64988deba1b3ecad367
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/b1a5ad00.failed

isert has an issue of trying to create a CQ with more CQEs than are
supported by the hardware, that currently results in failures during
isert_device creation during first session login.

This is the isert version of the patch that Minh Tran submitted for
iser, and is simple a workaround required to function with existing
ocrdma hardware.

	Signed-off-by: Chris Moore <chris.moore@emulex.com>
Reviewied-by: Sagi Grimberg <sagig@mellanox.com>
	Cc: <stable@vger.kernel.org> # 3.10+
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit b1a5ad006b34ded9dc7ec64988deba1b3ecad367)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/isert/ib_isert.c
diff --cc drivers/infiniband/ulp/isert/ib_isert.c
index ec71464a2b6f,10641b7816f4..000000000000
--- a/drivers/infiniband/ulp/isert/ib_isert.c
+++ b/drivers/infiniband/ulp/isert/ib_isert.c
@@@ -213,8 -226,34 +213,36 @@@ isert_create_device_ib_res(struct isert
  {
  	struct ib_device *ib_dev = device->ib_device;
  	struct isert_cq_desc *cq_desc;
 -	struct ib_device_attr *dev_attr;
  	int ret = 0, i, j;
+ 	int max_rx_cqe, max_tx_cqe;
  
++<<<<<<< HEAD
++=======
+ 	dev_attr = &device->dev_attr;
+ 	ret = isert_query_device(ib_dev, dev_attr);
+ 	if (ret)
+ 		return ret;
+ 
+ 	max_rx_cqe = min(ISER_MAX_RX_CQ_LEN, dev_attr->max_cqe);
+ 	max_tx_cqe = min(ISER_MAX_TX_CQ_LEN, dev_attr->max_cqe);
+ 
+ 	/* asign function handlers */
+ 	if (dev_attr->device_cap_flags & IB_DEVICE_MEM_MGT_EXTENSIONS &&
+ 	    dev_attr->device_cap_flags & IB_DEVICE_SIGNATURE_HANDOVER) {
+ 		device->use_fastreg = 1;
+ 		device->reg_rdma_mem = isert_reg_rdma;
+ 		device->unreg_rdma_mem = isert_unreg_rdma;
+ 	} else {
+ 		device->use_fastreg = 0;
+ 		device->reg_rdma_mem = isert_map_rdma;
+ 		device->unreg_rdma_mem = isert_unmap_cmd;
+ 	}
+ 
+ 	/* Check signature cap */
+ 	device->pi_capable = dev_attr->device_cap_flags &
+ 			     IB_DEVICE_SIGNATURE_HANDOVER ? true : false;
+ 
++>>>>>>> b1a5ad006b34 (IB/isert: Adjust CQ size to HW limits)
  	device->cqs_used = min_t(int, num_online_cpus(),
  				 device->ib_device->num_comp_vectors);
  	device->cqs_used = min(ISERT_MAX_CQ, device->cqs_used);
* Unmerged path drivers/infiniband/ulp/isert/ib_isert.c
