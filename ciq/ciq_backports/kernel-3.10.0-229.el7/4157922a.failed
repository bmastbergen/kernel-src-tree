perf bench: Change the procps visible command-name of invididual benchmark tests plus cleanups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/bench: Change the procps visible command-name of invididual benchmark tests plus cleanups (Jiri Olsa) [1131394]
Rebuild_FUZZ: 98.94%
commit-author Ingo Molnar <mingo@kernel.org>
commit 4157922a9070aef6a516573111fb1c0c67b891ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/4157922a.failed

Before this patch, looking at 'perf bench sched pipe' behavior over
'top' only told us that something related to perf is running:

      PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
    19934 mingo     20   0 54836 1296  952 R 18.6  0.0   0:00.56 perf
    19935 mingo     20   0 54836  384   36 S 18.6  0.0   0:00.56 perf

After the patch it's clearly visible what's going on:

      PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
    19744 mingo     20   0  125m 3536 2644 R 68.2  0.0   0:01.12 sched-pipe
    19745 mingo     20   0  125m 1172  276 R 68.2  0.0   0:01.12 sched-pipe

The benchmark-subsystem name is concatenated with the individual
testcase name.

Unfortunately 'perf top' does not show the reconfigured name, possibly
because it caches ->comm[] values and does not recognize changes to
them?

Also clean up a few bits in builtin-bench.c while at it and reorganize
the code and the output strings to be consistent.

Use iterators to access the various arrays. Rename 'suites' concept to
'benchmark collection' and the 'bench_suite' to 'benchmark/bench'. The
many repetitions of 'suite' made the code harder to read and understand.

The new output is:

  comet:~/tip/tools/perf> ./perf bench
  Usage:
        perf bench [<common options>] <collection> <benchmark> [<options>]

        # List of all available benchmark collections:

         sched: Scheduler and IPC benchmarks
           mem: Memory access benchmarks
          numa: NUMA scheduling and MM benchmarks
           all: All benchmarks

  comet:~/tip/tools/perf> ./perf bench sched

        # List of available benchmarks for collection 'sched':

     messaging: Benchmark for scheduling and IPC
          pipe: Benchmark for pipe() between two processes
           all: Test all scheduler benchmarks

  comet:~/tip/tools/perf> ./perf bench mem

        # List of available benchmarks for collection 'mem':

        memcpy: Benchmark for memcpy()
        memset: Benchmark for memset() tests
           all: Test all memory benchmarks

  comet:~/tip/tools/perf> ./perf bench numa

        # List of available benchmarks for collection 'numa':

           mem: Benchmark for NUMA workloads
           all: Test all NUMA benchmarks

Individual benchmark modules were not touched.

	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Hitoshi Mitake <h.mitake@gmail.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Namhyung Kim <namhyung.kim@lge.com>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/20131023123756.GA17871@gmail.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 4157922a9070aef6a516573111fb1c0c67b891ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-bench.c
diff --cc tools/perf/builtin-bench.c
index 77298bf892b8,e47f90cc7b98..000000000000
--- a/tools/perf/builtin-bench.c
+++ b/tools/perf/builtin-bench.c
@@@ -25,94 -22,72 +22,92 @@@
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
+ #include <sys/prctl.h>
+ 
+ typedef int (*bench_fn_t)(int argc, const char **argv, const char *prefix);
  
- struct bench_suite {
- 	const char *name;
- 	const char *summary;
- 	int (*fn)(int, const char **, const char *);
+ struct bench {
+ 	const char	*name;
+ 	const char	*summary;
+ 	bench_fn_t	fn;
  };
- 						\
- /* sentinel: easy for help */
- #define suite_all { "all", "Test all benchmark suites", NULL }
  
++<<<<<<< HEAD
 +#ifdef LIBNUMA_SUPPORT
 +static struct bench_suite numa_suites[] = {
 +	{ "mem",
 +	  "Benchmark for NUMA workloads",
 +	  bench_numa },
 +	suite_all,
 +	{ NULL,
 +	  NULL,
 +	  NULL                  }
++=======
+ #ifdef HAVE_LIBNUMA_SUPPORT
+ static struct bench numa_benchmarks[] = {
+ 	{ "mem",	"Benchmark for NUMA workloads",			bench_numa		},
+ 	{ "all",	"Test all NUMA benchmarks",			NULL			},
+ 	{ NULL,		NULL,						NULL			}
++>>>>>>> 4157922a9070 (perf bench: Change the procps visible command-name of invididual benchmark tests plus cleanups)
  };
  #endif
  
- static struct bench_suite sched_suites[] = {
- 	{ "messaging",
- 	  "Benchmark for scheduler and IPC mechanisms",
- 	  bench_sched_messaging },
- 	{ "pipe",
- 	  "Flood of communication over pipe() between two processes",
- 	  bench_sched_pipe      },
- 	suite_all,
- 	{ NULL,
- 	  NULL,
- 	  NULL                  }
+ static struct bench sched_benchmarks[] = {
+ 	{ "messaging",	"Benchmark for scheduling and IPC",		bench_sched_messaging	},
+ 	{ "pipe",	"Benchmark for pipe() between two processes",	bench_sched_pipe	},
+ 	{ "all",	"Test all scheduler benchmarks",		NULL			},
+ 	{ NULL,		NULL,						NULL			}
  };
  
- static struct bench_suite mem_suites[] = {
- 	{ "memcpy",
- 	  "Simple memory copy in various ways",
- 	  bench_mem_memcpy },
- 	{ "memset",
- 	  "Simple memory set in various ways",
- 	  bench_mem_memset },
- 	suite_all,
- 	{ NULL,
- 	  NULL,
- 	  NULL             }
+ static struct bench mem_benchmarks[] = {
+ 	{ "memcpy",	"Benchmark for memcpy()",			bench_mem_memcpy	},
+ 	{ "memset",	"Benchmark for memset() tests",			bench_mem_memset	},
+ 	{ "all",	"Test all memory benchmarks",			NULL			},
+ 	{ NULL,		NULL,						NULL			}
  };
  
- struct bench_subsys {
- 	const char *name;
- 	const char *summary;
- 	struct bench_suite *suites;
+ struct collection {
+ 	const char	*name;
+ 	const char	*summary;
+ 	struct bench	*benchmarks;
  };
  
++<<<<<<< HEAD
 +static struct bench_subsys subsystems[] = {
 +#ifdef LIBNUMA_SUPPORT
 +	{ "numa",
 +	  "NUMA scheduling and MM behavior",
 +	  numa_suites },
++=======
+ static struct collection collections[] = {
+ 	{ "sched",	"Scheduler and IPC benchmarks",		sched_benchmarks	},
+ 	{ "mem",	"Memory access benchmarks",			mem_benchmarks		},
+ #ifdef HAVE_LIBNUMA_SUPPORT
+ 	{ "numa",	"NUMA scheduling and MM benchmarks",		numa_benchmarks		},
++>>>>>>> 4157922a9070 (perf bench: Change the procps visible command-name of invididual benchmark tests plus cleanups)
  #endif
- 	{ "sched",
- 	  "scheduler and IPC mechanism",
- 	  sched_suites },
- 	{ "mem",
- 	  "memory access performance",
- 	  mem_suites },
- 	{ "all",		/* sentinel: easy for help */
- 	  "all benchmark subsystem",
- 	  NULL },
- 	{ NULL,
- 	  NULL,
- 	  NULL       }
+ 	{ "all",	"All benchmarks",				NULL			},
+ 	{ NULL,		NULL,						NULL			}
  };
  
- static void dump_suites(int subsys_index)
+ /* Iterate over all benchmark collections: */
+ #define for_each_collection(coll) \
+ 	for (coll = collections; coll->name; coll++)
+ 
+ /* Iterate over all benchmarks within a collection: */
+ #define for_each_bench(coll, bench) \
+ 	for (bench = coll->benchmarks; bench->name; bench++)
+ 
+ static void dump_benchmarks(struct collection *coll)
  {
- 	int i;
+ 	struct bench *bench;
  
- 	printf("# List of available suites for %s...\n\n",
- 	       subsystems[subsys_index].name);
+ 	printf("\n        # List of available benchmarks for collection '%s':\n\n", coll->name);
  
- 	for (i = 0; subsystems[subsys_index].suites[i].name; i++)
- 		printf("%14s: %s\n",
- 		       subsystems[subsys_index].suites[i].name,
- 		       subsystems[subsys_index].suites[i].summary);
+ 	for_each_bench(coll, bench)
+ 		printf("%14s: %s\n", bench->name, bench->summary);
  
  	printf("\n");
- 	return;
  }
  
  static const char *bench_format_str;
* Unmerged path tools/perf/builtin-bench.c
