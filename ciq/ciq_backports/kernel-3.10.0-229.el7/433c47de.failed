i40e/i40evf: Add Flow director stats to PF stats

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Anjali Singhai Jain <anjali.singhai@intel.com>
commit 433c47de1368cf07a7cb8d9148a4d36d824b89f8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/433c47de.failed

Add members to stat struct to keep track of Flow director ATR and
SideBand filter packet matches.

Change-ID: Ibbb31a53c7adcc2bb96991dd80565442a2f2513c
	Signed-off-by: Anjali Singhai Jain <anjali.singhai@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 433c47de1368cf07a7cb8d9148a4d36d824b89f8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 9b1504e4ce0a,06e0a5226ce1..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -835,180 -816,224 +835,395 @@@ void i40e_update_stats(struct i40e_vsi 
  	ons->tx_dropped = oes->tx_discards;
  	ns->tx_dropped = es->tx_discards;
  
 -	/* pull in a couple PF stats if this is the main vsi */
 +	/* Get the port data only if this is the main PF VSI */
  	if (vsi == pf->vsi[pf->lan_vsi]) {
 -		ns->rx_crc_errors = pf->stats.crc_errors;
 -		ns->rx_errors = pf->stats.crc_errors + pf->stats.illegal_bytes;
 -		ns->rx_length_errors = pf->stats.rx_length_errors;
 +		struct i40e_hw_port_stats *nsd = &pf->stats;
 +		struct i40e_hw_port_stats *osd = &pf->stats_offsets;
 +
 +		i40e_stat_update48(hw, I40E_GLPRT_GORCH(hw->port),
 +				   I40E_GLPRT_GORCL(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.rx_bytes, &nsd->eth.rx_bytes);
 +		i40e_stat_update48(hw, I40E_GLPRT_GOTCH(hw->port),
 +				   I40E_GLPRT_GOTCL(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.tx_bytes, &nsd->eth.tx_bytes);
 +		i40e_stat_update32(hw, I40E_GLPRT_RDPC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.rx_discards,
 +				   &nsd->eth.rx_discards);
 +		i40e_stat_update32(hw, I40E_GLPRT_TDPC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.tx_discards,
 +				   &nsd->eth.tx_discards);
 +		i40e_stat_update48(hw, I40E_GLPRT_MPRCH(hw->port),
 +				   I40E_GLPRT_MPRCL(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.rx_multicast,
 +				   &nsd->eth.rx_multicast);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_TDOLD(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_dropped_link_down,
 +				   &nsd->tx_dropped_link_down);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_CRCERRS(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->crc_errors, &nsd->crc_errors);
 +		ns->rx_crc_errors = nsd->crc_errors;
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_ILLERRC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->illegal_bytes, &nsd->illegal_bytes);
 +		ns->rx_errors = nsd->crc_errors
 +				+ nsd->illegal_bytes;
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_MLFC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->mac_local_faults,
 +				   &nsd->mac_local_faults);
 +		i40e_stat_update32(hw, I40E_GLPRT_MRFC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->mac_remote_faults,
 +				   &nsd->mac_remote_faults);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_RLEC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_length_errors,
 +				   &nsd->rx_length_errors);
 +		ns->rx_length_errors = nsd->rx_length_errors;
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_LXONRXC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->link_xon_rx, &nsd->link_xon_rx);
 +		i40e_stat_update32(hw, I40E_GLPRT_LXONTXC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->link_xon_tx, &nsd->link_xon_tx);
 +		i40e_update_prio_xoff_rx(pf);  /* handles I40E_GLPRT_LXOFFRXC */
 +		i40e_stat_update32(hw, I40E_GLPRT_LXOFFTXC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->link_xoff_tx, &nsd->link_xoff_tx);
 +
 +		for (i = 0; i < 8; i++) {
 +			i40e_stat_update32(hw, I40E_GLPRT_PXONRXC(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xon_rx[i],
 +					   &nsd->priority_xon_rx[i]);
 +			i40e_stat_update32(hw, I40E_GLPRT_PXONTXC(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xon_tx[i],
 +					   &nsd->priority_xon_tx[i]);
 +			i40e_stat_update32(hw, I40E_GLPRT_PXOFFTXC(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xoff_tx[i],
 +					   &nsd->priority_xoff_tx[i]);
 +			i40e_stat_update32(hw,
 +					   I40E_GLPRT_RXON2OFFCNT(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xon_2_xoff[i],
 +					   &nsd->priority_xon_2_xoff[i]);
 +		}
 +
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC64H(hw->port),
 +				   I40E_GLPRT_PRC64L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_64, &nsd->rx_size_64);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC127H(hw->port),
 +				   I40E_GLPRT_PRC127L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_127, &nsd->rx_size_127);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC255H(hw->port),
 +				   I40E_GLPRT_PRC255L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_255, &nsd->rx_size_255);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC511H(hw->port),
 +				   I40E_GLPRT_PRC511L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_511, &nsd->rx_size_511);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC1023H(hw->port),
 +				   I40E_GLPRT_PRC1023L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_1023, &nsd->rx_size_1023);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC1522H(hw->port),
 +				   I40E_GLPRT_PRC1522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_1522, &nsd->rx_size_1522);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC9522H(hw->port),
 +				   I40E_GLPRT_PRC9522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_big, &nsd->rx_size_big);
 +
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC64H(hw->port),
 +				   I40E_GLPRT_PTC64L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_64, &nsd->tx_size_64);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC127H(hw->port),
 +				   I40E_GLPRT_PTC127L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_127, &nsd->tx_size_127);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC255H(hw->port),
 +				   I40E_GLPRT_PTC255L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_255, &nsd->tx_size_255);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC511H(hw->port),
 +				   I40E_GLPRT_PTC511L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_511, &nsd->tx_size_511);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC1023H(hw->port),
 +				   I40E_GLPRT_PTC1023L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_1023, &nsd->tx_size_1023);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC1522H(hw->port),
 +				   I40E_GLPRT_PTC1522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_1522, &nsd->tx_size_1522);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC9522H(hw->port),
 +				   I40E_GLPRT_PTC9522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_big, &nsd->tx_size_big);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_RUC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_undersize, &nsd->rx_undersize);
 +		i40e_stat_update32(hw, I40E_GLPRT_RFC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_fragments, &nsd->rx_fragments);
 +		i40e_stat_update32(hw, I40E_GLPRT_ROC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_oversize, &nsd->rx_oversize);
 +		i40e_stat_update32(hw, I40E_GLPRT_RJC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_jabber, &nsd->rx_jabber);
 +
 +		val = rd32(hw, I40E_PRTPM_EEE_STAT);
 +		nsd->tx_lpi_status =
 +			       (val & I40E_PRTPM_EEE_STAT_TX_LPI_STATUS_MASK) >>
 +				I40E_PRTPM_EEE_STAT_TX_LPI_STATUS_SHIFT;
 +		nsd->rx_lpi_status =
 +			       (val & I40E_PRTPM_EEE_STAT_RX_LPI_STATUS_MASK) >>
 +				I40E_PRTPM_EEE_STAT_RX_LPI_STATUS_SHIFT;
 +		i40e_stat_update32(hw, I40E_PRTPM_TLPIC,
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_lpi_count, &nsd->tx_lpi_count);
 +		i40e_stat_update32(hw, I40E_PRTPM_RLPIC,
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_lpi_count, &nsd->rx_lpi_count);
  	}
++<<<<<<< HEAD
++=======
+ }
+ 
+ /**
+  * i40e_update_pf_stats - Update the pf statistics counters.
+  * @pf: the PF to be updated
+  **/
+ static void i40e_update_pf_stats(struct i40e_pf *pf)
+ {
+ 	struct i40e_hw_port_stats *osd = &pf->stats_offsets;
+ 	struct i40e_hw_port_stats *nsd = &pf->stats;
+ 	struct i40e_hw *hw = &pf->hw;
+ 	u32 val;
+ 	int i;
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_GORCH(hw->port),
+ 			   I40E_GLPRT_GORCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_bytes, &nsd->eth.rx_bytes);
+ 	i40e_stat_update48(hw, I40E_GLPRT_GOTCH(hw->port),
+ 			   I40E_GLPRT_GOTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_bytes, &nsd->eth.tx_bytes);
+ 	i40e_stat_update32(hw, I40E_GLPRT_RDPC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_discards,
+ 			   &nsd->eth.rx_discards);
+ 	i40e_stat_update32(hw, I40E_GLPRT_TDPC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_discards,
+ 			   &nsd->eth.tx_discards);
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_UPRCH(hw->port),
+ 			   I40E_GLPRT_UPRCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_unicast,
+ 			   &nsd->eth.rx_unicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_MPRCH(hw->port),
+ 			   I40E_GLPRT_MPRCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_multicast,
+ 			   &nsd->eth.rx_multicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_BPRCH(hw->port),
+ 			   I40E_GLPRT_BPRCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_broadcast,
+ 			   &nsd->eth.rx_broadcast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_UPTCH(hw->port),
+ 			   I40E_GLPRT_UPTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_unicast,
+ 			   &nsd->eth.tx_unicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_MPTCH(hw->port),
+ 			   I40E_GLPRT_MPTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_multicast,
+ 			   &nsd->eth.tx_multicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_BPTCH(hw->port),
+ 			   I40E_GLPRT_BPTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_broadcast,
+ 			   &nsd->eth.tx_broadcast);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_TDOLD(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_dropped_link_down,
+ 			   &nsd->tx_dropped_link_down);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_CRCERRS(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->crc_errors, &nsd->crc_errors);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_ILLERRC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->illegal_bytes, &nsd->illegal_bytes);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_MLFC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->mac_local_faults,
+ 			   &nsd->mac_local_faults);
+ 	i40e_stat_update32(hw, I40E_GLPRT_MRFC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->mac_remote_faults,
+ 			   &nsd->mac_remote_faults);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_RLEC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_length_errors,
+ 			   &nsd->rx_length_errors);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_LXONRXC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->link_xon_rx, &nsd->link_xon_rx);
+ 	i40e_stat_update32(hw, I40E_GLPRT_LXONTXC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->link_xon_tx, &nsd->link_xon_tx);
+ 	i40e_update_prio_xoff_rx(pf);  /* handles I40E_GLPRT_LXOFFRXC */
+ 	i40e_stat_update32(hw, I40E_GLPRT_LXOFFTXC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->link_xoff_tx, &nsd->link_xoff_tx);
+ 
+ 	for (i = 0; i < 8; i++) {
+ 		i40e_stat_update32(hw, I40E_GLPRT_PXONRXC(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xon_rx[i],
+ 				   &nsd->priority_xon_rx[i]);
+ 		i40e_stat_update32(hw, I40E_GLPRT_PXONTXC(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xon_tx[i],
+ 				   &nsd->priority_xon_tx[i]);
+ 		i40e_stat_update32(hw, I40E_GLPRT_PXOFFTXC(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xoff_tx[i],
+ 				   &nsd->priority_xoff_tx[i]);
+ 		i40e_stat_update32(hw,
+ 				   I40E_GLPRT_RXON2OFFCNT(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xon_2_xoff[i],
+ 				   &nsd->priority_xon_2_xoff[i]);
+ 	}
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC64H(hw->port),
+ 			   I40E_GLPRT_PRC64L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_64, &nsd->rx_size_64);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC127H(hw->port),
+ 			   I40E_GLPRT_PRC127L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_127, &nsd->rx_size_127);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC255H(hw->port),
+ 			   I40E_GLPRT_PRC255L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_255, &nsd->rx_size_255);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC511H(hw->port),
+ 			   I40E_GLPRT_PRC511L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_511, &nsd->rx_size_511);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC1023H(hw->port),
+ 			   I40E_GLPRT_PRC1023L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_1023, &nsd->rx_size_1023);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC1522H(hw->port),
+ 			   I40E_GLPRT_PRC1522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_1522, &nsd->rx_size_1522);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC9522H(hw->port),
+ 			   I40E_GLPRT_PRC9522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_big, &nsd->rx_size_big);
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC64H(hw->port),
+ 			   I40E_GLPRT_PTC64L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_64, &nsd->tx_size_64);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC127H(hw->port),
+ 			   I40E_GLPRT_PTC127L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_127, &nsd->tx_size_127);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC255H(hw->port),
+ 			   I40E_GLPRT_PTC255L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_255, &nsd->tx_size_255);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC511H(hw->port),
+ 			   I40E_GLPRT_PTC511L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_511, &nsd->tx_size_511);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC1023H(hw->port),
+ 			   I40E_GLPRT_PTC1023L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_1023, &nsd->tx_size_1023);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC1522H(hw->port),
+ 			   I40E_GLPRT_PTC1522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_1522, &nsd->tx_size_1522);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC9522H(hw->port),
+ 			   I40E_GLPRT_PTC9522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_big, &nsd->tx_size_big);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_RUC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_undersize, &nsd->rx_undersize);
+ 	i40e_stat_update32(hw, I40E_GLPRT_RFC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_fragments, &nsd->rx_fragments);
+ 	i40e_stat_update32(hw, I40E_GLPRT_ROC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_oversize, &nsd->rx_oversize);
+ 	i40e_stat_update32(hw, I40E_GLPRT_RJC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_jabber, &nsd->rx_jabber);
+ 
+ 	/* FDIR stats */
+ 	i40e_stat_update32(hw, I40E_GLQF_PCNT(pf->fd_atr_cnt_idx),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->fd_atr_match, &nsd->fd_atr_match);
+ 	i40e_stat_update32(hw, I40E_GLQF_PCNT(pf->fd_sb_cnt_idx),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->fd_sb_match, &nsd->fd_sb_match);
+ 
+ 	val = rd32(hw, I40E_PRTPM_EEE_STAT);
+ 	nsd->tx_lpi_status =
+ 		       (val & I40E_PRTPM_EEE_STAT_TX_LPI_STATUS_MASK) >>
+ 			I40E_PRTPM_EEE_STAT_TX_LPI_STATUS_SHIFT;
+ 	nsd->rx_lpi_status =
+ 		       (val & I40E_PRTPM_EEE_STAT_RX_LPI_STATUS_MASK) >>
+ 			I40E_PRTPM_EEE_STAT_RX_LPI_STATUS_SHIFT;
+ 	i40e_stat_update32(hw, I40E_PRTPM_TLPIC,
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_lpi_count, &nsd->tx_lpi_count);
+ 	i40e_stat_update32(hw, I40E_PRTPM_RLPIC,
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_lpi_count, &nsd->rx_lpi_count);
++>>>>>>> 433c47de1368 (i40e/i40evf: Add Flow director stats to PF stats)
  
  	pf->stat_offsets_loaded = true;
  }
diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index 8b13c7ff35b4..df0194b52733 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -157,6 +157,17 @@ struct i40e_lump_tracking {
 #define I40E_FDIR_BUFFER_FULL_MARGIN	10
 #define I40E_FDIR_BUFFER_HEAD_ROOM	32
 
+enum i40e_fd_stat_idx {
+	I40E_FD_STAT_ATR,
+	I40E_FD_STAT_SB,
+	I40E_FD_STAT_PF_COUNT
+};
+#define I40E_FD_STAT_PF_IDX(pf_id) ((pf_id) * I40E_FD_STAT_PF_COUNT)
+#define I40E_FD_ATR_STAT_IDX(pf_id) \
+			(I40E_FD_STAT_PF_IDX(pf_id) + I40E_FD_STAT_ATR)
+#define I40E_FD_SB_STAT_IDX(pf_id)  \
+			(I40E_FD_STAT_PF_IDX(pf_id) + I40E_FD_STAT_SB)
+
 struct i40e_fdir_filter {
 	struct hlist_node fdir_node;
 	/* filter ipnut set */
@@ -226,6 +237,8 @@ struct i40e_pf {
 
 	struct hlist_head fdir_filter_list;
 	u16 fdir_pf_active_filters;
+	u16 fd_sb_cnt_idx;
+	u16 fd_atr_cnt_idx;
 
 #ifdef CONFIG_I40E_VXLAN
 	__be16  vxlan_ports[I40E_MAX_PF_UDP_OFFLOAD_PORTS];
diff --git a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 753def33aabf..aedddd4828fb 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@ -140,6 +140,9 @@ static struct i40e_stats i40e_gstrings_stats[] = {
 	I40E_PF_STAT("rx_jabber", stats.rx_jabber),
 	I40E_PF_STAT("VF_admin_queue_requests", vf_aq_requests),
 	I40E_PF_STAT("rx_hwtstamp_cleared", rx_hwtstamp_cleared),
+	I40E_PF_STAT("fdir_atr_match", stats.fd_atr_match),
+	I40E_PF_STAT("fdir_sb_match", stats.fd_sb_match),
+
 	/* LPI stats */
 	I40E_PF_STAT("tx_lpi_status", stats.tx_lpi_status),
 	I40E_PF_STAT("rx_lpi_status", stats.rx_lpi_status),
@@ -1920,7 +1923,7 @@ static int i40e_add_fdir_ethtool(struct i40e_vsi *vsi,
 	input->pctype = 0;
 	input->dest_vsi = vsi->id;
 	input->fd_status = I40E_FILTER_PROGRAM_DESC_FD_STATUS_FD_ID;
-	input->cnt_index = 0;
+	input->cnt_index  = pf->fd_sb_cnt_idx;
 	input->flow_type = fsp->flow_type;
 	input->ip4_proto = fsp->h_u.usr_ip4_spec.proto;
 
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
diff --git a/drivers/net/ethernet/intel/i40e/i40e_txrx.c b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
index 6b8bddab1f62..1f6fe22c36d8 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@ -119,7 +119,7 @@ int i40e_program_fdir_filter(struct i40e_fdir_filter *fdir_data, u8 *raw_packet,
 		dcc |= I40E_TXD_FLTR_QW1_CNT_ENA_MASK;
 		dcc |= ((u32)fdir_data->cnt_index <<
 			I40E_TXD_FLTR_QW1_CNTINDEX_SHIFT) &
-		       I40E_TXD_FLTR_QW1_CNTINDEX_MASK;
+			I40E_TXD_FLTR_QW1_CNTINDEX_MASK;
 	}
 
 	fdir_desc->qindex_flex_ptype_vsi = cpu_to_le32(fpt);
@@ -1684,6 +1684,11 @@ static void i40e_atr(struct i40e_ring *tx_ring, struct sk_buff *skb,
 	dtype_cmd |= I40E_FILTER_PROGRAM_DESC_FD_STATUS_FD_ID <<
 		     I40E_TXD_FLTR_QW1_FD_STATUS_SHIFT;
 
+	dtype_cmd |= I40E_TXD_FLTR_QW1_CNT_ENA_MASK;
+	dtype_cmd |=
+		((u32)pf->fd_atr_cnt_idx << I40E_TXD_FLTR_QW1_CNTINDEX_SHIFT) &
+		I40E_TXD_FLTR_QW1_CNTINDEX_MASK;
+
 	fdir_desc->qindex_flex_ptype_vsi = cpu_to_le32(flex_ptype);
 	fdir_desc->rsvd = cpu_to_le32(0);
 	fdir_desc->dtype_cmd_cntindex = cpu_to_le32(dtype_cmd);
diff --git a/drivers/net/ethernet/intel/i40e/i40e_type.h b/drivers/net/ethernet/intel/i40e/i40e_type.h
index 1d6a4160df8e..a5f54a72798c 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_type.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_type.h
@@ -1027,6 +1027,9 @@ struct i40e_hw_port_stats {
 	u64 tx_size_big;		/* ptc9522 */
 	u64 mac_short_packet_dropped;	/* mspdc */
 	u64 checksum_error;		/* xec */
+	/* flow director stats */
+	u64 fd_atr_match;
+	u64 fd_sb_match;
 	/* EEE LPI */
 	u32 tx_lpi_status;
 	u32 rx_lpi_status;
diff --git a/drivers/net/ethernet/intel/i40evf/i40e_type.h b/drivers/net/ethernet/intel/i40evf/i40e_type.h
index 77fb3653edd8..9b3f253373e3 100644
--- a/drivers/net/ethernet/intel/i40evf/i40e_type.h
+++ b/drivers/net/ethernet/intel/i40evf/i40e_type.h
@@ -1027,6 +1027,9 @@ struct i40e_hw_port_stats {
 	u64 tx_size_big;		/* ptc9522 */
 	u64 mac_short_packet_dropped;	/* mspdc */
 	u64 checksum_error;		/* xec */
+	/* flow director stats */
+	u64 fd_atr_match;
+	u64 fd_sb_match;
 	/* EEE LPI */
 	u32 tx_lpi_status;
 	u32 rx_lpi_status;
