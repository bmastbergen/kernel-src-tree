x86/gpu: Add Intel graphics stolen memory quirk for gen2 platforms

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [x86] quirks: Add Intel graphics stolen memory quirk for gen2 platforms (Rob Clark) [1154053]
Rebuild_FUZZ: 91.60%
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit a4dff76924fe4f6d53a9f34196a67a32149e7270
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/a4dff769.failed

There isn't an explicit stolen memory base register on gen2.
Some old comment in the i915 code suggests we should get it via
max_low_pfn_mapped, but that's clearly a bad idea on my MGM.

The e820 map in said machine looks like this:

	BIOS-e820: [mem 0x0000000000000000-0x000000000009f7ff] usable
	BIOS-e820: [mem 0x000000000009f800-0x000000000009ffff] reserved
	BIOS-e820: [mem 0x00000000000ce000-0x00000000000cffff] reserved
	BIOS-e820: [mem 0x00000000000dc000-0x00000000000fffff] reserved
	BIOS-e820: [mem 0x0000000000100000-0x000000001f6effff] usable
	BIOS-e820: [mem 0x000000001f6f0000-0x000000001f6f7fff] ACPI data
	BIOS-e820: [mem 0x000000001f6f8000-0x000000001f6fffff] ACPI NVS
	BIOS-e820: [mem 0x000000001f700000-0x000000001fffffff] reserved
	BIOS-e820: [mem 0x00000000fec10000-0x00000000fec1ffff] reserved
	BIOS-e820: [mem 0x00000000ffb00000-0x00000000ffbfffff] reserved
	BIOS-e820: [mem 0x00000000fff00000-0x00000000ffffffff] reserved

That makes max_low_pfn_mapped = 1f6f0000, so assuming our stolen
memory would start there would place it on top of some ACPI
memory regions. So not a good idea as already stated.

The 9MB region after the ACPI regions at 0x1f700000 however
looks promising given that the macine reports the stolen memory
size to be 8MB. Looking at the PGTBL_CTL register, the GTT
entries are at offset 0x1fee00000, and given that the GTT
entries occupy 128KB, it looks like the stolen memory could
start at 0x1f700000 and the GTT entries would occupy the last
128KB of the stolen memory.

After some more digging through chipset documentation, I've
determined the BIOS first allocates space for something called
TSEG (something to do with SMM) from the top of memory, and then
it allocates the graphics stolen memory below that. Accordind to
the chipset documentation TSEG has a fixed size of 1MB on 855.
So that explains the top 1MB in the e820 region. And it also
confirms that the GTT entries are in fact at the end of the the
stolen memory region.

Derive the stolen memory base address on gen2 the same as the
BIOS does (TOM-TSEG_SIZE-stolen_size). There are a few
differences between the registers on various gen2 chipsets, so a
few different codepaths are required.

865G is again bit more special since it seems to support enough
memory to hit 4GB address space issues. This means the PCI
allocations will also affect the location of the stolen memory.
Fortunately there appears to be the TOUD register which may give
us the correct answer directly. But the chipset docs are a bit
unclear, so I'm not 100% sure that the graphics stolen memory is
always the last thing the BIOS steals. Someone would need to
verify it on a real system.

I tested this on the my 830 and 855 machines, and so far
everything looks peachy.

	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
	Cc: Bjorn Helgaas <bhelgaas@google.com>
Link: http://lkml.kernel.org/r/1391628540-23072-3-git-send-email-ville.syrjala@linux.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a4dff76924fe4f6d53a9f34196a67a32149e7270)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/early-quirks.c
diff --cc arch/x86/kernel/early-quirks.c
index ae491de42508,5218dd209ede..000000000000
--- a/arch/x86/kernel/early-quirks.c
+++ b/arch/x86/kernel/early-quirks.c
@@@ -313,29 -421,84 +421,110 @@@ static size_t __init gen6_stolen_size(i
  	return gmch_ctrl << 25; /* 32 MB units */
  }
  
++<<<<<<< HEAD
 +typedef size_t (*stolen_size_fn)(int num, int slot, int func);
 +
 +static struct pci_device_id intel_stolen_ids[] __initdata = {
 +	INTEL_I915G_IDS(gen3_stolen_size),
 +	INTEL_I915GM_IDS(gen3_stolen_size),
 +	INTEL_I945G_IDS(gen3_stolen_size),
 +	INTEL_I945GM_IDS(gen3_stolen_size),
 +	INTEL_VLV_M_IDS(gen6_stolen_size),
 +	INTEL_VLV_D_IDS(gen6_stolen_size),
 +	INTEL_PINEVIEW_IDS(gen3_stolen_size),
 +	INTEL_I965G_IDS(gen3_stolen_size),
 +	INTEL_G33_IDS(gen3_stolen_size),
 +	INTEL_I965GM_IDS(gen3_stolen_size),
 +	INTEL_GM45_IDS(gen3_stolen_size),
 +	INTEL_G45_IDS(gen3_stolen_size),
 +	INTEL_IRONLAKE_D_IDS(gen3_stolen_size),
 +	INTEL_IRONLAKE_M_IDS(gen3_stolen_size),
 +	INTEL_SNB_D_IDS(gen6_stolen_size),
 +	INTEL_SNB_M_IDS(gen6_stolen_size),
 +	INTEL_IVB_M_IDS(gen6_stolen_size),
 +	INTEL_IVB_D_IDS(gen6_stolen_size),
 +	INTEL_HSW_D_IDS(gen6_stolen_size),
 +	INTEL_HSW_M_IDS(gen6_stolen_size),
++=======
+ static size_t gen8_stolen_size(int num, int slot, int func)
+ {
+ 	u16 gmch_ctrl;
+ 
+ 	gmch_ctrl = read_pci_config_16(num, slot, func, SNB_GMCH_CTRL);
+ 	gmch_ctrl >>= BDW_GMCH_GMS_SHIFT;
+ 	gmch_ctrl &= BDW_GMCH_GMS_MASK;
+ 	return gmch_ctrl << 25; /* 32 MB units */
+ }
+ 
+ 
+ struct intel_stolen_funcs {
+ 	size_t (*size)(int num, int slot, int func);
+ 	u32 (*base)(int num, int slot, int func, size_t size);
+ };
+ 
+ static const struct intel_stolen_funcs i830_stolen_funcs = {
+ 	.base = i830_stolen_base,
+ 	.size = i830_stolen_size,
+ };
+ 
+ static const struct intel_stolen_funcs i845_stolen_funcs = {
+ 	.base = i845_stolen_base,
+ 	.size = i830_stolen_size,
+ };
+ 
+ static const struct intel_stolen_funcs i85x_stolen_funcs = {
+ 	.base = i85x_stolen_base,
+ 	.size = gen3_stolen_size,
+ };
+ 
+ static const struct intel_stolen_funcs i865_stolen_funcs = {
+ 	.base = i865_stolen_base,
+ 	.size = gen3_stolen_size,
+ };
+ 
+ static const struct intel_stolen_funcs gen3_stolen_funcs = {
+ 	.base = intel_stolen_base,
+ 	.size = gen3_stolen_size,
+ };
+ 
+ static const struct intel_stolen_funcs gen6_stolen_funcs = {
+ 	.base = intel_stolen_base,
+ 	.size = gen6_stolen_size,
+ };
+ 
+ static const struct intel_stolen_funcs gen8_stolen_funcs = {
+ 	.base = intel_stolen_base,
+ 	.size = gen8_stolen_size,
+ };
+ 
+ static struct pci_device_id intel_stolen_ids[] __initdata = {
+ 	INTEL_I830_IDS(&i830_stolen_funcs),
+ 	INTEL_I845G_IDS(&i845_stolen_funcs),
+ 	INTEL_I85X_IDS(&i85x_stolen_funcs),
+ 	INTEL_I865G_IDS(&i865_stolen_funcs),
+ 	INTEL_I915G_IDS(&gen3_stolen_funcs),
+ 	INTEL_I915GM_IDS(&gen3_stolen_funcs),
+ 	INTEL_I945G_IDS(&gen3_stolen_funcs),
+ 	INTEL_I945GM_IDS(&gen3_stolen_funcs),
+ 	INTEL_VLV_M_IDS(&gen6_stolen_funcs),
+ 	INTEL_VLV_D_IDS(&gen6_stolen_funcs),
+ 	INTEL_PINEVIEW_IDS(&gen3_stolen_funcs),
+ 	INTEL_I965G_IDS(&gen3_stolen_funcs),
+ 	INTEL_G33_IDS(&gen3_stolen_funcs),
+ 	INTEL_I965GM_IDS(&gen3_stolen_funcs),
+ 	INTEL_GM45_IDS(&gen3_stolen_funcs),
+ 	INTEL_G45_IDS(&gen3_stolen_funcs),
+ 	INTEL_IRONLAKE_D_IDS(&gen3_stolen_funcs),
+ 	INTEL_IRONLAKE_M_IDS(&gen3_stolen_funcs),
+ 	INTEL_SNB_D_IDS(&gen6_stolen_funcs),
+ 	INTEL_SNB_M_IDS(&gen6_stolen_funcs),
+ 	INTEL_IVB_M_IDS(&gen6_stolen_funcs),
+ 	INTEL_IVB_D_IDS(&gen6_stolen_funcs),
+ 	INTEL_HSW_D_IDS(&gen6_stolen_funcs),
+ 	INTEL_HSW_M_IDS(&gen6_stolen_funcs),
+ 	INTEL_BDW_M_IDS(&gen8_stolen_funcs),
+ 	INTEL_BDW_D_IDS(&gen8_stolen_funcs)
++>>>>>>> a4dff76924fe (x86/gpu: Add Intel graphics stolen memory quirk for gen2 platforms)
  };
  
  static void __init intel_graphics_stolen(int num, int slot, int func)
* Unmerged path arch/x86/kernel/early-quirks.c
diff --git a/include/drm/i915_drm.h b/include/drm/i915_drm.h
index 3abfa6ea226e..0a314791c15a 100644
--- a/include/drm/i915_drm.h
+++ b/include/drm/i915_drm.h
@@ -52,6 +52,12 @@ extern bool i915_gpu_turbo_disable(void);
 
 #define I830_GMCH_CTRL			0x52
 
+#define I830_GMCH_GMS_MASK		0x70
+#define I830_GMCH_GMS_LOCAL		0x10
+#define I830_GMCH_GMS_STOLEN_512	0x20
+#define I830_GMCH_GMS_STOLEN_1024	0x30
+#define I830_GMCH_GMS_STOLEN_8192	0x40
+
 #define I855_GMCH_GMS_MASK		0xF0
 #define I855_GMCH_GMS_STOLEN_0M		0x0
 #define I855_GMCH_GMS_STOLEN_1M		(0x1 << 4)
@@ -68,4 +74,18 @@ extern bool i915_gpu_turbo_disable(void);
 #define INTEL_GMCH_GMS_STOLEN_224M	(0xc << 4)
 #define INTEL_GMCH_GMS_STOLEN_352M	(0xd << 4)
 
+#define I830_DRB3		0x63
+#define I85X_DRB3		0x43
+#define I865_TOUD		0xc4
+
+#define I830_ESMRAMC		0x91
+#define I845_ESMRAMC		0x9e
+#define I85X_ESMRAMC		0x61
+#define    TSEG_ENABLE		(1 << 0)
+#define    I830_TSEG_SIZE_512K	(0 << 1)
+#define    I830_TSEG_SIZE_1M	(1 << 1)
+#define    I845_TSEG_SIZE_MASK	(3 << 1)
+#define    I845_TSEG_SIZE_512K	(2 << 1)
+#define    I845_TSEG_SIZE_1M	(3 << 1)
+
 #endif				/* _I915_DRM_H_ */
