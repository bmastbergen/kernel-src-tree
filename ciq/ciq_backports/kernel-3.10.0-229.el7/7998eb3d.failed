powerpc: Fix 64 bit builds with binutils 2.24

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] Fix 64 bit builds with binutils 2.24 (Don Zickus) [1127366]
Rebuild_FUZZ: 88.89%
commit-author Guenter Roeck <linux@roeck-us.net>
commit 7998eb3dc700aaf499f93f50b3d77da834ef9e1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/7998eb3d.failed

With binutils 2.24, various 64 bit builds fail with relocation errors
such as

arch/powerpc/kernel/built-in.o: In function `exc_debug_crit_book3e':
	(.text+0x165ee): relocation truncated to fit: R_PPC64_ADDR16_HI
	against symbol `interrupt_base_book3e' defined in .text section
	in arch/powerpc/kernel/built-in.o
arch/powerpc/kernel/built-in.o: In function `exc_debug_crit_book3e':
	(.text+0x16602): relocation truncated to fit: R_PPC64_ADDR16_HI
	against symbol `interrupt_end_book3e' defined in .text section
	in arch/powerpc/kernel/built-in.o

The assembler maintainer says:

 I changed the ABI, something that had to be done but unfortunately
 happens to break the booke kernel code.  When building up a 64-bit
 value with lis, ori, shl, oris, ori or similar sequences, you now
 should use @high and @higha in place of @h and @ha.  @h and @ha
 (and their associated relocs R_PPC64_ADDR16_HI and R_PPC64_ADDR16_HA)
 now report overflow if the value is out of 32-bit signed range.
 ie. @h and @ha assume you're building a 32-bit value. This is needed
 to report out-of-range -mcmodel=medium toc pointer offsets in @toc@h
 and @toc@ha expressions, and for consistency I did the same for all
 other @h and @ha relocs.

Replacing @h with @high in one strategic location fixes the relocation
errors. This has to be done conditionally since the assembler either
supports @h or @high but not both.

	Cc: <stable@vger.kernel.org>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 7998eb3dc700aaf499f93f50b3d77da834ef9e1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/Makefile
diff --cc arch/powerpc/Makefile
index 87841190e158,ce4c68a4a823..000000000000
--- a/arch/powerpc/Makefile
+++ b/arch/powerpc/Makefile
@@@ -140,10 -139,21 +140,17 @@@ E5500_CPU := $(call cc-option,-mcpu=e50
  CFLAGS-$(CONFIG_E5500_CPU) += $(E5500_CPU)
  CFLAGS-$(CONFIG_E6500_CPU) += $(call cc-option,-mcpu=e6500,$(E5500_CPU))
  
 -ifeq ($(CONFIG_PPC32),y)
 -ifeq ($(CONFIG_PPC_E500MC),y)
 -CFLAGS-y += $(call cc-option,-mcpu=e500mc,-mcpu=powerpc)
 -else
 -CFLAGS-$(CONFIG_E500) += $(call cc-option,-mcpu=8540 -msoft-float,-mcpu=powerpc)
 -endif
 -endif
 -
  CFLAGS-$(CONFIG_TUNE_CELL) += $(call cc-option,-mtune=cell)
  
++<<<<<<< HEAD
 +KBUILD_CPPFLAGS	+= -Iarch/$(ARCH)
 +KBUILD_AFLAGS	+= -Iarch/$(ARCH) $(AFLAGS-y)
++=======
+ asinstr := $(call as-instr,lis 9$(comma)foo@high,-DHAVE_AS_ATHIGH=1)
+ 
+ KBUILD_CPPFLAGS	+= -Iarch/$(ARCH) $(asinstr)
+ KBUILD_AFLAGS	+= -Iarch/$(ARCH)
++>>>>>>> 7998eb3dc700 (powerpc: Fix 64 bit builds with binutils 2.24)
  KBUILD_CFLAGS	+= -msoft-float -pipe -Iarch/$(ARCH) $(CFLAGS-y)
  CPP		= $(CC) -E $(KBUILD_CFLAGS)
  
* Unmerged path arch/powerpc/Makefile
diff --git a/arch/powerpc/include/asm/ppc_asm.h b/arch/powerpc/include/asm/ppc_asm.h
index f627f8c74b2a..be1058946792 100644
--- a/arch/powerpc/include/asm/ppc_asm.h
+++ b/arch/powerpc/include/asm/ppc_asm.h
@@ -295,11 +295,16 @@ n:
 	addi	reg,reg,(name - 0b)@l;
 
 #ifdef __powerpc64__
+#ifdef HAVE_AS_ATHIGH
+#define __AS_ATHIGH high
+#else
+#define __AS_ATHIGH h
+#endif
 #define LOAD_REG_IMMEDIATE(reg,expr)		\
 	lis     reg,(expr)@highest;		\
 	ori     reg,reg,(expr)@higher;	\
 	rldicr  reg,reg,32,31;		\
-	oris    reg,reg,(expr)@h;		\
+	oris    reg,reg,(expr)@__AS_ATHIGH;	\
 	ori     reg,reg,(expr)@l;
 
 #define LOAD_REG_ADDR(reg,name)			\
