perf tools: Cache register accesses for unwind processing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Cache register accesses for unwind processing (Jiri Olsa) [1134356]
Rebuild_FUZZ: 94.44%
commit-author Jiri Olsa <jolsa@kernel.org>
commit 0c4e774fad0202b91dea8d99c04e9bdf2c2c6647
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0c4e774f.failed

Caching registers value into an array. Got about 4% speed up
of perf_reg_value function for report command processing
dwarf unwind stacks.

Output from report over 1.5 GB data with DWARF unwind stacks:
(TODO fix perf diff)

  current code:
   5.84%     perf  perf                       [.] perf_reg_value
  change:
   1.94%     perf  perf                       [.] perf_reg_value

And little bit of overall speed up:
(perf stat -r 5 -e '{cycles,instructions}:u' ...)

  current code:
   310,298,611,754      cycles                     ( +-  0.33% )
   439,669,689,341      instructions               ( +-  0.03% )

     188.656753166 seconds time elapsed            ( +-  0.82% )

  change:
   291,315,329,878      cycles                     ( +-  0.22% )
   391,763,485,304      instructions               ( +-  0.03%  )

     180.742249687 seconds time elapsed            ( +-  0.64% )

	Acked-by: Namhyung Kim <namhyung@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jean Pihet <jean.pihet@linaro.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1401892622-30848-2-git-send-email-jolsa@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit 0c4e774fad0202b91dea8d99c04e9bdf2c2c6647)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/perf_regs.c
#	tools/perf/util/perf_regs.h
diff --cc tools/perf/util/perf_regs.h
index 5a4f2b6f3738,980dbf76bc98..000000000000
--- a/tools/perf/util/perf_regs.h
+++ b/tools/perf/util/perf_regs.h
@@@ -1,10 -1,18 +1,19 @@@
  #ifndef __PERF_REGS_H
  #define __PERF_REGS_H
  
++<<<<<<< HEAD
 +#ifdef HAVE_PERF_REGS
++=======
+ #include <linux/types.h>
+ 
+ struct regs_dump;
+ 
+ #ifdef HAVE_PERF_REGS_SUPPORT
++>>>>>>> 0c4e774fad02 (perf tools: Cache register accesses for unwind processing)
  #include <perf_regs.h>
 -
 -int perf_reg_value(u64 *valp, struct regs_dump *regs, int id);
 -
  #else
  #define PERF_REGS_MASK	0
+ #define PERF_REGS_MAX	0
  
  static inline const char *perf_reg_name(int id __maybe_unused)
  {
* Unmerged path tools/perf/util/perf_regs.c
diff --git a/tools/perf/util/event.h b/tools/perf/util/event.h
index cbb928703f14..984922f9fee1 100644
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@ -7,6 +7,7 @@
 #include "../perf.h"
 #include "map.h"
 #include "build-id.h"
+#include "perf_regs.h"
 
 struct mmap_event {
 	struct perf_event_header header;
@@ -88,6 +89,10 @@ struct sample_event {
 struct regs_dump {
 	u64 abi;
 	u64 *regs;
+
+	/* Cached values/mask filled by first register access. */
+	u64 cache_regs[PERF_REGS_MAX];
+	u64 cache_mask;
 };
 
 struct stack_dump {
* Unmerged path tools/perf/util/perf_regs.c
* Unmerged path tools/perf/util/perf_regs.h
