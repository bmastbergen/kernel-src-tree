ext4: fix performance regression in writeback of random writes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jan Kara <jack@suse.cz>
commit 9c12a831d73dd938a22418d70b39aed4feb4bdf2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/9c12a831.failed

The Linux Kernel Performance project guys have reported that commit
4e7ea81db5 introduces a performance regression for the following fio
workload:

[global]
direct=0
ioengine=mmap
size=1500M
bs=4k
pre_read=1
numjobs=1
overwrite=1
loops=5
runtime=300
group_reporting
invalidate=0
directory=/mnt/
file_service_type=random:36
file_service_type=random:36

[job0]
startdelay=0
rw=randrw
filename=data0/f1:data0/f2

[job1]
startdelay=0
rw=randrw
filename=data0/f2:data0/f1
...

[job7]
startdelay=0
rw=randrw
filename=data0/f2:data0/f1

The culprit of the problem is that after the commit ext4_writepages()
are more aggressive in writing back pages. Thus we have less consecutive
dirty pages resulting in more seeking.

This increased aggressivity is caused by a bug in the condition
terminating ext4_writepages(). We start writing from the beginning of
the file even if we should have terminated ext4_writepages() because
wbc->nr_to_write <= 0.

After fixing the condition the throughput of the fio workload is about 20%
better than before writeback reorganization.

	Reported-by: "Yan, Zheng" <zheng.z.yan@intel.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
	Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
(cherry picked from commit 9c12a831d73dd938a22418d70b39aed4feb4bdf2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 9b251a9a30ad,4cf2619f007c..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -2515,11 -2559,10 +2515,15 @@@ retry
  			break;
  	}
  	blk_finish_plug(&plug);
++<<<<<<< HEAD
 +	if (!io_done && !cycled) {
++=======
+ 	if (!ret && !cycled && wbc->nr_to_write > 0) {
++>>>>>>> 9c12a831d73d (ext4: fix performance regression in writeback of random writes)
  		cycled = 1;
 -		mpd.last_page = writeback_index - 1;
 -		mpd.first_page = 0;
 +		index = 0;
 +		wbc->range_start = index << PAGE_CACHE_SHIFT;
 +		wbc->range_end  = mapping->writeback_index - 1;
  		goto retry;
  	}
  
* Unmerged path fs/ext4/inode.c
