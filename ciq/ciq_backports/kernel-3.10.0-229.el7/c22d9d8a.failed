blk-mq: allow setting of per-request timeouts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jens Axboe <axboe@fb.com>
commit c22d9d8a60646a1521ae12a2176f58da19afa186
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/c22d9d8a.failed

Currently blk-mq uses the queue timeout for all requests. But
for some commands, drivers may want to set a specific timeout
for special requests. Allow this to be passed in through
request->timeout, and use it if set.

	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit c22d9d8a60646a1521ae12a2176f58da19afa186)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index a6fc109357ae,9bc075335d06..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -362,10 -454,22 +362,25 @@@ static void blk_mq_start_request(struc
  	/*
  	 * Just mark start time and set the started bit. Due to memory
  	 * ordering, we know we'll see the correct deadline as long as
- 	 * REQ_ATOMIC_STARTED is seen.
+ 	 * REQ_ATOMIC_STARTED is seen. Use the default queue timeout,
+ 	 * unless one has been set in the request.
  	 */
++<<<<<<< HEAD
 +	rq->deadline = jiffies + q->rq_timeout;
++=======
+ 	if (!rq->timeout)
+ 		rq->deadline = jiffies + q->rq_timeout;
+ 	else
+ 		rq->deadline = jiffies + rq->timeout;
+ 
+ 	/*
+ 	 * Mark us as started and clear complete. Complete might have been
+ 	 * set if requeue raced with timeout, which then marked it as
+ 	 * complete. So be sure to clear complete again when we start
+ 	 * the request, otherwise we'll ignore the completion event.
+ 	 */
++>>>>>>> c22d9d8a6064 (blk-mq: allow setting of per-request timeouts)
  	set_bit(REQ_ATOM_STARTED, &rq->atomic_flags);
 -	clear_bit(REQ_ATOM_COMPLETE, &rq->atomic_flags);
  
  	if (q->dma_drain_size && blk_rq_bytes(rq)) {
  		/*
* Unmerged path block/blk-mq.c
