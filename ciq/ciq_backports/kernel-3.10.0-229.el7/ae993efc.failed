perf hists: Move column length calculation out of hists__inc_stats()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/hists: Move column length calculation out of hists__inc_stats() (Jiri Olsa) [1134356]
Rebuild_FUZZ: 98.53%
commit-author Namhyung Kim <namhyung@kernel.org>
commit ae993efc9c6bd109b027d2799a442892067e9230
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/ae993efc.failed

It's not the part of logic of hists__inc_stats() so it'd be better to
move it out of the function.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/1398327843-31845-4-git-send-email-namhyung@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit ae993efc9c6bd109b027d2799a442892067e9230)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-diff.c
#	tools/perf/util/hist.c
diff --cc tools/perf/builtin-diff.c
index 891f993f523b,c9cc771f182a..000000000000
--- a/tools/perf/builtin-diff.c
+++ b/tools/perf/builtin-diff.c
@@@ -585,7 -586,10 +585,14 @@@ static void hists__compute_resort(struc
  		next = rb_next(&he->rb_node_in);
  
  		insert_hist_entry_by_compute(&hists->entries, he, compute);
++<<<<<<< HEAD
 +		hists__inc_nr_entries(hists, he);
++=======
+ 		hists__inc_stats(hists, he);
+ 
+ 		if (!he->filtered)
+ 			hists__calc_col_len(hists, he);
++>>>>>>> ae993efc9c6b (perf hists: Move column length calculation out of hists__inc_stats())
  	}
  }
  
diff --cc tools/perf/util/hist.c
index dac7beaabd9c,f5b388e50265..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -318,10 -317,9 +318,9 @@@ static struct hist_entry *hist_entry__n
  	return he;
  }
  
 -void hists__inc_stats(struct hists *hists, struct hist_entry *h)
 +void hists__inc_nr_entries(struct hists *hists, struct hist_entry *h)
  {
  	if (!h->filtered) {
- 		hists__calc_col_len(hists, h);
  		hists->nr_non_filtered_entries++;
  		hists->stats.total_non_filtered_period += h->stat.period;
  	}
@@@ -684,7 -685,10 +683,14 @@@ void hists__output_resort(struct hists 
  		next = rb_next(&n->rb_node_in);
  
  		__hists__insert_output_entry(&hists->entries, n, min_callchain_hits);
++<<<<<<< HEAD
 +		hists__inc_nr_entries(hists, n);
++=======
+ 		hists__inc_stats(hists, n);
+ 
+ 		if (!n->filtered)
+ 			hists__calc_col_len(hists, n);
++>>>>>>> ae993efc9c6b (perf hists: Move column length calculation out of hists__inc_stats())
  	}
  }
  
* Unmerged path tools/perf/builtin-diff.c
* Unmerged path tools/perf/util/hist.c
