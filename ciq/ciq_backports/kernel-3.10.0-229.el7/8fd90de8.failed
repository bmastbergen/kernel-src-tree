net: bnx2x: slight optimization of addr compare

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [ethernet] bnx2x: slight optimization of addr compare (Michal Schmidt) [1089402]
Rebuild_FUZZ: 94.38%
commit-author dingtianhong <dingtianhong@huawei.com>
commit 8fd90de800a838320406c29587d40fb8167ec48e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/8fd90de8.failed

Use the possibly more efficient ether_addr_equal or
ether_addr_equal_unaligned to instead of memcmp.

	Cc: Ariel Elior <ariele@broadcom.com>
	Cc: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
	Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8fd90de800a838320406c29587d40fb8167ec48e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
diff --cc drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
index 7ee099caee2f,babf7b954ae6..000000000000
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
@@@ -636,6 -685,25 +636,28 @@@ static int bnx2x_check_vlan_add(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int bnx2x_check_vlan_mac_add(struct bnx2x *bp,
+ 				    struct bnx2x_vlan_mac_obj *o,
+ 				   union bnx2x_classification_ramrod_data *data)
+ {
+ 	struct bnx2x_vlan_mac_registry_elem *pos;
+ 
+ 	DP(BNX2X_MSG_SP, "Checking VLAN_MAC (%pM, %d) for ADD command\n",
+ 	   data->vlan_mac.mac, data->vlan_mac.vlan);
+ 
+ 	list_for_each_entry(pos, &o->head, link)
+ 		if ((data->vlan_mac.vlan == pos->u.vlan_mac.vlan) &&
+ 		    ether_addr_equal_unaligned(data->vlan_mac.mac, pos->u.vlan_mac.mac) &&
+ 		    (data->vlan_mac.is_inner_mac ==
+ 		     pos->u.vlan_mac.is_inner_mac))
+ 			return -EEXIST;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 8fd90de800a8 (net: bnx2x: slight optimization of addr compare)
  /* check_del() callbacks */
  static struct bnx2x_vlan_mac_registry_elem *
  	bnx2x_check_mac_del(struct bnx2x *bp,
@@@ -670,6 -738,26 +692,29 @@@ static struct bnx2x_vlan_mac_registry_e
  	return NULL;
  }
  
++<<<<<<< HEAD
++=======
+ static struct bnx2x_vlan_mac_registry_elem *
+ 	bnx2x_check_vlan_mac_del(struct bnx2x *bp,
+ 				 struct bnx2x_vlan_mac_obj *o,
+ 				 union bnx2x_classification_ramrod_data *data)
+ {
+ 	struct bnx2x_vlan_mac_registry_elem *pos;
+ 
+ 	DP(BNX2X_MSG_SP, "Checking VLAN_MAC (%pM, %d) for DEL command\n",
+ 	   data->vlan_mac.mac, data->vlan_mac.vlan);
+ 
+ 	list_for_each_entry(pos, &o->head, link)
+ 		if ((data->vlan_mac.vlan == pos->u.vlan_mac.vlan) &&
+ 		    ether_addr_equal_unaligned(data->vlan_mac.mac, pos->u.vlan_mac.mac) &&
+ 		    (data->vlan_mac.is_inner_mac ==
+ 		     pos->u.vlan_mac.is_inner_mac))
+ 			return pos;
+ 
+ 	return NULL;
+ }
+ 
++>>>>>>> 8fd90de800a8 (net: bnx2x: slight optimization of addr compare)
  /* check_move() callback */
  static bool bnx2x_check_move(struct bnx2x *bp,
  			     struct bnx2x_vlan_mac_obj *src_o,
* Unmerged path drivers/net/ethernet/broadcom/bnx2x/bnx2x_sp.c
diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c
index 1b0a9f9c968a..e42f48df6e94 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c
@@ -3716,7 +3716,7 @@ enum sample_bulletin_result bnx2x_sample_bulletin(struct bnx2x *bp)
 
 	/* the mac address in bulletin board is valid and is new */
 	if (bulletin.valid_bitmap & 1 << MAC_ADDR_VALID &&
-	    memcmp(bulletin.mac, bp->old_bulletin.mac, ETH_ALEN)) {
+	    !ether_addr_equal(bulletin.mac, bp->old_bulletin.mac)) {
 		/* update new mac to net device */
 		memcpy(bp->dev->dev_addr, bulletin.mac, ETH_ALEN);
 	}
diff --git a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
index a46d26cba171..3fa6c2a2a5a9 100644
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_vfpf.c
@@ -1721,7 +1721,7 @@ static void bnx2x_vf_mbx_set_q_filters(struct bnx2x *bp,
 
 		/* ...and only the mac set by the ndo */
 		if (filters->n_mac_vlan_filters == 1 &&
-		    memcmp(filters->filters->mac, bulletin->mac, ETH_ALEN)) {
+		    !ether_addr_equal(filters->filters->mac, bulletin->mac)) {
 			BNX2X_ERR("VF[%d] requested the addition of a mac address not matching the one configured by set_vf_mac ndo\n",
 				  vf->abs_vfid);
 
