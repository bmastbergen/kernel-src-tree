perf hists: Reset width of output fields with header length

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/hists: Reset width of output fields with header length (Jiri Olsa) [1134356]
Rebuild_FUZZ: 98.31%
commit-author Namhyung Kim <namhyung@kernel.org>
commit 678a500d076ec873b8809041c6b718653db2a75f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/678a500d.failed

Some fields missed to set default column length so it broke align in
--stdio output.  Add perf_hpp__reset_width() to set it to a sane
default value.

Note that this change will ignore -w/--column-widths option for now.

Before:
  $ perf report -F cpu,comm,overhead --stdio
  ...
  # CPU          Command  Overhead
  #   ...............  ........
  #
    0          firefox     2.65%
    0      kworker/0:0     1.45%
    0          swapper     5.52%
    0         synergys     0.92%
    1          firefox     4.54%

After:
  # CPU          Command  Overhead
  # ...  ...............  ........
  #
      0          firefox     2.65%
      0      kworker/0:0     1.45%
      0          swapper     5.52%
      0         synergys     0.92%
      1          firefox     4.54%

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/1400480762-22852-17-git-send-email-namhyung@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit 678a500d076ec873b8809041c6b718653db2a75f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.h
#	tools/perf/util/sort.c
diff --cc tools/perf/util/hist.h
index 4b860e6a25f0,034db761630e..000000000000
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@@ -192,6 -197,12 +192,15 @@@ void perf_hpp__column_register(struct p
  void perf_hpp__column_enable(unsigned col);
  void perf_hpp__register_sort_field(struct perf_hpp_fmt *format);
  void perf_hpp__setup_output_field(void);
++<<<<<<< HEAD
++=======
+ void perf_hpp__append_sort_keys(void);
+ 
+ bool perf_hpp__is_sort_entry(struct perf_hpp_fmt *format);
+ bool perf_hpp__same_sort_entry(struct perf_hpp_fmt *a, struct perf_hpp_fmt *b);
+ bool perf_hpp__should_skip(struct perf_hpp_fmt *format);
+ void perf_hpp__reset_width(struct perf_hpp_fmt *fmt, struct hists *hists);
++>>>>>>> 678a500d076e (perf hists: Reset width of output fields with header length)
  
  typedef u64 (*hpp_field_fn)(struct hist_entry *he);
  typedef int (*hpp_callback_fn)(struct perf_hpp *hpp, bool front);
diff --cc tools/perf/util/sort.c
index 916652af8304,9bee7288465f..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -1053,6 -1075,32 +1053,35 @@@ struct hpp_sort_entry 
  	struct sort_entry *se;
  };
  
++<<<<<<< HEAD
++=======
+ bool perf_hpp__same_sort_entry(struct perf_hpp_fmt *a, struct perf_hpp_fmt *b)
+ {
+ 	struct hpp_sort_entry *hse_a;
+ 	struct hpp_sort_entry *hse_b;
+ 
+ 	if (!perf_hpp__is_sort_entry(a) || !perf_hpp__is_sort_entry(b))
+ 		return false;
+ 
+ 	hse_a = container_of(a, struct hpp_sort_entry, hpp);
+ 	hse_b = container_of(b, struct hpp_sort_entry, hpp);
+ 
+ 	return hse_a->se == hse_b->se;
+ }
+ 
+ void perf_hpp__reset_width(struct perf_hpp_fmt *fmt, struct hists *hists)
+ {
+ 	struct hpp_sort_entry *hse;
+ 
+ 	if (!perf_hpp__is_sort_entry(fmt))
+ 		return;
+ 
+ 	hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 	hists__new_col_len(hists, hse->se->se_width_idx,
+ 			   strlen(hse->se->se_header));
+ }
+ 
++>>>>>>> 678a500d076e (perf hists: Reset width of output fields with header length)
  static int __sort__hpp_header(struct perf_hpp_fmt *fmt, struct perf_hpp *hpp,
  			      struct perf_evsel *evsel)
  {
diff --git a/tools/perf/ui/stdio/hist.c b/tools/perf/ui/stdio/hist.c
index f3a923a35b97..14a73ca71101 100644
--- a/tools/perf/ui/stdio/hist.c
+++ b/tools/perf/ui/stdio/hist.c
@@ -368,12 +368,10 @@ size_t hists__fprintf(struct hists *hists, bool show_header, int max_rows,
 		      int max_cols, float min_pcnt, FILE *fp)
 {
 	struct perf_hpp_fmt *fmt;
-	struct sort_entry *se;
 	struct rb_node *nd;
 	size_t ret = 0;
 	unsigned int width;
 	const char *sep = symbol_conf.field_sep;
-	const char *col_width = symbol_conf.col_width_list_str;
 	int nr_rows = 0;
 	char bf[96];
 	struct perf_hpp dummy_hpp = {
@@ -386,22 +384,9 @@ size_t hists__fprintf(struct hists *hists, bool show_header, int max_rows,
 
 	init_rem_hits();
 
-	list_for_each_entry(se, &hist_entry__sort_list, list) {
-		if (se->elide)
-			continue;
-		width = strlen(se->se_header);
-		if (symbol_conf.col_width_list_str) {
-			if (col_width) {
-				hists__set_col_len(hists, se->se_width_idx,
-						   atoi(col_width));
-				col_width = strchr(col_width, ',');
-				if (col_width)
-					++col_width;
-			}
-		}
-		if (!hists__new_col_len(hists, se->se_width_idx, width))
-			width = hists__col_len(hists, se->se_width_idx);
-	}
+
+	perf_hpp__for_each_format(fmt)
+		perf_hpp__reset_width(fmt, hists);
 
 	if (!show_header)
 		goto print_entries;
* Unmerged path tools/perf/util/hist.h
* Unmerged path tools/perf/util/sort.c
