blk-mq: idle all hardware contexts before freeing a queue

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 19c5d84f14d2b01fe4c24e1444142f69e6dc08f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/19c5d84f.failed

Without this we can leak the active_queues reference if a command is
freed while it is considered active.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 19c5d84f14d2b01fe4c24e1444142f69e6dc08f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index a6fc109357ae,62082c5daae7..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -1410,10 -1841,11 +1410,14 @@@ void blk_mq_free_queue(struct request_q
  	struct blk_mq_hw_ctx *hctx;
  	int i;
  
 -	blk_mq_del_queue_tag_set(q);
 -
  	queue_for_each_hw_ctx(q, hctx, i) {
++<<<<<<< HEAD
 +		kfree(hctx->ctx_map);
++=======
+ 		blk_mq_tag_idle(hctx);
++>>>>>>> 19c5d84f14d2 (blk-mq: idle all hardware contexts before freeing a queue)
  		kfree(hctx->ctxs);
 +		blk_mq_free_rq_map(hctx);
  		blk_mq_unregister_cpu_notifier(&hctx->cpu_notifier);
  		if (q->mq_ops->exit_hctx)
  			q->mq_ops->exit_hctx(hctx, i);
* Unmerged path block/blk-mq.c
