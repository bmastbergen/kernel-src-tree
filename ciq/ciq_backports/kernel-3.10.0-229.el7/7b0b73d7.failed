init/main.c: add initcall_blacklist kernel parameter

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [init] main: add initcall_blacklist kernel parameter (Prarit Bhargava) [1080995]
Rebuild_FUZZ: 92.78%
commit-author Prarit Bhargava <prarit@redhat.com>
commit 7b0b73d76651e5f88c88b76efa18d719f832bf6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/7b0b73d7.failed

When a module is built into the kernel the module_init() function
becomes an initcall.  Sometimes debugging through dynamic debug can
help, however, debugging built in kernel modules is typically done by
changing the .config, recompiling, and booting the new kernel in an
effort to determine exactly which module caused a problem.

This patchset can be useful stand-alone or combined with initcall_debug.
There are cases where some initcalls can hang the machine before the
console can be flushed, which can make initcall_debug output inaccurate.
Having the ability to skip initcalls can help further debugging of these
scenarios.

Usage: initcall_blacklist=<list of comma separated initcalls>

ex) added "initcall_blacklist=sgi_uv_sysfs_init" as a kernel parameter and
the log contains:

	blacklisting initcall sgi_uv_sysfs_init
	...
	...
	initcall sgi_uv_sysfs_init blacklisted

ex) added "initcall_blacklist=foo_bar,sgi_uv_sysfs_init" as a kernel parameter
and the log contains:

	blacklisting initcall foo_bar
	blacklisting initcall sgi_uv_sysfs_init
	...
	...
	initcall sgi_uv_sysfs_init blacklisted

[akpm@linux-foundation.org: tweak printk text]
	Signed-off-by: Prarit Bhargava <prarit@redhat.com>
	Cc: Richard Weinberger <richard.weinberger@gmail.com>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: Josh Boyer <jwboyer@fedoraproject.org>
	Cc: Rob Landley <rob@landley.net>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 7b0b73d76651e5f88c88b76efa18d719f832bf6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	init/main.c
diff --cc init/main.c
index c043f5aa277f,8ac3833f2bdf..000000000000
--- a/init/main.c
+++ b/init/main.c
@@@ -74,8 -74,10 +74,12 @@@
  #include <linux/ptrace.h>
  #include <linux/blkdev.h>
  #include <linux/elevator.h>
 -#include <linux/sched_clock.h>
 -#include <linux/context_tracking.h>
  #include <linux/random.h>
++<<<<<<< HEAD
 +#include <linux/context_tracking.h>
++=======
+ #include <linux/list.h>
++>>>>>>> 7b0b73d76651 (init/main.c: add initcall_blacklist kernel parameter)
  
  #include <asm/io.h>
  #include <asm/bugs.h>
@@@ -658,7 -666,69 +662,73 @@@ static void __init do_ctors(void
  bool initcall_debug;
  core_param(initcall_debug, initcall_debug, bool, 0644);
  
++<<<<<<< HEAD
 +static char msgbuf[64];
++=======
+ #ifdef CONFIG_KALLSYMS
+ struct blacklist_entry {
+ 	struct list_head next;
+ 	char *buf;
+ };
+ 
+ static __initdata_or_module LIST_HEAD(blacklisted_initcalls);
+ 
+ static int __init initcall_blacklist(char *str)
+ {
+ 	char *str_entry;
+ 	struct blacklist_entry *entry;
+ 
+ 	/* str argument is a comma-separated list of functions */
+ 	do {
+ 		str_entry = strsep(&str, ",");
+ 		if (str_entry) {
+ 			pr_debug("blacklisting initcall %s\n", str_entry);
+ 			entry = alloc_bootmem(sizeof(*entry));
+ 			entry->buf = alloc_bootmem(strlen(str_entry) + 1);
+ 			strcpy(entry->buf, str_entry);
+ 			list_add(&entry->next, &blacklisted_initcalls);
+ 		}
+ 	} while (str_entry);
+ 
+ 	return 0;
+ }
+ 
+ static bool __init_or_module initcall_blacklisted(initcall_t fn)
+ {
+ 	struct list_head *tmp;
+ 	struct blacklist_entry *entry;
+ 	char *fn_name;
+ 
+ 	fn_name = kasprintf(GFP_KERNEL, "%pf", fn);
+ 	if (!fn_name)
+ 		return false;
+ 
+ 	list_for_each(tmp, &blacklisted_initcalls) {
+ 		entry = list_entry(tmp, struct blacklist_entry, next);
+ 		if (!strcmp(fn_name, entry->buf)) {
+ 			pr_debug("initcall %s blacklisted\n", fn_name);
+ 			kfree(fn_name);
+ 			return true;
+ 		}
+ 	}
+ 
+ 	kfree(fn_name);
+ 	return false;
+ }
+ #else
+ static int __init initcall_blacklist(char *str)
+ {
+ 	pr_warn("initcall_blacklist requires CONFIG_KALLSYMS\n");
+ 	return 0;
+ }
+ 
+ static bool __init_or_module initcall_blacklisted(initcall_t fn)
+ {
+ 	return false;
+ }
+ #endif
+ __setup("initcall_blacklist=", initcall_blacklist);
++>>>>>>> 7b0b73d76651 (init/main.c: add initcall_blacklist kernel parameter)
  
  static int __init_or_module do_one_initcall_debug(initcall_t fn)
  {
@@@ -682,7 -752,11 +752,10 @@@ int __init_or_module do_one_initcall(in
  {
  	int count = preempt_count();
  	int ret;
 -	char msgbuf[64];
  
+ 	if (initcall_blacklisted(fn))
+ 		return -EPERM;
+ 
  	if (initcall_debug)
  		ret = do_one_initcall_debug(fn);
  	else
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 1ea3dd8e329e..499fd5c16a02 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -1171,6 +1171,10 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 			for working out where the kernel is dying during
 			startup.
 
+	initcall_blacklist=  [KNL] Do not execute a comma-separated list of
+			initcall functions.  Useful for debugging built-in
+			modules and initcalls.
+
 	initrd=		[BOOT] Specify the location of the initial ramdisk
 
 	inport.irq=	[HW] Inport (ATI XL and Microsoft) busmouse driver
* Unmerged path init/main.c
