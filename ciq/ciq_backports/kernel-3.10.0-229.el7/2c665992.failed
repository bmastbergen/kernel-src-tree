powerpc/eeh: Clear frozen state for child PE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] eeh: Clear frozen state for child PE (Don Zickus) [1127366]
Rebuild_FUZZ: 90.00%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 2c66599206938412d1781171953d565652ca3b93
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/2c665992.failed

Since commit cb523e09 ("powerpc/eeh: Avoid I/O access during PE
reset"), the PE is kept as frozen state on hardware level until
the PE reset is done completely. After that, we explicitly clear
the frozen state of the affected PE. However, there might have
frozen child PEs of the affected PE and we also need clear their
frozen state as well. Otherwise, the recovery is going to fail.

	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 2c66599206938412d1781171953d565652ca3b93)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/eeh_driver.c
diff --cc arch/powerpc/kernel/eeh_driver.c
index cd221e920667,8bb40e7cdeb6..000000000000
--- a/arch/powerpc/kernel/eeh_driver.c
+++ b/arch/powerpc/kernel/eeh_driver.c
@@@ -413,6 -440,48 +413,51 @@@ static void *eeh_pe_detach_dev(void *da
  	return NULL;
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Explicitly clear PE's frozen state for PowerNV where
+  * we have frozen PE until BAR restore is completed. It's
+  * harmless to clear it for pSeries. To be consistent with
+  * PE reset (for 3 times), we try to clear the frozen state
+  * for 3 times as well.
+  */
+ static void *__eeh_clear_pe_frozen_state(void *data, void *flag)
+ {
+ 	struct eeh_pe *pe = (struct eeh_pe *)data;
+ 	int i, rc;
+ 
+ 	for (i = 0; i < 3; i++) {
+ 		rc = eeh_pci_enable(pe, EEH_OPT_THAW_MMIO);
+ 		if (rc)
+ 			continue;
+ 		rc = eeh_pci_enable(pe, EEH_OPT_THAW_DMA);
+ 		if (!rc)
+ 			break;
+ 	}
+ 
+ 	/* The PE has been isolated, clear it */
+ 	if (rc) {
+ 		pr_warn("%s: Can't clear frozen PHB#%x-PE#%x (%d)\n",
+ 			__func__, pe->phb->global_number, pe->addr, rc);
+ 		return (void *)pe;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ static int eeh_clear_pe_frozen_state(struct eeh_pe *pe)
+ {
+ 	void *rc;
+ 
+ 	rc = eeh_pe_traverse(pe, __eeh_clear_pe_frozen_state, NULL);
+ 	if (!rc)
+ 		eeh_pe_state_clear(pe, EEH_PE_ISOLATED);
+ 
+ 	return rc ? -EIO : 0;
+ }
+ 
++>>>>>>> 2c6659920693 (powerpc/eeh: Clear frozen state for child PE)
  /**
   * eeh_reset_device - Perform actual reset of a pci slot
   * @pe: EEH PE
* Unmerged path arch/powerpc/kernel/eeh_driver.c
