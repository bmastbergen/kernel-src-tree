ath9k: Fix RTC_DERIVED_CLK usage

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Miaoqing Pan <miaoqing@qca.qualcomm.com>
commit 4e6ce4dc7ce71d0886908d55129d5d6482a27ff9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/4e6ce4dc.failed

Based on the reference clock, which could be 25MHz or 40MHz,
AR_RTC_DERIVED_CLK is programmed differently for AR9340 and AR9550.
But, when a chip reset is done, processing the initvals
sets the register back to the default value.

Fix this by moving the code in ath9k_hw_init_pll() to
ar9003_hw_override_ini(). Also, do this override for AR9531.

	Cc: stable@vger.kernel.org
	Signed-off-by: Miaoqing Pan <miaoqing@qca.qualcomm.com>
	Signed-off-by: Sujith Manoharan <c_manoha@qca.qualcomm.com>
	Signed-off-by: John W. Linville <linville@tuxdriver.com>
(cherry picked from commit 4e6ce4dc7ce71d0886908d55129d5d6482a27ff9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/ath/ath9k/ar9003_phy.c
diff --cc drivers/net/wireless/ath/ath9k/ar9003_phy.c
index 3457ca5382f4,1e8ea5e4d4ca..000000000000
--- a/drivers/net/wireless/ath/ath9k/ar9003_phy.c
+++ b/drivers/net/wireless/ath/ath9k/ar9003_phy.c
@@@ -627,11 -643,40 +627,43 @@@ static void ar9003_hw_override_ini(stru
  	 * MAC addr only will fail.
  	 */
  	val = REG_READ(ah, AR_PCU_MISC_MODE2) & (~AR_ADHOC_MCAST_KEYID_ENABLE);
 -	val |= AR_AGG_WEP_ENABLE_FIX |
 -	       AR_AGG_WEP_ENABLE |
 -	       AR_PCU_MISC_MODE2_CFP_IGNORE;
 -	REG_WRITE(ah, AR_PCU_MISC_MODE2, val);
 +	REG_WRITE(ah, AR_PCU_MISC_MODE2,
 +		  val | AR_AGG_WEP_ENABLE_FIX | AR_AGG_WEP_ENABLE);
  
++<<<<<<< HEAD
 +	REG_SET_BIT(ah, AR_PHY_CCK_DETECT,
 +		    AR_PHY_CCK_DETECT_BB_ENABLE_ANT_FAST_DIV);
++=======
+ 	if (AR_SREV_9462(ah) || AR_SREV_9565(ah)) {
+ 		REG_WRITE(ah, AR_GLB_SWREG_DISCONT_MODE,
+ 			  AR_GLB_SWREG_DISCONT_EN_BT_WLAN);
+ 
+ 		if (REG_READ_FIELD(ah, AR_PHY_TX_IQCAL_CONTROL_0,
+ 				   AR_PHY_TX_IQCAL_CONTROL_0_ENABLE_TXIQ_CAL))
+ 			ah->enabled_cals |= TX_IQ_CAL;
+ 		else
+ 			ah->enabled_cals &= ~TX_IQ_CAL;
+ 
+ 	}
+ 
+ 	if (REG_READ(ah, AR_PHY_CL_CAL_CTL) & AR_PHY_CL_CAL_ENABLE)
+ 		ah->enabled_cals |= TX_CL_CAL;
+ 	else
+ 		ah->enabled_cals &= ~TX_CL_CAL;
+ 
+ 	if (AR_SREV_9340(ah) || AR_SREV_9531(ah) || AR_SREV_9550(ah)) {
+ 		if (ah->is_clk_25mhz) {
+ 			REG_WRITE(ah, AR_RTC_DERIVED_CLK, 0x17c << 1);
+ 			REG_WRITE(ah, AR_SLP32_MODE, 0x0010f3d7);
+ 			REG_WRITE(ah, AR_SLP32_INC, 0x0001e7ae);
+ 		} else {
+ 			REG_WRITE(ah, AR_RTC_DERIVED_CLK, 0x261 << 1);
+ 			REG_WRITE(ah, AR_SLP32_MODE, 0x0010f400);
+ 			REG_WRITE(ah, AR_SLP32_INC, 0x0001e800);
+ 		}
+ 		udelay(100);
+ 	}
++>>>>>>> 4e6ce4dc7ce7 (ath9k: Fix RTC_DERIVED_CLK usage)
  }
  
  static void ar9003_hw_prog_ini(struct ath_hw *ah,
* Unmerged path drivers/net/wireless/ath/ath9k/ar9003_phy.c
diff --git a/drivers/net/wireless/ath/ath9k/hw.c b/drivers/net/wireless/ath/ath9k/hw.c
index b1d5037bff7f..98348ffc648c 100644
--- a/drivers/net/wireless/ath/ath9k/hw.c
+++ b/drivers/net/wireless/ath/ath9k/hw.c
@@ -922,19 +922,6 @@ static void ath9k_hw_init_pll(struct ath_hw *ah,
 	udelay(RTC_PLL_SETTLE_DELAY);
 
 	REG_WRITE(ah, AR_RTC_SLEEP_CLK, AR_RTC_FORCE_DERIVED_CLK);
-
-	if (AR_SREV_9340(ah) || AR_SREV_9550(ah)) {
-		if (ah->is_clk_25mhz) {
-			REG_WRITE(ah, AR_RTC_DERIVED_CLK, 0x17c << 1);
-			REG_WRITE(ah, AR_SLP32_MODE, 0x0010f3d7);
-			REG_WRITE(ah,  AR_SLP32_INC, 0x0001e7ae);
-		} else {
-			REG_WRITE(ah, AR_RTC_DERIVED_CLK, 0x261 << 1);
-			REG_WRITE(ah, AR_SLP32_MODE, 0x0010f400);
-			REG_WRITE(ah,  AR_SLP32_INC, 0x0001e800);
-		}
-		udelay(100);
-	}
 }
 
 static void ath9k_hw_init_interrupt_masks(struct ath_hw *ah,
