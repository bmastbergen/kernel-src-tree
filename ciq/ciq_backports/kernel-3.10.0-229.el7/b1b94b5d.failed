mei: me: do not reset when less than expected data is received

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Tomas Winkler <tomas.winkler@intel.com>
commit b1b94b5d387e3a1f034c308e22f9295828d7174a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/b1b94b5d.failed

There is a race in ME hardware between data copy for host and interrupt
delivery. An interrupt can be delivered prior to whole data copied for the
host to read but rather then going trough the reset we just merely need to
wait for the next interrupt.

The bug is visible in read/write stress with multiple connections per client

This is a regression caused as a side effect of the commit:
commit 544f94601409653f07ae6e22d4a39e3a90dceead
mei: do not run reset flow from the interrupt thread

	Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
	Cc: stable <stable@vger.kernel.org> # 3.14
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit b1b94b5d387e3a1f034c308e22f9295828d7174a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mei/interrupt.c
diff --cc drivers/misc/mei/interrupt.c
index 3b748b290f04,f38a32addad0..000000000000
--- a/drivers/misc/mei/interrupt.c
+++ b/drivers/misc/mei/interrupt.c
@@@ -351,7 -351,7 +351,11 @@@ int mei_irq_read_handler(struct mei_dev
  		dev_err(&dev->pdev->dev, "less data available than length=%08x.\n",
  				*slots);
  		/* we can't read the message */
++<<<<<<< HEAD
 +		ret = -ERANGE;
++=======
+ 		ret = -ENODATA;
++>>>>>>> b1b94b5d387e (mei: me: do not reset when less than expected data is received)
  		goto end;
  	}
  
diff --git a/drivers/misc/mei/hw-me.c b/drivers/misc/mei/hw-me.c
index 5963c49a6667..3b90e5f91c11 100644
--- a/drivers/misc/mei/hw-me.c
+++ b/drivers/misc/mei/hw-me.c
@@ -508,7 +508,16 @@ irqreturn_t mei_me_irq_thread_handler(int irq, void *dev_id)
 	while (slots > 0) {
 		dev_dbg(&dev->pdev->dev, "slots to read = %08x\n", slots);
 		rets = mei_irq_read_handler(dev, &complete_list, &slots);
+		/* There is a race between ME write and interrupt delivery:
+		 * Not all data is always available immediately after the
+		 * interrupt, so try to read again on the next interrupt.
+		 */
+		if (rets == -ENODATA)
+			break;
+
 		if (rets && dev->dev_state != MEI_DEV_RESETTING) {
+			dev_err(&dev->pdev->dev, "mei_irq_read_handler ret = %d.\n",
+						rets);
 			schedule_work(&dev->reset_work);
 			goto end;
 		}
* Unmerged path drivers/misc/mei/interrupt.c
