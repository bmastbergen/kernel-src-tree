perf hists: Rename hists__inc_stats()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/hists: Rename hists__inc_stats() (Jiri Olsa) [1134356]
Rebuild_FUZZ: 97.30%
commit-author Namhyung Kim <namhyung@kernel.org>
commit 6263835a1b1ad137f3c26a1383c0487a9388d06e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/6263835a.failed

The existing hists__inc_nr_entries() is a misnomer as it's not only
increasing ->nr_entries but also other stats.  So rename it to more
general hists__inc_stats().

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
Link: http://lkml.kernel.org/r/1398327843-31845-3-git-send-email-namhyung@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit 6263835a1b1ad137f3c26a1383c0487a9388d06e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/hist.h
diff --cc tools/perf/util/hist.h
index a496262fcc29,51478c94d976..000000000000
--- a/tools/perf/util/hist.h
+++ b/tools/perf/util/hist.h
@@@ -115,8 -116,8 +115,13 @@@ void hists__decay_entries(struct hists 
  void hists__output_recalc_col_len(struct hists *hists, int max_rows);
  
  u64 hists__total_period(struct hists *hists);
++<<<<<<< HEAD
 +void hists__inc_nr_entries(struct hists *hists, struct hist_entry *h);
 +void hists__inc_nr_events(struct hists *self, u32 type);
++=======
+ void hists__inc_stats(struct hists *hists, struct hist_entry *h);
+ void hists__inc_nr_events(struct hists *hists, u32 type);
++>>>>>>> 6263835a1b1a (perf hists: Rename hists__inc_stats())
  void events_stats__inc(struct events_stats *stats, u32 type);
  size_t events_stats__fprintf(struct events_stats *stats, FILE *fp);
  
diff --git a/tools/perf/builtin-diff.c b/tools/perf/builtin-diff.c
index 891f993f523b..a92dbb24c026 100644
--- a/tools/perf/builtin-diff.c
+++ b/tools/perf/builtin-diff.c
@@ -585,7 +585,7 @@ static void hists__compute_resort(struct hists *hists)
 		next = rb_next(&he->rb_node_in);
 
 		insert_hist_entry_by_compute(&hists->entries, he, compute);
-		hists__inc_nr_entries(hists, he);
+		hists__inc_stats(hists, he);
 	}
 }
 
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index dac7beaabd9c..7061a17a4853 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -318,7 +318,7 @@ static struct hist_entry *hist_entry__new(struct hist_entry *template)
 	return he;
 }
 
-void hists__inc_nr_entries(struct hists *hists, struct hist_entry *h)
+void hists__inc_stats(struct hists *hists, struct hist_entry *h)
 {
 	if (!h->filtered) {
 		hists__calc_col_len(hists, h);
@@ -684,7 +684,7 @@ void hists__output_resort(struct hists *hists)
 		next = rb_next(&n->rb_node_in);
 
 		__hists__insert_output_entry(&hists->entries, n, min_callchain_hits);
-		hists__inc_nr_entries(hists, n);
+		hists__inc_stats(hists, n);
 	}
 }
 
@@ -861,7 +861,7 @@ static struct hist_entry *hists__add_dummy_entry(struct hists *hists,
 		he->hists = hists;
 		rb_link_node(&he->rb_node_in, parent, p);
 		rb_insert_color(&he->rb_node_in, root);
-		hists__inc_nr_entries(hists, he);
+		hists__inc_stats(hists, he);
 		he->dummy = true;
 	}
 out:
* Unmerged path tools/perf/util/hist.h
