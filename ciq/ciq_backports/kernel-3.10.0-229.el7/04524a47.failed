RDMA/cxgb4: Take IPv6 into account for best_mtu and set_emss

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [infiniband] cxgb4: Take IPv6 into account for best_mtu and set_emss (Sai Vemuri) [1163467]
Rebuild_FUZZ: 95.65%
commit-author Hariprasad S <hariprasad@chelsio.com>
commit 04524a47c36bc7fc573a4856b4e0fd8cf66c3126
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/04524a47.failed

best_mtu and set_emss were not considering ipv6 header for ipv6 case.

	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 04524a47c36bc7fc573a4856b4e0fd8cf66c3126)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/cxgb4/cm.c
diff --cc drivers/infiniband/hw/cxgb4/cm.c
index cc33ba686419,2ca9ec8d6474..000000000000
--- a/drivers/infiniband/hw/cxgb4/cm.c
+++ b/drivers/infiniband/hw/cxgb4/cm.c
@@@ -235,12 -235,18 +235,19 @@@ static void release_tid(struct c4iw_rde
  
  static void set_emss(struct c4iw_ep *ep, u16 opt)
  {
++<<<<<<< HEAD
 +	ep->emss = ep->com.dev->rdev.lldi.mtus[GET_TCPOPT_MSS(opt)] - 40;
++=======
+ 	ep->emss = ep->com.dev->rdev.lldi.mtus[GET_TCPOPT_MSS(opt)] -
+ 		   ((AF_INET == ep->com.remote_addr.ss_family) ?
+ 		    sizeof(struct iphdr) : sizeof(struct ipv6hdr)) -
+ 		   sizeof(struct tcphdr);
++>>>>>>> 04524a47c36b (RDMA/cxgb4: Take IPv6 into account for best_mtu and set_emss)
  	ep->mss = ep->emss;
  	if (GET_TCPOPT_TSTAMP(opt))
- 		ep->emss -= 12;
+ 		ep->emss -= round_up(TCPOLEN_TIMESTAMP, 4);
  	if (ep->emss < 128)
  		ep->emss = 128;
 -	if (ep->emss & 7)
 -		PDBG("Warning: misaligned mtu idx %u mss %u emss=%u\n",
 -		     GET_TCPOPT_MSS(opt), ep->mss, ep->emss);
  	PDBG("%s mss_idx %u mss %u emss=%u\n", __func__, GET_TCPOPT_MSS(opt),
  	     ep->mss, ep->emss);
  }
@@@ -576,6 -582,20 +583,23 @@@ static void c4iw_record_pm_msg(struct c
  		sizeof(ep->com.mapped_remote_addr));
  }
  
++<<<<<<< HEAD
++=======
+ static void best_mtu(const unsigned short *mtus, unsigned short mtu,
+ 		     unsigned int *idx, int use_ts, int ipv6)
+ {
+ 	unsigned short hdr_size = (ipv6 ?
+ 				   sizeof(struct ipv6hdr) :
+ 				   sizeof(struct iphdr)) +
+ 				  sizeof(struct tcphdr) +
+ 				  (use_ts ?
+ 				   round_up(TCPOLEN_TIMESTAMP, 4) : 0);
+ 	unsigned short data_size = mtu - hdr_size;
+ 
+ 	cxgb4_best_aligned_mtu(mtus, hdr_size, data_size, 8, idx);
+ }
+ 
++>>>>>>> 04524a47c36b (RDMA/cxgb4: Take IPv6 into account for best_mtu and set_emss)
  static int send_connect(struct c4iw_ep *ep)
  {
  	struct cpl_act_open_req *req;
@@@ -617,8 -638,19 +641,14 @@@
  	}
  	set_wr_txq(skb, CPL_PRIORITY_SETUP, ep->ctrlq_idx);
  
++<<<<<<< HEAD
 +	cxgb4_best_mtu(ep->com.dev->rdev.lldi.mtus, ep->mtu, &mtu_idx);
++=======
+ 	best_mtu(ep->com.dev->rdev.lldi.mtus, ep->mtu, &mtu_idx,
+ 		 enable_tcp_timestamps,
+ 		 (AF_INET == ep->com.remote_addr.ss_family) ? 0 : 1);
++>>>>>>> 04524a47c36b (RDMA/cxgb4: Take IPv6 into account for best_mtu and set_emss)
  	wscale = compute_wscale(rcv_win);
 -
 -	/*
 -	 * Specify the largest window that will fit in opt0. The
 -	 * remainder will be specified in the rx_data_ack.
 -	 */
 -	win = ep->rcv_win >> 10;
 -	if (win > RCV_BUFSIZ_MASK)
 -		win = RCV_BUFSIZ_MASK;
 -
  	opt0 = (nocong ? NO_CONG(1) : 0) |
  	       KEEP_ALIVE(1) |
  	       DELACK(1) |
@@@ -1714,8 -1768,19 +1744,14 @@@ static void send_fw_act_open_req(struc
  			htons(F_FW_OFLD_CONNECTION_WR_CPLRXDATAACK);
  	req->tcb.tx_max = (__force __be32) jiffies;
  	req->tcb.rcv_adv = htons(1);
++<<<<<<< HEAD
 +	cxgb4_best_mtu(ep->com.dev->rdev.lldi.mtus, ep->mtu, &mtu_idx);
++=======
+ 	best_mtu(ep->com.dev->rdev.lldi.mtus, ep->mtu, &mtu_idx,
+ 		 enable_tcp_timestamps,
+ 		 (AF_INET == ep->com.remote_addr.ss_family) ? 0 : 1);
++>>>>>>> 04524a47c36b (RDMA/cxgb4: Take IPv6 into account for best_mtu and set_emss)
  	wscale = compute_wscale(rcv_win);
 -
 -	/*
 -	 * Specify the largest window that will fit in opt0. The
 -	 * remainder will be specified in the rx_data_ack.
 -	 */
 -	win = ep->rcv_win >> 10;
 -	if (win > RCV_BUFSIZ_MASK)
 -		win = RCV_BUFSIZ_MASK;
 -
  	req->tcb.opt0 = (__force __be64) (TCAM_BYPASS(1) |
  		(nocong ? NO_CONG(1) : 0) |
  		KEEP_ALIVE(1) |
@@@ -2063,10 -2152,34 +2099,28 @@@ static void accept_cr(struct c4iw_ep *e
  
  	PDBG("%s ep %p tid %u\n", __func__, ep, ep->hwtid);
  	BUG_ON(skb_cloned(skb));
 -
 +	skb_trim(skb, sizeof(*rpl));
  	skb_get(skb);
++<<<<<<< HEAD
 +	cxgb4_best_mtu(ep->com.dev->rdev.lldi.mtus, ep->mtu, &mtu_idx);
++=======
+ 	rpl = cplhdr(skb);
+ 	if (is_t5(ep->com.dev->rdev.lldi.adapter_type)) {
+ 		skb_trim(skb, roundup(sizeof(*rpl5), 16));
+ 		rpl5 = (void *)rpl;
+ 		INIT_TP_WR(rpl5, ep->hwtid);
+ 	} else {
+ 		skb_trim(skb, sizeof(*rpl));
+ 		INIT_TP_WR(rpl, ep->hwtid);
+ 	}
+ 	OPCODE_TID(rpl) = cpu_to_be32(MK_OPCODE_TID(CPL_PASS_ACCEPT_RPL,
+ 						    ep->hwtid));
+ 
+ 	best_mtu(ep->com.dev->rdev.lldi.mtus, ep->mtu, &mtu_idx,
+ 		 enable_tcp_timestamps && req->tcpopt.tstamp,
+ 		 (AF_INET == ep->com.remote_addr.ss_family) ? 0 : 1);
++>>>>>>> 04524a47c36b (RDMA/cxgb4: Take IPv6 into account for best_mtu and set_emss)
  	wscale = compute_wscale(rcv_win);
 -
 -	/*
 -	 * Specify the largest window that will fit in opt0. The
 -	 * remainder will be specified in the rx_data_ack.
 -	 */
 -	win = ep->rcv_win >> 10;
 -	if (win > RCV_BUFSIZ_MASK)
 -		win = RCV_BUFSIZ_MASK;
  	opt0 = (nocong ? NO_CONG(1) : 0) |
  	       KEEP_ALIVE(1) |
  	       DELACK(1) |
* Unmerged path drivers/infiniband/hw/cxgb4/cm.c
