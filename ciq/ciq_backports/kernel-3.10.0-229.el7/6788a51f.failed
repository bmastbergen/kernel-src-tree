PCI: Use pci_is_bridge() to simplify code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Yijing Wang <wangyijing@huawei.com>
commit 6788a51fe3391817c8ded5f43dd4c57f3d212c17
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/6788a51f.failed

Use pci_is_bridge() to simplify code.  No functional change.

Requires: 326c1cdae741 PCI: Rename pci_is_bridge() to pci_has_subordinate()
Requires: 1c86438c9423 PCI: Add new pci_is_bridge() interface
	Signed-off-by: Yijing Wang <wangyijing@huawei.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 6788a51fe3391817c8ded5f43dd4c57f3d212c17)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-acpi.c
diff --cc drivers/pci/pci-acpi.c
index 19c63eb1ee76,ca4927ba8433..000000000000
--- a/drivers/pci/pci-acpi.c
+++ b/drivers/pci/pci-acpi.c
@@@ -315,25 -303,17 +315,29 @@@ void acpi_pci_remove_bus(struct pci_bu
  }
  
  /* ACPI bus type */
 -static struct acpi_device *acpi_pci_find_companion(struct device *dev)
 +static int acpi_pci_find_device(struct device *dev, acpi_handle *handle)
  {
  	struct pci_dev *pci_dev = to_pci_dev(dev);
 -	bool check_children;
 +	bool is_bridge;
  	u64 addr;
  
++<<<<<<< HEAD
 +	/*
 +	 * pci_is_bridge() is not suitable here, because pci_dev->subordinate
 +	 * is set only after acpi_pci_find_device() has been called for the
 +	 * given device.
 +	 */
 +	is_bridge = pci_dev->hdr_type == PCI_HEADER_TYPE_BRIDGE
 +			|| pci_dev->hdr_type == PCI_HEADER_TYPE_CARDBUS;
++=======
+ 	check_children = pci_is_bridge(pci_dev);
++>>>>>>> 6788a51fe339 (PCI: Use pci_is_bridge() to simplify code)
  	/* Please ref to ACPI spec for the syntax of _ADR */
  	addr = (PCI_SLOT(pci_dev->devfn) << 16) | PCI_FUNC(pci_dev->devfn);
 -	return acpi_find_child_device(ACPI_COMPANION(dev->parent), addr,
 -				      check_children);
 +	*handle = acpi_find_child(ACPI_HANDLE(dev->parent), addr, is_bridge);
 +	if (!*handle)
 +		return -ENODEV;
 +	return 0;
  }
  
  static void pci_acpi_setup(struct device *dev)
* Unmerged path drivers/pci/pci-acpi.c
diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index 650e4c3be09d..5cdc171c36c3 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -1729,8 +1729,7 @@ unsigned int pci_scan_child_bus(struct pci_bus *bus)
 
 	for (pass=0; pass < 2; pass++)
 		list_for_each_entry(dev, &bus->devices, bus_list) {
-			if (dev->hdr_type == PCI_HEADER_TYPE_BRIDGE ||
-			    dev->hdr_type == PCI_HEADER_TYPE_CARDBUS)
+			if (pci_is_bridge(dev))
 				max = pci_scan_bridge(bus, dev, max, pass);
 		}
 
diff --git a/drivers/pci/setup-bus.c b/drivers/pci/setup-bus.c
index 2e344a5581ae..498ad6bf3748 100644
--- a/drivers/pci/setup-bus.c
+++ b/drivers/pci/setup-bus.c
@@ -1629,9 +1629,7 @@ void pci_assign_unassigned_bus_resources(struct pci_bus *bus)
 
 	down_read(&pci_bus_sem);
 	list_for_each_entry(dev, &bus->devices, bus_list)
-		if (dev->hdr_type == PCI_HEADER_TYPE_BRIDGE ||
-		    dev->hdr_type == PCI_HEADER_TYPE_CARDBUS)
-			if (dev->subordinate)
+		if (pci_is_bridge(dev) && pci_has_subordinate(dev))
 				__pci_bus_size_bridges(dev->subordinate,
 							 &add_list);
 	up_read(&pci_bus_sem);
