ixgbevf: move ring specific stats into ring specific structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Emil Tantilov <emil.s.tantilov@intel.com>
commit 095e2617cee0e0d94040c2eb7af1598429e20661
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/095e2617.failed

This patch moves hot-path specific statistics into the ring structure.
This allows us to drop the adapter structure in some functions and should
help with performance.

	Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Signed-off-by: Emil Tantilov <emil.s.tantilov@intel.com>
	Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
	Signed-off-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 095e2617cee0e0d94040c2eb7af1598429e20661)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
diff --cc drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index c3c1b820ee64,69e6d278480f..000000000000
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@@ -362,13 -362,11 +362,12 @@@ static inline void ixgbevf_rx_checksum(
  
  /**
   * ixgbevf_alloc_rx_buffers - Replace used receive buffers; packet split
-  * @adapter: address of board private structure
+  * @rx_ring: rx descriptor ring (for a specific queue) to setup buffers on
   **/
- static void ixgbevf_alloc_rx_buffers(struct ixgbevf_adapter *adapter,
- 				     struct ixgbevf_ring *rx_ring,
+ static void ixgbevf_alloc_rx_buffers(struct ixgbevf_ring *rx_ring,
  				     int cleaned_count)
  {
 +	struct pci_dev *pdev = adapter->pdev;
  	union ixgbe_adv_rx_desc *rx_desc;
  	struct ixgbevf_rx_buffer *bi;
  	unsigned int i = rx_ring->next_to_use;
@@@ -408,6 -403,7 +407,10 @@@
  	}
  
  no_buffers:
++<<<<<<< HEAD
++=======
+ 	rx_ring->rx_stats.alloc_rx_buff_failed++;
++>>>>>>> 095e2617cee0 (ixgbevf: move ring specific stats into ring specific structure)
  	if (rx_ring->next_to_use != i)
  		ixgbevf_release_rx_desc(rx_ring, i);
  }
@@@ -424,8 -420,6 +427,11 @@@ static int ixgbevf_clean_rx_irq(struct 
  				struct ixgbevf_ring *rx_ring,
  				int budget)
  {
++<<<<<<< HEAD
 +	struct ixgbevf_adapter *adapter = q_vector->adapter;
 +	struct pci_dev *pdev = adapter->pdev;
++=======
++>>>>>>> 095e2617cee0 (ixgbevf: move ring specific stats into ring specific structure)
  	union ixgbe_adv_rx_desc *rx_desc, *next_rxd;
  	struct ixgbevf_rx_buffer *rx_buffer_info, *next_buffer;
  	struct sk_buff *skb;
@@@ -503,8 -497,8 +509,13 @@@
  		 * source pruning.
  		 */
  		if ((skb->pkt_type & (PACKET_BROADCAST | PACKET_MULTICAST)) &&
++<<<<<<< HEAD
 +		    !(compare_ether_addr(adapter->netdev->dev_addr,
 +					eth_hdr(skb)->h_source))) {
++=======
+ 		    ether_addr_equal(rx_ring->netdev->dev_addr,
+ 				     eth_hdr(skb)->h_source)) {
++>>>>>>> 095e2617cee0 (ixgbevf: move ring specific stats into ring specific structure)
  			dev_kfree_skb_irq(skb);
  			goto next_desc;
  		}
diff --git a/drivers/net/ethernet/intel/ixgbevf/ethtool.c b/drivers/net/ethernet/intel/ixgbevf/ethtool.c
index 57df176038cf..59613400f8a9 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ethtool.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ethtool.c
@@ -462,15 +462,15 @@ static void ixgbevf_get_ethtool_stats(struct net_device *netdev,
 	    tx_yields = 0, tx_cleaned = 0, tx_missed = 0;
 
 	for (i = 0; i < adapter->num_rx_queues; i++) {
-		rx_yields += adapter->rx_ring[i]->bp_yields;
-		rx_cleaned += adapter->rx_ring[i]->bp_cleaned;
-		rx_yields += adapter->rx_ring[i]->bp_yields;
+		rx_yields += adapter->rx_ring[i]->stats.yields;
+		rx_cleaned += adapter->rx_ring[i]->stats.cleaned;
+		rx_yields += adapter->rx_ring[i]->stats.yields;
 	}
 
 	for (i = 0; i < adapter->num_tx_queues; i++) {
-		tx_yields += adapter->tx_ring[i]->bp_yields;
-		tx_cleaned += adapter->tx_ring[i]->bp_cleaned;
-		tx_yields += adapter->tx_ring[i]->bp_yields;
+		tx_yields += adapter->tx_ring[i]->stats.yields;
+		tx_cleaned += adapter->tx_ring[i]->stats.cleaned;
+		tx_yields += adapter->tx_ring[i]->stats.yields;
 	}
 
 	adapter->bp_rx_yields = rx_yields;
diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h b/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
index 3e25b305045b..f067ac9a4a20 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf.h
@@ -59,6 +59,29 @@ struct ixgbevf_rx_buffer {
 	dma_addr_t dma;
 };
 
+struct ixgbevf_stats {
+	u64 packets;
+	u64 bytes;
+#ifdef BP_EXTENDED_STATS
+	u64 yields;
+	u64 misses;
+	u64 cleaned;
+#endif
+};
+
+struct ixgbevf_tx_queue_stats {
+	u64 restart_queue;
+	u64 tx_busy;
+	u64 tx_done_old;
+};
+
+struct ixgbevf_rx_queue_stats {
+	u64 non_eop_descs;
+	u64 alloc_rx_page_failed;
+	u64 alloc_rx_buff_failed;
+	u64 csum_err;
+};
+
 struct ixgbevf_ring {
 	struct ixgbevf_ring *next;
 	struct net_device *netdev;
@@ -70,22 +93,20 @@ struct ixgbevf_ring {
 	unsigned int next_to_use;
 	unsigned int next_to_clean;
 
-	int queue_index; /* needed for multiqueue queue management */
 	union {
 		struct ixgbevf_tx_buffer *tx_buffer_info;
 		struct ixgbevf_rx_buffer *rx_buffer_info;
 	};
 
-	u64			total_bytes;
-	u64			total_packets;
-	struct u64_stats_sync	syncp;
+	struct ixgbevf_stats stats;
+	struct u64_stats_sync syncp;
+	union {
+		struct ixgbevf_tx_queue_stats tx_stats;
+		struct ixgbevf_rx_queue_stats rx_stats;
+	};
+
 	u64 hw_csum_rx_error;
 	u64 hw_csum_rx_good;
-#ifdef BP_EXTENDED_STATS
-	u64 bp_yields;
-	u64 bp_misses;
-	u64 bp_cleaned;
-#endif
 	u8 __iomem *tail;
 
 	u16 reg_idx; /* holds the special value that gets the hardware register
@@ -93,6 +114,7 @@ struct ixgbevf_ring {
 		      * for DCB and RSS modes */
 
 	u16 rx_buf_len;
+	int queue_index; /* needed for multiqueue queue management */
 };
 
 /* How many Rx Buffers do we bundle into one write to the hardware ? */
@@ -186,7 +208,7 @@ static inline bool ixgbevf_qv_lock_napi(struct ixgbevf_q_vector *q_vector)
 		q_vector->state |= IXGBEVF_QV_STATE_NAPI_YIELD;
 		rc = false;
 #ifdef BP_EXTENDED_STATS
-		q_vector->tx.ring->bp_yields++;
+		q_vector->tx.ring->stats.yields++;
 #endif
 	} else {
 		/* we don't care if someone yielded */
@@ -221,7 +243,7 @@ static inline bool ixgbevf_qv_lock_poll(struct ixgbevf_q_vector *q_vector)
 		q_vector->state |= IXGBEVF_QV_STATE_POLL_YIELD;
 		rc = false;
 #ifdef BP_EXTENDED_STATS
-		q_vector->rx.ring->bp_yields++;
+		q_vector->rx.ring->stats.yields++;
 #endif
 	} else {
 		/* preserve yield marks */
* Unmerged path drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
