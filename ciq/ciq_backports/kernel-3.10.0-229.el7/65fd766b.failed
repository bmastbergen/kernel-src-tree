powerpc/powernv: Missed IOMMU table type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] powernv: Missed IOMMU table type (Don Zickus) [1127366]
Rebuild_FUZZ: 88.89%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 65fd766b990f79c9b541050a3f868ad058ad0d69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/65fd766b.failed

In function pnv_pci_ioda2_setup_dma_pe(), the IOMMU table type is
set to (TCE_PCI_SWINV_CREATE | TCE_PCI_SWINV_FREE) unconditionally.
It was just set to TCE_PCI by pnv_pci_setup_iommu_table(). So the
primary IOMMU table type (TCE_PCI) is lost. The patch fixes it.

Also, pnv_pci_setup_iommu_table() already set "tbl->it_busno" to
zero and we needn't do it again. The patch removes the redundant
assignment.

The patch also fixes similar issues in pnv_pci_ioda_setup_dma_pe().

	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 65fd766b990f79c9b541050a3f868ad058ad0d69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/pci-ioda.c
diff --cc arch/powerpc/platforms/powernv/pci-ioda.c
index db28bbfcd20e,a02da4ddd1b5..000000000000
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@@ -611,10 -664,12 +611,19 @@@ static void pnv_pci_ioda_setup_dma_pe(s
  		 * errors, and on the first pass the data will be a relative
  		 * bus number, print that out instead.
  		 */
++<<<<<<< HEAD
 +		tbl->it_busno = 0;
 +		tbl->it_index = (unsigned long)ioremap(be64_to_cpup(swinvp), 8);
 +		tbl->it_type = TCE_PCI_SWINV_CREATE | TCE_PCI_SWINV_FREE |
 +			       TCE_PCI_SWINV_PAIR;
++=======
+ 		pe->tce_inval_reg_phys = be64_to_cpup(swinvp);
+ 		tbl->it_index = (unsigned long)ioremap(pe->tce_inval_reg_phys,
+ 				8);
+ 		tbl->it_type |= (TCE_PCI_SWINV_CREATE |
+ 				 TCE_PCI_SWINV_FREE   |
+ 				 TCE_PCI_SWINV_PAIR);
++>>>>>>> 65fd766b990f (powerpc/powernv: Missed IOMMU table type)
  	}
  	iommu_init_table(tbl, phb->hose->node);
  	iommu_register_group(tbl, pci_domain_nr(pe->pbus), pe->pe_number);
@@@ -689,11 -794,13 +698,18 @@@ static void pnv_pci_ioda2_setup_dma_pe(
  		 * errors, and on the first pass the data will be a relative
  		 * bus number, print that out instead.
  		 */
++<<<<<<< HEAD
 +		tbl->it_busno = 0;
 +		tbl->it_index = (unsigned long)ioremap(be64_to_cpup(swinvp), 8);
 +		tbl->it_type = TCE_PCI_SWINV_CREATE | TCE_PCI_SWINV_FREE;
++=======
+ 		pe->tce_inval_reg_phys = be64_to_cpup(swinvp);
+ 		tbl->it_index = (unsigned long)ioremap(pe->tce_inval_reg_phys,
+ 				8);
+ 		tbl->it_type |= (TCE_PCI_SWINV_CREATE | TCE_PCI_SWINV_FREE);
++>>>>>>> 65fd766b990f (powerpc/powernv: Missed IOMMU table type)
  	}
  	iommu_init_table(tbl, phb->hose->node);
 -	iommu_register_group(tbl, pci_domain_nr(pe->pbus), pe->pe_number);
  
  	if (pe->pdev)
  		set_iommu_table_base_and_group(&pe->pdev->dev, tbl);
* Unmerged path arch/powerpc/platforms/powernv/pci-ioda.c
