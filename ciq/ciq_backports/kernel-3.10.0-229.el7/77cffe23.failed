net: Clarification of CHECKSUM_UNNECESSARY

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] Clarification of CHECKSUM_UNNECESSARY (Florian Westphal) [1131999]
Rebuild_FUZZ: 93.67%
commit-author Tom Herbert <therbert@google.com>
commit 77cffe23c1f88835f6bd7b47bfa0c060c2969828
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/77cffe23.failed

This patch:
 - Clarifies the specific requirements of devices returning
   CHECKSUM_UNNECESSARY (comments in skbuff.h).
 - Adds csum_level field to skbuff. This is used to express how
   many checksums are covered by CHECKSUM_UNNECESSARY (stores n - 1).
   This replaces the overloading of skb->encapsulation, that field is
   is now only used to indicate inner headers are valid.
 - Change __skb_checksum_validate_needed to "consume" each checksum
   as indicated by csum_level as layers of the the packet are parsed.
 - Remove skb_pop_rcv_encapsulation, no longer needed in the new
   csum_level model.

	Signed-off-by: Tom Herbert <therbert@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 77cffe23c1f88835f6bd7b47bfa0c060c2969828)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/skbuff.h
diff --cc include/linux/skbuff.h
index 8237a39f2330,c93b5859a772..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -510,13 -592,12 +531,9 @@@ struct sk_buff 
  	__u8			wifi_acked:1;
  	__u8			no_fcs:1;
  	__u8			head_frag:1;
- 	/* Encapsulation protocol and NIC drivers should use
- 	 * this flag to indicate to each other if the skb contains
- 	 * encapsulated packet or not and maybe use the inner packet
- 	 * headers if needed
- 	 */
+ 	/* Indicates the inner headers are valid in the skbuff. */
  	__u8			encapsulation:1;
 -	__u8			encap_hdr_csum:1;
 -	__u8			csum_valid:1;
 -	__u8			csum_complete_sw:1;
 -	/* 1/3 bit hole (depending on ndisc_nodetype presence) */
 +	/* 7/9 bit hole (depending on ndisc_nodetype presence) */
  	kmemcheck_bitfield_end(flags2);
  
  #if defined CONFIG_NET_DMA || defined CONFIG_NET_RX_BUSY_POLL
@@@ -2702,10 -2834,9 +2729,16 @@@ static inline bool __skb_checksum_valid
  						  bool zero_okay,
  						  __sum16 check)
  {
++<<<<<<< HEAD
 +	if (skb_csum_unnecessary(skb)) {
 +		return false;
 +	} else if (zero_okay && !check) {
 +		skb->ip_summed = CHECKSUM_UNNECESSARY;
++=======
+ 	if (skb_csum_unnecessary(skb) || (zero_okay && !check)) {
+ 		skb->csum_valid = 1;
+ 		__skb_decr_checksum_unnecessary(skb);
++>>>>>>> 77cffe23c1f8 (net: Clarification of CHECKSUM_UNNECESSARY)
  		return false;
  	}
  
diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 3d6a284b5a40..63c68409bba6 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -1143,8 +1143,6 @@ static int vxlan_udp_encap_recv(struct sock *sk, struct sk_buff *skb)
 	if (!vs)
 		goto drop;
 
-	skb_pop_rcv_encapsulation(skb);
-
 	vs->rcv(vs, skb, vxh->vx_vni);
 	return 0;
 
* Unmerged path include/linux/skbuff.h
diff --git a/net/ipv4/gre_demux.c b/net/ipv4/gre_demux.c
index 2ef87d72389b..e25b80e2a63b 100644
--- a/net/ipv4/gre_demux.c
+++ b/net/ipv4/gre_demux.c
@@ -124,7 +124,6 @@ static int parse_gre_header(struct sk_buff *skb, struct tnl_ptk_info *tpi,
 			*csum_err = true;
 			return -EINVAL;
 		}
-		skb_pop_rcv_encapsulation(skb);
 		options++;
 	}
 
