ACPI / hotplug / PCI: Consolidate slot disabling and ejecting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [acpi] hotplug/pci: Consolidate slot disabling and ejecting (Myron Stowe) [1114228]
Rebuild_FUZZ: 92.04%
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit ad21d2d046a8a6bbf1b10c04770ec835a4e379e6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/ad21d2d0.failed

Both acpiphp_disable_slot() and acpiphp_eject_slot() are always
called together so instead of calling each separately we can
consolidate them into one function acpiphp_disable_and_eject_slot()
that does both (but it will return success on _EJ0 failures that
were ignored in the majority of call sites anyway).

[rjw: Rebased plus minor tweaks]
	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit ad21d2d046a8a6bbf1b10c04770ec835a4e379e6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/hotplug/acpiphp_glue.c
diff --cc drivers/pci/hotplug/acpiphp_glue.c
index d210006fa4ad,6db790ebd1eb..000000000000
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@@ -833,37 -765,6 +833,40 @@@ static unsigned int get_slot_status(str
  }
  
  /**
++<<<<<<< HEAD
 + * acpiphp_eject_slot - physically eject the slot
 + * @slot: ACPI PHP slot
 + */
 +int acpiphp_eject_slot(struct acpiphp_slot *slot)
 +{
 +	acpi_status status;
 +	struct acpiphp_func *func;
 +	struct acpi_object_list arg_list;
 +	union acpi_object arg;
 +
 +	list_for_each_entry(func, &slot->funcs, sibling) {
 +		/* We don't want to call _EJ0 on non-existing functions. */
 +		if ((func->flags & FUNC_HAS_EJ0)) {
 +			/* _EJ0 method take one argument */
 +			arg_list.count = 1;
 +			arg_list.pointer = &arg;
 +			arg.type = ACPI_TYPE_INTEGER;
 +			arg.integer.value = 1;
 +
 +			status = acpi_evaluate_object(func->handle, "_EJ0", &arg_list, NULL);
 +			if (ACPI_FAILURE(status)) {
 +				pr_warn("%s: _EJ0 failed\n", __func__);
 +				return -1;
 +			} else
 +				break;
 +		}
 +	}
 +	return 0;
 +}
 +
 +/**
++=======
++>>>>>>> ad21d2d046a8 (ACPI / hotplug / PCI: Consolidate slot disabling and ejecting)
   * acpiphp_check_bridge - re-enumerate devices
   * @bridge: where to begin re-enumeration
   *
@@@ -883,13 -784,11 +886,17 @@@ static int acpiphp_check_bridge(struct 
  		if (slot->flags & SLOT_ENABLED) {
  			if (status == ACPI_STA_ALL)
  				continue;
++<<<<<<< HEAD
 +			retval = acpiphp_disable_slot(slot);
 +			if (retval) {
 +				pr_err("Error occurred in disabling\n");
++=======
+ 
+ 			retval = acpiphp_disable_and_eject_slot(slot);
+ 			if (retval)
++>>>>>>> ad21d2d046a8 (ACPI / hotplug / PCI: Consolidate slot disabling and ejecting)
  				goto err_exit;
- 			} else {
- 				acpiphp_eject_slot(slot);
- 			}
+ 
  			disabled++;
  		} else {
  			if (status != ACPI_STA_ALL)
@@@ -1021,13 -927,8 +1028,18 @@@ static void _handle_hotplug_event_bridg
  
  	case ACPI_NOTIFY_EJECT_REQUEST:
  		/* request device eject */
++<<<<<<< HEAD
 +		pr_debug("%s: Device eject notify on %s\n", __func__, objname);
 +		if ((bridge->flags & BRIDGE_HAS_EJ0) && bridge->func) {
 +			struct acpiphp_slot *slot;
 +			slot = bridge->func->slot;
 +			if (!acpiphp_disable_slot(slot))
 +				acpiphp_eject_slot(slot);
 +		}
++=======
+ 		dbg("%s: Device eject notify on %s\n", __func__, objname);
+ 		acpiphp_disable_and_eject_slot(func->slot);
++>>>>>>> ad21d2d046a8 (ACPI / hotplug / PCI: Consolidate slot disabling and ejecting)
  		break;
  
  	case ACPI_NOTIFY_FREQUENCY_MISMATCH:
diff --git a/drivers/pci/hotplug/acpiphp.h b/drivers/pci/hotplug/acpiphp.h
index 8d99e4e1e51d..3d02e5af6fa8 100644
--- a/drivers/pci/hotplug/acpiphp.h
+++ b/drivers/pci/hotplug/acpiphp.h
@@ -169,8 +169,7 @@ void acpiphp_unregister_hotplug_slot(struct acpiphp_slot *slot);
 typedef int (*acpiphp_callback)(struct acpiphp_slot *slot, void *data);
 
 int acpiphp_enable_slot(struct acpiphp_slot *slot);
-int acpiphp_disable_slot(struct acpiphp_slot *slot);
-int acpiphp_eject_slot(struct acpiphp_slot *slot);
+int acpiphp_disable_and_eject_slot(struct acpiphp_slot *slot);
 u8 acpiphp_get_power_status(struct acpiphp_slot *slot);
 u8 acpiphp_get_attention_status(struct acpiphp_slot *slot);
 u8 acpiphp_get_latch_status(struct acpiphp_slot *slot);
diff --git a/drivers/pci/hotplug/acpiphp_core.c b/drivers/pci/hotplug/acpiphp_core.c
index 548bab80163b..1513d36ef7ca 100644
--- a/drivers/pci/hotplug/acpiphp_core.c
+++ b/drivers/pci/hotplug/acpiphp_core.c
@@ -152,15 +152,11 @@ static int enable_slot(struct hotplug_slot *hotplug_slot)
 static int disable_slot(struct hotplug_slot *hotplug_slot)
 {
 	struct slot *slot = hotplug_slot->private;
-	int retval;
 
 	pr_debug("%s - physical_slot = %s\n", __func__, slot_name(slot));
 
 	/* disable the specified slot */
-	retval = acpiphp_disable_slot(slot->acpi_slot);
-	if (!retval)
-		retval = acpiphp_eject_slot(slot->acpi_slot);
-	return retval;
+	return acpiphp_disable_and_eject_slot(slot->acpi_slot);
 }
 
 
* Unmerged path drivers/pci/hotplug/acpiphp_glue.c
