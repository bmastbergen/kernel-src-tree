cpufreq: Perform light-weight init/teardown during suspend/resume

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] Perform light-weight init/teardown during suspend/resume (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 92.56%
commit-author Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
commit 5302c3fb2e62f4ca5e43e060491ba299f58c5231
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/5302c3fb.failed

Now that we have the infrastructure to perform a light-weight init/tear-down,
use that in the cpufreq CPU hotplug notifier when invoked from the
suspend/resume path.

This also ensures that the file permissions of the cpufreq sysfs files are
preserved across suspend/resume, something which commit a66b2e (cpufreq:
Preserve sysfs files across suspend/resume) originally intended to do, but
had to be reverted due to other problems.

	Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 5302c3fb2e62f4ca5e43e060491ba299f58c5231)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq.c
diff --cc drivers/cpufreq/cpufreq.c
index 04f364d37cba,370abb66babc..000000000000
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@@ -1922,19 -2044,22 +1923,27 @@@ static int cpufreq_cpu_callback(struct 
  
  	dev = get_cpu_device(cpu);
  	if (dev) {
- 		switch (action) {
+ 
+ 		if (action & CPU_TASKS_FROZEN)
+ 			frozen = true;
+ 
+ 		switch (action & ~CPU_TASKS_FROZEN) {
  		case CPU_ONLINE:
- 		case CPU_ONLINE_FROZEN:
- 			cpufreq_add_dev(dev, NULL);
+ 			__cpufreq_add_dev(dev, NULL, frozen);
  			cpufreq_update_policy(cpu);
  			break;
+ 
  		case CPU_DOWN_PREPARE:
++<<<<<<< HEAD
 +		case CPU_DOWN_PREPARE_FROZEN:
 +			__cpufreq_remove_dev(dev, NULL);
++=======
+ 			__cpufreq_remove_dev(dev, NULL, frozen);
++>>>>>>> 5302c3fb2e62 (cpufreq: Perform light-weight init/teardown during suspend/resume)
  			break;
+ 
  		case CPU_DOWN_FAILED:
- 		case CPU_DOWN_FAILED_FROZEN:
- 			cpufreq_add_dev(dev, NULL);
+ 			__cpufreq_add_dev(dev, NULL, frozen);
  			break;
  		}
  	}
* Unmerged path drivers/cpufreq/cpufreq.c
diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
index bc73be225be5..cb3841355454 100644
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -349,11 +349,9 @@ static int cpufreq_stat_cpu_callback(struct notifier_block *nfb,
 
 	switch (action) {
 	case CPU_DOWN_PREPARE:
-	case CPU_DOWN_PREPARE_FROZEN:
 		cpufreq_stats_free_sysfs(cpu);
 		break;
 	case CPU_DEAD:
-	case CPU_DEAD_FROZEN:
 		cpufreq_stats_free_table(cpu);
 		break;
 	}
