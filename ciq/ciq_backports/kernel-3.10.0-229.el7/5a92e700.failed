NVMe: RCU protected access to io queues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Keith Busch <keith.busch@intel.com>
commit 5a92e700af2e5e0e6404988d6a7f2ed3dad3f46f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/5a92e700.failed

This adds rcu protected access to nvme_queue to fix a race between a
surprise removal freeing the queue and a thread with open reference on
a NVMe block device using that queue.

The queues do not need to be rcu protected during the initialization or
shutdown parts, so I've added a helper function for raw deferencing
to get around the sparse errors.

There is still a hole in the IOCTL path for the same problem, which is
fixed in a subsequent patch.

	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Matthew Wilcox <matthew.r.wilcox@intel.com>
(cherry picked from commit 5a92e700af2e5e0e6404988d6a7f2ed3dad3f46f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index f1b51fffaafa,b66ab1db4629..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -934,13 -860,15 +942,19 @@@ int nvme_submit_async_cmd(struct nvme_q
  int nvme_submit_admin_cmd(struct nvme_dev *dev, struct nvme_command *cmd,
  								u32 *result)
  {
- 	return nvme_submit_sync_cmd(dev->queues[0], cmd, result, ADMIN_TIMEOUT);
+ 	return nvme_submit_sync_cmd(raw_nvmeq(dev, 0), cmd, result,
+ 								ADMIN_TIMEOUT);
  }
  
 -static int nvme_submit_admin_cmd_async(struct nvme_dev *dev,
 -		struct nvme_command *cmd, struct async_cmd_info *cmdinfo)
 +int nvme_submit_admin_cmd_async(struct nvme_dev *dev, struct nvme_command *cmd,
 +						struct async_cmd_info *cmdinfo)
  {
++<<<<<<< HEAD
 +	return nvme_submit_async_cmd(dev->queues[0], cmd, cmdinfo, ADMIN_TIMEOUT);
++=======
+ 	return nvme_submit_async_cmd(raw_nvmeq(dev, 0), cmd, cmdinfo,
+ 								ADMIN_TIMEOUT);
++>>>>>>> 5a92e700af2e (NVMe: RCU protected access to io queues)
  }
  
  static int adapter_delete_queue(struct nvme_dev *dev, u8 opcode, u16 id)
* Unmerged path drivers/block/nvme-core.c
diff --git a/include/linux/nvme.h b/include/linux/nvme.h
index 69ae03f6eb15..98d367b06f9c 100644
--- a/include/linux/nvme.h
+++ b/include/linux/nvme.h
@@ -73,7 +73,7 @@ enum {
  */
 struct nvme_dev {
 	struct list_head node;
-	struct nvme_queue **queues;
+	struct nvme_queue __rcu **queues;
 	u32 __iomem *dbs;
 	struct pci_dev *pci_dev;
 	struct dma_pool *prp_page_pool;
