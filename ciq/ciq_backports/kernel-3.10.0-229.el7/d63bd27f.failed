cpufreq: powernow: Use generic cpufreq routines

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] powernow: Use generic cpufreq routines (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 89.41%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit d63bd27fe953daa402a108e141c36dcc59c6931c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/d63bd27f.failed

Most of the CPUFreq drivers do similar things in .exit() and .verify() routines
and .attr. So its better if we have generic routines for them which can be used
by cpufreq drivers then.

This patch uses these generic routines in the powernow driver.

	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit d63bd27fe953daa402a108e141c36dcc59c6931c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/powernow-k6.c
#	drivers/cpufreq/powernow-k7.c
diff --cc drivers/cpufreq/powernow-k6.c
index 1c3991f99992,ff05d284e48e..000000000000
--- a/drivers/cpufreq/powernow-k6.c
+++ b/drivers/cpufreq/powernow-k6.c
@@@ -200,8 -182,7 +182,12 @@@ static struct cpufreq_driver powernow_k
  	.exit		= powernow_k6_cpu_exit,
  	.get		= powernow_k6_get,
  	.name		= "powernow-k6",
++<<<<<<< HEAD
 +	.owner		= THIS_MODULE,
 +	.attr		= powernow_k6_attr,
++=======
+ 	.attr		= cpufreq_generic_attr,
++>>>>>>> d63bd27fe953 (cpufreq: powernow: Use generic cpufreq routines)
  };
  
  static const struct x86_cpu_id powernow_k6_ids[] = {
diff --cc drivers/cpufreq/powernow-k7.c
index c355a34234c4,14cd98f5a096..000000000000
--- a/drivers/cpufreq/powernow-k7.c
+++ b/drivers/cpufreq/powernow-k7.c
@@@ -715,8 -704,7 +705,12 @@@ static struct cpufreq_driver powernow_d
  	.init		= powernow_cpu_init,
  	.exit		= powernow_cpu_exit,
  	.name		= "powernow-k7",
++<<<<<<< HEAD
 +	.owner		= THIS_MODULE,
 +	.attr		= powernow_table_attr,
++=======
+ 	.attr		= cpufreq_generic_attr,
++>>>>>>> d63bd27fe953 (cpufreq: powernow: Use generic cpufreq routines)
  };
  
  static int __init powernow_init(void)
* Unmerged path drivers/cpufreq/powernow-k6.c
* Unmerged path drivers/cpufreq/powernow-k7.c
diff --git a/drivers/cpufreq/powernow-k8.c b/drivers/cpufreq/powernow-k8.c
index c770b700c3c9..2efb7598c5e4 100644
--- a/drivers/cpufreq/powernow-k8.c
+++ b/drivers/cpufreq/powernow-k8.c
@@ -1053,17 +1053,6 @@ static int powernowk8_target(struct cpufreq_policy *pol,
 	return work_on_cpu(pol->cpu, powernowk8_target_fn, &pta);
 }
 
-/* Driver entry point to verify the policy and range of frequencies */
-static int powernowk8_verify(struct cpufreq_policy *pol)
-{
-	struct powernow_k8_data *data = per_cpu(powernow_data, pol->cpu);
-
-	if (!data)
-		return -EINVAL;
-
-	return cpufreq_frequency_table_verify(pol, data->powernow_table);
-}
-
 struct init_on_cpu {
 	struct powernow_k8_data *data;
 	int rc;
@@ -1225,20 +1214,15 @@ out:
 	return khz;
 }
 
-static struct freq_attr *powernow_k8_attr[] = {
-	&cpufreq_freq_attr_scaling_available_freqs,
-	NULL,
-};
-
 static struct cpufreq_driver cpufreq_amd64_driver = {
-	.verify		= powernowk8_verify,
+	.verify		= cpufreq_generic_frequency_table_verify,
 	.target		= powernowk8_target,
 	.bios_limit	= acpi_processor_get_bios_limit,
 	.init		= powernowk8_cpu_init,
 	.exit		= powernowk8_cpu_exit,
 	.get		= powernowk8_get,
 	.name		= "powernow-k8",
-	.attr		= powernow_k8_attr,
+	.attr		= cpufreq_generic_attr,
 };
 
 static void __request_acpi_cpufreq(void)
