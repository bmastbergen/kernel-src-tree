qlcnic: Set real_num_{tx|rx}_queues properly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Shahed Shaikh <shahed.shaikh@qlogic.com>
commit 84d7ad2c3b8a80888d9a483388ccbd5e5f07438f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/84d7ad2c.failed

Do not set netdev->real_num_tx_queues directly,
let netif_set_real_num_tx_queues() take care of it.
Do not overwrite netdev->num_tx_queues everytime when driver
changes its Tx ring size through ethtool -L and also notify
stack to update number of Rx queues.

	Signed-off-by: Shahed Shaikh <shahed.shaikh@qlogic.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 84d7ad2c3b8a80888d9a483388ccbd5e5f07438f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
#	drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
diff --cc drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
index d72671739763,f785d01c7d12..000000000000
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
@@@ -1673,26 -1719,6 +1673,29 @@@ static inline u32 qlcnic_tx_avail(struc
  				tx_ring->producer;
  }
  
++<<<<<<< HEAD
 +static inline int qlcnic_set_real_num_queues(struct qlcnic_adapter *adapter,
 +					     struct net_device *netdev)
 +{
 +	int err, tx_q;
 +
 +	tx_q = adapter->max_drv_tx_rings;
 +
 +	netdev->num_tx_queues = tx_q;
 +	netdev->real_num_tx_queues = tx_q;
 +
 +	err = netif_set_real_num_tx_queues(netdev, tx_q);
 +	if (err)
 +		dev_err(&adapter->pdev->dev, "failed to set %d Tx queues\n",
 +			tx_q);
 +	else
 +		dev_info(&adapter->pdev->dev, "set %d Tx queues\n", tx_q);
 +
 +	return err;
 +}
 +
++=======
++>>>>>>> 84d7ad2c3b8a (qlcnic: Set real_num_{tx|rx}_queues properly)
  struct qlcnic_nic_template {
  	int (*config_bridged_mode) (struct qlcnic_adapter *, u32);
  	int (*config_led) (struct qlcnic_adapter *, u32, u32);
diff --cc drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
index 9918316d26ed,7e55e88a81bf..000000000000
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
@@@ -3718,24 -3989,16 +3744,25 @@@ int qlcnic_validate_max_tx_rings(struc
  		return -EINVAL;
  	}
  
 -	if (qlcnic_82xx_check(adapter) && (queue_type == QLCNIC_TX_QUEUE) &&
 -	    !qlcnic_check_multi_tx(adapter)) {
 -			netdev_err(netdev, "No Multi Tx queue support\n");
 -			return -EINVAL;
 +	return 0;
 +}
 +
 +int qlcnic_validate_max_rss(struct qlcnic_adapter *adapter,
 +				__u32 val)
 +{
 +	struct net_device *netdev = adapter->netdev;
++<<<<<<< HEAD
 +	u8 max_hw = adapter->ahw->max_rx_ques;
 +	u32 max_allowed;
 +
 +	if (!qlcnic_use_msi_x && !qlcnic_use_msi) {
 +		netdev_err(netdev, "No RSS support in INT-x mode\n");
 +		return -EINVAL;
  	}
  
 -	if (ring_cnt > num_online_cpus()) {
 -		netdev_err(netdev,
 -			   "%s value[%u] should not be higher than, number of online CPUs\n",
 -			   buf, num_online_cpus());
 +	if (val > QLCNIC_MAX_SDS_RINGS) {
 +		netdev_err(netdev, "RSS value should not be higher than %u\n",
 +			   QLCNIC_MAX_SDS_RINGS);
  		return -EINVAL;
  	}
  
@@@ -3765,22 -4005,24 +3792,35 @@@
  	return 0;
  }
  
 -int qlcnic_setup_rings(struct qlcnic_adapter *adapter)
 +int qlcnic_set_max_rss(struct qlcnic_adapter *adapter, u8 data, int txq)
  {
 -	struct net_device *netdev = adapter->netdev;
++=======
+ 	u8 tx_rings, rx_rings;
++>>>>>>> 84d7ad2c3b8a (qlcnic: Set real_num_{tx|rx}_queues properly)
  	int err;
 +	struct net_device *netdev = adapter->netdev;
 +	int num_msix;
  
  	if (test_bit(__QLCNIC_RESETTING, &adapter->state))
  		return -EBUSY;
  
++<<<<<<< HEAD
 +	if (qlcnic_82xx_check(adapter) && !qlcnic_use_msi_x &&
 +	    !qlcnic_use_msi) {
 +		netdev_err(netdev, "No RSS support in INT-x mode\n");
 +		return -EINVAL;
 +	}
++=======
+ 	tx_rings = adapter->drv_tss_rings;
+ 	rx_rings = adapter->drv_rss_rings;
++>>>>>>> 84d7ad2c3b8a (qlcnic: Set real_num_{tx|rx}_queues properly)
  
  	netif_device_detach(netdev);
+ 
+ 	err = qlcnic_set_real_num_queues(adapter, tx_rings, rx_rings);
+ 	if (err)
+ 		goto done;
+ 
  	if (netif_running(netdev))
  		__qlcnic_down(adapter, netdev);
  
@@@ -3813,6 -4042,18 +3853,21 @@@
  		return err;
  	}
  
++<<<<<<< HEAD
++=======
+ 	/* Check if we need to update real_num_{tx|rx}_queues because
+ 	 * qlcnic_setup_intr() may change Tx/Rx rings size
+ 	 */
+ 	if ((tx_rings != adapter->drv_tx_rings) ||
+ 	    (rx_rings != adapter->drv_sds_rings)) {
+ 		err = qlcnic_set_real_num_queues(adapter,
+ 						 adapter->drv_tx_rings,
+ 						 adapter->drv_sds_rings);
+ 		if (err)
+ 			goto done;
+ 	}
+ 
++>>>>>>> 84d7ad2c3b8a (qlcnic: Set real_num_{tx|rx}_queues properly)
  	if (qlcnic_83xx_check(adapter)) {
  		qlcnic_83xx_initialize_nic(adapter, 1);
  		err = qlcnic_83xx_setup_mbx_intr(adapter);
* Unmerged path drivers/net/ethernet/qlogic/qlcnic/qlcnic.h
* Unmerged path drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
