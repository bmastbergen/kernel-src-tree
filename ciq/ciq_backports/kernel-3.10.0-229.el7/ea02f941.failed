net: introduce SO_BPF_EXTENSIONS

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] filter: introduce SO_BPF_EXTENSIONS (Jiri Benc) [1079524]
Rebuild_FUZZ: 89.55%
commit-author Michal Sekletar <msekleta@redhat.com>
commit ea02f9411d9faa3553ed09ce0ec9f00ceae9885e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/ea02f941.failed

For user space packet capturing libraries such as libpcap, there's
currently only one way to check which BPF extensions are supported
by the kernel, that is, commit aa1113d9f85d ("net: filter: return
-EINVAL if BPF_S_ANC* operation is not supported"). For querying all
extensions at once this might be rather inconvenient.

Therefore, this patch introduces a new option which can be used as
an argument for getsockopt(), and allows one to obtain information
about which BPF extensions are supported by the current kernel.

As David Miller suggests, we do not need to define any bits right
now and status quo can just return 0 in order to state that this
versions supports SKF_AD_PROTOCOL up to SKF_AD_PAY_OFFSET. Later
additions to BPF extensions need to add their bits to the
bpf_tell_extensions() function, as documented in the comment.

	Signed-off-by: Michal Sekletar <msekleta@redhat.com>
	Cc: David Miller <davem@davemloft.net>
	Reviewed-by: Daniel Borkmann <dborkman@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ea02f9411d9faa3553ed09ce0ec9f00ceae9885e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/alpha/include/uapi/asm/socket.h
#	arch/avr32/include/uapi/asm/socket.h
#	arch/cris/include/uapi/asm/socket.h
#	arch/frv/include/uapi/asm/socket.h
#	arch/ia64/include/uapi/asm/socket.h
#	arch/m32r/include/uapi/asm/socket.h
#	arch/mips/include/uapi/asm/socket.h
#	arch/mn10300/include/uapi/asm/socket.h
#	arch/parisc/include/uapi/asm/socket.h
#	arch/powerpc/include/uapi/asm/socket.h
#	arch/s390/include/uapi/asm/socket.h
#	arch/sparc/include/uapi/asm/socket.h
#	arch/xtensa/include/uapi/asm/socket.h
#	include/uapi/asm-generic/socket.h
diff --cc arch/alpha/include/uapi/asm/socket.h
index eee6ea76bdaf,3de1394bcab8..000000000000
--- a/arch/alpha/include/uapi/asm/socket.h
+++ b/arch/alpha/include/uapi/asm/socket.h
@@@ -81,4 -81,10 +81,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/avr32/include/uapi/asm/socket.h
index 37401f535126,6e6cd159924b..000000000000
--- a/arch/avr32/include/uapi/asm/socket.h
+++ b/arch/avr32/include/uapi/asm/socket.h
@@@ -74,4 -74,10 +74,14 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
 +#endif /* __ASM_AVR32_SOCKET_H */
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
+ #endif /* _UAPI__ASM_AVR32_SOCKET_H */
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
diff --cc arch/cris/include/uapi/asm/socket.h
index ba409c9947bc,ed94e5ed0a23..000000000000
--- a/arch/cris/include/uapi/asm/socket.h
+++ b/arch/cris/include/uapi/asm/socket.h
@@@ -76,6 -76,12 +76,15 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _ASM_SOCKET_H */
  
  
diff --cc arch/frv/include/uapi/asm/socket.h
index 31dbb5d8e13d,ca2c6e6f31c6..000000000000
--- a/arch/frv/include/uapi/asm/socket.h
+++ b/arch/frv/include/uapi/asm/socket.h
@@@ -74,5 -74,11 +74,14 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _ASM_SOCKET_H */
  
diff --cc arch/ia64/include/uapi/asm/socket.h
index 6b4329f18b29,a1b49bac7951..000000000000
--- a/arch/ia64/include/uapi/asm/socket.h
+++ b/arch/ia64/include/uapi/asm/socket.h
@@@ -83,4 -83,10 +83,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _ASM_IA64_SOCKET_H */
diff --cc arch/m32r/include/uapi/asm/socket.h
index 2a3b59e0e171,6c9a24b3aefa..000000000000
--- a/arch/m32r/include/uapi/asm/socket.h
+++ b/arch/m32r/include/uapi/asm/socket.h
@@@ -74,4 -74,10 +74,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _ASM_M32R_SOCKET_H */
diff --cc arch/mips/include/uapi/asm/socket.h
index 3b211507be7f,a14baa218c76..000000000000
--- a/arch/mips/include/uapi/asm/socket.h
+++ b/arch/mips/include/uapi/asm/socket.h
@@@ -92,4 -92,10 +92,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/mn10300/include/uapi/asm/socket.h
index b4ce844c9391,6aa3ce1854aa..000000000000
--- a/arch/mn10300/include/uapi/asm/socket.h
+++ b/arch/mn10300/include/uapi/asm/socket.h
@@@ -74,4 -74,10 +74,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _ASM_SOCKET_H */
diff --cc arch/parisc/include/uapi/asm/socket.h
index 4fecb26230e7,fe35ceacf0e7..000000000000
--- a/arch/parisc/include/uapi/asm/socket.h
+++ b/arch/parisc/include/uapi/asm/socket.h
@@@ -73,4 -73,10 +73,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	0x4026
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		0x4027
+ 
+ #define SO_MAX_PACING_RATE	0x4028
+ 
+ #define SO_BPF_EXTENSIONS	0x4029
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/powerpc/include/uapi/asm/socket.h
index a6d74467c9ed,a9c3e2e18c05..000000000000
--- a/arch/powerpc/include/uapi/asm/socket.h
+++ b/arch/powerpc/include/uapi/asm/socket.h
@@@ -83,4 -83,8 +83,11 @@@
  
  #define SO_BUSY_POLL		46
  
++<<<<<<< HEAD
++=======
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif	/* _ASM_POWERPC_SOCKET_H */
diff --cc arch/s390/include/uapi/asm/socket.h
index 92494494692e,e031332096d7..000000000000
--- a/arch/s390/include/uapi/asm/socket.h
+++ b/arch/s390/include/uapi/asm/socket.h
@@@ -82,4 -82,8 +82,11 @@@
  
  #define SO_BUSY_POLL		46
  
++<<<<<<< HEAD
++=======
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* _ASM_SOCKET_H */
diff --cc arch/sparc/include/uapi/asm/socket.h
index 89f49b68a21c,54d9608681b6..000000000000
--- a/arch/sparc/include/uapi/asm/socket.h
+++ b/arch/sparc/include/uapi/asm/socket.h
@@@ -70,6 -70,12 +70,15 @@@
  
  #define SO_SELECT_ERR_QUEUE	0x0029
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		0x0030
+ 
+ #define SO_MAX_PACING_RATE	0x0031
+ 
+ #define SO_BPF_EXTENSIONS	0x0032
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  /* Security levels - as per NRL IPv6 - don't actually do anything */
  #define SO_SECURITY_AUTHENTICATION		0x5001
  #define SO_SECURITY_ENCRYPTION_TRANSPORT	0x5002
diff --cc arch/xtensa/include/uapi/asm/socket.h
index a8f44f50e651,39acec0cf0b1..000000000000
--- a/arch/xtensa/include/uapi/asm/socket.h
+++ b/arch/xtensa/include/uapi/asm/socket.h
@@@ -85,4 -85,10 +85,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif	/* _XTENSA_SOCKET_H */
diff --cc include/uapi/asm-generic/socket.h
index f04b69b6abf2,ea0796bdcf88..000000000000
--- a/include/uapi/asm-generic/socket.h
+++ b/include/uapi/asm-generic/socket.h
@@@ -78,4 -78,8 +78,11 @@@
  
  #define SO_BUSY_POLL		46
  
++<<<<<<< HEAD
++=======
+ #define SO_MAX_PACING_RATE	47
+ 
+ #define SO_BPF_EXTENSIONS	48
+ 
++>>>>>>> ea02f9411d9f (net: introduce SO_BPF_EXTENSIONS)
  #endif /* __ASM_GENERIC_SOCKET_H */
* Unmerged path arch/alpha/include/uapi/asm/socket.h
* Unmerged path arch/avr32/include/uapi/asm/socket.h
* Unmerged path arch/cris/include/uapi/asm/socket.h
* Unmerged path arch/frv/include/uapi/asm/socket.h
* Unmerged path arch/ia64/include/uapi/asm/socket.h
* Unmerged path arch/m32r/include/uapi/asm/socket.h
* Unmerged path arch/mips/include/uapi/asm/socket.h
* Unmerged path arch/mn10300/include/uapi/asm/socket.h
* Unmerged path arch/parisc/include/uapi/asm/socket.h
* Unmerged path arch/powerpc/include/uapi/asm/socket.h
* Unmerged path arch/s390/include/uapi/asm/socket.h
* Unmerged path arch/sparc/include/uapi/asm/socket.h
* Unmerged path arch/xtensa/include/uapi/asm/socket.h
diff --git a/include/linux/filter.h b/include/linux/filter.h
index f65f5a69db8f..10127fe03372 100644
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -76,6 +76,17 @@ static inline void bpf_jit_free(struct sk_filter *fp)
 #define SK_RUN_FILTER(FILTER, SKB) sk_run_filter(SKB, FILTER->insns)
 #endif
 
+static inline int bpf_tell_extensions(void)
+{
+	/* When adding new BPF extension it is necessary to enumerate
+	 * it here, so userspace software which wants to know what is
+	 * supported can do so by inspecting return value of this
+	 * function
+	 */
+
+	return 0;
+}
+
 enum {
 	BPF_S_RET_K = 1,
 	BPF_S_RET_A,
* Unmerged path include/uapi/asm-generic/socket.h
diff --git a/net/core/sock.c b/net/core/sock.c
index 2c097c5a35dd..c464812b962e 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -1166,6 +1166,10 @@ int sock_getsockopt(struct socket *sock, int level, int optname,
 		v.val = sock_flag(sk, SOCK_FILTER_LOCKED);
 		break;
 
+	case SO_BPF_EXTENSIONS:
+		v.val = bpf_tell_extensions();
+		break;
+
 	case SO_SELECT_ERR_QUEUE:
 		v.val = sock_flag(sk, SOCK_SELECT_ERR_QUEUE);
 		break;
