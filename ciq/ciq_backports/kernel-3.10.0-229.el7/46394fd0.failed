ACPI / hotplug: Move container-specific code out of the core

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [acpi] hotplug: Move container-specific code out of the core (Myron Stowe) [1128632]
Rebuild_FUZZ: 93.81%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 46394fd017c0615982a3d29d45ced14bea9c526d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/46394fd0.failed

Move container-specific uevents from the core hotplug code to the
container scan handler's .attach() and .detach() callbacks.

This way the core will not have to special-case containers and
the uevents will be guaranteed to happen every time a container
is either scanned or trimmed as appropriate.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
(cherry picked from commit 46394fd017c0615982a3d29d45ced14bea9c526d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/scan.c
#	include/acpi/acpi_bus.h
diff --cc drivers/acpi/scan.c
index 2bbdeee33be4,b1b8f4304597..000000000000
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@@ -202,13 -206,6 +202,16 @@@ static int acpi_scan_hot_remove(struct 
  	acpi_status status;
  	unsigned long long sta;
  
++<<<<<<< HEAD
 +	/* If there is no handle, the device node has been unregistered. */
 +	if (!handle) {
 +		dev_dbg(&device->dev, "ACPI handle missing\n");
 +		put_device(&device->dev);
 +		return -EINVAL;
 +	}
 +
++=======
++>>>>>>> 46394fd017c0 (ACPI / hotplug: Move container-specific code out of the core)
  	/*
  	 * Carry out two passes here and ignore errors in the first pass,
  	 * because if the devices in question are memory blocks and
@@@ -285,10 -276,27 +288,30 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +void acpi_bus_device_eject(struct acpi_device *device, u32 ost_src)
++=======
+ static int acpi_scan_device_check(struct acpi_device *adev)
+ {
+ 	int error;
+ 
+ 	error = acpi_bus_scan(adev->handle);
+ 	if (error) {
+ 		dev_warn(&adev->dev, "Namespace scan failure\n");
+ 		return error;
+ 	}
+ 	if (!adev->handler) {
+ 		dev_warn(&adev->dev, "Enumeration failure\n");
+ 		return -ENODEV;
+ 	}
+ 	return 0;
+ }
+ 
+ static void acpi_device_hotplug(void *data, u32 src)
++>>>>>>> 46394fd017c0 (ACPI / hotplug: Move container-specific code out of the core)
  {
 +	acpi_handle handle = device->handle;
  	u32 ost_code = ACPI_OST_SC_NON_SPECIFIC_FAILURE;
 -	struct acpi_device *adev = data;
 -	struct acpi_scan_handler *handler;
  	int error;
  
  	lock_device_hotplug();
diff --cc include/acpi/acpi_bus.h
index be0290eb08d8,3e4150b6d71a..000000000000
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@@ -91,14 -94,7 +91,12 @@@ struct acpi_device
  struct acpi_hotplug_profile {
  	struct kobject kobj;
  	bool enabled:1;
++<<<<<<< HEAD
 +	bool ignore:1;
 +	enum acpi_hotplug_mode mode;
++=======
+ 	int (*scan_dependent)(struct acpi_device *adev);
++>>>>>>> 46394fd017c0 (ACPI / hotplug: Move container-specific code out of the core)
  };
  
  static inline struct acpi_hotplug_profile *to_acpi_hotplug_profile(
diff --git a/drivers/acpi/container.c b/drivers/acpi/container.c
index e23151667655..83d232c10f13 100644
--- a/drivers/acpi/container.c
+++ b/drivers/acpi/container.c
@@ -44,19 +44,24 @@ static const struct acpi_device_id container_device_ids[] = {
 	{"", 0},
 };
 
-static int container_device_attach(struct acpi_device *device,
+static int container_device_attach(struct acpi_device *adev,
 				   const struct acpi_device_id *not_used)
 {
-	/* This is necessary for container hotplug to work. */
+	kobject_uevent(&adev->dev.kobj, KOBJ_ONLINE);
 	return 1;
 }
 
+static void container_device_detach(struct acpi_device *adev)
+{
+	kobject_uevent(&adev->dev.kobj, KOBJ_OFFLINE);
+}
+
 static struct acpi_scan_handler container_handler = {
 	.ids = container_device_ids,
 	.attach = container_device_attach,
+	.detach = container_device_detach,
 	.hotplug = {
 		.enabled = true,
-		.mode = AHM_CONTAINER,
 	},
 };
 
* Unmerged path drivers/acpi/scan.c
* Unmerged path include/acpi/acpi_bus.h
