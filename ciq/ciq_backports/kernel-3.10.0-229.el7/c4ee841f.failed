intel_pstate: add sample time scaling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Dirk Brandewie <dirk.j.brandewie@intel.com>
commit c4ee841f602e5eef8eab673295c49c5b49d7732b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/c4ee841f.failed

The PID assumes that samples are of equal time, which for a deferable
timers this is not true when the system goes idle.  This causes the
PID to take a long time to converge to the min P state and depending
on the pattern of the idle load can make the P state appear stuck.

The hold-off value of three sample times before using the scaling is
to give a grace period for applications that have high performance
requirements and spend a lot of time idle,  The poster child for this
behavior is the ffmpeg benchmark in the Phoronix test suite.

	Cc: 3.14+ <stable@vger.kernel.org> # 3.14+
	Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit c4ee841f602e5eef8eab673295c49c5b49d7732b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index ffef765dbef0,2a07588dcbac..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -602,7 -617,17 +608,21 @@@ static inline int32_t intel_pstate_get_
  	max_pstate = int_tofp(cpu->pstate.max_pstate);
  	current_pstate = int_tofp(cpu->pstate.current_pstate);
  	core_busy = mul_fp(core_busy, div_fp(max_pstate, current_pstate));
++<<<<<<< HEAD
 +	return FP_ROUNDUP(core_busy);
++=======
+ 
+ 	sample_time = (pid_params.sample_rate_ms  * USEC_PER_MSEC);
+ 	duration_us = (u32) ktime_us_delta(cpu->sample.time,
+ 					cpu->last_sample_time);
+ 	if (duration_us > sample_time * 3) {
+ 		sample_ratio = div_fp(int_tofp(sample_time),
+ 				int_tofp(duration_us));
+ 		core_busy = mul_fp(core_busy, sample_ratio);
+ 	}
+ 
+ 	return core_busy;
++>>>>>>> c4ee841f602e (intel_pstate: add sample time scaling)
  }
  
  static inline void intel_pstate_adjust_busy_pstate(struct cpudata *cpu)
* Unmerged path drivers/cpufreq/intel_pstate.c
