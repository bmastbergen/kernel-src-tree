ixgbe: remove unused media type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit cbcc637059f0c4ba539e8e8a3be378c6329ac8e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/cbcc6370.failed

This patch reverts the addition of the fiber_fixed type, which ended up
never being used. We don't have plans to support this type going
forward, and there is no reason to keep an unused type around polluting
the code.

Reverts: 4e8e1bca6e2 ("ixgbe: add new media type")
CC: Arun Sharma <asharma@fb.com>
	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit cbcc637059f0c4ba539e8e8a3be378c6329ac8e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
#	drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
index 40ae44cc44fc,bdac7bd1725a..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
@@@ -600,75 -664,6 +600,78 @@@ static void ixgbe_flap_tx_laser_multisp
  }
  
  /**
++<<<<<<< HEAD
 + *  ixgbe_set_fiber_fixed_speed - Set module link speed for fixed fiber
 + *  @hw: pointer to hardware structure
 + *  @speed: link speed to set
 + *
 + *  We set the module speed differently for fixed fiber.  For other
 + *  multi-speed devices we don't have an error value so here if we
 + *  detect an error we just log it and exit.
 + */
 +static void ixgbe_set_fiber_fixed_speed(struct ixgbe_hw *hw,
 +					ixgbe_link_speed speed)
 +{
 +	s32 status;
 +	u8 rs, eeprom_data;
 +
 +	switch (speed) {
 +	case IXGBE_LINK_SPEED_10GB_FULL:
 +		/* one bit mask same as setting on */
 +		rs = IXGBE_SFF_SOFT_RS_SELECT_10G;
 +		break;
 +	case IXGBE_LINK_SPEED_1GB_FULL:
 +		rs = IXGBE_SFF_SOFT_RS_SELECT_1G;
 +		break;
 +	default:
 +		hw_dbg(hw, "Invalid fixed module speed\n");
 +		return;
 +	}
 +
 +	/* Set RS0 */
 +	status = hw->phy.ops.read_i2c_byte(hw, IXGBE_SFF_SFF_8472_OSCB,
 +					   IXGBE_I2C_EEPROM_DEV_ADDR2,
 +					   &eeprom_data);
 +	if (status) {
 +		hw_dbg(hw, "Failed to read Rx Rate Select RS0\n");
 +		goto out;
 +	}
 +
 +	eeprom_data = (eeprom_data & ~IXGBE_SFF_SOFT_RS_SELECT_MASK) & rs;
 +
 +	status = hw->phy.ops.write_i2c_byte(hw, IXGBE_SFF_SFF_8472_OSCB,
 +					    IXGBE_I2C_EEPROM_DEV_ADDR2,
 +					    eeprom_data);
 +	if (status) {
 +		hw_dbg(hw, "Failed to write Rx Rate Select RS0\n");
 +		goto out;
 +	}
 +
 +	/* Set RS1 */
 +	status = hw->phy.ops.read_i2c_byte(hw, IXGBE_SFF_SFF_8472_ESCB,
 +					   IXGBE_I2C_EEPROM_DEV_ADDR2,
 +					   &eeprom_data);
 +	if (status) {
 +		hw_dbg(hw, "Failed to read Rx Rate Select RS1\n");
 +		goto out;
 +	}
 +
 +	eeprom_data = (eeprom_data & ~IXGBE_SFF_SOFT_RS_SELECT_MASK) & rs;
 +
 +	status = hw->phy.ops.write_i2c_byte(hw, IXGBE_SFF_SFF_8472_ESCB,
 +					    IXGBE_I2C_EEPROM_DEV_ADDR2,
 +					    eeprom_data);
 +	if (status) {
 +		hw_dbg(hw, "Failed to write Rx Rate Select RS1\n");
 +		goto out;
 +	}
 +out:
 +	return;
 +}
 +
 +/**
++=======
++>>>>>>> cbcc637059f0 (ixgbe: remove unused media type)
   *  ixgbe_setup_mac_link_multispeed_fiber - Set MAC link speed
   *  @hw: pointer to hardware structure
   *  @speed: new link speed
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
index 3ccd4f7151a8,7a9d8744408f..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
@@@ -140,11 -139,16 +139,21 @@@ static s32 ixgbe_setup_fc(struct ixgbe_
  	 * we link at 10G, the 1G advertisement is harmless and vice versa.
  	 */
  	switch (hw->phy.media_type) {
++<<<<<<< HEAD
 +	case ixgbe_media_type_fiber_fixed:
++=======
+ 	case ixgbe_media_type_backplane:
+ 		/* some MAC's need RMW protection on AUTOC */
+ 		ret_val = hw->mac.ops.prot_autoc_read(hw, &locked, &reg_bp);
+ 		if (ret_val)
+ 			goto out;
+ 
+ 		/* only backplane uses autoc so fall though */
++>>>>>>> cbcc637059f0 (ixgbe: remove unused media type)
  	case ixgbe_media_type_fiber:
 +	case ixgbe_media_type_backplane:
  		reg = IXGBE_READ_REG(hw, IXGBE_PCS1GANA);
 -
 +		reg_bp = IXGBE_READ_REG(hw, IXGBE_AUTOC);
  		break;
  	case ixgbe_media_type_copper:
  		hw->phy.ops.read_reg(hw, MDIO_AN_ADVERTISE,
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
index 5549a26b0d68..c3b5a40cd775 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h
@@ -66,9 +66,6 @@
 #define IXGBE_SFF_1GBASET_CAPABLE		0x8
 #define IXGBE_SFF_10GBASESR_CAPABLE		0x10
 #define IXGBE_SFF_10GBASELR_CAPABLE		0x20
-#define IXGBE_SFF_SOFT_RS_SELECT_MASK		0x8
-#define IXGBE_SFF_SOFT_RS_SELECT_10G		0x8
-#define IXGBE_SFF_SOFT_RS_SELECT_1G		0x0
 #define IXGBE_SFF_ADDRESSING_MODE		0x4
 #define IXGBE_SFF_QSFP_DA_ACTIVE_CABLE		0x1
 #define IXGBE_SFF_QSFP_DA_PASSIVE_CABLE		0x8
@@ -80,7 +77,6 @@
 #define IXGBE_I2C_EEPROM_STATUS_PASS		0x1
 #define IXGBE_I2C_EEPROM_STATUS_FAIL		0x2
 #define IXGBE_I2C_EEPROM_STATUS_IN_PROGRESS	0x3
-
 /* Flow control defines */
 #define IXGBE_TAF_SYM_PAUSE                  0x400
 #define IXGBE_TAF_ASM_PAUSE                  0x800
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
index 1a3e7f63308b..52bc58b8a021 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
@@ -2646,7 +2646,6 @@ enum ixgbe_sfp_type {
 enum ixgbe_media_type {
 	ixgbe_media_type_unknown = 0,
 	ixgbe_media_type_fiber,
-	ixgbe_media_type_fiber_fixed,
 	ixgbe_media_type_fiber_qsfp,
 	ixgbe_media_type_fiber_lco,
 	ixgbe_media_type_copper,
