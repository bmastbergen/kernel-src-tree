storvsc: fix a bug in storvsc limits

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author K. Y. Srinivasan <kys@microsoft.com>
commit 0fb8db29f2a02e8451e4e56d364c706f70a9ef00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0fb8db29.failed

Commit 4cd83ecdac20d30725b4f96e5d7814a1e290bc7e changed the limits to
reflect the values on the host. It turns out that WS2008R2 cannot
correctly handle these new limits. Fix this bug by setting the limits
based on the host.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Reviewed-by: Long Li <longli@microsoft.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 0fb8db29f2a02e8451e4e56d364c706f70a9ef00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/storvsc_drv.c
diff --cc drivers/scsi/storvsc_drv.c
index be0d3c1e0c21,caa9f0ea217c..000000000000
--- a/drivers/scsi/storvsc_drv.c
+++ b/drivers/scsi/storvsc_drv.c
@@@ -1750,19 -1687,31 +1753,41 @@@ static int storvsc_probe(struct hv_devi
  	 * set state to properly communicate with the host.
  	 */
  
++<<<<<<< HEAD
 +	if (vmbus_proto_version == VERSION_WIN8) {
++=======
+ 	switch (vmbus_proto_version) {
+ 	case VERSION_WS2008:
+ 	case VERSION_WIN7:
+ 		sense_buffer_size = PRE_WIN8_STORVSC_SENSE_BUFFER_SIZE;
+ 		vmscsi_size_delta = sizeof(struct vmscsi_win8_extension);
+ 		vmstor_current_major = VMSTOR_WIN7_MAJOR;
+ 		vmstor_current_minor = VMSTOR_WIN7_MINOR;
+ 		max_luns_per_target = STORVSC_IDE_MAX_LUNS_PER_TARGET;
+ 		max_targets = STORVSC_IDE_MAX_TARGETS;
+ 		max_channels = STORVSC_IDE_MAX_CHANNELS;
+ 		break;
+ 	default:
++>>>>>>> 0fb8db29f2a0 (storvsc: fix a bug in storvsc limits)
  		sense_buffer_size = POST_WIN7_STORVSC_SENSE_BUFFER_SIZE;
  		vmscsi_size_delta = 0;
  		vmstor_current_major = VMSTOR_WIN8_MAJOR;
  		vmstor_current_minor = VMSTOR_WIN8_MINOR;
++<<<<<<< HEAD
 +	} else {
 +		sense_buffer_size = PRE_WIN8_STORVSC_SENSE_BUFFER_SIZE;
 +		vmscsi_size_delta = sizeof(struct vmscsi_win8_extension);
 +		vmstor_current_major = VMSTOR_WIN7_MAJOR;
 +		vmstor_current_minor = VMSTOR_WIN7_MINOR;
++=======
+ 		max_luns_per_target = STORVSC_MAX_LUNS_PER_TARGET;
+ 		max_targets = STORVSC_MAX_TARGETS;
+ 		max_channels = STORVSC_MAX_CHANNELS;
+ 		break;
++>>>>>>> 0fb8db29f2a0 (storvsc: fix a bug in storvsc limits)
  	}
  
 -	if (dev_id->driver_data == SFC_GUID)
 -		scsi_driver.can_queue = (STORVSC_MAX_IO_REQUESTS *
 -					 STORVSC_FC_MAX_TARGETS);
 +
  	host = scsi_host_alloc(&scsi_driver,
  			       sizeof(struct hv_host_device));
  	if (!host)
@@@ -1796,12 -1745,25 +1821,34 @@@
  	host_dev->path = stor_device->path_id;
  	host_dev->target = stor_device->target_id;
  
++<<<<<<< HEAD
 +	/* max # of devices per target */
 +	host->max_lun = STORVSC_MAX_LUNS_PER_TARGET;
 +	/* max # of targets per channel */
 +	host->max_id = STORVSC_MAX_TARGETS;
 +	/* max # of channels */
 +	host->max_channel = STORVSC_MAX_CHANNELS - 1;
++=======
+ 	switch (dev_id->driver_data) {
+ 	case SFC_GUID:
+ 		host->max_lun = STORVSC_FC_MAX_LUNS_PER_TARGET;
+ 		host->max_id = STORVSC_FC_MAX_TARGETS;
+ 		host->max_channel = STORVSC_FC_MAX_CHANNELS - 1;
+ 		break;
+ 
+ 	case SCSI_GUID:
+ 		host->max_lun = max_luns_per_target;
+ 		host->max_id = max_targets;
+ 		host->max_channel = max_channels - 1;
+ 		break;
+ 
+ 	default:
+ 		host->max_lun = STORVSC_IDE_MAX_LUNS_PER_TARGET;
+ 		host->max_id = STORVSC_IDE_MAX_TARGETS;
+ 		host->max_channel = STORVSC_IDE_MAX_CHANNELS - 1;
+ 		break;
+ 	}
++>>>>>>> 0fb8db29f2a0 (storvsc: fix a bug in storvsc limits)
  	/* max cmd length */
  	host->max_cmd_len = STORVSC_MAX_CMD_LEN;
  
* Unmerged path drivers/scsi/storvsc_drv.c
