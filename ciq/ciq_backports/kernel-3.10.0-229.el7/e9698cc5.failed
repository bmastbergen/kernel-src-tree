cpufreq: Add helper to perform alloc/free of policy structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] Add helper to perform alloc/free of policy structure (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 92.04%
commit-author Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
commit e9698cc5d2749c5b74e137f94a95d7e505b097e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/e9698cc5.failed

Separate out the allocation of the cpufreq policy structure (along with
its error handling) to a helper function. This makes the code easier to
read and also helps with some upcoming code reorganization.

	Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit e9698cc5d2749c5b74e137f94a95d7e505b097e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq.c
diff --cc drivers/cpufreq/cpufreq.c
index 949c027a523e,18e58c1bfd66..000000000000
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@@ -964,7 -1023,12 +995,16 @@@ static int cpufreq_add_dev(struct devic
  #endif
  #endif
  
++<<<<<<< HEAD
 +	policy = kzalloc(sizeof(struct cpufreq_policy), GFP_KERNEL);
++=======
+ 	if (!try_module_get(cpufreq_driver->owner)) {
+ 		ret = -EINVAL;
+ 		goto module_out;
+ 	}
+ 
+ 	policy = cpufreq_policy_alloc();
++>>>>>>> e9698cc5d274 (cpufreq: Add helper to perform alloc/free of policy structure)
  	if (!policy)
  		goto nomem_out;
  
@@@ -1050,13 -1096,10 +1084,9 @@@ err_out_unregister
  
  err_set_policy_cpu:
  	per_cpu(cpufreq_policy_cpu, cpu) = -1;
- 	free_cpumask_var(policy->related_cpus);
- err_free_cpumask:
- 	free_cpumask_var(policy->cpus);
- err_free_policy:
- 	kfree(policy);
+ 	cpufreq_policy_free(policy);
  nomem_out:
 -	module_put(cpufreq_driver->owner);
 -module_out:
 +	up_read(&cpufreq_rwsem);
  	return ret;
  }
  
@@@ -1177,10 -1220,10 +1207,8 @@@ static int __cpufreq_remove_dev(struct 
  		if (cpufreq_driver->exit)
  			cpufreq_driver->exit(data);
  
- 		free_cpumask_var(data->related_cpus);
- 		free_cpumask_var(data->cpus);
- 		kfree(data);
+ 		cpufreq_policy_free(data);
  	} else {
 -		pr_debug("%s: removing link, cpu: %d\n", __func__, cpu);
 -		cpufreq_cpu_put(data);
  		if (cpufreq_driver->target) {
  			__cpufreq_governor(data, CPUFREQ_GOV_START);
  			__cpufreq_governor(data, CPUFREQ_GOV_LIMITS);
* Unmerged path drivers/cpufreq/cpufreq.c
