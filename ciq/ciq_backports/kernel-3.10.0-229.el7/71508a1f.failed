cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] use kzalloc() to allocate memory for cpufreq_frequency_table (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 93.02%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit 71508a1f4f2286eea728a5994f1fb14b77340b47
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/71508a1f.failed

Few drivers are using kmalloc() to allocate memory for frequency
tables and since we will have an additional field '.flags' in
'struct cpufreq_frequency_table', these might become unstable.
Better get these fixed by replacing kmalloc() by kzalloc() instead.

Along with that we also remove use of .driver_data from SPEAr driver
as it doesn't use it at all. Also, writing zero to .driver_data is not
required for powernow-k8 as it is already zero.

Reported-and-reviewed-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 71508a1f4f2286eea728a5994f1fb14b77340b47)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/mach-s3c24xx/cpufreq.c
#	drivers/cpufreq/acpi-cpufreq.c
#	drivers/cpufreq/ia64-acpi-cpufreq.c
#	drivers/cpufreq/powernow-k8.c
#	drivers/cpufreq/spear-cpufreq.c
diff --cc arch/arm/mach-s3c24xx/cpufreq.c
index 3c0e78ede0da,be1b2b5c9753..000000000000
--- a/arch/arm/mach-s3c24xx/cpufreq.c
+++ b/arch/arm/mach-s3c24xx/cpufreq.c
@@@ -615,7 -586,7 +615,11 @@@ static int s3c_cpufreq_build_freq(void
  	size = cpu_cur.info->calc_freqtable(&cpu_cur, NULL, 0);
  	size++;
  
++<<<<<<< HEAD:arch/arm/mach-s3c24xx/cpufreq.c
 +	ftab = kmalloc(sizeof(struct cpufreq_frequency_table) * size, GFP_KERNEL);
++=======
+ 	ftab = kzalloc(sizeof(*ftab) * size, GFP_KERNEL);
++>>>>>>> 71508a1f4f22 (cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table):drivers/cpufreq/s3c24xx-cpufreq.c
  	if (!ftab) {
  		printk(KERN_ERR "%s: no memory for tables\n", __func__);
  		return -ENOMEM;
@@@ -691,9 -662,9 +695,9 @@@ int __init s3c_plltab_register(struct c
  	struct cpufreq_frequency_table *vals;
  	unsigned int size;
  
 -	size = sizeof(*vals) * (plls_no + 1);
 +	size = sizeof(struct cpufreq_frequency_table) * (plls_no + 1);
  
- 	vals = kmalloc(size, GFP_KERNEL);
+ 	vals = kzalloc(size, GFP_KERNEL);
  	if (vals) {
  		memcpy(vals, plls, size);
  		pll_reg = vals;
diff --cc drivers/cpufreq/acpi-cpufreq.c
index 10095bf1ccaa,c91ef5785dfa..000000000000
--- a/drivers/cpufreq/acpi-cpufreq.c
+++ b/drivers/cpufreq/acpi-cpufreq.c
@@@ -774,7 -754,7 +774,11 @@@ static int acpi_cpufreq_cpu_init(struc
  		goto err_unreg;
  	}
  
++<<<<<<< HEAD
 +	data->freq_table = kmalloc(sizeof(struct cpufreq_frequency_table) *
++=======
+ 	data->freq_table = kzalloc(sizeof(*data->freq_table) *
++>>>>>>> 71508a1f4f22 (cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table)
  		    (perf->state_count+1), GFP_KERNEL);
  	if (!data->freq_table) {
  		result = -ENOMEM;
diff --cc drivers/cpufreq/ia64-acpi-cpufreq.c
index c0075dbaa633,c30aaa6a54e8..000000000000
--- a/drivers/cpufreq/ia64-acpi-cpufreq.c
+++ b/drivers/cpufreq/ia64-acpi-cpufreq.c
@@@ -304,7 -254,7 +304,11 @@@ acpi_cpufreq_cpu_init 
  	}
  
  	/* alloc freq_table */
++<<<<<<< HEAD
 +	data->freq_table = kmalloc(sizeof(struct cpufreq_frequency_table) *
++=======
+ 	data->freq_table = kzalloc(sizeof(*data->freq_table) *
++>>>>>>> 71508a1f4f22 (cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table)
  	                           (data->acpi_data.state_count + 1),
  	                           GFP_KERNEL);
  	if (!data->freq_table) {
diff --cc drivers/cpufreq/powernow-k8.c
index 0895590c15f4,1b6ae6b57c11..000000000000
--- a/drivers/cpufreq/powernow-k8.c
+++ b/drivers/cpufreq/powernow-k8.c
@@@ -623,7 -623,7 +623,11 @@@ static int fill_powernow_table(struct p
  	if (check_pst_table(data, pst, maxvid))
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	powernow_table = kmalloc((sizeof(struct cpufreq_frequency_table)
++=======
+ 	powernow_table = kzalloc((sizeof(*powernow_table)
++>>>>>>> 71508a1f4f22 (cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table)
  		* (data->numps + 1)), GFP_KERNEL);
  	if (!powernow_table) {
  		printk(KERN_ERR PFX "powernow_table memory alloc failure\n");
@@@ -793,7 -793,7 +797,11 @@@ static int powernow_k8_cpu_init_acpi(st
  	}
  
  	/* fill in data->powernow_table */
++<<<<<<< HEAD
 +	powernow_table = kmalloc((sizeof(struct cpufreq_frequency_table)
++=======
+ 	powernow_table = kzalloc((sizeof(*powernow_table)
++>>>>>>> 71508a1f4f22 (cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table)
  		* (data->acpi_data.state_count + 1)), GFP_KERNEL);
  	if (!powernow_table) {
  		pr_debug("powernow_table memory alloc failure\n");
diff --cc drivers/cpufreq/spear-cpufreq.c
index 156829f4576d,38678396636d..000000000000
--- a/drivers/cpufreq/spear-cpufreq.c
+++ b/drivers/cpufreq/spear-cpufreq.c
@@@ -249,12 -201,9 +249,18 @@@ static int spear_cpufreq_driver_init(vo
  		goto out_put_node;
  	}
  
++<<<<<<< HEAD
 +	for (i = 0; i < cnt; i++) {
 +		freq_tbl[i].index = i;
++=======
+ 	for (i = 0; i < cnt; i++)
++>>>>>>> 71508a1f4f22 (cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table)
  		freq_tbl[i].frequency = be32_to_cpup(val++);
- 	}
  
++<<<<<<< HEAD
 +	freq_tbl[i].index = i;
++=======
++>>>>>>> 71508a1f4f22 (cpufreq: use kzalloc() to allocate memory for cpufreq_frequency_table)
  	freq_tbl[i].frequency = CPUFREQ_TABLE_END;
  
  	spear_cpufreq.freq_tbl = freq_tbl;
* Unmerged path arch/arm/mach-s3c24xx/cpufreq.c
* Unmerged path drivers/cpufreq/acpi-cpufreq.c
* Unmerged path drivers/cpufreq/ia64-acpi-cpufreq.c
diff --git a/drivers/cpufreq/longhaul.c b/drivers/cpufreq/longhaul.c
index 51a0420c0c78..acc663c675b6 100644
--- a/drivers/cpufreq/longhaul.c
+++ b/drivers/cpufreq/longhaul.c
@@ -475,7 +475,7 @@ static int longhaul_get_ranges(void)
 		return -EINVAL;
 	}
 
-	longhaul_table = kmalloc((numscales + 1) * sizeof(*longhaul_table),
+	longhaul_table = kzalloc((numscales + 1) * sizeof(*longhaul_table),
 			GFP_KERNEL);
 	if (!longhaul_table)
 		return -ENOMEM;
* Unmerged path drivers/cpufreq/powernow-k8.c
* Unmerged path drivers/cpufreq/spear-cpufreq.c
