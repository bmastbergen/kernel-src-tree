net: use ethtool_cmd_speed_set helper to set ethtool speed value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [ethernet] igb: use ethtool_cmd_speed_set helper to set ethtool speed value (Stefan Assmann) [1091121]
Rebuild_FUZZ: 95.31%
commit-author Jiri Pirko <jiri@resnulli.us>
commit d4f3cd49d2800dc037724efa9b33c485a1cc23d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/d4f3cd49.failed

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d4f3cd49d2800dc037724efa9b33c485a1cc23d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igb/igb_ethtool.c
#	drivers/s390/net/qeth_core_main.c
diff --cc drivers/net/ethernet/intel/igb/igb_ethtool.c
index 99a3752bcefe,d3d2154ed9e1..000000000000
--- a/drivers/net/ethernet/intel/igb/igb_ethtool.c
+++ b/drivers/net/ethernet/intel/igb/igb_ethtool.c
@@@ -229,9 -230,10 +230,15 @@@ static int igb_get_settings(struct net_
  		else
  			ecmd->duplex = DUPLEX_HALF;
  	} else {
++<<<<<<< HEAD
 +		ecmd->speed = -1;
 +		ecmd->duplex = -1;
++=======
+ 		speed = SPEED_UNKNOWN;
+ 		ecmd->duplex = DUPLEX_UNKNOWN;
++>>>>>>> d4f3cd49d280 (net: use ethtool_cmd_speed_set helper to set ethtool speed value)
  	}
+ 	ethtool_cmd_speed_set(ecmd, speed);
  	if ((hw->phy.media_type == e1000_media_type_fiber) ||
  	    hw->mac.autoneg)
  		ecmd->autoneg = AUTONEG_ENABLE;
diff --cc drivers/s390/net/qeth_core_main.c
index f4e4ebae338c,18ddb249c917..000000000000
--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@@ -5612,6 -5725,8 +5612,11 @@@ int qeth_core_ethtool_get_settings(stru
  {
  	struct qeth_card *card = netdev->ml_priv;
  	enum qeth_link_types link_type;
++<<<<<<< HEAD
++=======
+ 	struct carrier_info carrier_info;
+ 	u32 speed;
++>>>>>>> d4f3cd49d280 (net: use ethtool_cmd_speed_set helper to set ethtool speed value)
  
  	if ((card->info.type == QETH_CARD_TYPE_IQD) || (card->info.guestlan))
  		link_type = QETH_LINK_TYPE_10GBIT_ETH;
@@@ -5627,72 -5740,88 +5632,153 @@@
  	switch (link_type) {
  	case QETH_LINK_TYPE_FAST_ETH:
  	case QETH_LINK_TYPE_LANE_ETH100:
++<<<<<<< HEAD
 +		ecmd->supported |= SUPPORTED_10baseT_Half |
 +					SUPPORTED_10baseT_Full |
 +					SUPPORTED_100baseT_Half |
 +					SUPPORTED_100baseT_Full |
 +					SUPPORTED_TP;
 +		ecmd->advertising |= ADVERTISED_10baseT_Half |
 +					ADVERTISED_10baseT_Full |
 +					ADVERTISED_100baseT_Half |
 +					ADVERTISED_100baseT_Full |
 +					ADVERTISED_TP;
 +		ecmd->speed = SPEED_100;
++=======
+ 		qeth_set_ecmd_adv_sup(ecmd, SPEED_100, PORT_TP);
+ 		speed = SPEED_100;
++>>>>>>> d4f3cd49d280 (net: use ethtool_cmd_speed_set helper to set ethtool speed value)
  		ecmd->port = PORT_TP;
  		break;
  
  	case QETH_LINK_TYPE_GBIT_ETH:
  	case QETH_LINK_TYPE_LANE_ETH1000:
++<<<<<<< HEAD
 +		ecmd->supported |= SUPPORTED_10baseT_Half |
 +					SUPPORTED_10baseT_Full |
 +					SUPPORTED_100baseT_Half |
 +					SUPPORTED_100baseT_Full |
 +					SUPPORTED_1000baseT_Half |
 +					SUPPORTED_1000baseT_Full |
 +					SUPPORTED_FIBRE;
 +		ecmd->advertising |= ADVERTISED_10baseT_Half |
 +					ADVERTISED_10baseT_Full |
 +					ADVERTISED_100baseT_Half |
 +					ADVERTISED_100baseT_Full |
 +					ADVERTISED_1000baseT_Half |
 +					ADVERTISED_1000baseT_Full |
 +					ADVERTISED_FIBRE;
 +		ecmd->speed = SPEED_1000;
++=======
+ 		qeth_set_ecmd_adv_sup(ecmd, SPEED_1000, PORT_FIBRE);
+ 		speed = SPEED_1000;
++>>>>>>> d4f3cd49d280 (net: use ethtool_cmd_speed_set helper to set ethtool speed value)
  		ecmd->port = PORT_FIBRE;
  		break;
  
  	case QETH_LINK_TYPE_10GBIT_ETH:
++<<<<<<< HEAD
 +		ecmd->supported |= SUPPORTED_10baseT_Half |
 +					SUPPORTED_10baseT_Full |
 +					SUPPORTED_100baseT_Half |
 +					SUPPORTED_100baseT_Full |
 +					SUPPORTED_1000baseT_Half |
 +					SUPPORTED_1000baseT_Full |
 +					SUPPORTED_10000baseT_Full |
 +					SUPPORTED_FIBRE;
 +		ecmd->advertising |= ADVERTISED_10baseT_Half |
 +					ADVERTISED_10baseT_Full |
 +					ADVERTISED_100baseT_Half |
 +					ADVERTISED_100baseT_Full |
 +					ADVERTISED_1000baseT_Half |
 +					ADVERTISED_1000baseT_Full |
 +					ADVERTISED_10000baseT_Full |
 +					ADVERTISED_FIBRE;
 +		ecmd->speed = SPEED_10000;
++=======
+ 		qeth_set_ecmd_adv_sup(ecmd, SPEED_10000, PORT_FIBRE);
+ 		speed = SPEED_10000;
++>>>>>>> d4f3cd49d280 (net: use ethtool_cmd_speed_set helper to set ethtool speed value)
  		ecmd->port = PORT_FIBRE;
  		break;
  
  	default:
++<<<<<<< HEAD
 +		ecmd->supported |= SUPPORTED_10baseT_Half |
 +					SUPPORTED_10baseT_Full |
 +					SUPPORTED_TP;
 +		ecmd->advertising |= ADVERTISED_10baseT_Half |
 +					ADVERTISED_10baseT_Full |
 +					ADVERTISED_TP;
 +		ecmd->speed = SPEED_10;
++=======
+ 		qeth_set_ecmd_adv_sup(ecmd, SPEED_10, PORT_TP);
+ 		speed = SPEED_10;
++>>>>>>> d4f3cd49d280 (net: use ethtool_cmd_speed_set helper to set ethtool speed value)
  		ecmd->port = PORT_TP;
  	}
+ 	ethtool_cmd_speed_set(ecmd, speed);
  
++<<<<<<< HEAD
++=======
+ 	/* Check if we can obtain more accurate information.	 */
+ 	/* If QUERY_CARD_INFO command is not supported or fails, */
+ 	/* just return the heuristics that was filled above.	 */
+ 	if (qeth_query_card_info(card, &carrier_info) != 0)
+ 		return 0;
+ 
+ 	netdev_dbg(netdev,
+ 	"card info: card_type=0x%02x, port_mode=0x%04x, port_speed=0x%08x\n",
+ 			carrier_info.card_type,
+ 			carrier_info.port_mode,
+ 			carrier_info.port_speed);
+ 
+ 	/* Update attributes for which we've obtained more authoritative */
+ 	/* information, leave the rest the way they where filled above.  */
+ 	switch (carrier_info.card_type) {
+ 	case CARD_INFO_TYPE_1G_COPPER_A:
+ 	case CARD_INFO_TYPE_1G_COPPER_B:
+ 		qeth_set_ecmd_adv_sup(ecmd, SPEED_1000, PORT_TP);
+ 		ecmd->port = PORT_TP;
+ 		break;
+ 	case CARD_INFO_TYPE_1G_FIBRE_A:
+ 	case CARD_INFO_TYPE_1G_FIBRE_B:
+ 		qeth_set_ecmd_adv_sup(ecmd, SPEED_1000, PORT_FIBRE);
+ 		ecmd->port = PORT_FIBRE;
+ 		break;
+ 	case CARD_INFO_TYPE_10G_FIBRE_A:
+ 	case CARD_INFO_TYPE_10G_FIBRE_B:
+ 		qeth_set_ecmd_adv_sup(ecmd, SPEED_10000, PORT_FIBRE);
+ 		ecmd->port = PORT_FIBRE;
+ 		break;
+ 	}
+ 
+ 	switch (carrier_info.port_mode) {
+ 	case CARD_INFO_PORTM_FULLDUPLEX:
+ 		ecmd->duplex = DUPLEX_FULL;
+ 		break;
+ 	case CARD_INFO_PORTM_HALFDUPLEX:
+ 		ecmd->duplex = DUPLEX_HALF;
+ 		break;
+ 	}
+ 
+ 	switch (carrier_info.port_speed) {
+ 	case CARD_INFO_PORTS_10M:
+ 		speed = SPEED_10;
+ 		break;
+ 	case CARD_INFO_PORTS_100M:
+ 		speed = SPEED_100;
+ 		break;
+ 	case CARD_INFO_PORTS_1G:
+ 		speed = SPEED_1000;
+ 		break;
+ 	case CARD_INFO_PORTS_10G:
+ 		speed = SPEED_10000;
+ 		break;
+ 	}
+ 	ethtool_cmd_speed_set(ecmd, speed);
+ 
++>>>>>>> d4f3cd49d280 (net: use ethtool_cmd_speed_set helper to set ethtool speed value)
  	return 0;
  }
  EXPORT_SYMBOL_GPL(qeth_core_ethtool_get_settings);
* Unmerged path drivers/net/ethernet/intel/igb/igb_ethtool.c
diff --git a/drivers/net/ntb_netdev.c b/drivers/net/ntb_netdev.c
index f3cdf64997d6..db1e2c6c2027 100644
--- a/drivers/net/ntb_netdev.c
+++ b/drivers/net/ntb_netdev.c
@@ -288,7 +288,6 @@ static int ntb_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
 	cmd->supported = SUPPORTED_Backplane;
 	cmd->advertising = ADVERTISED_Backplane;
-	cmd->speed = SPEED_UNKNOWN;
 	ethtool_cmd_speed_set(cmd, SPEED_UNKNOWN);
 	cmd->duplex = DUPLEX_FULL;
 	cmd->port = PORT_OTHER;
* Unmerged path drivers/s390/net/qeth_core_main.c
