kexec: support kexec/kdump on EFI systems

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Vivek Goyal <vgoyal@redhat.com>
commit 6a2c20e7d8900ed273dc34a9af9bf02fc478e427
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/6a2c20e7.failed

This patch does two things.  It passes EFI run time mappings to second
kernel in bootparams efi_info.  Second kernel parse this info and create
new mappings in second kernel.  That means mappings in first and second
kernel will be same.  This paves the way to enable EFI in kexec kernel.

This patch also prepares and passes EFI setup data through bootparams.
This contains bunch of information about various tables and their
addresses.

These information gathering and passing has been written along the lines
of what current kexec-tools is doing to make kexec work with UEFI.

[akpm@linux-foundation.org: s/get_efi/efi_get/g, per Matt]
	Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Michael Kerrisk <mtk.manpages@gmail.com>
	Cc: Yinghai Lu <yinghai@kernel.org>
	Cc: Eric Biederman <ebiederm@xmission.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Matthew Garrett <mjg59@srcf.ucam.org>
	Cc: Greg Kroah-Hartman <greg@kroah.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: WANG Chao <chaowang@redhat.com>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Matt Fleming <matt@console-pimps.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6a2c20e7d8900ed273dc34a9af9bf02fc478e427)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/kexec-bzimage64.c
#	drivers/firmware/efi/runtime-map.c
#	include/linux/efi.h
diff --cc include/linux/efi.h
index 4ded1b651ca6,45cb4ffdea62..000000000000
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@@ -906,4 -1153,78 +906,81 @@@ int efivars_sysfs_init(void)
  
  #endif /* CONFIG_EFI_VARS */
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_EFI_RUNTIME_MAP
+ int efi_runtime_map_init(struct kobject *);
+ void efi_runtime_map_setup(void *, int, u32);
+ int efi_get_runtime_map_size(void);
+ int efi_get_runtime_map_desc_size(void);
+ int efi_runtime_map_copy(void *buf, size_t bufsz);
+ #else
+ static inline int efi_runtime_map_init(struct kobject *kobj)
+ {
+ 	return 0;
+ }
+ 
+ static inline void
+ efi_runtime_map_setup(void *map, int nr_entries, u32 desc_size) {}
+ 
+ static inline int efi_get_runtime_map_size(void)
+ {
+ 	return 0;
+ }
+ 
+ static inline int efi_get_runtime_map_desc_size(void)
+ {
+ 	return 0;
+ }
+ 
+ static inline int efi_runtime_map_copy(void *buf, size_t bufsz)
+ {
+ 	return 0;
+ }
+ 
+ #endif
+ 
+ /* prototypes shared between arch specific and generic stub code */
+ 
+ #define pr_efi(sys_table, msg)     efi_printk(sys_table, "EFI stub: "msg)
+ #define pr_efi_err(sys_table, msg) efi_printk(sys_table, "EFI stub: ERROR: "msg)
+ 
+ void efi_printk(efi_system_table_t *sys_table_arg, char *str);
+ 
+ void efi_free(efi_system_table_t *sys_table_arg, unsigned long size,
+ 	      unsigned long addr);
+ 
+ char *efi_convert_cmdline(efi_system_table_t *sys_table_arg,
+ 			  efi_loaded_image_t *image, int *cmd_line_len);
+ 
+ efi_status_t efi_get_memory_map(efi_system_table_t *sys_table_arg,
+ 				efi_memory_desc_t **map,
+ 				unsigned long *map_size,
+ 				unsigned long *desc_size,
+ 				u32 *desc_ver,
+ 				unsigned long *key_ptr);
+ 
+ efi_status_t efi_low_alloc(efi_system_table_t *sys_table_arg,
+ 			   unsigned long size, unsigned long align,
+ 			   unsigned long *addr);
+ 
+ efi_status_t efi_high_alloc(efi_system_table_t *sys_table_arg,
+ 			    unsigned long size, unsigned long align,
+ 			    unsigned long *addr, unsigned long max);
+ 
+ efi_status_t efi_relocate_kernel(efi_system_table_t *sys_table_arg,
+ 				 unsigned long *image_addr,
+ 				 unsigned long image_size,
+ 				 unsigned long alloc_size,
+ 				 unsigned long preferred_addr,
+ 				 unsigned long alignment);
+ 
+ efi_status_t handle_cmdline_files(efi_system_table_t *sys_table_arg,
+ 				  efi_loaded_image_t *image,
+ 				  char *cmd_line, char *option_string,
+ 				  unsigned long max_addr,
+ 				  unsigned long *load_addr,
+ 				  unsigned long *load_size);
+ 
++>>>>>>> 6a2c20e7d890 (kexec: support kexec/kdump on EFI systems)
  #endif /* _LINUX_EFI_H */
* Unmerged path arch/x86/kernel/kexec-bzimage64.c
* Unmerged path drivers/firmware/efi/runtime-map.c
* Unmerged path arch/x86/kernel/kexec-bzimage64.c
* Unmerged path drivers/firmware/efi/runtime-map.c
* Unmerged path include/linux/efi.h
