USB: EHCI: add delay during suspend to prevent erroneous wakeups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [usb] ehci: add delay during suspend to prevent erroneous wakeups (Don Zickus) [1110939]
Rebuild_FUZZ: 95.93%
commit-author Alan Stern <stern@rowland.harvard.edu>
commit 3e8d6d85adedc59115a564c0a54b36e42087c4d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/3e8d6d85.failed

High-speed USB connections revert back to full-speed signalling when
the device goes into suspend.  This takes several milliseconds, and
during that time it's not possible to tell reliably whether the device
has been disconnected.

On some platforms, the Wake-On-Disconnect circuitry gets confused
during this intermediate state.  It generates a false wakeup signal,
which can prevent the controller from going to sleep.

To avoid this problem, this patch adds a 5-ms delay to the
ehci_bus_suspend() routine if any ports have to switch over to
full-speed signalling.  (Actually, the delay was already present for
devices using a particular kind of PHY power management; the patch
merely causes the delay to be used more widely.)

	Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
	Reviewed-by: Peter Chen <Peter.Chen@freescale.com>
CC: <stable@vger.kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 3e8d6d85adedc59115a564c0a54b36e42087c4d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/ehci-hub.c
diff --cc drivers/usb/host/ehci-hub.c
index d594db384a51,7ae0c4d51741..000000000000
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@@ -304,12 -316,18 +316,24 @@@ static int ehci_bus_suspend (struct usb
  			changed = 1;
  		}
  	}
+ 	spin_unlock_irq(&ehci->lock);
+ 
+ 	if ((changed && ehci->has_tdi_phy_lpm) || fs_idle_delay) {
+ 		/*
+ 		 * Wait for HCD to enter low-power mode or for the bus
+ 		 * to switch to full-speed idle.
+ 		 */
+ 		usleep_range(5000, 5500);
+ 	}
  
++<<<<<<< HEAD
 +	if (changed && ehci->has_hostpc) {
 +		spin_unlock_irq(&ehci->lock);
 +		msleep(5);	/* 5 ms for HCD to enter low-power mode */
++=======
+ 	if (changed && ehci->has_tdi_phy_lpm) {
++>>>>>>> 3e8d6d85aded (USB: EHCI: add delay during suspend to prevent erroneous wakeups)
  		spin_lock_irq(&ehci->lock);
- 
  		port = HCS_N_PORTS(ehci->hcs_params);
  		while (port--) {
  			u32 __iomem	*hostpc_reg = &ehci->regs->hostpc[port];
* Unmerged path drivers/usb/host/ehci-hub.c
