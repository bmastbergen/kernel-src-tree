net/mlx4: Cache line CQE/EQE stride fixes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [ethernet] mlx4: Cache line CQE/EQE stride fixes (Doug Ledford) [1088499 1173483]
Rebuild_FUZZ: 94.87%
commit-author Ido Shamay <idos@mellanox.com>
commit c3f2511feac088030055012cc8f64ebd84c87dbc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/c3f2511f.failed

This commit contains 2 fixes for the 128B CQE/EQE stride feaure.
Wei found that mlx4_QUERY_HCA function marked the wrong capability
in flags (64B CQE/EQE), when CQE/EQE stride feature was enabled.
Also added small fix in initial CQE ownership bit assignment, when CQE
is size is not default 32B.

Fixes: 77507aa24 (net/mlx4: Enable CQE/EQE stride support)
	Signed-off-by: Wei Yang <weiyang@linux.vnet.ibm.com>
	Signed-off-by: Ido Shamay <idos@mellanox.com>
	Signed-off-by: Amir Vadai <amirv@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c3f2511feac088030055012cc8f64ebd84c87dbc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/fw.c
diff --cc drivers/net/ethernet/mellanox/mlx4/fw.c
index 352765311b33,982861d1df44..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/fw.c
+++ b/drivers/net/ethernet/mellanox/mlx4/fw.c
@@@ -1593,6 -1849,17 +1593,20 @@@ int mlx4_QUERY_HCA(struct mlx4_dev *dev
  	if (byte_field & 0x40) /* 64-bytes cqe enabled */
  		param->dev_cap_enabled |= MLX4_DEV_CAP_64B_CQE_ENABLED;
  
++<<<<<<< HEAD
++=======
+ 	/* CX3 is capable of extending CQEs\EQEs to strides larger than 64B */
+ 	MLX4_GET(byte_field, outbox, INIT_HCA_EQE_CQE_STRIDE_OFFSET);
+ 	if (byte_field) {
+ 		param->dev_cap_enabled |= MLX4_DEV_CAP_EQE_STRIDE_ENABLED;
+ 		param->dev_cap_enabled |= MLX4_DEV_CAP_CQE_STRIDE_ENABLED;
+ 		param->cqe_size = 1 << ((byte_field &
+ 					 MLX4_CQE_SIZE_MASK_STRIDE) + 5);
+ 		param->eqe_size = 1 << (((byte_field &
+ 					  MLX4_EQE_SIZE_MASK_STRIDE) >> 4) + 5);
+ 	}
+ 
++>>>>>>> c3f2511feac0 (net/mlx4: Cache line CQE/EQE stride fixes)
  	/* TPT attributes */
  
  	MLX4_GET(param->dmpt_base,  outbox, INIT_HCA_DMPT_BASE_OFFSET);
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 0e12dca60d95..5ec3f76664aa 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -1541,8 +1541,15 @@ int mlx4_en_start_port(struct net_device *dev)
 			en_err(priv, "Failed activating Rx CQ\n");
 			goto cq_err;
 		}
-		for (j = 0; j < cq->size; j++)
-			cq->buf[j].owner_sr_opcode = MLX4_CQE_OWNER_MASK;
+
+		for (j = 0; j < cq->size; j++) {
+			struct mlx4_cqe *cqe = NULL;
+
+			cqe = mlx4_en_get_cqe(cq->buf, j, priv->cqe_size) +
+			      priv->cqe_factor;
+			cqe->owner_sr_opcode = MLX4_CQE_OWNER_MASK;
+		}
+
 		err = mlx4_en_set_cq_moder(priv, cq);
 		if (err) {
 			en_err(priv, "Failed setting cq moderation parameters\n");
* Unmerged path drivers/net/ethernet/mellanox/mlx4/fw.c
