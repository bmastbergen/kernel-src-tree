be2net: use -ENETDOWN error status when interface is down

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Kalesh AP <kalesh.purayil@emulex.com>
commit 940a3fcddc76f82ac4e80dfa7bccb236e9bec0a1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/940a3fcd.failed

Updating VF's tx-rate and FW-download are not allowed when the interface is
down. In such cases return -ENETDOWN to the stack.
	Signed-off-by: Kalesh AP <kalesh.purayil@emulex.com>
	Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 940a3fcddc76f82ac4e80dfa7bccb236e9bec0a1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be_main.c
diff --cc drivers/net/ethernet/emulex/benet/be_main.c
index 66b03f82b811,4388833f31d9..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@@ -1354,18 -1359,50 +1354,56 @@@ static int be_set_vf_tx_rate(struct net
  	if (vf >= adapter->num_vfs)
  		return -EINVAL;
  
 -	if (min_tx_rate)
 +	if (rate < 100 || rate > 10000) {
 +		dev_err(&adapter->pdev->dev,
 +			"tx rate must be between 100 and 10000 Mbps\n");
  		return -EINVAL;
 +	}
  
 -	if (!max_tx_rate)
 -		goto config_qos;
 -
 -	status = be_cmd_link_status_query(adapter, &link_speed,
 -					  &link_status, 0);
 +	status = be_cmd_config_qos(adapter, rate / 10, vf + 1);
  	if (status)
++<<<<<<< HEAD
 +		dev_err(&adapter->pdev->dev,
 +			"tx rate %d on VF %d failed\n", rate, vf);
 +	else
 +		adapter->vf_cfg[vf].tx_rate = rate;
++=======
+ 		goto err;
+ 
+ 	if (!link_status) {
+ 		dev_err(dev, "TX-rate setting not allowed when link is down\n");
+ 		status = -ENETDOWN;
+ 		goto err;
+ 	}
+ 
+ 	if (max_tx_rate < 100 || max_tx_rate > link_speed) {
+ 		dev_err(dev, "TX-rate must be between 100 and %d Mbps\n",
+ 			link_speed);
+ 		status = -EINVAL;
+ 		goto err;
+ 	}
+ 
+ 	/* On Skyhawk the QOS setting must be done only as a % value */
+ 	percent_rate = link_speed / 100;
+ 	if (skyhawk_chip(adapter) && (max_tx_rate % percent_rate)) {
+ 		dev_err(dev, "TX-rate must be a multiple of %d Mbps\n",
+ 			percent_rate);
+ 		status = -EINVAL;
+ 		goto err;
+ 	}
+ 
+ config_qos:
+ 	status = be_cmd_config_qos(adapter, max_tx_rate, link_speed, vf + 1);
+ 	if (status)
+ 		goto err;
+ 
+ 	adapter->vf_cfg[vf].tx_rate = max_tx_rate;
+ 	return 0;
+ 
+ err:
+ 	dev_err(dev, "TX-rate setting of %dMbps on VF%d failed\n",
+ 		max_tx_rate, vf);
++>>>>>>> 940a3fcddc76 (be2net: use -ENETDOWN error status when interface is down)
  	return status;
  }
  static int be_set_vf_link_state(struct net_device *netdev, int vf,
* Unmerged path drivers/net/ethernet/emulex/benet/be_main.c
