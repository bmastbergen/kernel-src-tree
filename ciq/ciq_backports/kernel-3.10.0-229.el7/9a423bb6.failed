hostfs: support rename flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Miklos Szeredi <mszeredi@suse.cz>
commit 9a423bb6e3577bb372942edfb5d9d26632741d43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/9a423bb6.failed

Support RENAME_NOREPLACE and RENAME_EXCHANGE flags on hostfs if the
underlying filesystem supports it.

Since renameat2(2) is not yet in any libc, use syscall(2) to invoke the
renameat2 syscall.

	Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
	Cc: Richard Weinberger <richard@nod.at>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 9a423bb6e3577bb372942edfb5d9d26632741d43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/hostfs/hostfs_kern.c
diff --cc fs/hostfs/hostfs_kern.c
index d49b64ed0474,fd62cae0fdcb..000000000000
--- a/fs/hostfs/hostfs_kern.c
+++ b/fs/hostfs/hostfs_kern.c
@@@ -741,21 -741,31 +741,36 @@@ static int hostfs_mknod(struct inode *d
  	return err;
  }
  
++<<<<<<< HEAD
 +int hostfs_rename(struct inode *from_ino, struct dentry *from,
 +		  struct inode *to_ino, struct dentry *to)
++=======
+ static int hostfs_rename2(struct inode *old_dir, struct dentry *old_dentry,
+ 			  struct inode *new_dir, struct dentry *new_dentry,
+ 			  unsigned int flags)
++>>>>>>> 9a423bb6e357 (hostfs: support rename flags)
  {
- 	char *from_name, *to_name;
+ 	char *old_name, *new_name;
  	int err;
  
- 	if ((from_name = dentry_name(from)) == NULL)
+ 	if (flags & ~(RENAME_NOREPLACE | RENAME_EXCHANGE))
+ 		return -EINVAL;
+ 
+ 	old_name = dentry_name(old_dentry);
+ 	if (old_name == NULL)
  		return -ENOMEM;
- 	if ((to_name = dentry_name(to)) == NULL) {
- 		__putname(from_name);
+ 	new_name = dentry_name(new_dentry);
+ 	if (new_name == NULL) {
+ 		__putname(old_name);
  		return -ENOMEM;
  	}
- 	err = rename_file(from_name, to_name);
- 	__putname(from_name);
- 	__putname(to_name);
+ 	if (!flags)
+ 		err = rename_file(old_name, new_name);
+ 	else
+ 		err = rename2_file(old_name, new_name, flags);
+ 
+ 	__putname(old_name);
+ 	__putname(new_name);
  	return err;
  }
  
diff --git a/fs/hostfs/hostfs.h b/fs/hostfs/hostfs.h
index 9c88da0e855a..4fcd40d6f308 100644
--- a/fs/hostfs/hostfs.h
+++ b/fs/hostfs/hostfs.h
@@ -89,6 +89,7 @@ extern int do_mknod(const char *file, int mode, unsigned int major,
 extern int link_file(const char *from, const char *to);
 extern int hostfs_do_readlink(char *file, char *buf, int size);
 extern int rename_file(char *from, char *to);
+extern int rename2_file(char *from, char *to, unsigned int flags);
 extern int do_statfs(char *root, long *bsize_out, long long *blocks_out,
 		     long long *bfree_out, long long *bavail_out,
 		     long long *files_out, long long *ffree_out,
* Unmerged path fs/hostfs/hostfs_kern.c
diff --git a/fs/hostfs/hostfs_user.c b/fs/hostfs/hostfs_user.c
index 67838f3aa20a..9765dab95cbd 100644
--- a/fs/hostfs/hostfs_user.c
+++ b/fs/hostfs/hostfs_user.c
@@ -14,6 +14,7 @@
 #include <sys/time.h>
 #include <sys/types.h>
 #include <sys/vfs.h>
+#include <sys/syscall.h>
 #include "hostfs.h"
 #include <utime.h>
 
@@ -360,6 +361,33 @@ int rename_file(char *from, char *to)
 	return 0;
 }
 
+int rename2_file(char *from, char *to, unsigned int flags)
+{
+	int err;
+
+#ifndef SYS_renameat2
+#  ifdef __x86_64__
+#    define SYS_renameat2 316
+#  endif
+#  ifdef __i386__
+#    define SYS_renameat2 353
+#  endif
+#endif
+
+#ifdef SYS_renameat2
+	err = syscall(SYS_renameat2, AT_FDCWD, from, AT_FDCWD, to, flags);
+	if (err < 0) {
+		if (errno != ENOSYS)
+			return -errno;
+		else
+			return -EINVAL;
+	}
+	return 0;
+#else
+	return -EINVAL;
+#endif
+}
+
 int do_statfs(char *root, long *bsize_out, long long *blocks_out,
 	      long long *bfree_out, long long *bavail_out,
 	      long long *files_out, long long *ffree_out,
