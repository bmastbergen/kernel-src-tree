ext4: don't orphan or truncate the boot loader inode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit e2bfb088fac03c0f621886a04cffc7faa2b49b1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/e2bfb088.failed

The boot loader inode (inode #5) should never be visible in the
directory hierarchy, but it's possible if the file system is corrupted
that there will be a directory entry that points at inode #5.  In
order to avoid accidentally trashing it, when such a directory inode
is opened, the inode will be marked as a bad inode, so that it's not
possible to modify (or read) the inode from userspace.

Unfortunately, when we unlink this (invalid/illegal) directory entry,
we will put the bad inode on the ophan list, and then when try to
unlink the directory, we don't actually remove the bad inode from the
orphan list before freeing in-memory inode structure.  This means the
in-memory orphan list is corrupted, leading to a kernel oops.

In addition, avoid truncating a bad inode in ext4_destroy_inode(),
since truncating the boot loader inode is not a smart thing to do.

	Reported-by: Sami Liedes <sami.liedes@iki.fi>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Cc: stable@vger.kernel.org
(cherry picked from commit e2bfb088fac03c0f621886a04cffc7faa2b49b1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 3d212b6dfc6f,59983b28a93c..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -227,10 -231,8 +228,14 @@@ void ext4_evict_inode(struct inode *ino
  	if (ext4_should_order_data(inode))
  		ext4_begin_ordered_truncate(inode, 0);
  	truncate_inode_pages_final(&inode->i_data);
 +	ext4_ioend_shutdown(inode);
  
++<<<<<<< HEAD
 +	if (is_bad_inode(inode))
 +		goto no_delete;
++=======
+ 	WARN_ON(atomic_read(&EXT4_I(inode)->i_ioend_count));
++>>>>>>> e2bfb088fac0 (ext4: don't orphan or truncate the boot loader inode)
  
  	/*
  	 * Protect us against freezing - iput() caller didn't have to have any
* Unmerged path fs/ext4/inode.c
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index 37247fea5c5e..2fae6ac8e2da 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -2516,7 +2516,7 @@ int ext4_orphan_add(handle_t *handle, struct inode *inode)
 	int err = 0, rc;
 	bool dirty = false;
 
-	if (!sbi->s_journal)
+	if (!sbi->s_journal || is_bad_inode(inode))
 		return 0;
 
 	WARN_ON_ONCE(!(inode->i_state & (I_NEW | I_FREEING)) &&
