powerpc/kvm/book3s_hv: Use threads_per_subcore in KVM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] kvm/book3s_hv: Use threads_per_subcore in KVM (Don Zickus) [1127366]
Rebuild_FUZZ: 91.84%
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 3102f7843c75014fa15d3e6fda3b49f61bc467b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/3102f784.failed

To support split core on POWER8 we need to modify various parts of the
KVM code to use threads_per_subcore instead of threads_per_core. On
systems that do not support split core threads_per_subcore ==
threads_per_core and these changes are a nop.

We use threads_per_subcore as the value reported by KVM_CAP_PPC_SMT.
This communicates to userspace that guests can only be created with
a value of threads_per_core that is less than or equal to the current
threads_per_subcore. This ensures that guests can only be created with a
thread configuration that we are able to run given the current split
core mode.

Although threads_per_subcore can change during the life of the system,
the commit that enables that will ensure that threads_per_subcore does
not change during the life of a KVM VM.

	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Signed-off-by: Michael Neuling <mikey@neuling.org>
	Acked-by: Alexander Graf <agraf@suse.de>
	Acked-by: Paul Mackerras <paulus@samba.org>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 3102f7843c75014fa15d3e6fda3b49f61bc467b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kvm/book3s_hv.c
#	arch/powerpc/kvm/powerpc.c
diff --cc arch/powerpc/kvm/book3s_hv.c
index 25619035861f,5e86f28c9d2f..000000000000
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@@ -1015,6 -1305,8 +1015,11 @@@ struct kvm_vcpu *kvmppc_core_vcpu_creat
  			init_waitqueue_head(&vcore->wq);
  			vcore->preempt_tb = TB_NIL;
  			vcore->lpcr = kvm->arch.lpcr;
++<<<<<<< HEAD
++=======
+ 			vcore->first_vcpuid = core * threads_per_subcore;
+ 			vcore->kvm = kvm;
++>>>>>>> 3102f7843c75 (powerpc/kvm/book3s_hv: Use threads_per_subcore in KVM)
  		}
  		kvm->arch.vcores[core] = vcore;
  		kvm->arch.online_vcores++;
@@@ -1263,29 -1566,12 +1271,36 @@@ static void kvmppc_run_core(struct kvmp
  	}
  
  	/*
++<<<<<<< HEAD
 +	 * Assign physical thread IDs, first to non-ceded vcpus
 +	 * and then to ceded ones.
 +	 */
 +	ptid = 0;
 +	vcpu0 = NULL;
 +	list_for_each_entry(vcpu, &vc->runnable_threads, arch.run_list) {
 +		if (!vcpu->arch.ceded) {
 +			if (!ptid)
 +				vcpu0 = vcpu;
 +			vcpu->arch.ptid = ptid++;
 +		}
 +	}
 +	if (!vcpu0)
 +		goto out;	/* nothing to run; should never happen */
 +	list_for_each_entry(vcpu, &vc->runnable_threads, arch.run_list)
 +		if (vcpu->arch.ceded)
 +			vcpu->arch.ptid = ptid++;
 +
 +	/*
 +	 * Make sure we are running on thread 0, and that
 +	 * secondary threads are offline.
++=======
+ 	 * Make sure we are running on primary threads, and that secondary
+ 	 * threads are offline.  Also check if the number of threads in this
+ 	 * guest are greater than the current system threads per guest.
++>>>>>>> 3102f7843c75 (powerpc/kvm/book3s_hv: Use threads_per_subcore in KVM)
  	 */
- 	if (threads_per_core > 1 && !on_primary_thread()) {
+ 	if ((threads_per_core > 1) &&
+ 	    ((vc->num_threads > threads_per_subcore) || !on_primary_thread())) {
  		list_for_each_entry(vcpu, &vc->runnable_threads, arch.run_list)
  			vcpu->arch.ret = -EBUSY;
  		goto out;
diff --cc arch/powerpc/kvm/powerpc.c
index 126467ebd44f,27919a8715cf..000000000000
--- a/arch/powerpc/kvm/powerpc.c
+++ b/arch/powerpc/kvm/powerpc.c
@@@ -346,14 -381,17 +346,21 @@@ int kvm_dev_ioctl_check_extension(long 
  		r = 1;
  		break;
  #endif /* CONFIG_PPC_BOOK3S_64 */
 -#ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE
 +#ifdef CONFIG_KVM_BOOK3S_64_HV
  	case KVM_CAP_PPC_SMT:
++<<<<<<< HEAD
 +		r = threads_per_core;
++=======
+ 		if (hv_enabled)
+ 			r = threads_per_subcore;
+ 		else
+ 			r = 0;
++>>>>>>> 3102f7843c75 (powerpc/kvm/book3s_hv: Use threads_per_subcore in KVM)
  		break;
  	case KVM_CAP_PPC_RMA:
 -		r = hv_enabled;
 +		r = 1;
  		/* PPC970 requires an RMA */
 -		if (r && cpu_has_feature(CPU_FTR_ARCH_201))
 +		if (cpu_has_feature(CPU_FTR_ARCH_201))
  			r = 2;
  		break;
  #endif
* Unmerged path arch/powerpc/kvm/book3s_hv.c
* Unmerged path arch/powerpc/kvm/powerpc.c
