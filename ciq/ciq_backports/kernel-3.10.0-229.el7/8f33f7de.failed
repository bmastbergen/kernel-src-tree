perf probe: Show appropriate symbol for ref_reloc_sym based kprobes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/probe: Show appropriate symbol for ref_reloc_sym based kprobes (Jiri Olsa) [1134356]
Rebuild_FUZZ: 98.51%
commit-author Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
commit 8f33f7deac485a61f38aa690b85489322a4d958e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/8f33f7de.failed

Show appropriate symbol for ref_reloc_sym based kprobes instead of
refpoint+offset when perf-probe -l runs without debuginfo.

Without this change:
  # ./perf probe -l
    probe:t_show         (on _stext+889880 with m v)
    probe:t_show_1       (on _stext+928568 with m v t)
    probe:t_show_2       (on _stext+969512 with m v fmt)
    probe:t_show_3       (on _stext+1001416 with m v file)

With this change:
  # ./perf probe -l
    probe:t_show         (on t_show with m v)
    probe:t_show_1       (on t_show with m v t)
    probe:t_show_2       (on t_show with m v fmt)
    probe:t_show_3       (on t_show with m v file)

Changes from v2:
 - Check ref_reloc_sym to find correct unrelocated address.

	Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: "David A. Long" <dave.long@linaro.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: yrl.pp-manager.tt@hitachi.com
Link: http://lkml.kernel.org/r/20140206053220.29635.81819.stgit@kbuild-fedora.yrl.intra.hitachi.co.jp
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 8f33f7deac485a61f38aa690b85489322a4d958e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/probe-event.c
diff --cc tools/perf/util/probe-event.c
index 1c9c96559614,f86820c39ea4..000000000000
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@@ -228,15 -305,13 +278,25 @@@ static struct debuginfo *open_debuginfo
  static int kprobe_convert_to_perf_probe(struct probe_trace_point *tp,
  					struct perf_probe_point *pp)
  {
++<<<<<<< HEAD
 +	struct symbol *sym;
 +	struct map *map;
 +	u64 addr;
 +	int ret = -ENOENT;
 +	struct debuginfo *dinfo;
 +
 +	sym = __find_kernel_function_by_name(tp->symbol, &map);
 +	if (sym) {
 +		addr = map->unmap_ip(map, sym->start + tp->offset);
++=======
+ 	u64 addr = 0;
+ 	int ret = -ENOENT;
+ 	struct debuginfo *dinfo;
+ 
+ 	addr = kernel_get_symbol_address_by_name(tp->symbol, false);
+ 	if (addr) {
+ 		addr += tp->offset;
++>>>>>>> 8f33f7deac48 (perf probe: Show appropriate symbol for ref_reloc_sym based kprobes)
  		pr_debug("try to find %s+%ld@%" PRIx64 "\n", tp->symbol,
  			 tp->offset, addr);
  
@@@ -294,6 -431,50 +354,53 @@@ static int add_module_to_probe_trace_ev
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ /* Post processing the probe events */
+ static int post_process_probe_trace_events(struct probe_trace_event *tevs,
+ 					   int ntevs, const char *module,
+ 					   bool uprobe)
+ {
+ 	struct ref_reloc_sym *reloc_sym;
+ 	char *tmp;
+ 	int i;
+ 
+ 	if (uprobe)
+ 		return add_exec_to_probe_trace_events(tevs, ntevs, module);
+ 
+ 	/* Note that currently ref_reloc_sym based probe is not for drivers */
+ 	if (module)
+ 		return add_module_to_probe_trace_events(tevs, ntevs, module);
+ 
+ 	reloc_sym = kernel_get_ref_reloc_sym();
+ 	if (!reloc_sym) {
+ 		pr_warning("Relocated base symbol is not found!\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	for (i = 0; i < ntevs; i++) {
+ 		if (tevs[i].point.address) {
+ 			tmp = strdup(reloc_sym->name);
+ 			if (!tmp)
+ 				return -ENOMEM;
+ 			free(tevs[i].point.symbol);
+ 			tevs[i].point.symbol = tmp;
+ 			tevs[i].point.offset = tevs[i].point.address -
+ 					       reloc_sym->unrelocated_addr;
+ 		}
+ 	}
+ 	return 0;
+ }
+ 
+ static void clear_probe_trace_events(struct probe_trace_event *tevs, int ntevs)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < ntevs; i++)
+ 		clear_probe_trace_event(tevs + i);
+ }
+ 
++>>>>>>> 8f33f7deac48 (perf probe: Show appropriate symbol for ref_reloc_sym based kprobes)
  /* Try to find perf_probe_event with debuginfo */
  static int try_to_find_probe_trace_events(struct perf_probe_event *pev,
  					  struct probe_trace_event **tevs,
* Unmerged path tools/perf/util/probe-event.c
