drm/i915: fix plane/cursor handling when runtime suspended

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [drm] i915: fix plane/cursor handling when runtime suspended (Rob Clark) [1153301]
Rebuild_FUZZ: 96.43%
commit-author Paulo Zanoni <paulo.r.zanoni@intel.com>
commit d6dd6843ff4a57c662dbc378b9f99a9c034b0956
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/d6dd6843.failed

If we're runtime suspended and try to use the plane interfaces, we
will get a lot of WARNs saying we did the wrong thing.

We need to get runtime PM references to pin the objects, and to
change the fences. The pin functions are the ideal places for
this, but intel_crtc_cursor_set_obj() doesn't call them, so we also
have to add get/put calls inside it. There is no problem if we runtime
suspend right after these functions are finished, because the
registers written are forwarded to system memory.

Note: for a complete fix of the cursor-dpms test case, we also need
the patch named "drm/i915: Don't try to enable cursor from setplane
when crtc is disabled".

v2: - Narrow the put/get calls on intel_crtc_cursor_set_obj() (Daniel)
v3: - Make get/put also surround the fence and unpin calls (Daniel and
      Ville).
    - Merge all the plane changes into a single patch since they're
      the same fix.
    - Add the comment requested by Daniel.
v4: - Remove spurious whitespace (Ville).
v5: - Remove intel_crtc_update_cursor() chunk since Ville did an
      equivalent fix in another patch (Ville).
v6: - Remove unpin chunk: it will be on a separate patch (Ville,
      Chris, Daniel).
v7: - Same thing, new color.

Testcase: igt/pm_rpm/cursor
Testcase: igt/pm_rpm/cursor-dpms
Testcase: igt/pm_rpm/legacy-planes
Testcase: igt/pm_rpm/legacy-planes-dpms
Testcase: igt/pm_rpm/universal-planes
Testcase: igt/pm_rpm/universal-planes-dpms
Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=81645
Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=82603
	Cc: stable@vger.kernel.org
	Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
	Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
(cherry picked from commit d6dd6843ff4a57c662dbc378b9f99a9c034b0956)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_display.c
diff --cc drivers/gpu/drm/i915/intel_display.c
index 5d5f48ca549a,c1c67e53473c..000000000000
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@@ -6967,27 -8271,29 +6987,39 @@@ static int intel_crtc_cursor_set(struc
  
  		ret = i915_gem_object_pin_to_display_plane(obj, alignment, NULL);
  		if (ret) {
++<<<<<<< HEAD
 +			DRM_ERROR("failed to move cursor bo into the GTT\n");
++=======
+ 			DRM_DEBUG_KMS("failed to move cursor bo into the GTT\n");
+ 			intel_runtime_pm_put(dev_priv);
++>>>>>>> d6dd6843ff4a (drm/i915: fix plane/cursor handling when runtime suspended)
  			goto fail_locked;
  		}
  
  		ret = i915_gem_object_put_fence(obj);
  		if (ret) {
++<<<<<<< HEAD
 +			DRM_ERROR("failed to release fence for cursor");
++=======
+ 			DRM_DEBUG_KMS("failed to release fence for cursor");
+ 			intel_runtime_pm_put(dev_priv);
++>>>>>>> d6dd6843ff4a (drm/i915: fix plane/cursor handling when runtime suspended)
  			goto fail_unpin;
  		}
  
  		addr = i915_gem_obj_ggtt_offset(obj);
+ 
+ 		intel_runtime_pm_put(dev_priv);
  	} else {
  		int align = IS_I830(dev) ? 16 * 1024 : 256;
 -		ret = i915_gem_object_attach_phys(obj, align);
 +		ret = i915_gem_attach_phys_object(dev, obj,
 +						  (intel_crtc->pipe == 0) ? I915_GEM_PHYS_CURSOR_0 : I915_GEM_PHYS_CURSOR_1,
 +						  align);
  		if (ret) {
 -			DRM_DEBUG_KMS("failed to attach phys object\n");
 +			DRM_ERROR("failed to attach phys object\n");
  			goto fail_locked;
  		}
 -		addr = obj->phys_handle->busaddr;
 +		addr = obj->phys_obj->handle->busaddr;
  	}
  
  	if (IS_GEN2(dev))
* Unmerged path drivers/gpu/drm/i915/intel_display.c
