blk-mq: add blk_mq_requeue_request

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Christoph Hellwig <hch@lst.de>
commit ed0791b2f83cec4e77d88c4e9baabcebf9254a78
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/ed0791b2.failed

This allows to requeue a request that has been accepted by ->queue_rq
earlier.  This is needed by the SCSI layer in various error conditions.

The existing internal blk_mq_requeue_request is renamed to
__blk_mq_requeue_request as it is a lower level building block for this
funtionality.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit ed0791b2f83cec4e77d88c4e9baabcebf9254a78)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 9a84bbb2459d,ee225cc312b8..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -396,6 -413,26 +396,29 @@@ static void __blk_mq_requeue_request(st
  		rq->nr_phys_segments--;
  }
  
++<<<<<<< HEAD
++=======
+ void blk_mq_requeue_request(struct request *rq)
+ {
+ 	struct request_queue *q = rq->q;
+ 
+ 	__blk_mq_requeue_request(rq);
+ 	blk_clear_rq_complete(rq);
+ 
+ 	trace_block_rq_requeue(q, rq);
+ 
+ 	BUG_ON(blk_queued_rq(rq));
+ 	blk_mq_insert_request(rq, true, true, false);
+ }
+ EXPORT_SYMBOL(blk_mq_requeue_request);
+ 
+ struct request *blk_mq_tag_to_rq(struct blk_mq_tags *tags, unsigned int tag)
+ {
+ 	return tags->rqs[tag];
+ }
+ EXPORT_SYMBOL(blk_mq_tag_to_rq);
+ 
++>>>>>>> ed0791b2f83c (blk-mq: add blk_mq_requeue_request)
  struct blk_mq_timeout_data {
  	struct blk_mq_hw_ctx *hctx;
  	unsigned long *next;
* Unmerged path block/blk-mq.c
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index f13671a6c70c..a0dd7ffa4214 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -142,6 +142,8 @@ static inline void blk_mq_end_io(struct request *rq, int error)
 	BUG_ON(!done);
 }
 
+void blk_mq_requeue_request(struct request *rq);
+
 void blk_mq_complete_request(struct request *rq);
 
 void blk_mq_stop_hw_queue(struct blk_mq_hw_ctx *hctx);
