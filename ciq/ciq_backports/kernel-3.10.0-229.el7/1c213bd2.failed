net: introduce netdev_alloc_pcpu_stats() for drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] introduce netdev_alloc_pcpu_stats() for drivers (Marcelo Leitner) [1148041 1155088]
Rebuild_FUZZ: 94.95%
commit-author WANG Cong <xiyou.wangcong@gmail.com>
commit 1c213bd24ad04f4430031d20d740d7783162b099
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/1c213bd2.failed

There are many drivers calling alloc_percpu() to allocate pcpu stats
and then initializing ->syncp. So just introduce a helper function for them.

	Cc: David S. Miller <davem@davemloft.net>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1c213bd24ad04f4430031d20d740d7783162b099)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/dummy.c
#	drivers/net/ethernet/marvell/mvneta.c
#	drivers/net/loopback.c
#	drivers/net/macvlan.c
#	drivers/net/nlmon.c
#	drivers/net/veth.c
#	drivers/net/vxlan.c
#	include/linux/netdevice.h
#	net/bridge/br_device.c
#	net/ipv4/ip_tunnel.c
#	net/ipv6/ip6_gre.c
#	net/ipv6/ip6_tunnel.c
#	net/ipv6/ip6_vti.c
#	net/ipv6/sit.c
#	net/openvswitch/vport.c
diff --cc drivers/net/dummy.c
index b710c6b2d659,1656317c96f8..000000000000
--- a/drivers/net/dummy.c
+++ b/drivers/net/dummy.c
@@@ -88,7 -88,7 +88,11 @@@ static netdev_tx_t dummy_xmit(struct sk
  
  static int dummy_dev_init(struct net_device *dev)
  {
++<<<<<<< HEAD
 +	dev->dstats = alloc_percpu(struct pcpu_dstats);
++=======
+ 	dev->dstats = netdev_alloc_pcpu_stats(struct pcpu_dstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!dev->dstats)
  		return -ENOMEM;
  
diff --cc drivers/net/ethernet/marvell/mvneta.c
index 4d66a5e6db80,12c6a66e54d1..000000000000
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@@ -2752,7 -2837,33 +2752,37 @@@ static int mvneta_probe(struct platform
  
  	clk_prepare_enable(pp->clk);
  
++<<<<<<< HEAD
 +	pp->tx_done_timer.data = (unsigned long)dev;
++=======
+ 	pp->base = of_iomap(dn, 0);
+ 	if (pp->base == NULL) {
+ 		err = -ENOMEM;
+ 		goto err_clk;
+ 	}
+ 
+ 	/* Alloc per-cpu stats */
+ 	pp->stats = netdev_alloc_pcpu_stats(struct mvneta_pcpu_stats);
+ 	if (!pp->stats) {
+ 		err = -ENOMEM;
+ 		goto err_unmap;
+ 	}
+ 
+ 	dt_mac_addr = of_get_mac_address(dn);
+ 	if (dt_mac_addr) {
+ 		mac_from = "device tree";
+ 		memcpy(dev->dev_addr, dt_mac_addr, ETH_ALEN);
+ 	} else {
+ 		mvneta_get_mac_addr(pp, hw_mac_addr);
+ 		if (is_valid_ether_addr(hw_mac_addr)) {
+ 			mac_from = "hardware";
+ 			memcpy(dev->dev_addr, hw_mac_addr, ETH_ALEN);
+ 		} else {
+ 			mac_from = "random";
+ 			eth_hw_addr_random(dev);
+ 		}
+ 	}
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  
  	pp->tx_ring_size = MVNETA_MAX_TXD;
  	pp->rx_ring_size = MVNETA_MAX_RXD;
diff --cc drivers/net/loopback.c
index fcbf680c3e62,771c9bfa7d31..000000000000
--- a/drivers/net/loopback.c
+++ b/drivers/net/loopback.c
@@@ -137,10 -136,9 +137,16 @@@ static const struct ethtool_ops loopbac
  
  static int loopback_dev_init(struct net_device *dev)
  {
++<<<<<<< HEAD
 +	dev->lstats = alloc_percpu(struct pcpu_lstats);
 +	if (!dev->lstats)
 +		return -ENOMEM;
 +
++=======
+ 	dev->lstats = netdev_alloc_pcpu_stats(struct pcpu_lstats);
+ 	if (!dev->lstats)
+ 		return -ENOMEM;
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	return 0;
  }
  
diff --cc drivers/net/macvlan.c
index e2135f30eac2,25685e3eb472..000000000000
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@@ -504,7 -545,7 +504,11 @@@ static int macvlan_init(struct net_devi
  
  	macvlan_set_lockdep_class(dev);
  
++<<<<<<< HEAD
 +	vlan->pcpu_stats = alloc_percpu(struct macvlan_pcpu_stats);
++=======
+ 	vlan->pcpu_stats = netdev_alloc_pcpu_stats(struct vlan_pcpu_stats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!vlan->pcpu_stats)
  		return -ENOMEM;
  
diff --cc drivers/net/nlmon.c
index b57ce5f48962,14ce7de6a933..000000000000
--- a/drivers/net/nlmon.c
+++ b/drivers/net/nlmon.c
@@@ -47,8 -47,7 +47,12 @@@ static int nlmon_change_mtu(struct net_
  
  static int nlmon_dev_init(struct net_device *dev)
  {
++<<<<<<< HEAD
 +	dev->lstats = alloc_percpu(struct pcpu_lstats);
 +
++=======
+ 	dev->lstats = netdev_alloc_pcpu_stats(struct pcpu_lstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	return dev->lstats == NULL ? -ENOMEM : 0;
  }
  
diff --cc drivers/net/veth.c
index 11c9ff103aa7,91c33c1d3c9c..000000000000
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@@ -231,10 -235,9 +231,16 @@@ static int veth_change_mtu(struct net_d
  
  static int veth_dev_init(struct net_device *dev)
  {
++<<<<<<< HEAD
 +	dev->vstats = alloc_percpu(struct pcpu_vstats);
 +	if (!dev->vstats)
 +		return -ENOMEM;
 +
++=======
+ 	dev->vstats = netdev_alloc_pcpu_stats(struct pcpu_vstats);
+ 	if (!dev->vstats)
+ 		return -ENOMEM;
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	return 0;
  }
  
diff --cc drivers/net/vxlan.c
index d158096bf15a,dec9820bc182..000000000000
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@@ -2031,7 -1979,7 +2031,11 @@@ static int vxlan_init(struct net_devic
  	struct vxlan_net *vn = net_generic(dev_net(dev), vxlan_net_id);
  	struct vxlan_sock *vs;
  
++<<<<<<< HEAD
 +	dev->tstats = alloc_percpu(struct pcpu_tstats);
++=======
+ 	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!dev->tstats)
  		return -ENOMEM;
  
diff --cc include/linux/netdevice.h
index 0ce0a1e8a268,430c51aed6a4..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1706,6 -1717,29 +1706,32 @@@ struct udp_offload 
  	struct offload_callbacks callbacks;
  };
  
++<<<<<<< HEAD
++=======
+ /* often modified stats are per cpu, other are shared (netdev->stats) */
+ struct pcpu_sw_netstats {
+ 	u64     rx_packets;
+ 	u64     rx_bytes;
+ 	u64     tx_packets;
+ 	u64     tx_bytes;
+ 	struct u64_stats_sync   syncp;
+ };
+ 
+ #define netdev_alloc_pcpu_stats(type)				\
+ ({								\
+ 	typeof(type) *pcpu_stats = alloc_percpu(type);		\
+ 	if (pcpu_stats)	{					\
+ 		int i;						\
+ 		for_each_possible_cpu(i) {			\
+ 			typeof(type) *stat;			\
+ 			stat = per_cpu_ptr(pcpu_stats, i);	\
+ 			u64_stats_init(&stat->syncp);		\
+ 		}						\
+ 	}							\
+ 	pcpu_stats;						\
+ })
+ 
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  #include <linux/notifier.h>
  
  /* netdevice notifier chain. Please remember to update the rtnetlink
diff --cc net/bridge/br_device.c
index 38068a9ebc44,bf34451743a1..000000000000
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@@ -89,7 -89,7 +89,11 @@@ static int br_dev_init(struct net_devic
  {
  	struct net_bridge *br = netdev_priv(dev);
  
++<<<<<<< HEAD
 +	br->stats = alloc_percpu(struct br_cpu_netstats);
++=======
+ 	br->stats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!br->stats)
  		return -ENOMEM;
  
diff --cc net/ipv4/ip_tunnel.c
index 26bb30d12002,3400d737adc6..000000000000
--- a/net/ipv4/ip_tunnel.c
+++ b/net/ipv4/ip_tunnel.c
@@@ -981,12 -1044,19 +981,25 @@@ int ip_tunnel_init(struct net_device *d
  	int err;
  
  	dev->destructor	= ip_tunnel_dev_free;
++<<<<<<< HEAD
 +	dev->tstats = alloc_percpu(struct pcpu_tstats);
 +	if (!dev->tstats)
 +		return -ENOMEM;
 +
++=======
+ 	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
+ 	if (!dev->tstats)
+ 		return -ENOMEM;
+ 
+ 	tunnel->dst_cache = alloc_percpu(struct ip_tunnel_dst);
+ 	if (!tunnel->dst_cache) {
+ 		free_percpu(dev->tstats);
+ 		return -ENOMEM;
+ 	}
+ 
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	err = gro_cells_init(&tunnel->gro_cells, dev);
  	if (err) {
 -		free_percpu(tunnel->dst_cache);
  		free_percpu(dev->tstats);
  		return err;
  	}
diff --cc net/ipv6/ip6_gre.c
index bf5fb9d1ab43,c98338b81d30..000000000000
--- a/net/ipv6/ip6_gre.c
+++ b/net/ipv6/ip6_gre.c
@@@ -1455,7 -1463,7 +1455,11 @@@ static int ip6gre_tap_init(struct net_d
  
  	ip6gre_tnl_link_config(tunnel, 1);
  
++<<<<<<< HEAD
 +	dev->tstats = alloc_percpu(struct pcpu_tstats);
++=======
+ 	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!dev->tstats)
  		return -ENOMEM;
  
diff --cc net/ipv6/ip6_tunnel.c
index bfc6846e4ebd,8ad59f4811df..000000000000
--- a/net/ipv6/ip6_tunnel.c
+++ b/net/ipv6/ip6_tunnel.c
@@@ -1496,7 -1505,7 +1496,11 @@@ ip6_tnl_dev_init_gen(struct net_device 
  
  	t->dev = dev;
  	t->net = dev_net(dev);
++<<<<<<< HEAD
 +	dev->tstats = alloc_percpu(struct pcpu_tstats);
++=======
+ 	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!dev->tstats)
  		return -ENOMEM;
  	return 0;
diff --cc net/ipv6/sit.c
index aff21b3145f9,958027be0e94..000000000000
--- a/net/ipv6/sit.c
+++ b/net/ipv6/sit.c
@@@ -1283,7 -1364,7 +1283,11 @@@ static int ipip6_tunnel_init(struct net
  	memcpy(dev->broadcast, &tunnel->parms.iph.daddr, 4);
  
  	ipip6_tunnel_bind_dev(dev);
++<<<<<<< HEAD
 +	dev->tstats = alloc_percpu(struct pcpu_tstats);
++=======
+ 	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!dev->tstats)
  		return -ENOMEM;
  
@@@ -1306,9 -1387,10 +1310,16 @@@ static int __net_init ipip6_fb_tunnel_i
  	iph->ihl		= 5;
  	iph->ttl		= 64;
  
++<<<<<<< HEAD
 +	dev->tstats = alloc_percpu(struct pcpu_tstats);
 +	if (!dev->tstats)
 +		return -ENOMEM;
++=======
+ 	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
+ 	if (!dev->tstats)
+ 		return -ENOMEM;
+ 
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	dev_hold(dev);
  	rcu_assign_pointer(sitn->tunnels_wc[0], tunnel);
  	return 0;
diff --cc net/openvswitch/vport.c
index c4a6dab8101c,3b4db3220456..000000000000
--- a/net/openvswitch/vport.c
+++ b/net/openvswitch/vport.c
@@@ -135,12 -138,14 +135,21 @@@ struct vport *ovs_vport_alloc(int priv_
  	vport->ops = ops;
  	INIT_HLIST_NODE(&vport->dp_hash_node);
  
++<<<<<<< HEAD
 +	vport->percpu_stats = alloc_percpu(struct pcpu_tstats);
++=======
+ 	vport->percpu_stats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	if (!vport->percpu_stats) {
  		kfree(vport);
  		return ERR_PTR(-ENOMEM);
  	}
  
++<<<<<<< HEAD
++=======
+ 	spin_lock_init(&vport->stats_lock);
+ 
++>>>>>>> 1c213bd24ad0 (net: introduce netdev_alloc_pcpu_stats() for drivers)
  	return vport;
  }
  
* Unmerged path net/ipv6/ip6_vti.c
* Unmerged path drivers/net/dummy.c
* Unmerged path drivers/net/ethernet/marvell/mvneta.c
* Unmerged path drivers/net/loopback.c
* Unmerged path drivers/net/macvlan.c
* Unmerged path drivers/net/nlmon.c
diff --git a/drivers/net/team/team.c b/drivers/net/team/team.c
index 1adaf4062082..d5872b236e67 100644
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@ -1565,7 +1565,7 @@ static int team_init(struct net_device *dev)
 	mutex_init(&team->lock);
 	team_set_no_mode(team);
 
-	team->pcpu_stats = alloc_percpu(struct team_pcpu_stats);
+	team->pcpu_stats = netdev_alloc_pcpu_stats(struct team_pcpu_stats);
 	if (!team->pcpu_stats)
 		return -ENOMEM;
 
* Unmerged path drivers/net/veth.c
* Unmerged path drivers/net/vxlan.c
diff --git a/drivers/net/xen-netfront.c b/drivers/net/xen-netfront.c
index 3f0f20081979..7169f817174f 100644
--- a/drivers/net/xen-netfront.c
+++ b/drivers/net/xen-netfront.c
@@ -1297,7 +1297,7 @@ static struct net_device *xennet_create_dev(struct xenbus_device *dev)
 	np->rx_refill_timer.function = rx_refill_timeout;
 
 	err = -ENOMEM;
-	np->stats = alloc_percpu(struct netfront_stats);
+	np->stats = netdev_alloc_pcpu_stats(struct netfront_stats);
 	if (np->stats == NULL)
 		goto exit;
 
* Unmerged path include/linux/netdevice.h
diff --git a/net/8021q/vlan_dev.c b/net/8021q/vlan_dev.c
index 8619a05d7b69..7482aca8319e 100644
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@ -606,7 +606,7 @@ static int vlan_dev_init(struct net_device *dev)
 
 	vlan_dev_set_lockdep_class(dev, subclass);
 
-	vlan_dev_priv(dev)->vlan_pcpu_stats = alloc_percpu(struct vlan_pcpu_stats);
+	vlan_dev_priv(dev)->vlan_pcpu_stats = netdev_alloc_pcpu_stats(struct vlan_pcpu_stats);
 	if (!vlan_dev_priv(dev)->vlan_pcpu_stats)
 		return -ENOMEM;
 
* Unmerged path net/bridge/br_device.c
* Unmerged path net/ipv4/ip_tunnel.c
* Unmerged path net/ipv6/ip6_gre.c
* Unmerged path net/ipv6/ip6_tunnel.c
* Unmerged path net/ipv6/ip6_vti.c
* Unmerged path net/ipv6/sit.c
diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 786222d76e75..162bd81343a9 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -1225,7 +1225,7 @@ static int ovs_dp_cmd_new(struct sk_buff *skb, struct genl_info *info)
 	if (err)
 		goto err_free_dp;
 
-	dp->stats_percpu = alloc_percpu(struct dp_stats_percpu);
+	dp->stats_percpu = netdev_alloc_pcpu_stats(struct dp_stats_percpu);
 	if (!dp->stats_percpu) {
 		err = -ENOMEM;
 		goto err_destroy_table;
* Unmerged path net/openvswitch/vport.c
