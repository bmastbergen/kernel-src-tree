hyperv: Simplify the send_completion variables

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Haiyang Zhang <haiyangz@microsoft.com>
commit 893f66277799cd46bdf97429cc5d16a815a51273
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/893f6627.failed

The union contains only one member now, so we use the variables in it directly.

	Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
	Reviewed-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 893f66277799cd46bdf97429cc5d16a815a51273)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/hyperv_net.h
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/hyperv_net.h
index a2561fea6d21,d1f7826aa75f..000000000000
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@@ -54,27 -133,15 +54,33 @@@ struct hv_netvsc_packet 
  	bool is_data_pkt;
  	u16 vlan_tci;
  
 -	u16 q_idx;
 -	struct vmbus_channel *channel;
 +	/*
 +	 * Valid only for receives when we break a xfer page packet
 +	 * into multiple netvsc packets
 +	 */
 +	struct xferpage_packet *xfer_page_pkt;
  
++<<<<<<< HEAD
 +	union {
 +		struct {
 +			u64 recv_completion_tid;
 +			void *recv_completion_ctx;
 +			void (*recv_completion)(void *context);
 +		} recv;
 +		struct {
 +			u64 send_completion_tid;
 +			void *send_completion_ctx;
 +			void (*send_completion)(void *context);
 +		} send;
 +	} completion;
++=======
+ 	u64 send_completion_tid;
+ 	void *send_completion_ctx;
+ 	void (*send_completion)(void *context);
++>>>>>>> 893f66277799 (hyperv: Simplify the send_completion variables)
  
  	/* This points to the memory after page_buf */
 -	struct rndis_message *rndis_msg;
 +	void *extension;
  
  	u32 total_data_buflen;
  	/* Points to the send/receive buffer where the ethernet frame is */
diff --cc drivers/net/hyperv/netvsc.c
index 9cc0753cff9d,bbee44635035..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -479,10 -476,12 +479,19 @@@ static void netvsc_send_completion(stru
  			packet->trans_id;
  
  		/* Notify the layer above us */
++<<<<<<< HEAD
 +		if (nvsc_packet)
 +			nvsc_packet->completion.send.send_completion(
 +				nvsc_packet->completion.send.
 +				send_completion_ctx);
++=======
+ 		if (nvsc_packet) {
+ 			q_idx = nvsc_packet->q_idx;
+ 			channel = nvsc_packet->channel;
+ 			nvsc_packet->send_completion(nvsc_packet->
+ 						     send_completion_ctx);
+ 		}
++>>>>>>> 893f66277799 (hyperv: Simplify the send_completion variables)
  
  		num_outstanding_sends =
  			atomic_dec_return(&net_device->num_outstanding_sends);
* Unmerged path drivers/net/hyperv/hyperv_net.h
* Unmerged path drivers/net/hyperv/netvsc.c
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index 854b31f1a85a..48b5ecb34895 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -133,7 +133,7 @@ static void netvsc_xmit_completion(void *context)
 {
 	struct hv_netvsc_packet *packet = (struct hv_netvsc_packet *)context;
 	struct sk_buff *skb = (struct sk_buff *)
-		(unsigned long)packet->completion.send.send_completion_tid;
+		(unsigned long)packet->send_completion_tid;
 
 	kfree(packet);
 
@@ -210,9 +210,9 @@ static int netvsc_start_xmit(struct sk_buff *skb, struct net_device *net)
 	}
 
 	/* Set the completion routine */
-	packet->completion.send.send_completion = netvsc_xmit_completion;
-	packet->completion.send.send_completion_ctx = packet;
-	packet->completion.send.send_completion_tid = (unsigned long)skb;
+	packet->send_completion = netvsc_xmit_completion;
+	packet->send_completion_ctx = packet;
+	packet->send_completion_tid = (unsigned long)skb;
 
 	ret = rndis_filter_send(net_device_ctx->device_ctx,
 				  packet);
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index 4b3b201565af..09abb8281cb7 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -238,7 +238,7 @@ static int rndis_filter_send_request(struct rndis_device *dev,
 			packet->page_buf[0].len;
 	}
 
-	packet->completion.send.send_completion = NULL;
+	packet->send_completion = NULL;
 
 	ret = netvsc_send(dev->net_dev->dev, packet);
 	return ret;
