perf tools: Reference count map_groups objects

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Reference count map_groups objects (Jiri Olsa) [1134356]
Rebuild_FUZZ: 93.02%
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit a26ca6716a6c683f40bd676cea7e89704653b98d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/a26ca671.failed

We will share it among threads in the same process.
Adding map_groups__get/map_groups__put interface for that.

	Signed-off-by: Arnaldo Carvalho de Melo <acme@kernel.org>
	Acked-by: Namhyung Kim <namhyung@kernel.org>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Don Zickus <dzickus@redhat.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/r/1397490723-1992-4-git-send-email-jolsa@redhat.com
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit a26ca6716a6c683f40bd676cea7e89704653b98d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/map.c
#	tools/perf/util/map.h
#	tools/perf/util/thread.c
diff --cc tools/perf/util/map.c
index 3305ccfeb0d7,ba5f5c0c838b..000000000000
--- a/tools/perf/util/map.c
+++ b/tools/perf/util/map.c
@@@ -358,6 -359,28 +359,31 @@@ void map_groups__exit(struct map_group
  	}
  }
  
++<<<<<<< HEAD
++=======
+ struct map_groups *map_groups__new(void)
+ {
+ 	struct map_groups *mg = malloc(sizeof(*mg));
+ 
+ 	if (mg != NULL)
+ 		map_groups__init(mg);
+ 
+ 	return mg;
+ }
+ 
+ void map_groups__delete(struct map_groups *mg)
+ {
+ 	map_groups__exit(mg);
+ 	free(mg);
+ }
+ 
+ void map_groups__put(struct map_groups *mg)
+ {
+ 	if (--mg->refcnt == 0)
+ 		map_groups__delete(mg);
+ }
+ 
++>>>>>>> a26ca6716a6c (perf tools: Reference count map_groups objects)
  void map_groups__flush(struct map_groups *mg)
  {
  	int type;
diff --cc tools/perf/util/map.h
index 257e513205ce,d6445b27d672..000000000000
--- a/tools/perf/util/map.h
+++ b/tools/perf/util/map.h
@@@ -59,8 -59,20 +59,23 @@@ struct map_groups 
  	struct rb_root	 maps[MAP__NR_TYPES];
  	struct list_head removed_maps[MAP__NR_TYPES];
  	struct machine	 *machine;
+ 	int		 refcnt;
  };
  
++<<<<<<< HEAD
++=======
+ struct map_groups *map_groups__new(void);
+ void map_groups__delete(struct map_groups *mg);
+ 
+ static inline struct map_groups *map_groups__get(struct map_groups *mg)
+ {
+ 	++mg->refcnt;
+ 	return mg;
+ }
+ 
+ void map_groups__put(struct map_groups *mg);
+ 
++>>>>>>> a26ca6716a6c (perf tools: Reference count map_groups objects)
  static inline struct kmap *map__kmap(struct map *map)
  {
  	return (struct kmap *)(map + 1);
diff --cc tools/perf/util/thread.c
index 3ce0498bdae6,b501848a8424..000000000000
--- a/tools/perf/util/thread.c
+++ b/tools/perf/util/thread.c
@@@ -45,7 -50,8 +45,12 @@@ void thread__delete(struct thread *thre
  {
  	struct comm *comm, *tmp;
  
++<<<<<<< HEAD
 +	map_groups__exit(&thread->mg);
++=======
+ 	map_groups__put(thread->mg);
+ 	thread->mg = NULL;
++>>>>>>> a26ca6716a6c (perf tools: Reference count map_groups objects)
  	list_for_each_entry_safe(comm, tmp, &thread->comm_list, list) {
  		list_del(&comm->list);
  		comm__free(comm);
* Unmerged path tools/perf/util/map.c
* Unmerged path tools/perf/util/map.h
* Unmerged path tools/perf/util/thread.c
