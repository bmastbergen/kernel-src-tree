nfsd4: remove nfs4_acl_new

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author J. Bruce Fields <bfields@redhat.com>
commit bcaab953b1d3790c724a211f2452b574fd49a7ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/bcaab953.failed

This is a not-that-useful kmalloc wrapper.  And I'd like one of the
callers to actually use something other than kmalloc.

	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit bcaab953b1d3790c724a211f2452b574fd49a7ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs4acl.c
diff --cc fs/nfsd/nfs4acl.c
index 39040fb1f799,acf6974e6823..000000000000
--- a/fs/nfsd/nfs4acl.c
+++ b/fs/nfsd/nfs4acl.c
@@@ -131,36 -135,48 +131,45 @@@ static short ace2type(struct nfs4_ace *
  static void _posix_to_nfsv4_one(struct posix_acl *, struct nfs4_acl *,
  				unsigned int);
  
 -int
 -nfsd4_get_nfs4_acl(struct svc_rqst *rqstp, struct dentry *dentry,
 -		struct nfs4_acl **acl)
 +struct nfs4_acl *
 +nfs4_acl_posix_to_nfsv4(struct posix_acl *pacl, struct posix_acl *dpacl,
 +			unsigned int flags)
  {
 -	struct inode *inode = dentry->d_inode;
 -	int error = 0;
 -	struct posix_acl *pacl = NULL, *dpacl = NULL;
 -	unsigned int flags = 0;
 +	struct nfs4_acl *acl;
  	int size = 0;
  
 -	pacl = get_acl(inode, ACL_TYPE_ACCESS);
 -	if (!pacl) {
 -		pacl = posix_acl_from_mode(inode->i_mode, GFP_KERNEL);
 -		if (IS_ERR(pacl))
 -			return PTR_ERR(pacl);
 +	if (pacl) {
 +		if (posix_acl_valid(pacl) < 0)
 +			return ERR_PTR(-EINVAL);
 +		size += 2*pacl->a_count;
  	}
 -	/* allocate for worst case: one (deny, allow) pair each: */
 -	size += 2 * pacl->a_count;
 -
 -	if (S_ISDIR(inode->i_mode)) {
 -		flags = NFS4_ACL_DIR;
 -		dpacl = get_acl(inode, ACL_TYPE_DEFAULT);
 -		if (dpacl)
 -			size += 2 * dpacl->a_count;
 +	if (dpacl) {
 +		if (posix_acl_valid(dpacl) < 0)
 +			return ERR_PTR(-EINVAL);
 +		size += 2*dpacl->a_count;
  	}
  
++<<<<<<< HEAD
 +	/* Allocate for worst case: one (deny, allow) pair each: */
 +	acl = nfs4_acl_new(size);
 +	if (acl == NULL)
 +		return ERR_PTR(-ENOMEM);
++=======
+ 	*acl = kmalloc(nfs4_acl_bytes(size), GFP_KERNEL);
+ 	if (*acl == NULL) {
+ 		error = -ENOMEM;
+ 		goto out;
+ 	}
+ 	(*acl)->naces = 0;
++>>>>>>> bcaab953b1d3 (nfsd4: remove nfs4_acl_new)
  
 -	_posix_to_nfsv4_one(pacl, *acl, flags & ~NFS4_ACL_TYPE_DEFAULT);
 +	if (pacl)
 +		_posix_to_nfsv4_one(pacl, acl, flags & ~NFS4_ACL_TYPE_DEFAULT);
  
  	if (dpacl)
 -		_posix_to_nfsv4_one(dpacl, *acl, flags | NFS4_ACL_TYPE_DEFAULT);
 +		_posix_to_nfsv4_one(dpacl, acl, flags | NFS4_ACL_TYPE_DEFAULT);
  
 - out:
 -	posix_acl_release(pacl);
 -	posix_acl_release(dpacl);
 -	return error;
 +	return acl;
  }
  
  struct posix_acl_summary {
@@@ -804,19 -873,13 +813,21 @@@ ace2type(struct nfs4_ace *ace
  	return -1;
  }
  
++<<<<<<< HEAD
 +EXPORT_SYMBOL(nfs4_acl_posix_to_nfsv4);
 +EXPORT_SYMBOL(nfs4_acl_nfsv4_to_posix);
 +
 +struct nfs4_acl *
 +nfs4_acl_new(int n)
++=======
+ /*
+  * return the size of the struct nfs4_acl required to represent an acl
+  * with @entries entries.
+  */
+ int nfs4_acl_bytes(int entries)
++>>>>>>> bcaab953b1d3 (nfsd4: remove nfs4_acl_new)
  {
- 	struct nfs4_acl *acl;
- 
- 	acl = kmalloc(sizeof(*acl) + n*sizeof(struct nfs4_ace), GFP_KERNEL);
- 	if (acl == NULL)
- 		return NULL;
- 	acl->naces = 0;
- 	return acl;
+ 	return sizeof(struct nfs4_acl) + entries * sizeof(struct nfs4_ace);
  }
  
  static struct {
diff --git a/fs/nfsd/acl.h b/fs/nfsd/acl.h
index 4ef31d3af6a8..051ffcb7f7af 100644
--- a/fs/nfsd/acl.h
+++ b/fs/nfsd/acl.h
@@ -45,7 +45,7 @@
 #define NFS4_ACL_MAX ((PAGE_SIZE - sizeof(struct nfs4_acl)) \
 			/ sizeof(struct nfs4_ace))
 
-struct nfs4_acl *nfs4_acl_new(int);
+int nfs4_acl_bytes(int entries);
 int nfs4_acl_get_whotype(char *, u32);
 __be32 nfs4_acl_write_who(struct xdr_stream *xdr, int who);
 
* Unmerged path fs/nfsd/nfs4acl.c
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index 69638768c116..83c451a9b805 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -309,7 +309,7 @@ nfsd4_decode_fattr(struct nfsd4_compoundargs *argp, u32 *bmval,
 		if (nace > NFS4_ACL_MAX)
 			return nfserr_fbig;
 
-		*acl = nfs4_acl_new(nace);
+		*acl = kmalloc(nfs4_acl_bytes(nace), GFP_KERNEL);
 		if (*acl == NULL)
 			return nfserr_jukebox;
 
