be2net: fix return status of some ndo methods

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Kalesh AP <kalesh.purayil@emulex.com>
commit abccf23e3eebcd5b7b0ad5d2ad6d1f6d81af6b47
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/abccf23e.failed

The netlink layer expects a -ve status value to be returned when a driver
ndo method encounters an error. The driver was directly passing the
error status returned by FW (a positive value) to the stack.
This patch fixes this by returning -EIO status when a FW-cmd reports an error.

	Signed-off-by: Kalesh AP <kalesh.purayil@emulex.com>
	Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit abccf23e3eebcd5b7b0ad5d2ad6d1f6d81af6b47)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be_main.c
diff --cc drivers/net/ethernet/emulex/benet/be_main.c
index 98e1131f6f5f,988f7658c960..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@@ -1335,18 -1338,26 +1337,22 @@@ static int be_set_vf_vlan(struct net_de
  					       vf + 1, vf_cfg->if_handle, 0);
  	}
  
- 	if (!status)
- 		vf_cfg->vlan_tag = vlan;
- 	else
- 		dev_info(&adapter->pdev->dev,
- 			 "VLAN %d config on VF %d failed\n", vlan, vf);
- 	return status;
+ 	if (status) {
+ 		dev_err(&adapter->pdev->dev,
+ 			"VLAN %d config on VF %d failed : %#x\n", vlan,
+ 			vf, status);
+ 		return be_cmd_status(status);
+ 	}
+ 
+ 	vf_cfg->vlan_tag = vlan;
+ 
+ 	return 0;
  }
  
 -static int be_set_vf_tx_rate(struct net_device *netdev, int vf,
 -			     int min_tx_rate, int max_tx_rate)
 +static int be_set_vf_tx_rate(struct net_device *netdev, int vf, int rate)
  {
  	struct be_adapter *adapter = netdev_priv(netdev);
 -	struct device *dev = &adapter->pdev->dev;
 -	int percent_rate, status = 0;
 -	u16 link_speed = 0;
 -	u8 link_status;
 +	int status = 0;
  
  	if (!sriov_enabled(adapter))
  		return -EPERM;
@@@ -1354,19 -1365,51 +1360,58 @@@
  	if (vf >= adapter->num_vfs)
  		return -EINVAL;
  
 -	if (min_tx_rate)
 +	if (rate < 100 || rate > 10000) {
 +		dev_err(&adapter->pdev->dev,
 +			"tx rate must be between 100 and 10000 Mbps\n");
  		return -EINVAL;
 +	}
  
 -	if (!max_tx_rate)
 -		goto config_qos;
 -
 -	status = be_cmd_link_status_query(adapter, &link_speed,
 -					  &link_status, 0);
 +	status = be_cmd_config_qos(adapter, rate / 10, vf + 1);
  	if (status)
++<<<<<<< HEAD
 +		dev_err(&adapter->pdev->dev,
 +			"tx rate %d on VF %d failed\n", rate, vf);
 +	else
 +		adapter->vf_cfg[vf].tx_rate = rate;
 +	return status;
++=======
+ 		goto err;
+ 
+ 	if (!link_status) {
+ 		dev_err(dev, "TX-rate setting not allowed when link is down\n");
+ 		status = -ENETDOWN;
+ 		goto err;
+ 	}
+ 
+ 	if (max_tx_rate < 100 || max_tx_rate > link_speed) {
+ 		dev_err(dev, "TX-rate must be between 100 and %d Mbps\n",
+ 			link_speed);
+ 		status = -EINVAL;
+ 		goto err;
+ 	}
+ 
+ 	/* On Skyhawk the QOS setting must be done only as a % value */
+ 	percent_rate = link_speed / 100;
+ 	if (skyhawk_chip(adapter) && (max_tx_rate % percent_rate)) {
+ 		dev_err(dev, "TX-rate must be a multiple of %d Mbps\n",
+ 			percent_rate);
+ 		status = -EINVAL;
+ 		goto err;
+ 	}
+ 
+ config_qos:
+ 	status = be_cmd_config_qos(adapter, max_tx_rate, link_speed, vf + 1);
+ 	if (status)
+ 		goto err;
+ 
+ 	adapter->vf_cfg[vf].tx_rate = max_tx_rate;
+ 	return 0;
+ 
+ err:
+ 	dev_err(dev, "TX-rate setting of %dMbps on VF%d failed\n",
+ 		max_tx_rate, vf);
+ 	return be_cmd_status(status);
++>>>>>>> abccf23e3eeb (be2net: fix return status of some ndo methods)
  }
  static int be_set_vf_link_state(struct net_device *netdev, int vf,
  				int link_state)
* Unmerged path drivers/net/ethernet/emulex/benet/be_main.c
