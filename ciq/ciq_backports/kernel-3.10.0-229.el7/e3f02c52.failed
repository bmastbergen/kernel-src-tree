ACPI / bind: Rework struct acpi_bus_type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [acpi] bind: Rework struct acpi_bus_type (Prarit Bhargava) [1141846]
Rebuild_FUZZ: 90.41%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit e3f02c5228c4b600abf6ca243301176f25553bd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/e3f02c52.failed

Replace the .find_device function pointer in struct acpi_bus_type
with a new one, .find_companion, that is supposed to point to a
function returning struct acpi_device pointer (instead of an int)
and takes one argument (instead of two).  This way the role of
this callback is more clear and the implementation of it can
be more straightforward.

Update all of the users of struct acpi_bus_type (PCI, PNP/ACPI and
USB) to reflect the structure change.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Tested-by: Lan Tianyu <tianyu.lan@intel.com> # for USB/ACPI
(cherry picked from commit e3f02c5228c4b600abf6ca243301176f25553bd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/core/usb-acpi.c
diff --cc drivers/usb/core/usb-acpi.c
index ca63c1ef7144,f0155a39aaa3..000000000000
--- a/drivers/usb/core/usb-acpi.c
+++ b/drivers/usb/core/usb-acpi.c
@@@ -173,12 -172,11 +173,19 @@@ static struct acpi_device *usb_acpi_fin
  		}
  
  		/* root hub's parent is the usb hcd. */
++<<<<<<< HEAD
 +		parent_handle = DEVICE_ACPI_HANDLE(dev->parent);
 +		*handle = acpi_get_child(parent_handle, udev->portnum);
 +		if (!*handle)
 +			return -ENODEV;
 +		return 0;
++=======
+ 		return acpi_find_child_device(ACPI_COMPANION(dev->parent),
+ 					      udev->portnum, false);
++>>>>>>> e3f02c5228c4 (ACPI / bind: Rework struct acpi_bus_type)
  	} else if (is_usb_port(dev)) {
+ 		struct acpi_device *adev = NULL;
+ 
  		sscanf(dev_name(dev), "port%d", &port_num);
  		/* Get the struct usb_device point of port's hub */
  		udev = to_usb_device(dev->parent->parent);
@@@ -194,10 -192,10 +201,17 @@@
  
  			raw_port_num = usb_hcd_find_raw_port_number(hcd,
  				port_num);
++<<<<<<< HEAD
 +			*handle = acpi_get_child(DEVICE_ACPI_HANDLE(&udev->dev),
 +				raw_port_num);
 +			if (!*handle)
 +				return -ENODEV;
++=======
+ 			adev = acpi_find_child_device(ACPI_COMPANION(&udev->dev),
+ 						      raw_port_num, false);
+ 			if (!adev)
+ 				return NULL;
++>>>>>>> e3f02c5228c4 (ACPI / bind: Rework struct acpi_bus_type)
  		} else {
  			parent_handle =
  				usb_get_hub_port_acpi_handle(udev->parent,
diff --git a/drivers/acpi/glue.c b/drivers/acpi/glue.c
index 7b82e04a359a..e5f71091c6a0 100644
--- a/drivers/acpi/glue.c
+++ b/drivers/acpi/glue.c
@@ -37,7 +37,7 @@ int register_acpi_bus_type(struct acpi_bus_type *type)
 {
 	if (acpi_disabled)
 		return -ENODEV;
-	if (type && type->match && type->find_device) {
+	if (type && type->match && type->find_companion) {
 		down_write(&bus_type_sem);
 		list_add_tail(&type->list, &bus_type_list);
 		up_write(&bus_type_sem);
@@ -307,17 +307,19 @@ EXPORT_SYMBOL_GPL(acpi_unbind_one);
 static int acpi_platform_notify(struct device *dev)
 {
 	struct acpi_bus_type *type = acpi_get_bus_type(dev);
-	acpi_handle handle;
 	int ret;
 
 	ret = acpi_bind_one(dev, NULL);
 	if (ret && type) {
-		ret = type->find_device(dev, &handle);
-		if (ret) {
+		struct acpi_device *adev;
+
+		adev = type->find_companion(dev);
+		if (!adev) {
 			DBG("Unable to get handle for %s\n", dev_name(dev));
+			ret = -ENODEV;
 			goto out;
 		}
-		ret = acpi_bind_one(dev, handle);
+		ret = acpi_bind_one(dev, adev->handle);
 		if (ret)
 			goto out;
 	}
diff --git a/drivers/pci/pci-acpi.c b/drivers/pci/pci-acpi.c
index d8afe2f6ff32..39824ff89e0a 100644
--- a/drivers/pci/pci-acpi.c
+++ b/drivers/pci/pci-acpi.c
@@ -315,10 +315,9 @@ void acpi_pci_remove_bus(struct pci_bus *bus)
 }
 
 /* ACPI bus type */
-static int acpi_pci_find_device(struct device *dev, acpi_handle *handle)
+static struct acpi_device *acpi_pci_find_companion(struct device *dev)
 {
 	struct pci_dev *pci_dev = to_pci_dev(dev);
-	struct acpi_device *adev;
 	bool check_children;
 	u64 addr;
 
@@ -331,13 +330,8 @@ static int acpi_pci_find_device(struct device *dev, acpi_handle *handle)
 			|| pci_dev->hdr_type == PCI_HEADER_TYPE_CARDBUS;
 	/* Please ref to ACPI spec for the syntax of _ADR */
 	addr = (PCI_SLOT(pci_dev->devfn) << 16) | PCI_FUNC(pci_dev->devfn);
-	adev = acpi_find_child_device(ACPI_COMPANION(dev->parent), addr,
+	return acpi_find_child_device(ACPI_COMPANION(dev->parent), addr,
 				      check_children);
-	if (adev) {
-		*handle = adev->handle;
-		return 0;
-	}
-	return -ENODEV;
 }
 
 static void pci_acpi_setup(struct device *dev)
@@ -377,7 +371,7 @@ static bool pci_acpi_bus_match(struct device *dev)
 static struct acpi_bus_type acpi_pci_bus = {
 	.name = "PCI",
 	.match = pci_acpi_bus_match,
-	.find_device = acpi_pci_find_device,
+	.find_companion = acpi_pci_find_companion,
 	.setup = pci_acpi_setup,
 	.cleanup = pci_acpi_cleanup,
 };
diff --git a/drivers/pnp/pnpacpi/core.c b/drivers/pnp/pnpacpi/core.c
index eb415b24ae52..6998f589a6ba 100644
--- a/drivers/pnp/pnpacpi/core.c
+++ b/drivers/pnp/pnpacpi/core.c
@@ -342,20 +342,15 @@ static int __init acpi_pnp_match(struct device *dev, void *_pnp)
 	    && compare_pnp_id(pnp->id, acpi_device_hid(acpi));
 }
 
-static int __init acpi_pnp_find_device(struct device *dev, acpi_handle * handle)
+static struct acpi_device * __init acpi_pnp_find_companion(struct device *dev)
 {
-	struct device *adev;
-	struct acpi_device *acpi;
-
-	adev = bus_find_device(&acpi_bus_type, NULL,
-			       to_pnp_dev(dev), acpi_pnp_match);
-	if (!adev)
-		return -ENODEV;
+	dev = bus_find_device(&acpi_bus_type, NULL, to_pnp_dev(dev),
+			      acpi_pnp_match);
+	if (!dev)
+		return NULL;
 
-	acpi = to_acpi_device(adev);
-	*handle = acpi->handle;
-	put_device(adev);
-	return 0;
+	put_device(dev);
+	return to_acpi_device(dev);
 }
 
 /* complete initialization of a PNPACPI device includes having
@@ -369,7 +364,7 @@ static bool acpi_pnp_bus_match(struct device *dev)
 static struct acpi_bus_type __initdata acpi_pnp_bus = {
 	.name	     = "PNP",
 	.match	     = acpi_pnp_bus_match,
-	.find_device = acpi_pnp_find_device,
+	.find_companion = acpi_pnp_find_companion,
 };
 
 int pnpacpi_disabled __initdata;
* Unmerged path drivers/usb/core/usb-acpi.c
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index f5d6e1e4030e..332f8b330d35 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -418,7 +418,7 @@ struct acpi_bus_type {
 	struct list_head list;
 	const char *name;
 	bool (*match)(struct device *dev);
-	int (*find_device) (struct device *, acpi_handle *);
+	struct acpi_device * (*find_companion)(struct device *);
 	void (*setup)(struct device *);
 	void (*cleanup)(struct device *);
 };
