powerpc/powernv: Fix endless reporting frozen PE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] powernv: Fix endless reporting frozen PE (Don Zickus) [1127366]
Rebuild_FUZZ: 90.91%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 63796558d469d72ab081b266466d115755ba7085
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/63796558.failed

Once one specific PE has been marked as EEH_PE_ISOLATED, it's in
the middile of recovery or removed permenently. We needn't report
the frozen PE again. Otherwise, we will have endless reporting
same frozen PE.

	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 63796558d469d72ab081b266466d115755ba7085)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/eeh-ioda.c
diff --cc arch/powerpc/platforms/powernv/eeh-ioda.c
index be33a16408be,3a755b5f9952..000000000000
--- a/arch/powerpc/platforms/powernv/eeh-ioda.c
+++ b/arch/powerpc/platforms/powernv/eeh-ioda.c
@@@ -847,18 -741,61 +847,45 @@@ static int ioda_eeh_next_error(struct e
  
  			break;
  		case OPAL_EEH_PE_ERROR:
++<<<<<<< HEAD
 +			if (ioda_eeh_get_pe(hose, frozen_pe_no, pe))
 +				break;
++=======
+ 			/*
+ 			 * If we can't find the corresponding PE, the
+ 			 * PEEV / PEST would be messy. So we force an
+ 			 * fenced PHB so that it can be recovered.
+ 			 *
+ 			 * If the PE has been marked as isolated, that
+ 			 * should have been removed permanently or in
+ 			 * progress with recovery. We needn't report
+ 			 * it again.
+ 			 */
+ 			if (ioda_eeh_get_pe(hose, frozen_pe_no, pe)) {
+ 				*pe = phb_pe;
+ 				pr_err("EEH: Escalated fenced PHB#%x "
+ 				       "detected for PE#%llx\n",
+ 					hose->global_number,
+ 					frozen_pe_no);
+ 				ret = EEH_NEXT_ERR_FENCED_PHB;
+ 			} else if ((*pe)->state & EEH_PE_ISOLATED) {
+ 				ret = EEH_NEXT_ERR_NONE;
+ 			} else {
+ 				pr_err("EEH: Frozen PE#%x on PHB#%x detected\n",
+ 					(*pe)->addr, (*pe)->phb->global_number);
+ 				ret = EEH_NEXT_ERR_FROZEN_PE;
+ 			}
++>>>>>>> 63796558d469 (powerpc/powernv: Fix endless reporting frozen PE)
  
 -			break;
 -		default:
 -			pr_warn("%s: Unexpected error type %d\n",
 -				__func__, err_type);
 -		}
 -
 -		/*
 -		 * EEH core will try recover from fenced PHB or
 -		 * frozen PE. In the time for frozen PE, EEH core
 -		 * enable IO path for that before collecting logs,
 -		 * but it ruins the site. So we have to dump the
 -		 * log in advance here.
 -		 */
 -		if ((ret == EEH_NEXT_ERR_FROZEN_PE  ||
 -		    ret == EEH_NEXT_ERR_FENCED_PHB) &&
 -		    !((*pe)->state & EEH_PE_ISOLATED)) {
 -			eeh_pe_state_mark(*pe, EEH_PE_ISOLATED);
 -			ioda_eeh_phb_diag(hose);
 +			pr_err("EEH: Frozen PE#%x on PHB#%x detected\n",
 +				(*pe)->addr, (*pe)->phb->global_number);
 +			ret = 1;
 +			goto out;
  		}
 -
 -		/*
 -		 * If we have no errors on the specific PHB or only
 -		 * informative error there, we continue poking it.
 -		 * Otherwise, we need actions to be taken by upper
 -		 * layer.
 -		 */
 -		if (ret > EEH_NEXT_ERR_INF)
 -			break;
  	}
  
 +	ret = 0;
 +out:
  	return ret;
  }
  
* Unmerged path arch/powerpc/platforms/powernv/eeh-ioda.c
