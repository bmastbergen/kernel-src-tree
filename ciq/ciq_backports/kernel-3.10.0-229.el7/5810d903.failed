blk-mq: fix waiting for reserved tags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jens Axboe <axboe@fb.com>
commit 5810d903fa3459e703ce82a1d45136813c6afad8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/5810d903.failed

blk_mq_wait_for_tags() is only able to wait for "normal" tags,
not reserved tags. Pass in which one we should attempt to get
a tag for, so that waiting for reserved tags will work.

Reserved tags are used for internal commands, which are usually
serialized. Hence no waiting generally takes place, but we should
ensure that it actually works if users need that functionality.

	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 5810d903fa3459e703ce82a1d45136813c6afad8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-tag.c
diff --cc block/blk-mq-tag.c
index 83ae96c51a27,1f43d6ee956f..000000000000
--- a/block/blk-mq-tag.c
+++ b/block/blk-mq-tag.c
@@@ -7,22 -6,9 +7,26 @@@
  #include "blk-mq.h"
  #include "blk-mq-tag.h"
  
++<<<<<<< HEAD
 +/*
 + * Per tagged queue (tag address space) map
 + */
 +struct blk_mq_tags {
 +	unsigned int nr_tags;
 +	unsigned int nr_reserved_tags;
 +	unsigned int nr_batch_move;
 +	unsigned int nr_max_cache;
 +
 +	struct percpu_ida free_tags;
 +	struct percpu_ida reserved_tags;
 +};
 +
 +void blk_mq_wait_for_tags(struct blk_mq_tags *tags)
++=======
+ void blk_mq_wait_for_tags(struct blk_mq_tags *tags, bool reserved)
++>>>>>>> 5810d903fa34 (blk-mq: fix waiting for reserved tags)
  {
- 	int tag = blk_mq_get_tag(tags, __GFP_WAIT, false);
+ 	int tag = blk_mq_get_tag(tags, __GFP_WAIT, reserved);
  	blk_mq_put_tag(tags, tag);
  }
  
* Unmerged path block/blk-mq-tag.c
diff --git a/block/blk-mq-tag.h b/block/blk-mq-tag.h
index 947ba2c6148e..cc534680b390 100644
--- a/block/blk-mq-tag.h
+++ b/block/blk-mq-tag.h
@@ -7,7 +7,7 @@ extern struct blk_mq_tags *blk_mq_init_tags(unsigned int nr_tags, unsigned int r
 extern void blk_mq_free_tags(struct blk_mq_tags *tags);
 
 extern unsigned int blk_mq_get_tag(struct blk_mq_tags *tags, gfp_t gfp, bool reserved);
-extern void blk_mq_wait_for_tags(struct blk_mq_tags *tags);
+extern void blk_mq_wait_for_tags(struct blk_mq_tags *tags, bool reserved);
 extern void blk_mq_put_tag(struct blk_mq_tags *tags, unsigned int tag);
 extern void blk_mq_tag_busy_iter(struct blk_mq_tags *tags, void (*fn)(void *data, unsigned long *), void *data);
 extern bool blk_mq_has_free_tags(struct blk_mq_tags *tags);
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 4c89c5296899..9838075a4a13 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -217,7 +217,7 @@ static struct request *blk_mq_alloc_request_pinned(struct request_queue *q,
 			break;
 		}
 
-		blk_mq_wait_for_tags(hctx->tags);
+		blk_mq_wait_for_tags(hctx->tags, reserved);
 	} while (1);
 
 	return rq;
