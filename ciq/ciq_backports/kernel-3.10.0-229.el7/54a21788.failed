futex: Make lookup_pi_state more robust

jira LE-1907
cve CVE-2014-3153
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 54a217887a7b658e2650c3feff22756ab80c7339
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/54a21788.failed

The current implementation of lookup_pi_state has ambigous handling of
the TID value 0 in the user space futex.  We can get into the kernel
even if the TID value is 0, because either there is a stale waiters bit
or the owner died bit is set or we are called from the requeue_pi path
or from user space just for fun.

The current code avoids an explicit sanity check for pid = 0 in case
that kernel internal state (waiters) are found for the user space
address.  This can lead to state leakage and worse under some
circumstances.

Handle the cases explicit:

       Waiter | pi_state | pi->owner | uTID      | uODIED | ?

  [1]  NULL   | ---      | ---       | 0         | 0/1    | Valid
  [2]  NULL   | ---      | ---       | >0        | 0/1    | Valid

  [3]  Found  | NULL     | --        | Any       | 0/1    | Invalid

  [4]  Found  | Found    | NULL      | 0         | 1      | Valid
  [5]  Found  | Found    | NULL      | >0        | 1      | Invalid

  [6]  Found  | Found    | task      | 0         | 1      | Valid

  [7]  Found  | Found    | NULL      | Any       | 0      | Invalid

  [8]  Found  | Found    | task      | ==taskTID | 0/1    | Valid
  [9]  Found  | Found    | task      | 0         | 0      | Invalid
  [10] Found  | Found    | task      | !=taskTID | 0/1    | Invalid

 [1] Indicates that the kernel can acquire the futex atomically. We
     came came here due to a stale FUTEX_WAITERS/FUTEX_OWNER_DIED bit.

 [2] Valid, if TID does not belong to a kernel thread. If no matching
     thread is found then it indicates that the owner TID has died.

 [3] Invalid. The waiter is queued on a non PI futex

 [4] Valid state after exit_robust_list(), which sets the user space
     value to FUTEX_WAITERS | FUTEX_OWNER_DIED.

 [5] The user space value got manipulated between exit_robust_list()
     and exit_pi_state_list()

 [6] Valid state after exit_pi_state_list() which sets the new owner in
     the pi_state but cannot access the user space value.

 [7] pi_state->owner can only be NULL when the OWNER_DIED bit is set.

 [8] Owner and user space value match

 [9] There is no transient state which sets the user space TID to 0
     except exit_robust_list(), but this is indicated by the
     FUTEX_OWNER_DIED bit. See [4]

[10] There is no transient state which leaves owner and user space
     TID out of sync.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Will Drewry <wad@chromium.org>
	Cc: Darren Hart <dvhart@linux.intel.com>
	Cc: stable@vger.kernel.org
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 54a217887a7b658e2650c3feff22756ab80c7339)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/futex.c
diff --cc kernel/futex.c
index 08dc343a22dc,de938d20df19..000000000000
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@@ -770,9 -863,18 +847,21 @@@ lookup_pi_state(u32 uval, struct futex_
  					return -EINVAL;
  			}
  
++<<<<<<< HEAD
++=======
+ 			/*
+ 			 * Bail out if user space manipulated the
+ 			 * futex value. If pi state exists then the
+ 			 * owner TID must be the same as the user
+ 			 * space TID. [9/10]
+ 			 */
+ 			if (pid != task_pid_vnr(pi_state->owner))
+ 				return -EINVAL;
+ 
+ 		out_state:
++>>>>>>> 54a217887a7b (futex: Make lookup_pi_state more robust)
  			atomic_inc(&pi_state->refcount);
  			*ps = pi_state;
- 
  			return 0;
  		}
  	}
@@@ -1502,10 -1632,18 +1594,25 @@@ retry_private
  			WARN_ON(pi_state);
  			drop_count++;
  			task_count++;
++<<<<<<< HEAD
 +			ret = get_futex_value_locked(&curval2, uaddr2);
 +			if (!ret)
 +				ret = lookup_pi_state(curval2, hb2, &key2,
 +						      &pi_state);
++=======
+ 			/*
+ 			 * If we acquired the lock, then the user
+ 			 * space value of uaddr2 should be vpid. It
+ 			 * cannot be changed by the top waiter as it
+ 			 * is blocked on hb2 lock if it tries to do
+ 			 * so. If something fiddled with it behind our
+ 			 * back the pi state lookup might unearth
+ 			 * it. So we rather use the known value than
+ 			 * rereading and handing potential crap to
+ 			 * lookup_pi_state.
+ 			 */
+ 			ret = lookup_pi_state(ret, hb2, &key2, &pi_state);
++>>>>>>> 54a217887a7b (futex: Make lookup_pi_state more robust)
  		}
  
  		switch (ret) {
* Unmerged path kernel/futex.c
