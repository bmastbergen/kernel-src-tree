powerpc/ftrace: Use pr_fmt() to namespace error messages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] ftrace: Use pr_fmt() to namespace error messages (Don Zickus) [1127366]
Rebuild_FUZZ: 92.31%
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 072c4c018e547b4bd6cfa4086aae881140b62759
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/072c4c01.failed

The printks() in our ftrace code have no prefix, so they appear on the
console with very little context, eg:

  Branch out of range

Use pr_fmt() & pr_err() to add a prefix. While we're at it, collapse a
few split lines that don't need to be, and add a missing newline to one
message.

	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 072c4c018e547b4bd6cfa4086aae881140b62759)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/ftrace.c
diff --cc arch/powerpc/kernel/ftrace.c
index 48a3dd30f08e,d178834fe508..000000000000
--- a/arch/powerpc/kernel/ftrace.c
+++ b/arch/powerpc/kernel/ftrace.c
@@@ -122,64 -122,26 +124,79 @@@ __ftrace_make_nop(struct module *mod
  	}
  
  	/* lets find where the pointer goes */
 -	tramp = (void *)find_bl_target(ip, op);
 +	tramp = find_bl_target(ip, op);
 +
 +	/*
 +	 * On PPC64 the trampoline looks like:
 +	 * 0x3d, 0x82, 0x00, 0x00,    addis   r12,r2, <high>
 +	 * 0x39, 0x8c, 0x00, 0x00,    addi    r12,r12, <low>
 +	 *   Where the bytes 2,3,6 and 7 make up the 32bit offset
 +	 *   to the TOC that holds the pointer.
 +	 *   to jump to.
 +	 * 0xf8, 0x41, 0x00, 0x28,    std     r2,40(r1)
 +	 * 0xe9, 0x6c, 0x00, 0x20,    ld      r11,32(r12)
 +	 *   The actually address is 32 bytes from the offset
 +	 *   into the TOC.
 +	 * 0xe8, 0x4c, 0x00, 0x28,    ld      r2,40(r12)
 +	 */
 +
++<<<<<<< HEAD
 +	pr_devel("ip:%lx jumps to %lx r2: %lx", ip, tramp, mod->arch.toc);
 +
 +	/* Find where the trampoline jumps to */
 +	if (probe_kernel_read(jmp, (void *)tramp, sizeof(jmp))) {
 +		printk(KERN_ERR "Failed to read %lx\n", tramp);
 +		return -EFAULT;
 +	}
 +
 +	pr_devel(" %08x %08x", jmp[0], jmp[1]);
 +
 +	/* verify that this is what we expect it to be */
 +	if (((jmp[0] & 0xffff0000) != 0x3d820000) ||
 +	    ((jmp[1] & 0xffff0000) != 0x398c0000) ||
 +	    (jmp[2] != 0xf8410028) ||
 +	    (jmp[3] != 0xe96c0020) ||
 +	    (jmp[4] != 0xe84c0028)) {
 +		printk(KERN_ERR "Not a trampoline\n");
 +		return -EINVAL;
 +	}
 +
 +	/* The bottom half is signed extended */
 +	offset = ((unsigned)((unsigned short)jmp[0]) << 16) +
 +		(int)((short)jmp[1]);
 +
 +	pr_devel(" %x ", offset);
  
 -	pr_devel("ip:%lx jumps to %p", ip, tramp);
 +	/* get the address this jumps too */
 +	tramp = mod->arch.toc + offset + 32;
 +	pr_devel("toc: %lx", tramp);
  
 +	if (probe_kernel_read(jmp, (void *)tramp, 8)) {
 +		printk(KERN_ERR "Failed to read %lx\n", tramp);
++=======
+ 	if (!is_module_trampoline(tramp)) {
+ 		pr_err("Not a trampoline\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (module_trampoline_target(mod, tramp, &ptr)) {
+ 		pr_err("Failed to get trampoline target\n");
++>>>>>>> 072c4c018e54 (powerpc/ftrace: Use pr_fmt() to namespace error messages)
  		return -EFAULT;
  	}
  
 -	pr_devel("trampoline target %lx", ptr);
 +	pr_devel(" %08x %08x\n", jmp[0], jmp[1]);
 +
 +	ptr = ((unsigned long)jmp[0] << 32) + jmp[1];
  
 -	entry = ppc_global_function_entry((void *)addr);
  	/* This should match what was called */
++<<<<<<< HEAD
 +	if (ptr != ppc_function_entry((void *)addr)) {
 +		printk(KERN_ERR "addr does not match %lx\n", ptr);
++=======
+ 	if (ptr != entry) {
+ 		pr_err("addr %lx does not match expected %lx\n", ptr, entry);
++>>>>>>> 072c4c018e54 (powerpc/ftrace: Use pr_fmt() to namespace error messages)
  		return -EINVAL;
  	}
  
* Unmerged path arch/powerpc/kernel/ftrace.c
