seqcount: Provide raw_read_seqcount()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 0ea5a520f73ca31abc4c10b6d5bc14a884a0641b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0ea5a520.failed

raw_read_seqcount opens a read critical section of the given seqcount
without any lockdep checking and without checking or masking the
LSB. Calling code is responsible for handling that.

Preparatory patch to provide a NMI safe clock monotonic accessor
function.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: John Stultz <john.stultz@linaro.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
	Signed-off-by: John Stultz <john.stultz@linaro.org>
(cherry picked from commit 0ea5a520f73ca31abc4c10b6d5bc14a884a0641b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/seqlock.h
diff --cc include/linux/seqlock.h
index 2c61a24d74a7,dcc64b9bfc41..000000000000
--- a/include/linux/seqlock.h
+++ b/include/linux/seqlock.h
@@@ -76,6 -117,38 +76,41 @@@ repeat
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * raw_read_seqcount - Read the raw seqcount
+  * @s: pointer to seqcount_t
+  * Returns: count to be passed to read_seqcount_retry
+  *
+  * raw_read_seqcount opens a read critical section of the given
+  * seqcount without any lockdep checking and without checking or
+  * masking the LSB. Calling code is responsible for handling that.
+  */
+ static inline unsigned raw_read_seqcount(const seqcount_t *s)
+ {
+ 	unsigned ret = ACCESS_ONCE(s->sequence);
+ 	smp_rmb();
+ 	return ret;
+ }
+ 
+ /**
+  * raw_read_seqcount_begin - start seq-read critical section w/o lockdep
+  * @s: pointer to seqcount_t
+  * Returns: count to be passed to read_seqcount_retry
+  *
+  * raw_read_seqcount_begin opens a read critical section of the given
+  * seqcount, but without any lockdep checking. Validity of the critical
+  * section is tested by checking read_seqcount_retry function.
+  */
+ static inline unsigned raw_read_seqcount_begin(const seqcount_t *s)
+ {
+ 	unsigned ret = __read_seqcount_begin(s);
+ 	smp_rmb();
+ 	return ret;
+ }
+ 
+ /**
++>>>>>>> 0ea5a520f73c (seqcount: Provide raw_read_seqcount())
   * read_seqcount_begin - begin a seq-read critical section
   * @s: pointer to seqcount_t
   * Returns: count to be passed to read_seqcount_retry
* Unmerged path include/linux/seqlock.h
