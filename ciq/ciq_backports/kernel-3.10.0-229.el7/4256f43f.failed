kvm: x86: Add request bit to reload APIC access page address

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [virt] kvm: Add request bit to reload APIC access page address (Paolo Bonzini) [1140974]
Rebuild_FUZZ: 95.65%
commit-author Tang Chen <tangchen@cn.fujitsu.com>
commit 4256f43f9fab91e1c17b5846a240cf4b66a768a8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/4256f43f.failed

Currently, the APIC access page is pinned by KVM for the entire life
of the guest.  We want to make it migratable in order to make memory
hot-unplug available for machines that run KVM.

This patch prepares to handle this in generic code, through a new
request bit (that will be set by the MMU notifier) and a new hook
that is called whenever the request bit is processed.

	Signed-off-by: Tang Chen <tangchen@cn.fujitsu.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 4256f43f9fab91e1c17b5846a240cf4b66a768a8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/kvm_host.h
#	arch/x86/kvm/x86.c
#	include/linux/kvm_host.h
diff --cc arch/x86/include/asm/kvm_host.h
index 31cd3909a583,60f9d73c6282..000000000000
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@@ -1038,6 -1045,9 +1039,12 @@@ int kvm_cpu_has_interrupt(struct kvm_vc
  int kvm_arch_interrupt_allowed(struct kvm_vcpu *vcpu);
  int kvm_cpu_get_interrupt(struct kvm_vcpu *v);
  void kvm_vcpu_reset(struct kvm_vcpu *vcpu);
++<<<<<<< HEAD
++=======
+ void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu);
+ void kvm_arch_mmu_notifier_invalidate_page(struct kvm *kvm,
+ 					   unsigned long address);
++>>>>>>> 4256f43f9fab (kvm: x86: Add request bit to reload APIC access page address)
  
  void kvm_define_shared_msr(unsigned index, u32 msr);
  void kvm_set_shared_msr(unsigned index, u64 val, u64 mask);
diff --cc arch/x86/kvm/x86.c
index fbab0434f978,c1412f5d93db..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -5916,6 -6020,29 +5916,32 @@@ static void vcpu_scan_ioapic(struct kvm
  	kvm_apic_update_tmr(vcpu, tmr);
  }
  
++<<<<<<< HEAD
++=======
+ static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)
+ {
+ 	++vcpu->stat.tlb_flush;
+ 	kvm_x86_ops->tlb_flush(vcpu);
+ }
+ 
+ void kvm_vcpu_reload_apic_access_page(struct kvm_vcpu *vcpu)
+ {
+ 	if (!kvm_x86_ops->set_apic_access_page_addr)
+ 		return;
+ 
+ 	vcpu->kvm->arch.apic_access_page = gfn_to_page(vcpu->kvm,
+ 			APIC_DEFAULT_PHYS_BASE >> PAGE_SHIFT);
+ 	kvm_x86_ops->set_apic_access_page_addr(vcpu,
+ 			page_to_phys(vcpu->kvm->arch.apic_access_page));
+ }
+ EXPORT_SYMBOL_GPL(kvm_vcpu_reload_apic_access_page);
+ 
+ void kvm_arch_mmu_notifier_invalidate_page(struct kvm *kvm,
+ 					   unsigned long address)
+ {
+ }
+ 
++>>>>>>> 4256f43f9fab (kvm: x86: Add request bit to reload APIC access page address)
  /*
   * Returns 1 to let __vcpu_run() continue the guest execution loop without
   * exiting to the userspace.  Otherwise, the value will be returned to the
diff --cc include/linux/kvm_host.h
index 57cb59531397,d594f9f34429..000000000000
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@@ -134,6 -134,9 +134,12 @@@ static inline bool is_error_page(struc
  #define KVM_REQ_EPR_EXIT          20
  #define KVM_REQ_SCAN_IOAPIC       21
  #define KVM_REQ_GLOBAL_CLOCK_UPDATE 22
++<<<<<<< HEAD
++=======
+ #define KVM_REQ_ENABLE_IBS        23
+ #define KVM_REQ_DISABLE_IBS       24
+ #define KVM_REQ_APIC_PAGE_RELOAD  25
++>>>>>>> 4256f43f9fab (kvm: x86: Add request bit to reload APIC access page address)
  
  #define KVM_USERSPACE_IRQ_SOURCE_ID		0
  #define KVM_IRQFD_RESAMPLE_IRQ_SOURCE_ID	1
* Unmerged path arch/x86/include/asm/kvm_host.h
* Unmerged path arch/x86/kvm/x86.c
* Unmerged path include/linux/kvm_host.h
