blk-mq: move the cache friendly bitmap type of out blk-mq-tag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jens Axboe <axboe@fb.com>
commit e93ecf602beb8439f0bdcc1fa2cbc1f31fdfb8e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/e93ecf60.failed

We will use it for the pending list in blk-mq core as well.

	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit e93ecf602beb8439f0bdcc1fa2cbc1f31fdfb8e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-tag.c
#	block/blk-mq-tag.h
#	block/blk-mq.h
diff --cc block/blk-mq-tag.c
index 83ae96c51a27,03ce6a11ba79..000000000000
--- a/block/blk-mq-tag.c
+++ b/block/blk-mq-tag.c
@@@ -7,32 -7,172 +7,191 @@@
  #include "blk-mq.h"
  #include "blk-mq-tag.h"
  
 -void blk_mq_wait_for_tags(struct blk_mq_tags *tags, struct blk_mq_hw_ctx *hctx,
 -			  bool reserved)
 +/*
 + * Per tagged queue (tag address space) map
 + */
 +struct blk_mq_tags {
 +	unsigned int nr_tags;
 +	unsigned int nr_reserved_tags;
 +	unsigned int nr_batch_move;
 +	unsigned int nr_max_cache;
 +
 +	struct percpu_ida free_tags;
 +	struct percpu_ida reserved_tags;
 +};
 +
 +void blk_mq_wait_for_tags(struct blk_mq_tags *tags)
  {
++<<<<<<< HEAD
 +	int tag = blk_mq_get_tag(tags, __GFP_WAIT, false);
 +	blk_mq_put_tag(tags, tag);
++=======
+ 	int tag, zero = 0;
+ 
+ 	tag = blk_mq_get_tag(tags, hctx, &zero, __GFP_WAIT, reserved);
+ 	blk_mq_put_tag(tags, tag, &zero);
+ }
+ 
+ static bool bt_has_free_tags(struct blk_mq_bitmap_tags *bt)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < bt->map_nr; i++) {
+ 		struct blk_align_bitmap *bm = &bt->map[i];
+ 		int ret;
+ 
+ 		ret = find_first_zero_bit(&bm->word, bm->depth);
+ 		if (ret < bm->depth)
+ 			return true;
+ 	}
+ 
+ 	return false;
++>>>>>>> e93ecf602beb (blk-mq: move the cache friendly bitmap type of out blk-mq-tag)
  }
  
  bool blk_mq_has_free_tags(struct blk_mq_tags *tags)
  {
 -	if (!tags)
 -		return true;
 -
 -	return bt_has_free_tags(&tags->bitmap_tags);
 +	return !tags ||
 +		percpu_ida_free_tags(&tags->free_tags, nr_cpu_ids) != 0;
  }
  
++<<<<<<< HEAD
 +static unsigned int __blk_mq_get_tag(struct blk_mq_tags *tags, gfp_t gfp)
++=======
+ static int __bt_get_word(struct blk_align_bitmap *bm, unsigned int last_tag)
+ {
+ 	int tag, org_last_tag, end;
+ 
+ 	org_last_tag = last_tag;
+ 	end = bm->depth;
+ 	do {
+ restart:
+ 		tag = find_next_zero_bit(&bm->word, end, last_tag);
+ 		if (unlikely(tag >= end)) {
+ 			/*
+ 			 * We started with an offset, start from 0 to
+ 			 * exhaust the map.
+ 			 */
+ 			if (org_last_tag && last_tag) {
+ 				end = last_tag;
+ 				last_tag = 0;
+ 				goto restart;
+ 			}
+ 			return -1;
+ 		}
+ 		last_tag = tag + 1;
+ 	} while (test_and_set_bit_lock(tag, &bm->word));
+ 
+ 	return tag;
+ }
+ 
+ /*
+  * Straight forward bitmap tag implementation, where each bit is a tag
+  * (cleared == free, and set == busy). The small twist is using per-cpu
+  * last_tag caches, which blk-mq stores in the blk_mq_ctx software queue
+  * contexts. This enables us to drastically limit the space searched,
+  * without dirtying an extra shared cacheline like we would if we stored
+  * the cache value inside the shared blk_mq_bitmap_tags structure. On top
+  * of that, each word of tags is in a separate cacheline. This means that
+  * multiple users will tend to stick to different cachelines, at least
+  * until the map is exhausted.
+  */
+ static int __bt_get(struct blk_mq_bitmap_tags *bt, unsigned int *tag_cache)
+ {
+ 	unsigned int last_tag, org_last_tag;
+ 	int index, i, tag;
+ 
+ 	last_tag = org_last_tag = *tag_cache;
+ 	index = TAG_TO_INDEX(bt, last_tag);
+ 
+ 	for (i = 0; i < bt->map_nr; i++) {
+ 		tag = __bt_get_word(&bt->map[index], TAG_TO_BIT(bt, last_tag));
+ 		if (tag != -1) {
+ 			tag += (index << bt->bits_per_word);
+ 			goto done;
+ 		}
+ 
+ 		last_tag = 0;
+ 		if (++index >= bt->map_nr)
+ 			index = 0;
+ 	}
+ 
+ 	*tag_cache = 0;
+ 	return -1;
+ 
+ 	/*
+ 	 * Only update the cache from the allocation path, if we ended
+ 	 * up using the specific cached tag.
+ 	 */
+ done:
+ 	if (tag == org_last_tag) {
+ 		last_tag = tag + 1;
+ 		if (last_tag >= bt->depth - 1)
+ 			last_tag = 0;
+ 
+ 		*tag_cache = last_tag;
+ 	}
+ 
+ 	return tag;
+ }
+ 
+ static inline void bt_index_inc(unsigned int *index)
+ {
+ 	*index = (*index + 1) & (BT_WAIT_QUEUES - 1);
+ }
+ 
+ static struct bt_wait_state *bt_wait_ptr(struct blk_mq_bitmap_tags *bt,
+ 					 struct blk_mq_hw_ctx *hctx)
+ {
+ 	struct bt_wait_state *bs;
+ 
+ 	if (!hctx)
+ 		return &bt->bs[0];
+ 
+ 	bs = &bt->bs[hctx->wait_index];
+ 	bt_index_inc(&hctx->wait_index);
+ 	return bs;
+ }
+ 
+ static int bt_get(struct blk_mq_bitmap_tags *bt, struct blk_mq_hw_ctx *hctx,
+ 		  unsigned int *last_tag, gfp_t gfp)
+ {
+ 	struct bt_wait_state *bs;
+ 	DEFINE_WAIT(wait);
+ 	int tag;
+ 
+ 	tag = __bt_get(bt, last_tag);
+ 	if (tag != -1)
+ 		return tag;
+ 
+ 	if (!(gfp & __GFP_WAIT))
+ 		return -1;
+ 
+ 	bs = bt_wait_ptr(bt, hctx);
+ 	do {
+ 		bool was_empty;
+ 
+ 		was_empty = list_empty(&wait.task_list);
+ 		prepare_to_wait(&bs->wait, &wait, TASK_UNINTERRUPTIBLE);
+ 
+ 		tag = __bt_get(bt, last_tag);
+ 		if (tag != -1)
+ 			break;
+ 
+ 		if (was_empty)
+ 			atomic_set(&bs->wait_cnt, bt->wake_cnt);
+ 
+ 		io_schedule();
+ 	} while (1);
+ 
+ 	finish_wait(&bs->wait, &wait);
+ 	return tag;
+ }
+ 
+ static unsigned int __blk_mq_get_tag(struct blk_mq_tags *tags,
+ 				     struct blk_mq_hw_ctx *hctx,
+ 				     unsigned int *last_tag, gfp_t gfp)
++>>>>>>> e93ecf602beb (blk-mq: move the cache friendly bitmap type of out blk-mq-tag)
  {
  	int tag;
  
@@@ -91,11 -277,26 +250,31 @@@ void blk_mq_put_tag(struct blk_mq_tags 
  		__blk_mq_put_reserved_tag(tags, tag);
  }
  
 -static void bt_for_each_free(struct blk_mq_bitmap_tags *bt,
 -			     unsigned long *free_map, unsigned int off)
 +static int __blk_mq_tag_iter(unsigned id, void *data)
  {
++<<<<<<< HEAD
 +	unsigned long *tag_map = data;
 +	__set_bit(id, tag_map);
 +	return 0;
++=======
+ 	int i;
+ 
+ 	for (i = 0; i < bt->map_nr; i++) {
+ 		struct blk_align_bitmap *bm = &bt->map[i];
+ 		int bit = 0;
+ 
+ 		do {
+ 			bit = find_next_zero_bit(&bm->word, bm->depth, bit);
+ 			if (bit >= bm->depth)
+ 				break;
+ 
+ 			__set_bit(bit + off, free_map);
+ 			bit++;
+ 		} while (1);
+ 
+ 		off += (1 << bt->bits_per_word);
+ 	}
++>>>>>>> e93ecf602beb (blk-mq: move the cache friendly bitmap type of out blk-mq-tag)
  }
  
  void blk_mq_tag_busy_iter(struct blk_mq_tags *tags,
@@@ -118,6 -318,102 +297,105 @@@
  	kfree(tag_map);
  }
  
++<<<<<<< HEAD
++=======
+ static unsigned int bt_unused_tags(struct blk_mq_bitmap_tags *bt)
+ {
+ 	unsigned int i, used;
+ 
+ 	for (i = 0, used = 0; i < bt->map_nr; i++) {
+ 		struct blk_align_bitmap *bm = &bt->map[i];
+ 
+ 		used += bitmap_weight(&bm->word, bm->depth);
+ 	}
+ 
+ 	return bt->depth - used;
+ }
+ 
+ static int bt_alloc(struct blk_mq_bitmap_tags *bt, unsigned int depth,
+ 			int node, bool reserved)
+ {
+ 	int i;
+ 
+ 	bt->bits_per_word = ilog2(BITS_PER_LONG);
+ 
+ 	/*
+ 	 * Depth can be zero for reserved tags, that's not a failure
+ 	 * condition.
+ 	 */
+ 	if (depth) {
+ 		unsigned int nr, i, map_depth, tags_per_word;
+ 
+ 		tags_per_word = (1 << bt->bits_per_word);
+ 
+ 		/*
+ 		 * If the tag space is small, shrink the number of tags
+ 		 * per word so we spread over a few cachelines, at least.
+ 		 * If less than 4 tags, just forget about it, it's not
+ 		 * going to work optimally anyway.
+ 		 */
+ 		if (depth >= 4) {
+ 			while (tags_per_word * 4 > depth) {
+ 				bt->bits_per_word--;
+ 				tags_per_word = (1 << bt->bits_per_word);
+ 			}
+ 		}
+ 
+ 		nr = ALIGN(depth, tags_per_word) / tags_per_word;
+ 		bt->map = kzalloc_node(nr * sizeof(struct blk_align_bitmap),
+ 						GFP_KERNEL, node);
+ 		if (!bt->map)
+ 			return -ENOMEM;
+ 
+ 		bt->map_nr = nr;
+ 		map_depth = depth;
+ 		for (i = 0; i < nr; i++) {
+ 			bt->map[i].depth = min(map_depth, tags_per_word);
+ 			map_depth -= tags_per_word;
+ 		}
+ 	}
+ 
+ 	bt->bs = kzalloc(BT_WAIT_QUEUES * sizeof(*bt->bs), GFP_KERNEL);
+ 	if (!bt->bs) {
+ 		kfree(bt->map);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	for (i = 0; i < BT_WAIT_QUEUES; i++)
+ 		init_waitqueue_head(&bt->bs[i].wait);
+ 
+ 	bt->wake_cnt = BT_WAIT_BATCH;
+ 	if (bt->wake_cnt > depth / 4)
+ 		bt->wake_cnt = max(1U, depth / 4);
+ 
+ 	bt->depth = depth;
+ 	return 0;
+ }
+ 
+ static void bt_free(struct blk_mq_bitmap_tags *bt)
+ {
+ 	kfree(bt->map);
+ 	kfree(bt->bs);
+ }
+ 
+ static struct blk_mq_tags *blk_mq_init_bitmap_tags(struct blk_mq_tags *tags,
+ 						   int node)
+ {
+ 	unsigned int depth = tags->nr_tags - tags->nr_reserved_tags;
+ 
+ 	if (bt_alloc(&tags->bitmap_tags, depth, node, false))
+ 		goto enomem;
+ 	if (bt_alloc(&tags->breserved_tags, tags->nr_reserved_tags, node, true))
+ 		goto enomem;
+ 
+ 	return tags;
+ enomem:
+ 	bt_free(&tags->bitmap_tags);
+ 	kfree(tags);
+ 	return NULL;
+ }
+ 
++>>>>>>> e93ecf602beb (blk-mq: move the cache friendly bitmap type of out blk-mq-tag)
  struct blk_mq_tags *blk_mq_init_tags(unsigned int total_tags,
  				     unsigned int reserved_tags, int node)
  {
diff --cc block/blk-mq-tag.h
index 947ba2c6148e,9014269f3910..000000000000
--- a/block/blk-mq-tag.h
+++ b/block/blk-mq-tag.h
@@@ -1,7 -1,47 +1,51 @@@
  #ifndef INT_BLK_MQ_TAG_H
  #define INT_BLK_MQ_TAG_H
  
++<<<<<<< HEAD
 +struct blk_mq_tags;
++=======
+ #include "blk-mq.h"
+ 
+ enum {
+ 	BT_WAIT_QUEUES	= 8,
+ 	BT_WAIT_BATCH	= 8,
+ };
+ 
+ struct bt_wait_state {
+ 	atomic_t wait_cnt;
+ 	wait_queue_head_t wait;
+ } ____cacheline_aligned_in_smp;
+ 
+ #define TAG_TO_INDEX(bt, tag)	((tag) >> (bt)->bits_per_word)
+ #define TAG_TO_BIT(bt, tag)	((tag) & ((1 << (bt)->bits_per_word) - 1))
+ 
+ struct blk_mq_bitmap_tags {
+ 	unsigned int depth;
+ 	unsigned int wake_cnt;
+ 	unsigned int bits_per_word;
+ 
+ 	unsigned int map_nr;
+ 	struct blk_align_bitmap *map;
+ 
+ 	unsigned int wake_index;
+ 	struct bt_wait_state *bs;
+ };
+ 
+ /*
+  * Tag address space map.
+  */
+ struct blk_mq_tags {
+ 	unsigned int nr_tags;
+ 	unsigned int nr_reserved_tags;
+ 
+ 	struct blk_mq_bitmap_tags bitmap_tags;
+ 	struct blk_mq_bitmap_tags breserved_tags;
+ 
+ 	struct request **rqs;
+ 	struct list_head page_list;
+ };
+ 
++>>>>>>> e93ecf602beb (blk-mq: move the cache friendly bitmap type of out blk-mq-tag)
  
  extern struct blk_mq_tags *blk_mq_init_tags(unsigned int nr_tags, unsigned int reserved_tags, int node);
  extern void blk_mq_free_tags(struct blk_mq_tags *tags);
diff --cc block/blk-mq.h
index aeffa309e46e,5e5a378962b7..000000000000
--- a/block/blk-mq.h
+++ b/block/blk-mq.h
@@@ -44,10 -49,16 +44,21 @@@ void blk_mq_disable_hotplug(void)
  /*
   * CPU -> queue mappings
   */
 -extern unsigned int *blk_mq_make_queue_map(struct blk_mq_tag_set *set);
 +struct blk_mq_reg;
 +extern unsigned int *blk_mq_make_queue_map(struct blk_mq_reg *reg);
  extern int blk_mq_update_queue_map(unsigned int *map, unsigned int nr_queues);
  
++<<<<<<< HEAD
 +void blk_mq_add_timer(struct request *rq);
++=======
+ /*
+  * Basic implementation of sparser bitmap, allowing the user to spread
+  * the bits over more cachelines.
+  */
+ struct blk_align_bitmap {
+ 	unsigned long word;
+ 	unsigned long depth;
+ } ____cacheline_aligned_in_smp;
++>>>>>>> e93ecf602beb (blk-mq: move the cache friendly bitmap type of out blk-mq-tag)
  
  #endif
* Unmerged path block/blk-mq-tag.c
* Unmerged path block/blk-mq-tag.h
* Unmerged path block/blk-mq.h
