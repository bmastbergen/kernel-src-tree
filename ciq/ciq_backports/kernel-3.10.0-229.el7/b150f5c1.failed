ceph: cleanup the logic in ceph_invalidatepage

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Milosz Tanski <milosz@adfin.com>
commit b150f5c1c759d551da9146435d3dc9df5f7e15ef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/b150f5c1.failed

The invalidatepage code bails if it encounters a non-zero page offset. The
current logic that does is non-obvious with multiple if statements.

This should be logically and functionally equivalent.

	Signed-off-by: Milosz Tanski <milosz@adfin.com>
	Reviewed-by: Sage Weil <sage@inktank.com>
(cherry picked from commit b150f5c1c759d551da9146435d3dc9df5f7e15ef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/addr.c
diff --cc fs/ceph/addr.c
index f1d6c60ab229,cb78ce81d6a6..000000000000
--- a/fs/ceph/addr.c
+++ b/fs/ceph/addr.c
@@@ -159,21 -167,15 +166,33 @@@ static void ceph_invalidatepage(struct 
  	if (!PageDirty(page))
  		pr_err("%p invalidatepage %p page not dirty\n", inode, page);
  
++<<<<<<< HEAD
 +	if (offset == 0)
 +		ClearPageChecked(page);
 +
 +	ci = ceph_inode(inode);
 +	if (offset == 0) {
 +		dout("%p invalidatepage %p idx %lu full dirty page %lu\n",
 +		     inode, page, page->index, offset);
 +		ceph_put_wrbuffer_cap_refs(ci, 1, snapc);
 +		ceph_put_snap_context(snapc);
 +		page->private = 0;
 +		ClearPagePrivate(page);
 +	} else {
 +		dout("%p invalidatepage %p idx %lu partial dirty page\n",
 +		     inode, page, page->index);
 +	}
++=======
+ 	ClearPageChecked(page);
+ 
+ 	dout("%p invalidatepage %p idx %lu full dirty page\n",
+ 	     inode, page, page->index);
+ 
+ 	ceph_put_wrbuffer_cap_refs(ci, 1, snapc);
+ 	ceph_put_snap_context(snapc);
+ 	page->private = 0;
+ 	ClearPagePrivate(page);
++>>>>>>> b150f5c1c759 (ceph: cleanup the logic in ceph_invalidatepage)
  }
  
  /* just a sanity check */
* Unmerged path fs/ceph/addr.c
