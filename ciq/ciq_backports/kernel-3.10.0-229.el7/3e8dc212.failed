netfilter: NFT_CHAIN_NAT_IPV* is independent of NFT_NAT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 3e8dc212a0e68a9a90c97f34a92c4cdd97d19dd3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/3e8dc212.failed

Now that we have masquerading support in nf_tables, the NAT chain can
be use with it, not only for SNAT/DNAT. So make this chain type
independent of it.

While at it, move it inside the scope of 'if NF_NAT_IPV*' to simplify
dependencies.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 3e8dc212a0e68a9a90c97f34a92c4cdd97d19dd3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/netfilter/Kconfig
#	net/ipv6/netfilter/Kconfig
diff --cc net/ipv4/netfilter/Kconfig
index b7a7dd415103,eb6995fc4f67..000000000000
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@@ -51,9 -61,31 +51,33 @@@ config NFT_CHAIN_ROUTE_IPV
  	  fields such as the source, destination, type of service and
  	  the packet mark.
  
+ config NFT_REJECT_IPV4
+ 	depends on NF_TABLES_IPV4
+ 	default NFT_REJECT
+ 	tristate
+ 
+ config NF_TABLES_ARP
+ 	depends on NF_TABLES
+ 	tristate "ARP nf_tables support"
+ 	help
+ 	  This option enables the ARP support for nf_tables.
+ 
++<<<<<<< HEAD
++=======
+ config NF_NAT_IPV4
+ 	tristate "IPv4 NAT"
+ 	depends on NF_CONNTRACK_IPV4
+ 	default m if NETFILTER_ADVANCED=n
+ 	select NF_NAT
+ 	help
+ 	  The IPv4 NAT option allows masquerading, port forwarding and other
+ 	  forms of full Network Address Port Translation. This can be
+ 	  controlled by iptables or nft.
+ 
+ if NF_NAT_IPV4
+ 
  config NFT_CHAIN_NAT_IPV4
  	depends on NF_TABLES_IPV4
- 	depends on NF_NAT_IPV4 && NFT_NAT
  	tristate "IPv4 nf_tables nat chain support"
  	help
  	  This option enables the "nat" chain for IPv4 in nf_tables. This
@@@ -61,17 -93,40 +85,41 @@@
  	  packet transformations such as the source, destination address and
  	  source and destination ports.
  
- config NFT_REJECT_IPV4
- 	depends on NF_TABLES_IPV4
- 	default NFT_REJECT
+ config NF_NAT_SNMP_BASIC
+ 	tristate "Basic SNMP-ALG support"
+ 	depends on NF_CONNTRACK_SNMP
+ 	depends on NETFILTER_ADVANCED
+ 	default NF_NAT && NF_CONNTRACK_SNMP
+ 	---help---
+ 
+ 	  This module implements an Application Layer Gateway (ALG) for
+ 	  SNMP payloads.  In conjunction with NAT, it allows a network
+ 	  management system to access multiple private networks with
+ 	  conflicting addresses.  It works by modifying IP addresses
+ 	  inside SNMP payloads to match IP-layer NAT mapping.
+ 
+ 	  This is the "basic" form of SNMP-ALG, as described in RFC 2962
+ 
+ 	  To compile it as a module, choose M here.  If unsure, say N.
+ 
+ config NF_NAT_PROTO_GRE
  	tristate
+ 	depends on NF_CT_PROTO_GRE
  
- config NF_TABLES_ARP
- 	depends on NF_TABLES
- 	tristate "ARP nf_tables support"
- 	help
- 	  This option enables the ARP support for nf_tables.
+ config NF_NAT_PPTP
+ 	tristate
+ 	depends on NF_CONNTRACK
+ 	default NF_CONNTRACK_PPTP
+ 	select NF_NAT_PROTO_GRE
+ 
+ config NF_NAT_H323
+ 	tristate
+ 	depends on NF_CONNTRACK
+ 	default NF_CONNTRACK_H323
+ 
+ endif # NF_NAT_IPV4
  
++>>>>>>> 3e8dc212a0e6 (netfilter: NFT_CHAIN_NAT_IPV* is independent of NFT_NAT)
  config IP_NF_IPTABLES
  	tristate "IP tables support (required for filtering/masq/NAT)"
  	default m if NETFILTER_ADVANCED=n
diff --cc net/ipv6/netfilter/Kconfig
index 4bff1f297e39,e854062d0c36..000000000000
--- a/net/ipv6/netfilter/Kconfig
+++ b/net/ipv6/netfilter/Kconfig
@@@ -40,9 -40,30 +40,32 @@@ config NFT_CHAIN_ROUTE_IPV
  	  fields such as the source, destination, flowlabel, hop-limit and
  	  the packet mark.
  
+ config NFT_REJECT_IPV6
+ 	depends on NF_TABLES_IPV6
+ 	default NFT_REJECT
+ 	tristate
+ 
++<<<<<<< HEAD
++=======
+ config NF_LOG_IPV6
+ 	tristate "IPv6 packet logging"
+ 	default m if NETFILTER_ADVANCED=n
+ 	select NF_LOG_COMMON
+ 
+ config NF_NAT_IPV6
+ 	tristate "IPv6 NAT"
+ 	depends on NF_CONNTRACK_IPV6
+ 	depends on NETFILTER_ADVANCED
+ 	select NF_NAT
+ 	help
+ 	  The IPv6 NAT option allows masquerading, port forwarding and other
+ 	  forms of full Network Address Port Translation. This can be
+ 	  controlled by iptables or nft.
+ 
+ if NF_NAT_IPV6
+ 
  config NFT_CHAIN_NAT_IPV6
  	depends on NF_TABLES_IPV6
- 	depends on NF_NAT_IPV6 && NFT_NAT
  	tristate "IPv6 nf_tables nat chain support"
  	help
  	  This option enables the "nat" chain for IPv6 in nf_tables. This
@@@ -50,11 -71,8 +73,9 @@@
  	  packet transformations such as the source, destination address and
  	  source and destination ports.
  
- config NFT_REJECT_IPV6
- 	depends on NF_TABLES_IPV6
- 	default NFT_REJECT
- 	tristate
+ endif # NF_NAT_IPV6
  
++>>>>>>> 3e8dc212a0e6 (netfilter: NFT_CHAIN_NAT_IPV* is independent of NFT_NAT)
  config IP6_NF_IPTABLES
  	tristate "IP6 tables support (required for filtering)"
  	depends on INET && IPV6
* Unmerged path net/ipv4/netfilter/Kconfig
* Unmerged path net/ipv6/netfilter/Kconfig
