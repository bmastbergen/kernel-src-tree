s390/spinlock: fix system hang with spin_retry <= 0

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [s390] spinlock: fix system hang with spin_retry <= 0 (Hendrik Brueckner) [1096329]
Rebuild_FUZZ: 94.85%
commit-author Gerald Schaefer <gerald.schaefer@de.ibm.com>
commit 2e4006b34d06681ed95d55510d4450f29a13c417
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/2e4006b3.failed

On LPAR, when spin_retry is set to <= 0, arch_spin_lock_wait() and
arch_spin_lock_wait_flags() may end up in a while(1) loop w/o doing
any compare and swap operation. To fix this, use do/while instead of
for loop.

	Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 2e4006b34d06681ed95d55510d4450f29a13c417)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/lib/spinlock.c
diff --cc arch/s390/lib/spinlock.c
index f709983f41f8,3f0e682b7e62..000000000000
--- a/arch/s390/lib/spinlock.c
+++ b/arch/s390/lib/spinlock.c
@@@ -26,20 -26,20 +26,26 @@@ __setup("spin_retry=", spin_retry_setup
  
  void arch_spin_lock_wait(arch_spinlock_t *lp)
  {
++<<<<<<< HEAD
 +	int count = spin_retry;
 +	unsigned int cpu = ~smp_processor_id();
++=======
+ 	unsigned int cpu = SPINLOCK_LOCKVAL;
++>>>>>>> 2e4006b34d06 (s390/spinlock: fix system hang with spin_retry <= 0)
  	unsigned int owner;
+ 	int count;
  
  	while (1) {
 -		owner = lp->lock;
 +		owner = lp->owner_cpu;
  		if (!owner || smp_vcpu_scheduled(~owner)) {
- 			for (count = spin_retry; count > 0; count--) {
+ 			count = spin_retry;
+ 			do {
  				if (arch_spin_is_locked(lp))
  					continue;
 -				if (_raw_compare_and_swap(&lp->lock, 0, cpu))
 +				if (_raw_compare_and_swap(&lp->owner_cpu, 0,
 +							  cpu) == 0)
  					return;
- 			}
+ 			} while (count-- > 0);
  			if (MACHINE_IS_LPAR)
  				continue;
  		}
@@@ -54,23 -54,23 +60,29 @@@ EXPORT_SYMBOL(arch_spin_lock_wait)
  
  void arch_spin_lock_wait_flags(arch_spinlock_t *lp, unsigned long flags)
  {
++<<<<<<< HEAD
 +	int count = spin_retry;
 +	unsigned int cpu = ~smp_processor_id();
++=======
+ 	unsigned int cpu = SPINLOCK_LOCKVAL;
++>>>>>>> 2e4006b34d06 (s390/spinlock: fix system hang with spin_retry <= 0)
  	unsigned int owner;
+ 	int count;
  
  	local_irq_restore(flags);
  	while (1) {
 -		owner = lp->lock;
 +		owner = lp->owner_cpu;
  		if (!owner || smp_vcpu_scheduled(~owner)) {
- 			for (count = spin_retry; count > 0; count--) {
+ 			count = spin_retry;
+ 			do {
  				if (arch_spin_is_locked(lp))
  					continue;
  				local_irq_disable();
 -				if (_raw_compare_and_swap(&lp->lock, 0, cpu))
 +				if (_raw_compare_and_swap(&lp->owner_cpu, 0,
 +							  cpu) == 0)
  					return;
  				local_irq_restore(flags);
- 			}
+ 			} while (count-- > 0);
  			if (MACHINE_IS_LPAR)
  				continue;
  		}
* Unmerged path arch/s390/lib/spinlock.c
