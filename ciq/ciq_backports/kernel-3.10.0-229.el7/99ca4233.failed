perf symbols: Export elf_section_by_name and reuse

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/symbols: Export elf_section_by_name and reuse (Jiri Olsa) [1133083]
Rebuild_FUZZ: 98.00%
commit-author Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
commit 99ca423387a3e718f9887a99475cb5271bc610f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/99ca4233.failed

Remove duplicated elf_section_by_name() functions from unwind.c and
probe-event.c and use one exported elf_section_by_name() instance
defined in symbol-elf.c.

Note that this also moves get_text_start_address() to merge
HAVE_DWARF_SUPPORT defined area.

	Reported-by: David Ahern <dsahern@gmail.com>
	Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: "David A. Long" <dave.long@linaro.org>
	Cc: "Steven Rostedt (Red Hat)" <rostedt@goodmis.org>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Cc: yrl.pp-manager.tt@hitachi.com
Link: http://lkml.kernel.org/r/20140116093949.24403.38093.stgit@kbuild-fedora.novalocal
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 99ca423387a3e718f9887a99475cb5271bc610f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/probe-event.c
diff --cc tools/perf/util/probe-event.c
index d71337318fcb,a8a9b6cd93a8..000000000000
--- a/tools/perf/util/probe-event.c
+++ b/tools/perf/util/probe-event.c
@@@ -261,6 -293,68 +261,71 @@@ static int kprobe_convert_to_perf_probe
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int get_text_start_address(const char *exec, unsigned long *address)
+ {
+ 	Elf *elf;
+ 	GElf_Ehdr ehdr;
+ 	GElf_Shdr shdr;
+ 	int fd, ret = -ENOENT;
+ 
+ 	fd = open(exec, O_RDONLY);
+ 	if (fd < 0)
+ 		return -errno;
+ 
+ 	elf = elf_begin(fd, PERF_ELF_C_READ_MMAP, NULL);
+ 	if (elf == NULL)
+ 		return -EINVAL;
+ 
+ 	if (gelf_getehdr(elf, &ehdr) == NULL)
+ 		goto out;
+ 
+ 	if (!elf_section_by_name(elf, &ehdr, &shdr, ".text", NULL))
+ 		goto out;
+ 
+ 	*address = shdr.sh_addr - shdr.sh_offset;
+ 	ret = 0;
+ out:
+ 	elf_end(elf);
+ 	return ret;
+ }
+ 
+ static int add_exec_to_probe_trace_events(struct probe_trace_event *tevs,
+ 					  int ntevs, const char *exec)
+ {
+ 	int i, ret = 0;
+ 	unsigned long offset, stext = 0;
+ 	char buf[32];
+ 
+ 	if (!exec)
+ 		return 0;
+ 
+ 	ret = get_text_start_address(exec, &stext);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	for (i = 0; i < ntevs && ret >= 0; i++) {
+ 		offset = tevs[i].point.address - stext;
+ 		offset += tevs[i].point.offset;
+ 		tevs[i].point.offset = 0;
+ 		zfree(&tevs[i].point.symbol);
+ 		ret = e_snprintf(buf, 32, "0x%lx", offset);
+ 		if (ret < 0)
+ 			break;
+ 		tevs[i].point.module = strdup(exec);
+ 		tevs[i].point.symbol = strdup(buf);
+ 		if (!tevs[i].point.symbol || !tevs[i].point.module) {
+ 			ret = -ENOMEM;
+ 			break;
+ 		}
+ 		tevs[i].uprobes = true;
+ 	}
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> 99ca423387a3 (perf symbols: Export elf_section_by_name and reuse)
  static int add_module_to_probe_trace_events(struct probe_trace_event *tevs,
  					    int ntevs, const char *module)
  {
* Unmerged path tools/perf/util/probe-event.c
diff --git a/tools/perf/util/symbol-elf.c b/tools/perf/util/symbol-elf.c
index 0e8c9083f462..282fd0f39a61 100644
--- a/tools/perf/util/symbol-elf.c
+++ b/tools/perf/util/symbol-elf.c
@@ -136,9 +136,8 @@ static size_t elf_addr_to_index(Elf *elf, GElf_Addr addr)
 	return -1;
 }
 
-static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,
-				    GElf_Shdr *shp, const char *name,
-				    size_t *idx)
+Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,
+			     GElf_Shdr *shp, const char *name, size_t *idx)
 {
 	Elf_Scn *sec = NULL;
 	size_t cnt = 1;
diff --git a/tools/perf/util/symbol.h b/tools/perf/util/symbol.h
index 91d01bb2119c..59b13d229755 100644
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@ -52,6 +52,11 @@ static inline char *bfd_demangle(void __maybe_unused *v,
 # define PERF_ELF_C_READ_MMAP ELF_C_READ
 #endif
 
+#ifdef HAVE_LIBELF_SUPPORT
+extern Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,
+				GElf_Shdr *shp, const char *name, size_t *idx);
+#endif
+
 #ifndef DMGL_PARAMS
 #define DMGL_PARAMS      (1 << 0)       /* Include function args */
 #define DMGL_ANSI        (1 << 1)       /* Include const, volatile, etc */
diff --git a/tools/perf/util/unwind.c b/tools/perf/util/unwind.c
index 416f22bf3693..742f23bf35ff 100644
--- a/tools/perf/util/unwind.c
+++ b/tools/perf/util/unwind.c
@@ -28,6 +28,7 @@
 #include "session.h"
 #include "perf_regs.h"
 #include "unwind.h"
+#include "symbol.h"
 #include "util.h"
 
 extern int
@@ -158,23 +159,6 @@ static int __dw_read_encoded_value(u8 **p, u8 *end, u64 *val,
 	__v;                                                    \
 	})
 
-static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,
-				    GElf_Shdr *shp, const char *name)
-{
-	Elf_Scn *sec = NULL;
-
-	while ((sec = elf_nextscn(elf, sec)) != NULL) {
-		char *str;
-
-		gelf_getshdr(sec, shp);
-		str = elf_strptr(elf, ep->e_shstrndx, shp->sh_name);
-		if (!strcmp(name, str))
-			break;
-	}
-
-	return sec;
-}
-
 static u64 elf_section_offset(int fd, const char *name)
 {
 	Elf *elf;
@@ -190,7 +174,7 @@ static u64 elf_section_offset(int fd, const char *name)
 		if (gelf_getehdr(elf, &ehdr) == NULL)
 			break;
 
-		if (!elf_section_by_name(elf, &ehdr, &shdr, name))
+		if (!elf_section_by_name(elf, &ehdr, &shdr, name, NULL))
 			break;
 
 		offset = shdr.sh_offset;
