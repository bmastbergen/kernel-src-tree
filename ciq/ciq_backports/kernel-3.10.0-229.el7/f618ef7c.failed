blk-mq: remove newly added instances of __cpuinit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Paul Gortmaker <paul.gortmaker@windriver.com>
commit f618ef7c47934d1686a764d0c9f70f23e566683f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f618ef7c.failed

The new blk-mq code added new instances of __cpuinit usage.
We removed this a couple versions ago; we now want to remove
the compat no-op stubs.  Introducing new users is not what
we want to see at this point in time, as it will break once
the stubs are gone.

	Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f618ef7c47934d1686a764d0c9f70f23e566683f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-cpu.c
diff --cc block/blk-mq-cpu.c
index 58f27916b91b,0045ace9bdf0..000000000000
--- a/block/blk-mq-cpu.c
+++ b/block/blk-mq-cpu.c
@@@ -28,6 -28,36 +28,39 @@@ static int blk_mq_main_cpu_notify(struc
  	return NOTIFY_OK;
  }
  
++<<<<<<< HEAD
++=======
+ static void blk_mq_cpu_notify(void *data, unsigned long action,
+ 			      unsigned int cpu)
+ {
+ 	if (action == CPU_DEAD || action == CPU_DEAD_FROZEN) {
+ 		/*
+ 		 * If the CPU goes away, ensure that we run any pending
+ 		 * completions.
+ 		 */
+ 		struct llist_node *node;
+ 		struct request *rq;
+ 
+ 		local_irq_disable();
+ 
+ 		node = llist_del_all(&per_cpu(ipi_lists, cpu));
+ 		while (node) {
+ 			struct llist_node *next = node->next;
+ 
+ 			rq = llist_entry(node, struct request, ll_list);
+ 			__blk_mq_end_io(rq, rq->errors);
+ 			node = next;
+ 		}
+ 
+ 		local_irq_enable();
+ 	}
+ }
+ 
+ static struct notifier_block __cpuinitdata blk_mq_main_cpu_notifier = {
+ 	.notifier_call	= blk_mq_main_cpu_notify,
+ };
+ 
++>>>>>>> f618ef7c4793 (blk-mq: remove newly added instances of __cpuinit)
  void blk_mq_register_cpu_notifier(struct blk_mq_cpu_notifier *notifier)
  {
  	BUG_ON(!notifier->notify);
* Unmerged path block/blk-mq-cpu.c
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 32c41cfd8e8a..1b8b50df3655 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1389,7 +1389,7 @@ void blk_mq_free_queue(struct request_queue *q)
 }
 
 /* Basically redo blk_mq_init_queue with queue frozen */
-static void __cpuinit blk_mq_queue_reinit(struct request_queue *q)
+static void blk_mq_queue_reinit(struct request_queue *q)
 {
 	blk_mq_freeze_queue(q);
 
@@ -1406,8 +1406,8 @@ static void __cpuinit blk_mq_queue_reinit(struct request_queue *q)
 	blk_mq_unfreeze_queue(q);
 }
 
-static int __cpuinit blk_mq_queue_reinit_notify(struct notifier_block *nb,
-		unsigned long action, void *hcpu)
+static int blk_mq_queue_reinit_notify(struct notifier_block *nb,
+				      unsigned long action, void *hcpu)
 {
 	struct request_queue *q;
 
