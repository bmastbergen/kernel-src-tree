ACPI / hotplug / PCI: Allow slots without new devices to be rescanned

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [acpi] hotplug/pci: Allow slots without new devices to be rescanned (Myron Stowe) [1114228]
Rebuild_FUZZ: 93.02%
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit b91182a67c53db227e34921838dd683090ecfabc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/b91182a6.failed

Currently, enable_device() checks the return value of pci_scan_slot()
and returns immediately if that's 0 (meaning that no new functions
have been found in the slot).  However, if one of the functions in
the slot is a bridge, some new devices may appear below it even if
the bridge itself is present continuously, so it generally is
necessary to do the rescan anyway just in case.  [In particular,
that's necessary with the Thunderbolt daisy chaining in which case
new devices may be connected to the existing ones down the chain.]

The correctness of this change relies on the ability of
pcibios_resource_survey_bus() to detect if it has already been called
for the given bus and to skip it if so.  Failure to do that will lead
to resource allocation conflicts.

[rjw: Changelog]
	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit b91182a67c53db227e34921838dd683090ecfabc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/hotplug/acpiphp_glue.c
diff --cc drivers/pci/hotplug/acpiphp_glue.c
index d210006fa4ad,21a6269501e1..000000000000
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@@ -679,23 -540,15 +679,27 @@@ static void check_hotplug_bridge(struc
  static int __ref enable_device(struct acpiphp_slot *slot)
  {
  	struct pci_dev *dev;
 -	struct pci_bus *bus = slot->bus;
 +	struct pci_bus *bus = slot->bridge->pci_bus;
  	struct acpiphp_func *func;
- 	int num, max, pass;
+ 	int max, pass;
  	LIST_HEAD(add_list);
  
 +	if (slot->flags & SLOT_ENABLED)
 +		goto err_exit;
 +
  	list_for_each_entry(func, &slot->funcs, sibling)
 -		acpiphp_bus_add(func_to_handle(func));
 +		acpiphp_bus_add(func);
  
++<<<<<<< HEAD
 +	num = pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
 +	if (num == 0) {
 +		/* Maybe only part of funcs are added. */
 +		pr_debug("No new device found\n");
 +		goto err_exit;
 +	}
++=======
+ 	pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
++>>>>>>> b91182a67c53 (ACPI / hotplug / PCI: Allow slots without new devices to be rescanned)
  
  	max = acpiphp_max_busnr(bus);
  	for (pass = 0; pass < 2; pass++) {
* Unmerged path drivers/pci/hotplug/acpiphp_glue.c
