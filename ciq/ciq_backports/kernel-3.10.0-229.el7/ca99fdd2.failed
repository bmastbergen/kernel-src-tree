ext4: use ->invalidatepage() length argument

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Lukas Czerner <lczerner@redhat.com>
commit ca99fdd26b450cfc1dbcb6b01e1753ee5e6c88e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/ca99fdd2.failed

->invalidatepage() aop now accepts range to invalidate so we can make
use of it in all ext4 invalidatepage routines.

	Signed-off-by: Lukas Czerner <lczerner@redhat.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
(cherry picked from commit ca99fdd26b450cfc1dbcb6b01e1753ee5e6c88e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 9cdcbae963a9,11638d7982c9..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -2841,10 -2847,10 +2848,10 @@@ static void ext4_da_invalidatepage(stru
  	if (!page_has_buffers(page))
  		goto out;
  
- 	ext4_da_page_release_reservation(page, offset);
+ 	ext4_da_page_release_reservation(page, offset, length);
  
  out:
 -	ext4_invalidatepage(page, offset, length);
 +	ext4_invalidatepage(page, offset);
  
  	return;
  }
@@@ -2992,14 -2998,15 +2999,18 @@@ ext4_readpages(struct file *file, struc
  	return mpage_readpages(mapping, pages, nr_pages, ext4_get_block);
  }
  
 -static void ext4_invalidatepage(struct page *page, unsigned int offset,
 -				unsigned int length)
 +static void ext4_invalidatepage(struct page *page, unsigned long offset)
  {
- 	trace_ext4_invalidatepage(page, offset);
+ 	trace_ext4_invalidatepage(page, offset, length);
  
  	/* No journalling happens on data buffers when this function is used */
  	WARN_ON(page_has_buffers(page) && buffer_jbd(page_buffers(page)));
  
++<<<<<<< HEAD
 +	block_invalidatepage(page, offset);
++=======
+ 	block_invalidatepage(page, offset, length);
++>>>>>>> ca99fdd26b45 (ext4: use ->invalidatepage() length argument)
  }
  
  static int __ext4_journalled_invalidatepage(struct page *page,
@@@ -3021,9 -3028,10 +3032,9 @@@
  
  /* Wrapper for aops... */
  static void ext4_journalled_invalidatepage(struct page *page,
 -					   unsigned int offset,
 -					   unsigned int length)
 +					   unsigned long offset)
  {
- 	WARN_ON(__ext4_journalled_invalidatepage(page, offset) < 0);
+ 	WARN_ON(__ext4_journalled_invalidatepage(page, offset, length) < 0);
  }
  
  static int ext4_releasepage(struct page *page, gfp_t wait)
* Unmerged path fs/ext4/inode.c
diff --git a/include/trace/events/ext4.h b/include/trace/events/ext4.h
index 43d99770346b..108c051d90fe 100644
--- a/include/trace/events/ext4.h
+++ b/include/trace/events/ext4.h
@@ -495,16 +495,16 @@ DEFINE_EVENT(ext4__page_op, ext4_releasepage,
 );
 
 DECLARE_EVENT_CLASS(ext4_invalidatepage_op,
-	TP_PROTO(struct page *page, unsigned long offset),
+	TP_PROTO(struct page *page, unsigned int offset, unsigned int length),
 
-	TP_ARGS(page, offset),
+	TP_ARGS(page, offset, length),
 
 	TP_STRUCT__entry(
 		__field(	dev_t,	dev			)
 		__field(	ino_t,	ino			)
 		__field(	pgoff_t, index			)
-		__field(	unsigned long, offset		)
-
+		__field(	unsigned int, offset		)
+		__field(	unsigned int, length		)
 	),
 
 	TP_fast_assign(
@@ -512,24 +512,26 @@ DECLARE_EVENT_CLASS(ext4_invalidatepage_op,
 		__entry->ino	= page->mapping->host->i_ino;
 		__entry->index	= page->index;
 		__entry->offset	= offset;
+		__entry->length	= length;
 	),
 
-	TP_printk("dev %d,%d ino %lu page_index %lu offset %lu",
+	TP_printk("dev %d,%d ino %lu page_index %lu offset %u length %u",
 		  MAJOR(__entry->dev), MINOR(__entry->dev),
 		  (unsigned long) __entry->ino,
-		  (unsigned long) __entry->index, __entry->offset)
+		  (unsigned long) __entry->index,
+		  __entry->offset, __entry->length)
 );
 
 DEFINE_EVENT(ext4_invalidatepage_op, ext4_invalidatepage,
-	TP_PROTO(struct page *page, unsigned long offset),
+	TP_PROTO(struct page *page, unsigned int offset, unsigned int length),
 
-	TP_ARGS(page, offset)
+	TP_ARGS(page, offset, length)
 );
 
 DEFINE_EVENT(ext4_invalidatepage_op, ext4_journalled_invalidatepage,
-	TP_PROTO(struct page *page, unsigned long offset),
+	TP_PROTO(struct page *page, unsigned int offset, unsigned int length),
 
-	TP_ARGS(page, offset)
+	TP_ARGS(page, offset, length)
 );
 
 TRACE_EVENT(ext4_discard_blocks,
