igb: separate hardware setting from the set_ts_config ioctl

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 9f62ecf4255ea0fb3e653fc5fc91ef7b38812bb5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/9f62ecf4.failed

This patch separates the hardware logic from the set function, so that
we can re-use it during a ptp_reset. This enables the reset to return
functionality to the last known timestamp mode, rather than resetting
the value. We initialize the mode to off during the ptp_init cycle.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 9f62ecf4255ea0fb3e653fc5fc91ef7b38812bb5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igb/igb_ptp.c
diff --cc drivers/net/ethernet/intel/igb/igb_ptp.c
index c94e80d0c269,794c139f0cc0..000000000000
--- a/drivers/net/ethernet/intel/igb/igb_ptp.c
+++ b/drivers/net/ethernet/intel/igb/igb_ptp.c
@@@ -541,10 -538,32 +541,34 @@@ void igb_ptp_rx_rgtstamp(struct igb_q_v
  }
  
  /**
++<<<<<<< HEAD
 + * igb_ptp_hwtstamp_ioctl - control hardware time stamping
 + * @netdev:
 + * @ifreq:
 + * @cmd:
++=======
+  * igb_ptp_get_ts_config - get hardware time stamping config
+  * @netdev:
+  * @ifreq:
+  *
+  * Get the hwtstamp_config settings to return to the user. Rather than attempt
+  * to deconstruct the settings from the registers, just return a shadow copy
+  * of the last known settings.
+  **/
+ int igb_ptp_get_ts_config(struct net_device *netdev, struct ifreq *ifr)
+ {
+ 	struct igb_adapter *adapter = netdev_priv(netdev);
+ 	struct hwtstamp_config *config = &adapter->tstamp_config;
+ 
+ 	return copy_to_user(ifr->ifr_data, config, sizeof(*config)) ?
+ 		-EFAULT : 0;
+ }
+ 
+ /**
+  * igb_ptp_set_timestamp_mode - setup hardware for timestamping
+  * @adapter: networking device structure
+  * @config: hwtstamp configuration
++>>>>>>> 9f62ecf4255e (igb: separate hardware setting from the set_ts_config ioctl)
   *
   * Outgoing time stamping can be enabled and disabled. Play nice and
   * disable it when requested, although it shouldn't case any overhead
@@@ -557,13 -576,11 +581,21 @@@
   * type has to be specified. Matching the kind of event packet is
   * not supported, with the exception of "all V2 events regardless of
   * level 2 or 4".
++<<<<<<< HEAD
 + **/
 +int igb_ptp_hwtstamp_ioctl(struct net_device *netdev,
 +			   struct ifreq *ifr, int cmd)
++=======
+  */
+ static int igb_ptp_set_timestamp_mode(struct igb_adapter *adapter,
+ 				      struct hwtstamp_config *config)
++>>>>>>> 9f62ecf4255e (igb: separate hardware setting from the set_ts_config ioctl)
  {
- 	struct igb_adapter *adapter = netdev_priv(netdev);
  	struct e1000_hw *hw = &adapter->hw;
++<<<<<<< HEAD
 +	struct hwtstamp_config config;
++=======
++>>>>>>> 9f62ecf4255e (igb: separate hardware setting from the set_ts_config ioctl)
  	u32 tsync_tx_ctl = E1000_TSYNCTXCTL_ENABLED;
  	u32 tsync_rx_ctl = E1000_TSYNCRXCTL_ENABLED;
  	u32 tsync_rx_cfg = 0;
@@@ -571,14 -588,11 +603,17 @@@
  	bool is_l2 = false;
  	u32 regval;
  
++<<<<<<< HEAD
 +	if (copy_from_user(&config, ifr->ifr_data, sizeof(config)))
 +		return -EFAULT;
 +
++=======
++>>>>>>> 9f62ecf4255e (igb: separate hardware setting from the set_ts_config ioctl)
  	/* reserved for future extensions */
 -	if (config->flags)
 +	if (config.flags)
  		return -EINVAL;
  
 -	switch (config->tx_type) {
 +	switch (config.tx_type) {
  	case HWTSTAMP_TX_OFF:
  		tsync_tx_ctl = 0;
  	case HWTSTAMP_TX_ON:
@@@ -708,6 -722,32 +743,35 @@@
  	regval = rd32(E1000_RXSTMPL);
  	regval = rd32(E1000_RXSTMPH);
  
++<<<<<<< HEAD
++=======
+ 	return 0;
+ }
+ 
+ /**
+  * igb_ptp_set_ts_config - set hardware time stamping config
+  * @netdev:
+  * @ifreq:
+  *
+  **/
+ int igb_ptp_set_ts_config(struct net_device *netdev, struct ifreq *ifr)
+ {
+ 	struct igb_adapter *adapter = netdev_priv(netdev);
+ 	struct hwtstamp_config config;
+ 	int err;
+ 
+ 	if (copy_from_user(&config, ifr->ifr_data, sizeof(config)))
+ 		return -EFAULT;
+ 
+ 	err = igb_ptp_set_timestamp_mode(adapter, &config);
+ 	if (err)
+ 		return err;
+ 
+ 	/* save these settings for future reference */
+ 	memcpy(&adapter->tstamp_config, &config,
+ 	       sizeof(adapter->tstamp_config));
+ 
++>>>>>>> 9f62ecf4255e (igb: separate hardware setting from the set_ts_config ioctl)
  	return copy_to_user(ifr->ifr_data, &config, sizeof(config)) ?
  		-EFAULT : 0;
  }
@@@ -866,6 -909,9 +933,12 @@@ void igb_ptp_reset(struct igb_adapter *
  	if (!(adapter->flags & IGB_FLAG_PTP))
  		return;
  
++<<<<<<< HEAD
++=======
+ 	/* reset the tstamp_config */
+ 	igb_ptp_set_timestamp_mode(adapter, &adapter->tstamp_config);
+ 
++>>>>>>> 9f62ecf4255e (igb: separate hardware setting from the set_ts_config ioctl)
  	switch (adapter->hw.mac.type) {
  	case e1000_82576:
  		/* Dial the nominal frequency. */
* Unmerged path drivers/net/ethernet/intel/igb/igb_ptp.c
