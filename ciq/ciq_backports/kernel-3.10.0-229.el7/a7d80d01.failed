KVM: PPC: Book3S HV: Add get/set_one_reg for new TM state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [virt] kvm/ppc: book3s hv - Add get/set_one_reg for new TM state (Don Zickus) [1127366]
Rebuild_FUZZ: 94.74%
commit-author Michael Neuling <mikey@neuling.org>
commit a7d80d01c68ed7d3fbc7bcf4541e6fb7e6b87cd6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/a7d80d01.failed

This adds code to get/set_one_reg to read and write the new transactional
memory (TM) state.

	Signed-off-by: Michael Neuling <mikey@neuling.org>
	Signed-off-by: Paul Mackerras <paulus@samba.org>
	Acked-by: Scott Wood <scottwood@freescale.com>
(cherry picked from commit a7d80d01c68ed7d3fbc7bcf4541e6fb7e6b87cd6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kvm/book3s_hv.c
diff --cc arch/powerpc/kvm/book3s_hv.c
index bd4792543205,a6d8f018180d..000000000000
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@@ -833,6 -873,66 +833,69 @@@ int kvmppc_get_one_reg(struct kvm_vcpu 
  	case KVM_REG_PPC_SDAR:
  		*val = get_reg_val(id, vcpu->arch.sdar);
  		break;
++<<<<<<< HEAD
++=======
+ 	case KVM_REG_PPC_SIER:
+ 		*val = get_reg_val(id, vcpu->arch.sier);
+ 		break;
+ 	case KVM_REG_PPC_IAMR:
+ 		*val = get_reg_val(id, vcpu->arch.iamr);
+ 		break;
+ 	case KVM_REG_PPC_FSCR:
+ 		*val = get_reg_val(id, vcpu->arch.fscr);
+ 		break;
+ 	case KVM_REG_PPC_PSPB:
+ 		*val = get_reg_val(id, vcpu->arch.pspb);
+ 		break;
+ 	case KVM_REG_PPC_EBBHR:
+ 		*val = get_reg_val(id, vcpu->arch.ebbhr);
+ 		break;
+ 	case KVM_REG_PPC_EBBRR:
+ 		*val = get_reg_val(id, vcpu->arch.ebbrr);
+ 		break;
+ 	case KVM_REG_PPC_BESCR:
+ 		*val = get_reg_val(id, vcpu->arch.bescr);
+ 		break;
+ 	case KVM_REG_PPC_TAR:
+ 		*val = get_reg_val(id, vcpu->arch.tar);
+ 		break;
+ 	case KVM_REG_PPC_DPDES:
+ 		*val = get_reg_val(id, vcpu->arch.vcore->dpdes);
+ 		break;
+ 	case KVM_REG_PPC_DAWR:
+ 		*val = get_reg_val(id, vcpu->arch.dawr);
+ 		break;
+ 	case KVM_REG_PPC_DAWRX:
+ 		*val = get_reg_val(id, vcpu->arch.dawrx);
+ 		break;
+ 	case KVM_REG_PPC_CIABR:
+ 		*val = get_reg_val(id, vcpu->arch.ciabr);
+ 		break;
+ 	case KVM_REG_PPC_IC:
+ 		*val = get_reg_val(id, vcpu->arch.ic);
+ 		break;
+ 	case KVM_REG_PPC_VTB:
+ 		*val = get_reg_val(id, vcpu->arch.vtb);
+ 		break;
+ 	case KVM_REG_PPC_CSIGR:
+ 		*val = get_reg_val(id, vcpu->arch.csigr);
+ 		break;
+ 	case KVM_REG_PPC_TACR:
+ 		*val = get_reg_val(id, vcpu->arch.tacr);
+ 		break;
+ 	case KVM_REG_PPC_TCSCR:
+ 		*val = get_reg_val(id, vcpu->arch.tcscr);
+ 		break;
+ 	case KVM_REG_PPC_PID:
+ 		*val = get_reg_val(id, vcpu->arch.pid);
+ 		break;
+ 	case KVM_REG_PPC_ACOP:
+ 		*val = get_reg_val(id, vcpu->arch.acop);
+ 		break;
+ 	case KVM_REG_PPC_WORT:
+ 		*val = get_reg_val(id, vcpu->arch.wort);
+ 		break;
++>>>>>>> a7d80d01c68e (KVM: PPC: Book3S HV: Add get/set_one_reg for new TM state)
  	case KVM_REG_PPC_VPA_ADDR:
  		spin_lock(&vcpu->arch.vpa_update_lock);
  		*val = get_reg_val(id, vcpu->arch.vpa.next_gpa);
@@@ -914,6 -1085,69 +1040,72 @@@ int kvmppc_set_one_reg(struct kvm_vcpu 
  	case KVM_REG_PPC_SDAR:
  		vcpu->arch.sdar = set_reg_val(id, *val);
  		break;
++<<<<<<< HEAD
++=======
+ 	case KVM_REG_PPC_SIER:
+ 		vcpu->arch.sier = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_IAMR:
+ 		vcpu->arch.iamr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_FSCR:
+ 		vcpu->arch.fscr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_PSPB:
+ 		vcpu->arch.pspb = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_EBBHR:
+ 		vcpu->arch.ebbhr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_EBBRR:
+ 		vcpu->arch.ebbrr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_BESCR:
+ 		vcpu->arch.bescr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_TAR:
+ 		vcpu->arch.tar = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_DPDES:
+ 		vcpu->arch.vcore->dpdes = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_DAWR:
+ 		vcpu->arch.dawr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_DAWRX:
+ 		vcpu->arch.dawrx = set_reg_val(id, *val) & ~DAWRX_HYP;
+ 		break;
+ 	case KVM_REG_PPC_CIABR:
+ 		vcpu->arch.ciabr = set_reg_val(id, *val);
+ 		/* Don't allow setting breakpoints in hypervisor code */
+ 		if ((vcpu->arch.ciabr & CIABR_PRIV) == CIABR_PRIV_HYPER)
+ 			vcpu->arch.ciabr &= ~CIABR_PRIV;	/* disable */
+ 		break;
+ 	case KVM_REG_PPC_IC:
+ 		vcpu->arch.ic = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_VTB:
+ 		vcpu->arch.vtb = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_CSIGR:
+ 		vcpu->arch.csigr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_TACR:
+ 		vcpu->arch.tacr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_TCSCR:
+ 		vcpu->arch.tcscr = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_PID:
+ 		vcpu->arch.pid = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_ACOP:
+ 		vcpu->arch.acop = set_reg_val(id, *val);
+ 		break;
+ 	case KVM_REG_PPC_WORT:
+ 		vcpu->arch.wort = set_reg_val(id, *val);
+ 		break;
++>>>>>>> a7d80d01c68e (KVM: PPC: Book3S HV: Add get/set_one_reg for new TM state)
  	case KVM_REG_PPC_VPA_ADDR:
  		addr = set_reg_val(id, *val);
  		r = -EINVAL;
* Unmerged path arch/powerpc/kvm/book3s_hv.c
