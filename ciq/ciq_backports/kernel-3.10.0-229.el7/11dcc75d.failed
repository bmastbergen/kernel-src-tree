ACPI / bind: Redefine acpi_get_child()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [acpi] bind: Redefine acpi_get_child() (Prarit Bhargava) [1141846]
Rebuild_FUZZ: 89.86%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 11dcc75dba5bf8b69c4612de10e366c4e04cb123
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/11dcc75d.failed

Since acpi_get_child() is the only user of acpi_find_child() now,
drop the static inline definition of the former and redefine the
latter as new acpi_get_child().

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Aaron Lu <aaron.lu@intel.com>
	Tested-by: Aaron Lu <aaron.lu@intel.com> # for ATA binding
(cherry picked from commit 11dcc75dba5bf8b69c4612de10e366c4e04cb123)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/acpi/acpi_bus.h
diff --cc include/acpi/acpi_bus.h
index f5d6e1e4030e,a1a48f27933a..000000000000
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@@ -440,14 -434,10 +440,19 @@@ struct acpi_pci_root 
  
  struct acpi_device *acpi_find_child_device(struct acpi_device *parent,
  					   u64 address, bool check_children);
++<<<<<<< HEAD
 +acpi_handle acpi_find_child(acpi_handle, u64, bool);
 +static inline acpi_handle acpi_get_child(acpi_handle handle, u64 addr)
 +{
 +	return acpi_find_child(handle, addr, false);
 +}
++=======
+ acpi_handle acpi_get_child(acpi_handle handle, u64 addr);
+ void acpi_preset_companion(struct device *dev, acpi_handle parent, u64 addr);
++>>>>>>> 11dcc75dba5b (ACPI / bind: Redefine acpi_get_child())
  int acpi_is_root_bridge(acpi_handle);
  struct acpi_pci_root *acpi_pci_find_root(acpi_handle handle);
 +#define DEVICE_ACPI_HANDLE(dev) ((acpi_handle)ACPI_HANDLE(dev))
  
  int acpi_enable_wakeup_device_power(struct acpi_device *dev, int state);
  int acpi_disable_wakeup_device_power(struct acpi_device *dev);
diff --git a/drivers/acpi/glue.c b/drivers/acpi/glue.c
index 7b82e04a359a..a9152e2015bc 100644
--- a/drivers/acpi/glue.c
+++ b/drivers/acpi/glue.c
@@ -150,17 +150,17 @@ struct acpi_device *acpi_find_child_device(struct acpi_device *parent,
 	return ret;
 }
 
-acpi_handle acpi_find_child(acpi_handle handle, u64 addr, bool is_bridge)
+acpi_handle acpi_get_child(acpi_handle handle, u64 addr)
 {
 	struct acpi_device *adev;
 
 	if (!handle || acpi_bus_get_device(handle, &adev))
 		return NULL;
 
-	adev = acpi_find_child_device(adev, addr, is_bridge);
+	adev = acpi_find_child_device(adev, addr, false);
 	return adev ? adev->handle : NULL;
 }
-EXPORT_SYMBOL_GPL(acpi_find_child);
+EXPORT_SYMBOL_GPL(acpi_get_child);
 
 static void acpi_physnode_link_name(char *buf, unsigned int node_id)
 {
* Unmerged path include/acpi/acpi_bus.h
