sd: fix a bug in deriving the FLUSH_TIMEOUT from the basic I/O timeout

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author K. Y. Srinivasan <kys@microsoft.com>
commit 26b9fd8b3452dcf0a8862e307ee23f442f63fb51
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/26b9fd8b.failed

Commit ID: 7e660100d85af860e7ad763202fff717adcdaacd added code to derive the
FLUSH_TIMEOUT from the basic I/O timeout. However, this patch did not use the
basic I/O timeout of the device. Fix this bug.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Reviewed-by: James Bottomley <JBottomley@Parallels.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 26b9fd8b3452dcf0a8862e307ee23f442f63fb51)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd.c
diff --cc drivers/scsi/sd.c
index 7841cf39f26b,2c2041ca4b70..000000000000
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@@ -844,32 -868,23 +844,47 @@@ static int sd_setup_write_same_cmnd(str
  	return ret;
  }
  
 -static int sd_setup_flush_cmnd(struct scsi_cmnd *cmd)
 +static int scsi_setup_flush_cmnd(struct scsi_device *sdp, struct request *rq)
  {
++<<<<<<< HEAD
 +	rq->timeout *= SD_FLUSH_TIMEOUT_MULTIPLIER;
 +	rq->retries = SD_MAX_RETRIES;
 +	rq->cmd[0] = SYNCHRONIZE_CACHE;
 +	rq->cmd_len = 10;
 +
 +	return scsi_setup_blk_pc_cmnd(sdp, rq);
++=======
+ 	struct request *rq = cmd->request;
+ 
+ 	/* flush requests don't perform I/O, zero the S/G table */
+ 	memset(&cmd->sdb, 0, sizeof(cmd->sdb));
+ 
+ 	cmd->cmnd[0] = SYNCHRONIZE_CACHE;
+ 	cmd->cmd_len = 10;
+ 	cmd->transfersize = 0;
+ 	cmd->allowed = SD_MAX_RETRIES;
+ 
+ 	rq->timeout = rq->q->rq_timeout * SD_FLUSH_TIMEOUT_MULTIPLIER;
+ 	return BLKPREP_OK;
++>>>>>>> 26b9fd8b3452 (sd: fix a bug in deriving the FLUSH_TIMEOUT from the basic I/O timeout)
 +}
 +
 +static void sd_uninit_command(struct scsi_cmnd *SCpnt)
 +{
 +	struct request *rq = SCpnt->request;
 +
 +	if (rq->cmd_flags & REQ_DISCARD) {
 +		free_page((unsigned long)rq->buffer);
 +		rq->buffer = NULL;
 +	}
 +	if (SCpnt->cmnd != rq->cmd) {
 +		mempool_free(SCpnt->cmnd, sd_cdb_pool);
 +		SCpnt->cmnd = NULL;
 +		SCpnt->cmd_len = 0;
 +	}
  }
  
 -static int sd_setup_read_write_cmnd(struct scsi_cmnd *SCpnt)
 +static int sd_init_command(struct scsi_cmnd *SCpnt)
  {
  	struct request *rq = SCpnt->request;
  	struct scsi_device *sdp = SCpnt->device;
* Unmerged path drivers/scsi/sd.c
