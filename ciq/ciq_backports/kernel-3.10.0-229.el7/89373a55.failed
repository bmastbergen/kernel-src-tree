ACPI / hotplug / PCI: Drop handle field from struct acpiphp_bridge

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [acpi] hotplug/pci: Drop handle field from struct acpiphp_bridge (Myron Stowe) [1114228]
Rebuild_FUZZ: 92.68%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 89373a55d294b53e85792dbc636015b83d492f67
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/89373a55.failed

The handle field in struct acpiphp_bridge is only used by
acpiphp_enumerate_slots(), but in that function the local handle
variable can be used instead, so make that happen and drop handle
from struct acpiphp_bridge.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
(cherry picked from commit 89373a55d294b53e85792dbc636015b83d492f67)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/hotplug/acpiphp_glue.c
diff --cc drivers/pci/hotplug/acpiphp_glue.c
index b5069ad47c47,bbbf8f4e8482..000000000000
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@@ -1201,15 -1094,42 +1200,31 @@@ void acpiphp_enumerate_slots(struct pci
  	 */
  	get_device(&bus->dev);
  
 -	if (!pci_is_root_bus(bridge->pci_bus)) {
 -		struct acpiphp_context *context;
 -
 -		/*
 -		 * This bridge should have been registered as a hotplug function
 -		 * under its parent, so the context has to be there.  If not, we
 -		 * are in deep goo.
 -		 */
 -		mutex_lock(&acpiphp_context_lock);
 -		context = acpiphp_get_context(handle);
 -		if (WARN_ON(!context)) {
 -			mutex_unlock(&acpiphp_context_lock);
 -			put_device(&bus->dev);
 -			kfree(bridge);
 -			return;
 -		}
 -		bridge->context = context;
 -		context->bridge = bridge;
 -		/* Get a reference to the parent bridge. */
 -		get_bridge(context->func.slot->bridge);
 -		mutex_unlock(&acpiphp_context_lock);
 +	if (!pci_is_root_bus(bridge->pci_bus) &&
 +	    ACPI_SUCCESS(acpi_get_handle(bridge->handle,
 +					"_EJ0", &dummy_handle))) {
 +		pr_debug("found ejectable p2p bridge\n");
 +		bridge->flags |= BRIDGE_HAS_EJ0;
 +		bridge->func = acpiphp_bridge_handle_to_function(handle);
  	}
  
++<<<<<<< HEAD
 +	init_bridge_misc(bridge);
++=======
+ 	/* must be added to the list prior to calling register_slot */
+ 	mutex_lock(&bridge_mutex);
+ 	list_add(&bridge->list, &bridge_list);
+ 	mutex_unlock(&bridge_mutex);
+ 
+ 	/* register all slot objects under this bridge */
+ 	status = acpi_walk_namespace(ACPI_TYPE_DEVICE, handle, 1,
+ 				     register_slot, NULL, bridge, NULL);
+ 	if (ACPI_FAILURE(status)) {
+ 		acpi_handle_err(handle, "failed to register slots\n");
+ 		cleanup_bridge(bridge);
+ 		put_bridge(bridge);
+ 	}
++>>>>>>> 89373a55d294 (ACPI / hotplug / PCI: Drop handle field from struct acpiphp_bridge)
  }
  
  /* Destroy hotplug slots associated with the PCI bus */
diff --git a/drivers/pci/hotplug/acpiphp.h b/drivers/pci/hotplug/acpiphp.h
index 8d99e4e1e51d..1c39115ae1b1 100644
--- a/drivers/pci/hotplug/acpiphp.h
+++ b/drivers/pci/hotplug/acpiphp.h
@@ -65,7 +65,6 @@ struct acpiphp_bridge {
 	struct list_head list;
 	struct list_head slots;
 	struct kref ref;
-	acpi_handle handle;
 
 	/* Ejectable PCI-to-PCI bridge (PCI bridge and PCI function) */
 	struct acpiphp_func *func;
* Unmerged path drivers/pci/hotplug/acpiphp_glue.c
