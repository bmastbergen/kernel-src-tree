hwrng: add per-device entropy derating

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [hwrng] add per-device entropy derating (Amit Shah) [1129195]
Rebuild_FUZZ: 89.86%
commit-author Torsten Duwe <duwe@lst.de>
commit 0f734e6e768b4b66737b3d3e13f1769a12ecff86
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0f734e6e.failed

This patch introduces a derating factor to struct hwrng for
the random bits going into the kernel input pool, and a common
default derating for drivers which do not specify one.

	Signed-off-by: Torsten Duwe <duwe@suse.de>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Acked-by: H. Peter Anvin <hpa@zytor.com>
(cherry picked from commit 0f734e6e768b4b66737b3d3e13f1769a12ecff86)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/hw_random/core.c
diff --cc drivers/char/hw_random/core.c
index 74ee3bd1a2d8,3aaf97c774f1..000000000000
--- a/drivers/char/hw_random/core.c
+++ b/drivers/char/hw_random/core.c
@@@ -54,36 -54,43 +54,63 @@@ static struct hwrng *current_rng
  static LIST_HEAD(rng_list);
  static DEFINE_MUTEX(rng_mutex);
  static int data_avail;
++<<<<<<< HEAD
 +static u8 *rng_buffer;
 +
 +static inline int rng_get_data(struct hwrng *rng, u8 *buffer, size_t size,
 +			       int wait);
++=======
+ static u8 *rng_buffer, *rng_fillbuf;
+ static unsigned short current_quality;
+ static unsigned short default_quality; /* = 0; default to "off" */
+ 
+ module_param(current_quality, ushort, 0644);
+ MODULE_PARM_DESC(current_quality,
+ 		 "current hwrng entropy estimation per mill");
+ module_param(default_quality, ushort, 0644);
+ MODULE_PARM_DESC(default_quality,
+ 		 "default entropy content of hwrng per mill");
+ 
+ static void start_khwrngd(void);
++>>>>>>> 0f734e6e768b (hwrng: add per-device entropy derating)
  
  static size_t rng_buffer_size(void)
  {
  	return SMP_CACHE_BYTES < 32 ? 32 : SMP_CACHE_BYTES;
  }
  
 -static inline int hwrng_init(struct hwrng *rng)
 +static void add_early_randomness(struct hwrng *rng)
  {
 -	int err;
 +	unsigned char bytes[16];
 +	int bytes_read;
  
 +	bytes_read = rng_get_data(rng, bytes, sizeof(bytes), 1);
 +	if (bytes_read > 0)
 +		add_device_randomness(bytes, bytes_read);
 +}
 +
 +static inline int hwrng_init(struct hwrng *rng)
 +{
  	if (rng->init) {
 -		err = rng->init(rng);
 -		if (err)
 -			return err;
 +		int ret;
 +
 +		ret =  rng->init(rng);
 +		if (ret)
 +			return ret;
  	}
++<<<<<<< HEAD
 +	add_early_randomness(rng);
++=======
+ 
+ 	current_quality = rng->quality ? : default_quality;
+ 	current_quality &= 1023;
+ 
+ 	if (current_quality == 0 && hwrng_fill)
+ 		kthread_stop(hwrng_fill);
+ 	if (current_quality > 0 && !hwrng_fill)
+ 		start_khwrngd();
+ 
++>>>>>>> 0f734e6e768b (hwrng: add per-device entropy derating)
  	return 0;
  }
  
* Unmerged path drivers/char/hw_random/core.c
diff --git a/include/linux/hw_random.h b/include/linux/hw_random.h
index 3f075ff00411..914bb08cd738 100644
--- a/include/linux/hw_random.h
+++ b/include/linux/hw_random.h
@@ -29,6 +29,8 @@
  * @read:		New API. drivers can fill up to max bytes of data
  *			into the buffer. The buffer is aligned for any type.
  * @priv:		Private data, for use by the RNG driver.
+ * @quality:		Estimation of true entropy in RNG's bitstream
+ *			(per mill).
  */
 struct hwrng {
 	const char *name;
@@ -38,6 +40,7 @@ struct hwrng {
 	int (*data_read)(struct hwrng *rng, u32 *data);
 	int (*read)(struct hwrng *rng, void *data, size_t max, bool wait);
 	unsigned long priv;
+	unsigned short quality;
 
 	/* internal. */
 	struct list_head list;
