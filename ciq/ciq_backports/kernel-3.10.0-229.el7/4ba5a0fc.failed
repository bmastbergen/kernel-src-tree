powerpc/pseries: Decrease message level on EEH initialization

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] pseries: Decrease message level on EEH initialization (Gustavo Duarte) [1156651]
Rebuild_FUZZ: 92.98%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 4ba5a0fc6441194cf238e1a049f548b5d45760c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/4ba5a0fc.failed

As Anton suggested, the patch decreases the message level on EEH
initialization to avoid unnecessary messages if required. Also,
we have unified hint if any of needful RTAS calls is missed, and
then we can check /proc/device-tree to figure out the missed RTAS
calls.

	Suggested-by: Anton Blanchard <anton@samba.org>
	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 4ba5a0fc6441194cf238e1a049f548b5d45760c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/pseries/eeh_pseries.c
diff --cc arch/powerpc/platforms/pseries/eeh_pseries.c
index 5900eb360122,a6c7e19f5eb3..000000000000
--- a/arch/powerpc/platforms/pseries/eeh_pseries.c
+++ b/arch/powerpc/platforms/pseries/eeh_pseries.c
@@@ -88,29 -88,14 +88,40 @@@ static int pseries_eeh_init(void
  	 * and its variant since the old firmware probably support address
  	 * of domain/bus/slot/function for EEH RTAS operations.
  	 */
++<<<<<<< HEAD
 +	if (ibm_set_eeh_option == RTAS_UNKNOWN_SERVICE) {
 +		pr_warning("%s: RTAS service <ibm,set-eeh-option> invalid\n",
 +			__func__);
 +		return -EINVAL;
 +	} else if (ibm_set_slot_reset == RTAS_UNKNOWN_SERVICE) {
 +		pr_warning("%s: RTAS service <ibm,set-slot-reset> invalid\n",
 +			__func__);
 +		return -EINVAL;
 +	} else if (ibm_read_slot_reset_state2 == RTAS_UNKNOWN_SERVICE &&
 +		   ibm_read_slot_reset_state == RTAS_UNKNOWN_SERVICE) {
 +		pr_warning("%s: RTAS service <ibm,read-slot-reset-state2> and "
 +			"<ibm,read-slot-reset-state> invalid\n",
 +			__func__);
 +		return -EINVAL;
 +	} else if (ibm_slot_error_detail == RTAS_UNKNOWN_SERVICE) {
 +		pr_warning("%s: RTAS service <ibm,slot-error-detail> invalid\n",
 +			__func__);
 +		return -EINVAL;
 +	} else if (ibm_configure_pe == RTAS_UNKNOWN_SERVICE &&
 +		   ibm_configure_bridge == RTAS_UNKNOWN_SERVICE) {
 +		pr_warning("%s: RTAS service <ibm,configure-pe> and "
 +			"<ibm,configure-bridge> invalid\n",
 +			__func__);
++=======
+ 	if (ibm_set_eeh_option == RTAS_UNKNOWN_SERVICE		||
+ 	    ibm_set_slot_reset == RTAS_UNKNOWN_SERVICE		||
+ 	    (ibm_read_slot_reset_state2 == RTAS_UNKNOWN_SERVICE &&
+ 	     ibm_read_slot_reset_state == RTAS_UNKNOWN_SERVICE)	||
+ 	    ibm_slot_error_detail == RTAS_UNKNOWN_SERVICE	||
+ 	    (ibm_configure_pe == RTAS_UNKNOWN_SERVICE		&&
+ 	     ibm_configure_bridge == RTAS_UNKNOWN_SERVICE)) {
+ 		pr_info("EEH functionality not supported\n");
++>>>>>>> 4ba5a0fc6441 (powerpc/pseries: Decrease message level on EEH initialization)
  		return -EINVAL;
  	}
  
@@@ -118,11 -103,11 +129,19 @@@
  	spin_lock_init(&slot_errbuf_lock);
  	eeh_error_buf_size = rtas_token("rtas-error-log-max");
  	if (eeh_error_buf_size == RTAS_UNKNOWN_SERVICE) {
++<<<<<<< HEAD
 +		pr_warning("%s: unknown EEH error log size\n",
 +			__func__);
 +		eeh_error_buf_size = 1024;
 +	} else if (eeh_error_buf_size > RTAS_ERROR_LOG_MAX) {
 +		pr_warning("%s: EEH error log size %d exceeds the maximal %d\n",
++=======
+ 		pr_info("%s: unknown EEH error log size\n",
+ 			__func__);
+ 		eeh_error_buf_size = 1024;
+ 	} else if (eeh_error_buf_size > RTAS_ERROR_LOG_MAX) {
+ 		pr_info("%s: EEH error log size %d exceeds the maximal %d\n",
++>>>>>>> 4ba5a0fc6441 (powerpc/pseries: Decrease message level on EEH initialization)
  			__func__, eeh_error_buf_size, RTAS_ERROR_LOG_MAX);
  		eeh_error_buf_size = RTAS_ERROR_LOG_MAX;
  	}
* Unmerged path arch/powerpc/platforms/pseries/eeh_pseries.c
