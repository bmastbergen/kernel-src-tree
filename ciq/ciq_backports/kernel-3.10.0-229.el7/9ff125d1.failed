perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro (Jiri Olsa) [1134356]
Rebuild_FUZZ: 98.25%
commit-author Jiri Olsa <jolsa@redhat.com>
commit 9ff125d132001c02d32a193a9423be0690526e11
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/9ff125d1.failed

Introducing global macro HAVE_DWARF_UNWIND_SUPPORT to indicate we have
dwarf unwind support. Any library providing the dwarf post unwind
support will enable this macro.

	Signed-off-by: Jiri Olsa <jolsa@redhat.com>
	Acked-by: Jean Pihet <jean.pihet@linaro.org>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jean Pihet <jean.pihet@linaro.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1389098853-14466-12-git-send-email-jolsa@redhat.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9ff125d132001c02d32a193a9423be0690526e11)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
#	tools/perf/config/Makefile
#	tools/perf/tests/builtin-test.c
#	tools/perf/tests/tests.h
#	tools/perf/util/unwind.h
diff --cc tools/perf/builtin-record.c
index 11e02b319d14,eb524f91bffe..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -649,7 -649,7 +649,11 @@@ error
  	return ret;
  }
  
++<<<<<<< HEAD
 +#ifdef LIBUNWIND_SUPPORT
++=======
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  static int get_stack_size(char *str, unsigned long *_size)
  {
  	char *endptr;
@@@ -675,7 -675,7 +679,11 @@@
  	       max_size, str);
  	return -1;
  }
++<<<<<<< HEAD
 +#endif /* LIBUNWIND_SUPPORT */
++=======
+ #endif /* HAVE_DWARF_UNWIND_SUPPORT */
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  
  int record_parse_callchain(const char *arg, struct record_opts *opts)
  {
@@@ -704,7 -704,7 +712,11 @@@
  				       "needed for -g fp\n");
  			break;
  
++<<<<<<< HEAD
 +#ifdef LIBUNWIND_SUPPORT
++=======
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  		/* Dwarf style */
  		} else if (!strncmp(name, "dwarf", sizeof("dwarf"))) {
  			const unsigned long default_stack_dump_size = 8192;
@@@ -720,7 -720,7 +732,11 @@@
  				ret = get_stack_size(tok, &size);
  				opts->stack_dump_size = size;
  			}
++<<<<<<< HEAD
 +#endif /* LIBUNWIND_SUPPORT */
++=======
+ #endif /* HAVE_DWARF_UNWIND_SUPPORT */
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  		} else {
  			pr_err("callchain: Unknown --call-graph option "
  			       "value: %s\n", arg);
@@@ -823,7 -823,7 +839,11 @@@ static struct record record = 
  
  #define CALLCHAIN_HELP "setup and enables call-graph (stack chain/backtrace) recording: "
  
++<<<<<<< HEAD
 +#ifdef LIBUNWIND_SUPPORT
++=======
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  const char record_callchain_help[] = CALLCHAIN_HELP "fp dwarf";
  #else
  const char record_callchain_help[] = CALLCHAIN_HELP "fp";
diff --cc tools/perf/config/Makefile
index 374f88fe17c5,1686583ff7fc..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -232,69 -297,56 +232,118 @@@ els
  endif # NO_LIBELF
  
  ifndef NO_LIBELF
++<<<<<<< HEAD
 +CFLAGS += -DLIBELF_SUPPORT
 +FLAGS_LIBELF=$(CFLAGS) $(LDFLAGS) $(EXTLIBS)
 +ifeq ($(call try-cc,$(SOURCE_ELF_MMAP),$(FLAGS_LIBELF),-DLIBELF_MMAP),y)
 +  CFLAGS += -DLIBELF_MMAP
 +endif
 +ifeq ($(call try-cc,$(SOURCE_ELF_GETPHDRNUM),$(FLAGS_LIBELF),-DHAVE_ELF_GETPHDRNUM),y)
 +  CFLAGS += -DHAVE_ELF_GETPHDRNUM
++=======
+   CFLAGS += -DHAVE_LIBELF_SUPPORT
+ 
+   ifeq ($(feature-libelf-mmap), 1)
+     CFLAGS += -DHAVE_LIBELF_MMAP_SUPPORT
+   endif
+ 
+   ifeq ($(feature-libelf-getphdrnum), 1)
+     CFLAGS += -DHAVE_ELF_GETPHDRNUM_SUPPORT
+   endif
+ 
+   # include ARCH specific config
+   -include $(src-perf)/arch/$(ARCH)/Makefile
+ 
+   ifndef NO_DWARF
+     ifeq ($(origin PERF_HAVE_DWARF_REGS), undefined)
+       msg := $(warning DWARF register mappings have not been defined for architecture $(ARCH), DWARF support disabled);
+       NO_DWARF := 1
+     else
+       CFLAGS += -DHAVE_DWARF_SUPPORT $(LIBDW_CFLAGS)
+       LDFLAGS += $(LIBDW_LDFLAGS)
+       EXTLIBS += -lelf -ldw
+     endif # PERF_HAVE_DWARF_REGS
+   endif # NO_DWARF
+ endif # NO_LIBELF
+ 
+ ifndef NO_LIBUNWIND
+   ifneq ($(feature-libunwind), 1)
+     msg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 1.1);
+     NO_LIBUNWIND := 1
+   else
+     ifeq ($(ARCH),arm)
+       $(call feature_check,libunwind-debug-frame)
+       ifneq ($(feature-libunwind-debug-frame), 1)
+         msg := $(warning No debug_frame support found in libunwind);
+         CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME
+       endif
+     else
+       # non-ARM has no dwarf_find_debug_frame() function:
+       CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME
+     endif
+ 
+     CFLAGS += -DHAVE_DWARF_UNWIND_SUPPORT -DHAVE_LIBUNWIND_SUPPORT
+     EXTLIBS += $(LIBUNWIND_LIBS)
+     CFLAGS += $(LIBUNWIND_CFLAGS)
+     LDFLAGS += $(LIBUNWIND_LDFLAGS)
+   endif # ifneq ($(feature-libunwind), 1)
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
 +endif
 +
 +# include ARCH specific config
 +-include $(src-perf)/arch/$(ARCH)/Makefile
 +
 +ifndef NO_DWARF
 +ifeq ($(origin PERF_HAVE_DWARF_REGS), undefined)
 +  msg := $(warning DWARF register mappings have not been defined for architecture $(ARCH), DWARF support disabled);
 +  NO_DWARF := 1
 +else
 +  CFLAGS += -DDWARF_SUPPORT $(LIBDW_CFLAGS)
 +  LDFLAGS += $(LIBDW_LDFLAGS)
 +  EXTLIBS += -lelf -ldw
 +endif # PERF_HAVE_DWARF_REGS
 +endif # NO_DWARF
 +
 +endif # NO_LIBELF
 +
 +ifndef NO_LIBELF
 +CFLAGS += -DLIBELF_SUPPORT
 +FLAGS_LIBELF=$(CFLAGS) $(LDFLAGS) $(EXTLIBS)
 +ifeq ($(call try-cc,$(SOURCE_ELF_MMAP),$(FLAGS_LIBELF),-DLIBELF_MMAP),y)
 +  CFLAGS += -DLIBELF_MMAP
 +endif # try-cc
 +endif # NO_LIBELF
 +
 +# There's only x86 (both 32 and 64) support for CFI unwind so far
 +ifneq ($(ARCH),x86)
 +  NO_LIBUNWIND := 1
 +endif
 +
 +ifndef NO_LIBUNWIND
 +  # for linking with debug library, run like:
 +  # make DEBUG=1 LIBUNWIND_DIR=/opt/libunwind/
 +  ifdef LIBUNWIND_DIR
 +    LIBUNWIND_CFLAGS  := -I$(LIBUNWIND_DIR)/include
 +    LIBUNWIND_LDFLAGS := -L$(LIBUNWIND_DIR)/lib
 +  endif
 +
 +  FLAGS_UNWIND=$(LIBUNWIND_CFLAGS) $(CFLAGS) $(LIBUNWIND_LDFLAGS) $(LDFLAGS) $(EXTLIBS) $(LIBUNWIND_LIBS)
 +  ifneq ($(call try-cc,$(SOURCE_LIBUNWIND),$(FLAGS_UNWIND),libunwind),y)
 +    msg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 0.99);
 +    NO_LIBUNWIND := 1
 +  endif
  endif
  
 +ifndef NO_LIBUNWIND
 +  CFLAGS += -DLIBUNWIND_SUPPORT
 +  EXTLIBS += $(LIBUNWIND_LIBS)
 +  CFLAGS += $(LIBUNWIND_CFLAGS)
 +  LDFLAGS += $(LIBUNWIND_LDFLAGS)
 +endif # NO_LIBUNWIND
 +
  ifndef NO_LIBAUDIT
 -  ifneq ($(feature-libaudit), 1)
 +  FLAGS_LIBAUDIT = $(CFLAGS) $(LDFLAGS) -laudit
 +  ifneq ($(call try-cc,$(SOURCE_LIBAUDIT),$(FLAGS_LIBAUDIT),libaudit),y)
      msg := $(warning No libaudit.h found, disables 'trace' tool, please install audit-libs-devel or libaudit-dev);
      NO_LIBAUDIT := 1
    else
diff --cc tools/perf/tests/builtin-test.c
index 1e67437fb4ca,b11bf8a08430..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -115,6 -115,14 +115,17 @@@ static struct test 
  		.desc = "Test parsing with no sample_id_all bit set",
  		.func = test__parse_no_sample_id_all,
  	},
++<<<<<<< HEAD
++=======
+ #if defined(__x86_64__) || defined(__i386__)
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
+ 	{
+ 		.desc = "Test dwarf unwind",
+ 		.func = test__dwarf_unwind,
+ 	},
+ #endif
+ #endif
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  	{
  		.func = NULL,
  	},
diff --cc tools/perf/tests/tests.h
index e0ac713857ba,a24795ca002d..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -40,5 -40,14 +40,16 @@@ int test__code_reading(void)
  int test__sample_parsing(void);
  int test__keep_tracking(void);
  int test__parse_no_sample_id_all(void);
 -int test__dwarf_unwind(void);
  
++<<<<<<< HEAD
++=======
+ #if defined(__x86_64__) || defined(__i386__)
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
+ struct thread;
+ struct perf_sample;
+ int test__arch_unwind_sample(struct perf_sample *sample,
+ 			     struct thread *thread);
+ #endif
+ #endif
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  #endif /* TESTS_H */
diff --cc tools/perf/util/unwind.h
index 36690b506169,b031316f221a..000000000000
--- a/tools/perf/util/unwind.h
+++ b/tools/perf/util/unwind.h
@@@ -13,13 -13,15 +13,24 @@@ struct unwind_entry 
  
  typedef int (*unwind_entry_cb_t)(struct unwind_entry *entry, void *arg);
  
++<<<<<<< HEAD
 +#ifdef LIBUNWIND_SUPPORT
++=======
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  int unwind__get_entries(unwind_entry_cb_t cb, void *arg,
  			struct machine *machine,
  			struct thread *thread,
 +			u64 sample_uregs,
  			struct perf_sample *data, int max_stack);
++<<<<<<< HEAD
 +int unwind__arch_reg_id(int regnum);
++=======
+ /* libunwind specific */
+ #ifdef HAVE_LIBUNWIND_SUPPORT
+ int libunwind__arch_reg_id(int regnum);
+ #endif
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  #else
  static inline int
  unwind__get_entries(unwind_entry_cb_t cb __maybe_unused,
@@@ -32,5 -33,5 +43,9 @@@
  {
  	return 0;
  }
++<<<<<<< HEAD
 +#endif /* LIBUNWIND_SUPPORT */
++=======
+ #endif /* HAVE_DWARF_UNWIND_SUPPORT */
++>>>>>>> 9ff125d13200 (perf callchain: Introduce HAVE_DWARF_UNWIND_SUPPORT macro)
  #endif /* __UNWIND_H */
* Unmerged path tools/perf/builtin-record.c
* Unmerged path tools/perf/config/Makefile
* Unmerged path tools/perf/tests/builtin-test.c
* Unmerged path tools/perf/tests/tests.h
* Unmerged path tools/perf/util/unwind.h
