powerpc/eeh: Cleanup EEH subsystem variables

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] eeh: Cleanup EEH subsystem variables (Don Zickus) [1127366]
Rebuild_FUZZ: 90.00%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 8a5ad35686fa81da7d8d07e9dd7041ac4a2ac0d7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/8a5ad356.failed

There're 2 EEH subsystem variables: eeh_subsystem_enabled and
eeh_probe_mode. We needn't maintain 2 variables and we can just
have one variable and introduce different flags. The patch also
introduces additional flag EEH_FORCE_DISABLE, which will be used
to disable EEH subsystem via boot parameter ("eeh=off") in future.
Besides, the patch also introduces flag EEH_ENABLED, which is
changed to disable or enable EEH functionality on the fly through
debugfs entry in future.

With the patch applied, the creteria to check the enabled EEH
functionality is changed to:

!EEH_FORCE_DISABLED && EEH_ENABLED : Enabled
                       Other cases : Disabled

	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 8a5ad35686fa81da7d8d07e9dd7041ac4a2ac0d7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/eeh.h
#	arch/powerpc/kernel/eeh.c
diff --cc arch/powerpc/include/asm/eeh.h
index 2ff9fdd89bc5,f4a93218fbcb..000000000000
--- a/arch/powerpc/include/asm/eeh.h
+++ b/arch/powerpc/include/asm/eeh.h
@@@ -160,14 -179,26 +166,36 @@@ struct eeh_ops 
  	int (*restore_config)(struct device_node *dn);
  };
  
+ extern int eeh_subsystem_flags;
  extern struct eeh_ops *eeh_ops;
++<<<<<<< HEAD
 +extern int eeh_subsystem_enabled;
 +extern struct mutex eeh_mutex;
++=======
++>>>>>>> 8a5ad35686fa (powerpc/eeh: Cleanup EEH subsystem variables)
  extern raw_spinlock_t confirm_error_lock;
- extern int eeh_probe_mode;
  
++<<<<<<< HEAD
 +#define EEH_PROBE_MODE_DEV	(1<<0)	/* From PCI device	*/
 +#define EEH_PROBE_MODE_DEVTREE	(1<<1)	/* From device tree	*/
++=======
+ static inline bool eeh_enabled(void)
+ {
+ 	if ((eeh_subsystem_flags & EEH_FORCE_DISABLED) ||
+ 	    !(eeh_subsystem_flags & EEH_ENABLED))
+ 		return false;
+ 
+ 	return true;
+ }
+ 
+ static inline void eeh_set_enable(bool mode)
+ {
+ 	if (mode)
+ 		eeh_subsystem_flags |= EEH_ENABLED;
+ 	else
+ 		eeh_subsystem_flags &= ~EEH_ENABLED;
+ }
++>>>>>>> 8a5ad35686fa (powerpc/eeh: Cleanup EEH subsystem variables)
  
  static inline void eeh_probe_mode_set(int flag)
  {
@@@ -181,19 -212,9 +209,19 @@@ static inline int eeh_probe_mode_devtre
  
  static inline int eeh_probe_mode_dev(void)
  {
- 	return (eeh_probe_mode == EEH_PROBE_MODE_DEV);
+ 	return (eeh_subsystem_flags & EEH_PROBE_MODE_DEV);
  }
  
 +static inline void eeh_lock(void)
 +{
 +	mutex_lock(&eeh_mutex);
 +}
 +
 +static inline void eeh_unlock(void)
 +{
 +	mutex_unlock(&eeh_mutex);
 +}
 +
  static inline void eeh_serialize_lock(unsigned long *flags)
  {
  	raw_spin_lock_irqsave(&confirm_error_lock, *flags);
diff --cc arch/powerpc/kernel/eeh.c
index 72341d901d08,06d2b7c6b661..000000000000
--- a/arch/powerpc/kernel/eeh.c
+++ b/arch/powerpc/kernel/eeh.c
@@@ -89,23 -103,6 +102,26 @@@ EXPORT_SYMBOL(eeh_subsystem_flags)
  /* Platform dependent EEH operations */
  struct eeh_ops *eeh_ops = NULL;
  
++<<<<<<< HEAD
 +int eeh_subsystem_enabled;
 +EXPORT_SYMBOL(eeh_subsystem_enabled);
 +
 +/*
 + * EEH probe mode support. The intention is to support multiple
 + * platforms for EEH. Some platforms like pSeries do PCI emunation
 + * based on device tree. However, other platforms like powernv probe
 + * PCI devices from hardware. The flag is used to distinguish that.
 + * In addition, struct eeh_ops::probe would be invoked for particular
 + * OF node or PCI device so that the corresponding PE would be created
 + * there.
 + */
 +int eeh_probe_mode;
 +
 +/* Global EEH mutex */
 +DEFINE_MUTEX(eeh_mutex);
 +
++=======
++>>>>>>> 8a5ad35686fa (powerpc/eeh: Cleanup EEH subsystem variables)
  /* Lock to avoid races due to multiple reports of an error */
  DEFINE_RAW_SPINLOCK(confirm_error_lock);
  
* Unmerged path arch/powerpc/include/asm/eeh.h
* Unmerged path arch/powerpc/kernel/eeh.c
