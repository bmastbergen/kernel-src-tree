ACPI / hotplug / PCI: Drop func field from struct acpiphp_bridge

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [acpi] hotplug/pci: Drop func field from struct acpiphp_bridge (Myron Stowe) [1114228]
Rebuild_FUZZ: 92.44%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit f28181109e85b49b5b4b1c381d889b4ea7315988
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f2818110.failed

Since the func pointer in struct acpiphp_context can always be used
instead of the func pointer in struct acpiphp_bridge, drop the
latter.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
(cherry picked from commit f28181109e85b49b5b4b1c381d889b4ea7315988)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/hotplug/acpiphp.h
#	drivers/pci/hotplug/acpiphp_glue.c
diff --cc drivers/pci/hotplug/acpiphp.h
index 8d99e4e1e51d,4980ff4919a6..000000000000
--- a/drivers/pci/hotplug/acpiphp.h
+++ b/drivers/pci/hotplug/acpiphp.h
@@@ -67,8 -78,7 +67,12 @@@ struct acpiphp_bridge 
  	struct kref ref;
  	acpi_handle handle;
  
++<<<<<<< HEAD
 +	/* Ejectable PCI-to-PCI bridge (PCI bridge and PCI function) */
 +	struct acpiphp_func *func;
++=======
+ 	struct acpiphp_context *context;
++>>>>>>> f28181109e85 (ACPI / hotplug / PCI: Drop func field from struct acpiphp_bridge)
  
  	int nr_slots;
  
diff --cc drivers/pci/hotplug/acpiphp_glue.c
index b5069ad47c47,a83ce9db16bb..000000000000
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@@ -104,12 -178,18 +104,20 @@@ static void free_bridge(struct kref *kr
  		kfree(slot);
  	}
  
++<<<<<<< HEAD
 +	/* Release reference acquired by acpiphp_bridge_handle_to_function() */
 +	if ((bridge->flags & BRIDGE_HAS_EJ0) && bridge->func)
 +		put_bridge(bridge->func->slot->bridge);
++=======
+ 	context = bridge->context;
+ 	/* Release the reference acquired by acpiphp_enumerate_slots(). */
+ 	if (context->handler_for_func)
+ 		put_bridge(context->func->slot->bridge);
+ 
++>>>>>>> f28181109e85 (ACPI / hotplug / PCI: Drop func field from struct acpiphp_bridge)
  	put_device(&bridge->pci_bus->dev);
  	pci_dev_put(bridge->pci_dev);
 -	context->bridge = NULL;
 -	acpiphp_put_context(context);
  	kfree(bridge);
 -
 -	mutex_unlock(&acpiphp_context_lock);
  }
  
  /*
@@@ -1201,15 -1190,43 +1209,23 @@@ void acpiphp_enumerate_slots(struct pci
  	 */
  	get_device(&bus->dev);
  
 -	/* must be added to the list prior to calling register_slot */
 -	mutex_lock(&bridge_mutex);
 -	list_add(&bridge->list, &bridge_list);
 -	mutex_unlock(&bridge_mutex);
 -
 -	/* register all slot objects under this bridge */
 -	status = acpi_walk_namespace(ACPI_TYPE_DEVICE, bridge->handle, 1,
 -				     register_slot, NULL, bridge, NULL);
 -	if (ACPI_FAILURE(status)) {
 -		acpi_handle_err(bridge->handle, "failed to register slots\n");
 -		goto err;
 -	}
 -
 -	if (pci_is_root_bus(bridge->pci_bus))
 -		return;
 -
 -	if (acpi_has_method(bridge->handle, "_EJ0")) {
 -		dbg("found ejectable p2p bridge\n");
 +	if (!pci_is_root_bus(bridge->pci_bus) &&
 +	    ACPI_SUCCESS(acpi_get_handle(bridge->handle,
 +					"_EJ0", &dummy_handle))) {
 +		pr_debug("found ejectable p2p bridge\n");
  		bridge->flags |= BRIDGE_HAS_EJ0;
++<<<<<<< HEAD
 +		bridge->func = acpiphp_bridge_handle_to_function(handle);
++=======
+ 	}
+ 	if (context->handler_for_func) {
+ 		/* Notify handler already installed. */
+ 		get_bridge(context->func->slot->bridge);
+ 		return;
++>>>>>>> f28181109e85 (ACPI / hotplug / PCI: Drop func field from struct acpiphp_bridge)
  	}
  
 -	/* install notify handler for P2P bridges */
 -	status = acpi_install_notify_handler(bridge->handle, ACPI_SYSTEM_NOTIFY,
 -					     handle_hotplug_event, NULL);
 -	if (ACPI_SUCCESS(status))
 -		return;
 -
 -	acpi_handle_err(bridge->handle, "failed to register notify handler\n");
 -
 - err:
 -	cleanup_bridge(bridge);
 -	put_bridge(bridge);
 +	init_bridge_misc(bridge);
  }
  
  /* Destroy hotplug slots associated with the PCI bus */
* Unmerged path drivers/pci/hotplug/acpiphp.h
* Unmerged path drivers/pci/hotplug/acpiphp_glue.c
