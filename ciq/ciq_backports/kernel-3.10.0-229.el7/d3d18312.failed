be2net: ignore get/set profile FW cmd failures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Sathya Perla <sathya.perla@emulex.com>
commit d3d183126de8e100b003d09b64c6ec4b1c93abfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/d3d18312.failed

Old versions of BE3 FW may not support cmds to re-provision (and hence
optimize) resources/queues in SR-IOV config. Do not treat this FW cmd
failure as fatal and fail the function initialization. Instead, just
enable SR-IOV with the resources provided by the FW.

Prior to the "create optimal number of queues on SR-IOV config" patch
such failures were ignored.
Fixes: bec84e6b2 ("create optimal number of queues on SR-IOV config")

	Reported-by: Eduardo Habkost <ehabkost@redhat.com>
	Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d3d183126de8e100b003d09b64c6ec4b1c93abfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be_main.c
diff --cc drivers/net/ethernet/emulex/benet/be_main.c
index c1530d2fa08f,da4d3863bd18..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@@ -3304,6 -3338,51 +3304,54 @@@ static void be_setup_init(struct be_ada
  		adapter->cmd_privileges = MIN_PRIVILEGES;
  }
  
++<<<<<<< HEAD
++=======
+ static int be_get_sriov_config(struct be_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->pdev->dev;
+ 	struct be_resources res = {0};
+ 	int max_vfs, old_vfs;
+ 
+ 	/* Some old versions of BE3 FW don't report max_vfs value */
+ 	be_cmd_get_profile_config(adapter, &res, 0);
+ 
+ 	if (BE3_chip(adapter) && !res.max_vfs) {
+ 		max_vfs = pci_sriov_get_totalvfs(adapter->pdev);
+ 		res.max_vfs = max_vfs > 0 ? min(MAX_VFS, max_vfs) : 0;
+ 	}
+ 
+ 	adapter->pool_res = res;
+ 
+ 	if (!be_max_vfs(adapter)) {
+ 		if (num_vfs)
+ 			dev_warn(dev, "device doesn't support SRIOV\n");
+ 		adapter->num_vfs = 0;
+ 		return 0;
+ 	}
+ 
+ 	pci_sriov_set_totalvfs(adapter->pdev, be_max_vfs(adapter));
+ 
+ 	/* validate num_vfs module param */
+ 	old_vfs = pci_num_vf(adapter->pdev);
+ 	if (old_vfs) {
+ 		dev_info(dev, "%d VFs are already enabled\n", old_vfs);
+ 		if (old_vfs != num_vfs)
+ 			dev_warn(dev, "Ignoring num_vfs=%d setting\n", num_vfs);
+ 		adapter->num_vfs = old_vfs;
+ 	} else {
+ 		if (num_vfs > be_max_vfs(adapter)) {
+ 			dev_info(dev, "Resources unavailable to init %d VFs\n",
+ 				 num_vfs);
+ 			dev_info(dev, "Limiting to %d VFs\n",
+ 				 be_max_vfs(adapter));
+ 		}
+ 		adapter->num_vfs = min_t(u16, num_vfs, be_max_vfs(adapter));
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> d3d183126de8 (be2net: ignore get/set profile FW cmd failures)
  static int be_get_resources(struct be_adapter *adapter)
  {
  	struct device *dev = &adapter->pdev->dev;
@@@ -3349,7 -3420,35 +3397,39 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +/* Routine to query per function resource limits */
++=======
+ static void be_sriov_config(struct be_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->pdev->dev;
+ 	int status;
+ 
+ 	status = be_get_sriov_config(adapter);
+ 	if (status) {
+ 		dev_err(dev, "Failed to query SR-IOV configuration\n");
+ 		dev_err(dev, "SR-IOV cannot be enabled\n");
+ 		return;
+ 	}
+ 
+ 	/* When the HW is in SRIOV capable configuration, the PF-pool
+ 	 * resources are equally distributed across the max-number of
+ 	 * VFs. The user may request only a subset of the max-vfs to be
+ 	 * enabled. Based on num_vfs, redistribute the resources across
+ 	 * num_vfs so that each VF will have access to more number of
+ 	 * resources. This facility is not available in BE3 FW.
+ 	 * Also, this is done by FW in Lancer chip.
+ 	 */
+ 	if (be_max_vfs(adapter) && !pci_num_vf(adapter->pdev)) {
+ 		status = be_cmd_set_sriov_config(adapter,
+ 						 adapter->pool_res,
+ 						 adapter->num_vfs);
+ 		if (status)
+ 			dev_err(dev, "Failed to optimize SR-IOV resources\n");
+ 	}
+ }
+ 
++>>>>>>> d3d183126de8 (be2net: ignore get/set profile FW cmd failures)
  static int be_get_config(struct be_adapter *adapter)
  {
  	u16 profile_id;
@@@ -3366,6 -3465,9 +3446,12 @@@
  				 "Using profile 0x%x\n", profile_id);
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (!BE2_chip(adapter) && be_physfn(adapter))
+ 		be_sriov_config(adapter);
+ 
++>>>>>>> d3d183126de8 (be2net: ignore get/set profile FW cmd failures)
  	status = be_get_resources(adapter);
  	if (status)
  		return status;
* Unmerged path drivers/net/ethernet/emulex/benet/be_main.c
