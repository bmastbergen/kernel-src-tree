perf/x86/intel: Avoid spamming kernel log for BTS buffer failure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [x86] perf/intel: Avoid spamming kernel log for BTS buffer failure (Jiri Olsa) [1134356]
Rebuild_FUZZ: 96.77%
commit-author David Rientjes <rientjes@google.com>
commit 4485154138f6ffa5b252cb490aba3e8eb30124e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/44851541.failed

It's unnecessary to excessively spam the kernel log anytime the BTS buffer
cannot be allocated, so make this allocation __GFP_NOWARN.

The user probably will want to at least find some artifact that the
allocation has failed in the past, probably due to fragmentation because
of its large size, when it's not allocated at bootstrap.  Thus, add a
WARN_ONCE() so something is left behind for them to understand why perf
commnads that require PEBS is not working properly.

	Signed-off-by: David Rientjes <rientjes@google.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/alpine.DEB.2.02.1406301600460.26302@chino.kir.corp.google.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 4485154138f6ffa5b252cb490aba3e8eb30124e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_intel_ds.c
diff --cc arch/x86/kernel/cpu/perf_event_intel_ds.c
index 65fd26647ca7,696ade311ded..000000000000
--- a/arch/x86/kernel/cpu/perf_event_intel_ds.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_ds.c
@@@ -311,9 -311,11 +311,16 @@@ static int alloc_bts_buffer(int cpu
  	if (!x86_pmu.bts)
  		return 0;
  
++<<<<<<< HEAD
 +	buffer = kmalloc_node(BTS_BUFFER_SIZE, GFP_KERNEL | __GFP_ZERO, node);
 +	if (unlikely(!buffer))
++=======
+ 	buffer = kzalloc_node(BTS_BUFFER_SIZE, GFP_KERNEL | __GFP_NOWARN, node);
+ 	if (unlikely(!buffer)) {
+ 		WARN_ONCE(1, "%s: BTS buffer allocation failure\n", __func__);
++>>>>>>> 4485154138f6 (perf/x86/intel: Avoid spamming kernel log for BTS buffer failure)
  		return -ENOMEM;
+ 	}
  
  	max = BTS_BUFFER_SIZE / BTS_RECORD_SIZE;
  	thresh = max / 16;
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_ds.c
