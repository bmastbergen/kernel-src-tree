ext4: remove i_mutex from ext4_file_sync()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jan Kara <jack@suse.cz>
commit 92e6222dfb85db780ebd8caea6a3f9326c375bc0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/92e6222d.failed

After removal of ext4_flush_unwritten_io() call, ext4_file_sync()
doesn't need i_mutex anymore. Forcing of transaction commits doesn't
need i_mutex as there's nothing inode specific in that code apart from
grabbing transaction ids from the inode. So remove the lock.

	Reviewed-by: Zheng Liu <wenqing.lz@taobao.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
	Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
(cherry picked from commit 92e6222dfb85db780ebd8caea6a3f9326c375bc0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/fsync.c
diff --cc fs/ext4/fsync.c
index 427b22866c38,fc938ebbddec..000000000000
--- a/fs/ext4/fsync.c
+++ b/fs/ext4/fsync.c
@@@ -124,30 -98,19 +124,46 @@@ int ext4_sync_file(struct file *file, l
  
  	trace_ext4_sync_file_enter(file, datasync);
  
++<<<<<<< HEAD
 +	ret = filemap_write_and_wait_range(inode->i_mapping, start, end);
 +	if (ret)
 +		return ret;
 +	mutex_lock(&inode->i_mutex);
 +
 +	if (inode->i_sb->s_flags & MS_RDONLY) {
 +		/* Make sure that we read updated s_mount_flags value */
 +		smp_rmb();
 +		if (EXT4_SB(inode->i_sb)->s_mount_flags & EXT4_MF_FS_ABORTED)
 +			ret = -EROFS;
 +		goto out;
 +	}
 +
 +	ret = ext4_flush_unwritten_io(inode);
 +	if (ret < 0)
 +		goto out;
 +
 +	if (!journal) {
 +		ret = __sync_inode(inode, datasync);
 +		if (!ret && !hlist_empty(&inode->i_dentry))
 +			ret = ext4_sync_parent(inode);
 +		goto out;
 +	}
 +
++=======
+ 	if (inode->i_sb->s_flags & MS_RDONLY)
+ 		goto out;
+ 
+ 	if (!journal) {
+ 		ret = generic_file_fsync(file, start, end, datasync);
+ 		if (!ret && !hlist_empty(&inode->i_dentry))
+ 			ret = ext4_sync_parent(inode);
+ 		goto out;
+ 	}
+ 
+ 	ret = filemap_write_and_wait_range(inode->i_mapping, start, end);
+ 	if (ret)
+ 		return ret;
++>>>>>>> 92e6222dfb85 (ext4: remove i_mutex from ext4_file_sync())
  	/*
  	 * data=writeback,ordered:
  	 *  The caller's filemap_fdatawrite()/wait will sync the data.
@@@ -177,8 -140,7 +193,12 @@@
  		if (!ret)
  			ret = err;
  	}
++<<<<<<< HEAD
 + out:
 +	mutex_unlock(&inode->i_mutex);
++=======
+ out:
++>>>>>>> 92e6222dfb85 (ext4: remove i_mutex from ext4_file_sync())
  	trace_ext4_sync_file_exit(inode, ret);
  	return ret;
  }
* Unmerged path fs/ext4/fsync.c
