perf tests: Add dwarf unwind test on ARM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/tests: Add dwarf unwind test on ARM (Jiri Olsa) [1134356]
Rebuild_FUZZ: 97.50%
commit-author Jean Pihet <jean.pihet@linaro.org>
commit 90fa9deb32b908fb258225ab562c4ef7ae8dd35a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/90fa9deb.failed

Adding dwarf unwind test, that setups live machine data over
the perf test thread and does the remote unwind.

Need to use -fno-optimize-sibling-calls for test compilation,
otherwise 'krava_*' function calls are optimized into jumps
and omitted from the stack unwind.

So far it was enabled only for x86.

	Signed-off-by: Jean Pihet <jean.pihet@linaro.org>
	Reviewed-by: Will Deacon <will.deacon@arm.com>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1400229672-16104-3-git-send-email-jean.pihet@linaro.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit 90fa9deb32b908fb258225ab562c4ef7ae8dd35a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
#	tools/perf/arch/arm/Makefile
#	tools/perf/arch/arm/include/perf_regs.h
#	tools/perf/config/Makefile
#	tools/perf/tests/builtin-test.c
#	tools/perf/tests/tests.h
diff --cc tools/perf/Makefile.perf
index 01fd40359345,dea2d633c374..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -412,6 -410,13 +412,16 @@@ endi
  LIB_OBJS += $(OUTPUT)tests/code-reading.o
  LIB_OBJS += $(OUTPUT)tests/sample-parsing.o
  LIB_OBJS += $(OUTPUT)tests/parse-no-sample-id-all.o
++<<<<<<< HEAD
++=======
+ ifndef NO_DWARF_UNWIND
+ ifeq ($(ARCH),$(filter $(ARCH),x86 arm))
+ LIB_OBJS += $(OUTPUT)tests/dwarf-unwind.o
+ endif
+ endif
+ LIB_OBJS += $(OUTPUT)tests/mmap-thread-lookup.o
+ LIB_OBJS += $(OUTPUT)tests/thread-mg-share.o
++>>>>>>> 90fa9deb32b9 (perf tests: Add dwarf unwind test on ARM)
  
  BUILTIN_OBJS += $(OUTPUT)builtin-annotate.o
  BUILTIN_OBJS += $(OUTPUT)builtin-bench.o
diff --cc tools/perf/arch/arm/Makefile
index 15130b50dfe3,221f21d5ca28..000000000000
--- a/tools/perf/arch/arm/Makefile
+++ b/tools/perf/arch/arm/Makefile
@@@ -2,3 -2,8 +2,11 @@@ ifndef NO_DWAR
  PERF_HAVE_DWARF_REGS := 1
  LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/dwarf-regs.o
  endif
++<<<<<<< HEAD
++=======
+ ifndef NO_LIBUNWIND
+ LIB_OBJS += $(OUTPUT)arch/$(ARCH)/util/unwind-libunwind.o
+ LIB_OBJS += $(OUTPUT)arch/$(ARCH)/tests/regs_load.o
+ LIB_OBJS += $(OUTPUT)arch/$(ARCH)/tests/dwarf-unwind.o
+ endif
++>>>>>>> 90fa9deb32b9 (perf tests: Add dwarf unwind test on ARM)
diff --cc tools/perf/config/Makefile
index 8a0483155189,729bbdf5cec7..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -47,6 -12,77 +47,80 @@@ obj-perf := $(abspath $(obj-perf))
  endif
  
  LIB_INCLUDE := $(srctree)/tools/lib/
++<<<<<<< HEAD
++=======
+ CFLAGS := $(EXTRA_CFLAGS) $(EXTRA_WARNINGS)
+ 
+ include $(src-perf)/config/Makefile.arch
+ 
+ NO_PERF_REGS := 1
+ 
+ # Additional ARCH settings for x86
+ ifeq ($(ARCH),x86)
+   ifeq (${IS_X86_64}, 1)
+     CFLAGS += -DHAVE_ARCH_X86_64_SUPPORT
+     ARCH_INCLUDE = ../../arch/x86/lib/memcpy_64.S ../../arch/x86/lib/memset_64.S
+     LIBUNWIND_LIBS = -lunwind -lunwind-x86_64
+   else
+     LIBUNWIND_LIBS = -lunwind -lunwind-x86
+   endif
+   NO_PERF_REGS := 0
+ endif
+ 
+ ifeq ($(ARCH),arm)
+   NO_PERF_REGS := 0
+   LIBUNWIND_LIBS = -lunwind -lunwind-arm
+ endif
+ 
+ ifeq ($(ARCH),arm64)
+   NO_PERF_REGS := 0
+   LIBUNWIND_LIBS = -lunwind -lunwind-aarch64
+ endif
+ 
+ # So far there's only x86 and arm libdw unwind support merged in perf.
+ # Disable it on all other architectures in case libdw unwind
+ # support is detected in system. Add supported architectures
+ # to the check.
+ ifneq ($(ARCH),$(filter $(ARCH),x86 arm))
+   NO_LIBDW_DWARF_UNWIND := 1
+ endif
+ 
+ ifeq ($(LIBUNWIND_LIBS),)
+   NO_LIBUNWIND := 1
+ else
+   #
+   # For linking with debug library, run like:
+   #
+   #   make DEBUG=1 LIBUNWIND_DIR=/opt/libunwind/
+   #
+   ifdef LIBUNWIND_DIR
+     LIBUNWIND_CFLAGS  = -I$(LIBUNWIND_DIR)/include
+     LIBUNWIND_LDFLAGS = -L$(LIBUNWIND_DIR)/lib
+   endif
+   LIBUNWIND_LDFLAGS += $(LIBUNWIND_LIBS)
+ 
+   # Set per-feature check compilation flags
+   FEATURE_CHECK_CFLAGS-libunwind = $(LIBUNWIND_CFLAGS)
+   FEATURE_CHECK_LDFLAGS-libunwind = $(LIBUNWIND_LDFLAGS)
+   FEATURE_CHECK_CFLAGS-libunwind-debug-frame = $(LIBUNWIND_CFLAGS)
+   FEATURE_CHECK_LDFLAGS-libunwind-debug-frame = $(LIBUNWIND_LDFLAGS)
+ endif
+ 
+ ifeq ($(NO_PERF_REGS),0)
+   CFLAGS += -DHAVE_PERF_REGS_SUPPORT
+ endif
+ 
+ ifndef NO_LIBELF
+   # for linking with debug library, run like:
+   # make DEBUG=1 LIBDW_DIR=/opt/libdw/
+   ifdef LIBDW_DIR
+     LIBDW_CFLAGS  := -I$(LIBDW_DIR)/include
+     LIBDW_LDFLAGS := -L$(LIBDW_DIR)/lib
+   endif
+   FEATURE_CHECK_CFLAGS-libdw-dwarf-unwind := $(LIBDW_CFLAGS)
+   FEATURE_CHECK_LDFLAGS-libdw-dwarf-unwind := $(LIBDW_LDFLAGS) -ldw
+ endif
++>>>>>>> 90fa9deb32b9 (perf tests: Add dwarf unwind test on ARM)
  
  # include ARCH specific config
  -include $(src-perf)/arch/$(ARCH)/Makefile
diff --cc tools/perf/tests/builtin-test.c
index 1e67437fb4ca,5e0764b09317..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -115,6 -115,26 +115,29 @@@ static struct test 
  		.desc = "Test parsing with no sample_id_all bit set",
  		.func = test__parse_no_sample_id_all,
  	},
++<<<<<<< HEAD
++=======
+ #if defined(__x86_64__) || defined(__i386__) || defined(__arm__)
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
+ 	{
+ 		.desc = "Test dwarf unwind",
+ 		.func = test__dwarf_unwind,
+ 	},
+ #endif
+ #endif
+ 	{
+ 		.desc = "Test filtering hist entries",
+ 		.func = test__hists_filter,
+ 	},
+ 	{
+ 		.desc = "Test mmap thread lookup",
+ 		.func = test__mmap_thread_lookup,
+ 	},
+ 	{
+ 		.desc = "Test thread mg sharing",
+ 		.func = test__thread_mg_share,
+ 	},
++>>>>>>> 90fa9deb32b9 (perf tests: Add dwarf unwind test on ARM)
  	{
  		.func = NULL,
  	},
diff --cc tools/perf/tests/tests.h
index e0ac713857ba,8f91fb051ef1..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -40,5 -40,17 +40,16 @@@ int test__code_reading(void)
  int test__sample_parsing(void);
  int test__keep_tracking(void);
  int test__parse_no_sample_id_all(void);
 -int test__dwarf_unwind(void);
 -int test__hists_filter(void);
 -int test__mmap_thread_lookup(void);
 -int test__thread_mg_share(void);
  
++<<<<<<< HEAD
++=======
+ #if defined(__x86_64__) || defined(__i386__) || defined(__arm__)
+ #ifdef HAVE_DWARF_UNWIND_SUPPORT
+ struct thread;
+ struct perf_sample;
+ int test__arch_unwind_sample(struct perf_sample *sample,
+ 			     struct thread *thread);
+ #endif
+ #endif
++>>>>>>> 90fa9deb32b9 (perf tests: Add dwarf unwind test on ARM)
  #endif /* TESTS_H */
* Unmerged path tools/perf/arch/arm/include/perf_regs.h
* Unmerged path tools/perf/Makefile.perf
* Unmerged path tools/perf/arch/arm/Makefile
* Unmerged path tools/perf/arch/arm/include/perf_regs.h
diff --git a/tools/perf/arch/arm/tests/dwarf-unwind.c b/tools/perf/arch/arm/tests/dwarf-unwind.c
new file mode 100644
index 000000000000..9f870d27cb39
--- /dev/null
+++ b/tools/perf/arch/arm/tests/dwarf-unwind.c
@@ -0,0 +1,60 @@
+#include <string.h>
+#include "perf_regs.h"
+#include "thread.h"
+#include "map.h"
+#include "event.h"
+#include "tests/tests.h"
+
+#define STACK_SIZE 8192
+
+static int sample_ustack(struct perf_sample *sample,
+			 struct thread *thread, u64 *regs)
+{
+	struct stack_dump *stack = &sample->user_stack;
+	struct map *map;
+	unsigned long sp;
+	u64 stack_size, *buf;
+
+	buf = malloc(STACK_SIZE);
+	if (!buf) {
+		pr_debug("failed to allocate sample uregs data\n");
+		return -1;
+	}
+
+	sp = (unsigned long) regs[PERF_REG_ARM_SP];
+
+	map = map_groups__find(thread->mg, MAP__VARIABLE, (u64) sp);
+	if (!map) {
+		pr_debug("failed to get stack map\n");
+		free(buf);
+		return -1;
+	}
+
+	stack_size = map->end - sp;
+	stack_size = stack_size > STACK_SIZE ? STACK_SIZE : stack_size;
+
+	memcpy(buf, (void *) sp, stack_size);
+	stack->data = (char *) buf;
+	stack->size = stack_size;
+	return 0;
+}
+
+int test__arch_unwind_sample(struct perf_sample *sample,
+			     struct thread *thread)
+{
+	struct regs_dump *regs = &sample->user_regs;
+	u64 *buf;
+
+	buf = calloc(1, sizeof(u64) * PERF_REGS_MAX);
+	if (!buf) {
+		pr_debug("failed to allocate sample uregs data\n");
+		return -1;
+	}
+
+	perf_regs_load(buf);
+	regs->abi  = PERF_SAMPLE_REGS_ABI;
+	regs->regs = buf;
+	regs->mask = PERF_REGS_MASK;
+
+	return sample_ustack(sample, thread, buf);
+}
* Unmerged path tools/perf/config/Makefile
* Unmerged path tools/perf/tests/builtin-test.c
* Unmerged path tools/perf/tests/tests.h
