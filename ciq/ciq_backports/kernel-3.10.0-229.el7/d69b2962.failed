perf tools: Reset output/sort order to default

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Reset output/sort order to default (Jiri Olsa) [1134356]
Rebuild_FUZZ: 93.02%
commit-author Namhyung Kim <namhyung@kernel.org>
commit d69b2962a0aebd431cdda939f4418dd606e2f77e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/d69b2962.failed

When reset_output_field() is called, also reset field/sort order to
NULL so that it can have the default values.  It's needed for testing.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
CC: Arun Sharma <asharma@fb.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
Link: http://lkml.kernel.org/r/1401335910-16832-26-git-send-email-namhyung@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit d69b2962a0aebd431cdda939f4418dd606e2f77e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/sort.c
diff --cc tools/perf/util/sort.c
index 916652af8304,254f583a52ab..000000000000
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@@ -1304,6 -1440,151 +1304,156 @@@ void sort__setup_elide(FILE *output
  			return;
  	}
  
++<<<<<<< HEAD
 +	list_for_each_entry(se, &hist_entry__sort_list, list)
 +		se->elide = false;
++=======
+ 	perf_hpp__for_each_format(fmt) {
+ 		if (!perf_hpp__is_sort_entry(fmt))
+ 			continue;
+ 
+ 		hse = container_of(fmt, struct hpp_sort_entry, hpp);
+ 		hse->se->elide = false;
+ 	}
+ }
+ 
+ static int output_field_add(char *tok)
+ {
+ 	unsigned int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(common_sort_dimensions); i++) {
+ 		struct sort_dimension *sd = &common_sort_dimensions[i];
+ 
+ 		if (strncasecmp(tok, sd->name, strlen(tok)))
+ 			continue;
+ 
+ 		return __sort_dimension__add_output(sd);
+ 	}
+ 
+ 	for (i = 0; i < ARRAY_SIZE(hpp_sort_dimensions); i++) {
+ 		struct hpp_dimension *hd = &hpp_sort_dimensions[i];
+ 
+ 		if (strncasecmp(tok, hd->name, strlen(tok)))
+ 			continue;
+ 
+ 		return __hpp_dimension__add_output(hd);
+ 	}
+ 
+ 	for (i = 0; i < ARRAY_SIZE(bstack_sort_dimensions); i++) {
+ 		struct sort_dimension *sd = &bstack_sort_dimensions[i];
+ 
+ 		if (strncasecmp(tok, sd->name, strlen(tok)))
+ 			continue;
+ 
+ 		return __sort_dimension__add_output(sd);
+ 	}
+ 
+ 	for (i = 0; i < ARRAY_SIZE(memory_sort_dimensions); i++) {
+ 		struct sort_dimension *sd = &memory_sort_dimensions[i];
+ 
+ 		if (strncasecmp(tok, sd->name, strlen(tok)))
+ 			continue;
+ 
+ 		return __sort_dimension__add_output(sd);
+ 	}
+ 
+ 	return -ESRCH;
+ }
+ 
+ static void reset_dimensions(void)
+ {
+ 	unsigned int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(common_sort_dimensions); i++)
+ 		common_sort_dimensions[i].taken = 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(hpp_sort_dimensions); i++)
+ 		hpp_sort_dimensions[i].taken = 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(bstack_sort_dimensions); i++)
+ 		bstack_sort_dimensions[i].taken = 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(memory_sort_dimensions); i++)
+ 		memory_sort_dimensions[i].taken = 0;
+ }
+ 
+ static int __setup_output_field(void)
+ {
+ 	char *tmp, *tok, *str;
+ 	int ret = 0;
+ 
+ 	if (field_order == NULL)
+ 		return 0;
+ 
+ 	reset_dimensions();
+ 
+ 	str = strdup(field_order);
+ 	if (str == NULL) {
+ 		error("Not enough memory to setup output fields");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	for (tok = strtok_r(str, ", ", &tmp);
+ 			tok; tok = strtok_r(NULL, ", ", &tmp)) {
+ 		ret = output_field_add(tok);
+ 		if (ret == -EINVAL) {
+ 			error("Invalid --fields key: `%s'", tok);
+ 			break;
+ 		} else if (ret == -ESRCH) {
+ 			error("Unknown --fields key: `%s'", tok);
+ 			break;
+ 		}
+ 	}
+ 
+ 	free(str);
+ 	return ret;
+ }
+ 
+ int setup_sorting(void)
+ {
+ 	int err;
+ 
+ 	err = __setup_sorting();
+ 	if (err < 0)
+ 		return err;
+ 
+ 	if (parent_pattern != default_parent_pattern) {
+ 		err = sort_dimension__add("parent");
+ 		if (err < 0)
+ 			return err;
+ 	}
+ 
+ 	reset_dimensions();
+ 
+ 	/*
+ 	 * perf diff doesn't use default hpp output fields.
+ 	 */
+ 	if (sort__mode != SORT_MODE__DIFF)
+ 		perf_hpp__init();
+ 
+ 	err = __setup_output_field();
+ 	if (err < 0)
+ 		return err;
+ 
+ 	/* copy sort keys to output fields */
+ 	perf_hpp__setup_output_field();
+ 	/* and then copy output fields to sort keys */
+ 	perf_hpp__append_sort_keys();
+ 
+ 	return 0;
+ }
+ 
+ void reset_output_field(void)
+ {
+ 	sort__need_collapse = 0;
+ 	sort__has_parent = 0;
+ 	sort__has_sym = 0;
+ 	sort__has_dso = 0;
+ 
+ 	field_order = NULL;
+ 	sort_order = NULL;
+ 
+ 	reset_dimensions();
+ 	perf_hpp__reset_output_field();
++>>>>>>> d69b2962a0ae (perf tools: Reset output/sort order to default)
  }
* Unmerged path tools/perf/util/sort.c
