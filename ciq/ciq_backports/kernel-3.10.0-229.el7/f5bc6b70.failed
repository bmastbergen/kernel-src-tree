powerpc/powernv: Move PNV_EEH_STATE_ENABLED around

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] powernv: Move PNV_EEH_STATE_ENABLED around (Don Zickus) [1127366]
Rebuild_FUZZ: 91.30%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit f5bc6b70d2f1e4d7c6d2956e9e66a6a55821460d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f5bc6b70.failed

The flag PNV_EEH_STATE_ENABLED is put into pnv_phb::eeh_state,
which is protected by CONFIG_EEH. We needn't that. Instead, we
can have pnv_phb::flags and maintain all flags there, which is
the purpose of the patch. The patch also renames PNV_EEH_STATE_ENABLED
to PNV_PHB_FLAG_EEH.

	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit f5bc6b70d2f1e4d7c6d2956e9e66a6a55821460d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/pci.h
diff --cc arch/powerpc/platforms/powernv/pci.h
index 48749fa60351,94e3495b7f2b..000000000000
--- a/arch/powerpc/platforms/powernv/pci.h
+++ b/arch/powerpc/platforms/powernv/pci.h
@@@ -78,12 -81,10 +78,17 @@@ struct pnv_eeh_ops 
  	int (*configure_bridge)(struct eeh_pe *pe);
  	int (*next_error)(struct eeh_pe **pe);
  };
++<<<<<<< HEAD
 +
 +#define PNV_EEH_STATE_ENABLED	(1 << 0)	/* EEH enabled	*/
 +#define PNV_EEH_STATE_REMOVED	(1 << 1)	/* PHB removed	*/
 +
++=======
++>>>>>>> f5bc6b70d2f1 (powerpc/powernv: Move PNV_EEH_STATE_ENABLED around)
  #endif /* CONFIG_EEH */
  
+ #define PNV_PHB_FLAG_EEH	(1 << 0)
+ 
  struct pnv_phb {
  	struct pci_controller	*hose;
  	enum pnv_phb_type	type;
diff --git a/arch/powerpc/platforms/powernv/eeh-ioda.c b/arch/powerpc/platforms/powernv/eeh-ioda.c
index be33a16408be..dfe5b2bc5a45 100644
--- a/arch/powerpc/platforms/powernv/eeh-ioda.c
+++ b/arch/powerpc/platforms/powernv/eeh-ioda.c
@@ -163,7 +163,7 @@ static int ioda_eeh_post_init(struct pci_controller *hose)
 	}
 #endif
 
-	phb->eeh_state |= PNV_EEH_STATE_ENABLED;
+	phb->flags |= PNV_PHB_FLAG_EEH;
 
 	return 0;
 }
diff --git a/arch/powerpc/platforms/powernv/pci.c b/arch/powerpc/platforms/powernv/pci.c
index 6aa0602c0329..0e55fbd2e3ee 100644
--- a/arch/powerpc/platforms/powernv/pci.c
+++ b/arch/powerpc/platforms/powernv/pci.c
@@ -426,7 +426,7 @@ int pnv_pci_cfg_read(struct device_node *dn,
 	if (phb_pe && (phb_pe->state & EEH_PE_ISOLATED))
 		return PCIBIOS_SUCCESSFUL;
 
-	if (phb->eeh_state & PNV_EEH_STATE_ENABLED) {
+	if (phb->flags & PNV_PHB_FLAG_EEH) {
 		if (*val == EEH_IO_ERROR_VALUE(size) &&
 		    eeh_dev_check_failure(of_node_to_eeh_dev(dn)))
 			return PCIBIOS_DEVICE_NOT_FOUND;
@@ -464,12 +464,8 @@ int pnv_pci_cfg_write(struct device_node *dn,
 	}
 
 	/* Check if the PHB got frozen due to an error (no response) */
-#ifdef CONFIG_EEH
-	if (!(phb->eeh_state & PNV_EEH_STATE_ENABLED))
+	if (!(phb->flags & PNV_PHB_FLAG_EEH))
 		pnv_pci_config_check_eeh(phb, dn);
-#else
-	pnv_pci_config_check_eeh(phb, dn);
-#endif
 
 	return PCIBIOS_SUCCESSFUL;
 }
* Unmerged path arch/powerpc/platforms/powernv/pci.h
