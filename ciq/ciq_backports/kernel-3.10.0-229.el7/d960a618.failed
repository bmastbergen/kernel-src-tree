netlabel: fix the catmap walking functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Paul Moore <pmoore@redhat.com>
commit d960a6184a92c8da70d26355bfcb5bd8ad637743
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/d960a618.failed

The two NetLabel LSM secattr catmap walk functions didn't handle
certain edge conditions correctly, causing incorrect security labels
to be generated in some cases.  This patch corrects these problems and
converts the functions to use the new _netlbl_secattr_catmap_getnode()
function in order to reduce the amount of repeated code.

	Cc: stable@vger.kernel.org
	Signed-off-by: Paul Moore <pmoore@redhat.com>
	Tested-by: Casey Schaufler <casey@schaufler-ca.com>
(cherry picked from commit d960a6184a92c8da70d26355bfcb5bd8ad637743)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netlabel/netlabel_kapi.c
diff --cc net/netlabel/netlabel_kapi.c
index 82c7fca7f619,bc3883814890..000000000000
--- a/net/netlabel/netlabel_kapi.c
+++ b/net/netlabel/netlabel_kapi.c
@@@ -406,6 -405,70 +406,73 @@@ out_entry
   * Security Attribute Functions
   */
  
++<<<<<<< HEAD
++=======
+ #define _CM_F_NONE	0x00000000
+ #define _CM_F_ALLOC	0x00000001
+ #define _CM_F_WALK	0x00000002
+ 
+ /**
+  * _netlbl_secattr_catmap_getnode - Get a individual node from a catmap
+  * @catmap: pointer to the category bitmap
+  * @offset: the requested offset
+  * @cm_flags: catmap flags, see _CM_F_*
+  * @gfp_flags: memory allocation flags
+  *
+  * Description:
+  * Iterate through the catmap looking for the node associated with @offset.
+  * If the _CM_F_ALLOC flag is set in @cm_flags and there is no associated node,
+  * one will be created and inserted into the catmap.  If the _CM_F_WALK flag is
+  * set in @cm_flags and there is no associated node, the next highest node will
+  * be returned.  Returns a pointer to the node on success, NULL on failure.
+  *
+  */
+ static struct netlbl_lsm_secattr_catmap *_netlbl_secattr_catmap_getnode(
+ 				struct netlbl_lsm_secattr_catmap **catmap,
+ 				u32 offset,
+ 				unsigned int cm_flags,
+ 				gfp_t gfp_flags)
+ {
+ 	struct netlbl_lsm_secattr_catmap *iter = *catmap;
+ 	struct netlbl_lsm_secattr_catmap *prev = NULL;
+ 
+ 	if (iter == NULL)
+ 		goto secattr_catmap_getnode_alloc;
+ 	if (offset < iter->startbit)
+ 		goto secattr_catmap_getnode_walk;
+ 	while (iter && offset >= (iter->startbit + NETLBL_CATMAP_SIZE)) {
+ 		prev = iter;
+ 		iter = iter->next;
+ 	}
+ 	if (iter == NULL || offset < iter->startbit)
+ 		goto secattr_catmap_getnode_walk;
+ 
+ 	return iter;
+ 
+ secattr_catmap_getnode_walk:
+ 	if (cm_flags & _CM_F_WALK)
+ 		return iter;
+ secattr_catmap_getnode_alloc:
+ 	if (!(cm_flags & _CM_F_ALLOC))
+ 		return NULL;
+ 
+ 	iter = netlbl_secattr_catmap_alloc(gfp_flags);
+ 	if (iter == NULL)
+ 		return NULL;
+ 	iter->startbit = offset & ~(NETLBL_CATMAP_SIZE - 1);
+ 
+ 	if (prev == NULL) {
+ 		iter->next = *catmap;
+ 		*catmap = iter;
+ 	} else {
+ 		iter->next = prev->next;
+ 		prev->next = iter;
+ 	}
+ 
+ 	return iter;
+ }
+ 
++>>>>>>> d960a6184a92 (netlabel: fix the catmap walking functions)
  /**
   * netlbl_secattr_catmap_walk - Walk a LSM secattr catmap looking for a bit
   * @catmap: the category bitmap
* Unmerged path net/netlabel/netlabel_kapi.c
