new helper: kfree_put_link()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [fs] cifs: new helper kfree_put_link() (Sachin Prabhu) [1082049]
Rebuild_FUZZ: 88.52%
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 87dc800be2499128efb3a6f059d75dc8e1e6d503
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/87dc800b.failed

duplicated to hell and back...

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 87dc800be2499128efb3a6f059d75dc8e1e6d503)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/libfs.c
diff --cc fs/libfs.c
index 2850272abba9,8c5018493154..000000000000
--- a/fs/libfs.c
+++ b/fs/libfs.c
@@@ -1013,46 -994,11 +1014,57 @@@ int noop_fsync(struct file *file, loff_
  }
  EXPORT_SYMBOL(noop_fsync);
  
++<<<<<<< HEAD
 +/*
 + * nop .set_page_dirty method so that people can use .page_mkwrite on
 + * anon inodes.
 + */
 +static int anon_set_page_dirty(struct page *page)
 +{
 +	return 0;
 +};
 +
 +/*
 + * A single inode exists for all anon_inode files. Contrary to pipes,
 + * anon_inode inodes have no associated per-instance data, so we need
 + * only allocate one of them.
 + */
 +struct inode *alloc_anon_inode(struct super_block *s)
 +{
 +	static const struct address_space_operations anon_aops = {
 +		.set_page_dirty = anon_set_page_dirty,
 +	};
 +	struct inode *inode = new_inode_pseudo(s);
 +
 +	if (!inode)
 +		return ERR_PTR(-ENOMEM);
 +
 +	inode->i_ino = get_next_ino();
 +	inode->i_mapping->a_ops = &anon_aops;
 +
 +	/*
 +	 * Mark the inode dirty from the very beginning,
 +	 * that way it will never be moved to the dirty
 +	 * list because mark_inode_dirty() will think
 +	 * that it already _is_ on the dirty list.
 +	 */
 +	inode->i_state = I_DIRTY;
 +	inode->i_mode = S_IRUSR | S_IWUSR;
 +	inode->i_uid = current_fsuid();
 +	inode->i_gid = current_fsgid();
 +	inode->i_flags |= S_PRIVATE;
 +	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;
 +	return inode;
 +}
 +EXPORT_SYMBOL(alloc_anon_inode);
 +
++=======
+ void kfree_put_link(struct dentry *dentry, struct nameidata *nd,
+ 				void *cookie)
+ {
+ 	char *s = nd_get_link(nd);
+ 	if (!IS_ERR(s))
+ 		kfree(s);
+ }
+ EXPORT_SYMBOL(kfree_put_link);
++>>>>>>> 87dc800be249 (new helper: kfree_put_link())
diff --git a/fs/cifs/cifsfs.c b/fs/cifs/cifsfs.c
index aaad06ae9573..2411829a8023 100644
--- a/fs/cifs/cifsfs.c
+++ b/fs/cifs/cifsfs.c
@@ -874,7 +874,7 @@ const struct inode_operations cifs_file_inode_ops = {
 const struct inode_operations cifs_symlink_inode_ops = {
 	.readlink = generic_readlink,
 	.follow_link = cifs_follow_link,
-	.put_link = cifs_put_link,
+	.put_link = kfree_put_link,
 	.permission = cifs_permission,
 	/* BB add the following two eventually */
 	/* revalidate: cifs_revalidate,
diff --git a/fs/cifs/cifsfs.h b/fs/cifs/cifsfs.h
index 729d31b16657..cc77885d3726 100644
--- a/fs/cifs/cifsfs.h
+++ b/fs/cifs/cifsfs.h
@@ -115,8 +115,6 @@ extern struct vfsmount *cifs_dfs_d_automount(struct path *path);
 
 /* Functions related to symlinks */
 extern void *cifs_follow_link(struct dentry *direntry, struct nameidata *nd);
-extern void cifs_put_link(struct dentry *direntry,
-			  struct nameidata *nd, void *);
 extern int cifs_readlink(struct dentry *direntry, char __user *buffer,
 			 int buflen);
 extern int cifs_symlink(struct inode *inode, struct dentry *direntry,
diff --git a/fs/cifs/link.c b/fs/cifs/link.c
index 79fcbc1efe28..e22927ba0a2d 100644
--- a/fs/cifs/link.c
+++ b/fs/cifs/link.c
@@ -594,10 +594,3 @@ symlink_exit:
 	free_xid(xid);
 	return rc;
 }
-
-void cifs_put_link(struct dentry *direntry, struct nameidata *nd, void *cookie)
-{
-	char *p = nd_get_link(nd);
-	if (!IS_ERR(p))
-		kfree(p);
-}
diff --git a/fs/ecryptfs/inode.c b/fs/ecryptfs/inode.c
index 4cbbf63f4eb5..445bd305c05c 100644
--- a/fs/ecryptfs/inode.c
+++ b/fs/ecryptfs/inode.c
@@ -704,16 +704,6 @@ out:
 	return NULL;
 }
 
-static void
-ecryptfs_put_link(struct dentry *dentry, struct nameidata *nd, void *ptr)
-{
-	char *buf = nd_get_link(nd);
-	if (!IS_ERR(buf)) {
-		/* Free the char* */
-		kfree(buf);
-	}
-}
-
 /**
  * upper_size_to_lower_size
  * @crypt_stat: Crypt_stat associated with file
@@ -1122,7 +1112,7 @@ out:
 const struct inode_operations ecryptfs_symlink_iops = {
 	.readlink = generic_readlink,
 	.follow_link = ecryptfs_follow_link,
-	.put_link = ecryptfs_put_link,
+	.put_link = kfree_put_link,
 	.permission = ecryptfs_permission,
 	.setattr = ecryptfs_setattr,
 	.getattr = ecryptfs_getattr_link,
diff --git a/fs/gfs2/inode.c b/fs/gfs2/inode.c
index a885b7b18f7c..96954174fcce 100644
--- a/fs/gfs2/inode.c
+++ b/fs/gfs2/inode.c
@@ -1521,13 +1521,6 @@ out:
 	return NULL;
 }
 
-static void gfs2_put_link(struct dentry *dentry, struct nameidata *nd, void *p)
-{
-	char *s = nd_get_link(nd);
-	if (!IS_ERR(s))
-		kfree(s);
-}
-
 /**
  * gfs2_permission -
  * @inode: The inode
@@ -1893,7 +1886,7 @@ const struct inode_operations gfs2_dir_iops = {
 const struct inode_operations gfs2_symlink_iops = {
 	.readlink = generic_readlink,
 	.follow_link = gfs2_follow_link,
-	.put_link = gfs2_put_link,
+	.put_link = kfree_put_link,
 	.permission = gfs2_permission,
 	.setattr = gfs2_setattr,
 	.getattr = gfs2_getattr,
* Unmerged path fs/libfs.c
diff --git a/fs/proc/self.c b/fs/proc/self.c
index 6b6a993b5c25..ffeb202ec942 100644
--- a/fs/proc/self.c
+++ b/fs/proc/self.c
@@ -36,18 +36,10 @@ static void *proc_self_follow_link(struct dentry *dentry, struct nameidata *nd)
 	return NULL;
 }
 
-static void proc_self_put_link(struct dentry *dentry, struct nameidata *nd,
-				void *cookie)
-{
-	char *s = nd_get_link(nd);
-	if (!IS_ERR(s))
-		kfree(s);
-}
-
 static const struct inode_operations proc_self_inode_operations = {
 	.readlink	= proc_self_readlink,
 	.follow_link	= proc_self_follow_link,
-	.put_link	= proc_self_put_link,
+	.put_link	= kfree_put_link,
 };
 
 static unsigned self_inum;
diff --git a/include/linux/fs.h b/include/linux/fs.h
index e37b2d317cf2..21f2119711a0 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2555,6 +2555,7 @@ extern int __page_symlink(struct inode *inode, const char *symname, int len,
 		int nofs);
 extern int page_symlink(struct inode *inode, const char *symname, int len);
 extern const struct inode_operations page_symlink_inode_operations;
+extern void kfree_put_link(struct dentry *, struct nameidata *, void *);
 extern int generic_readlink(struct dentry *, char __user *, int);
 extern void generic_fillattr(struct inode *, struct kstat *);
 extern int vfs_getattr(struct path *, struct kstat *);
