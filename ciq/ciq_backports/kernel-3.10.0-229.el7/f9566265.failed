qlcnic: Fix TSS/RSS ring validation logic.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [ethernet] qlcnic: Fix TSS/RSS ring validation logic (Chad Dupuis) [1089352]
Rebuild_FUZZ: 98.80%
commit-author Himanshu Madhani <himanshu.madhani@qlogic.com>
commit f9566265d7b44fea789072dcfa9a454e7e433af6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f9566265.failed

o TSS/RSS ring validation does not take into account that either
  of these ring values can be 0. This patch fixes this validation
  and would fail set_channel operation if any of these ring value
  is 0. This regression was added as part of commit id
  34e8c406fda5b5a9d2e126a92bab84cd28e3b5fa ("qlcnic: refactor Tx/SDS
  ring calculation and validation in driver.")

	Signed-off-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f9566265d7b44fea789072dcfa9a454e7e433af6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
#	drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
#	drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
diff --cc drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
index 4a8a3f1b0345,fae1b7171576..000000000000
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
@@@ -2064,10 -2067,14 +2064,15 @@@ int qlcnic_83xx_configure_opmode(struc
  		if (qlcnic_83xx_config_vnic_opmode(adapter))
  			return -EIO;
  
 -		adapter->max_sds_rings = QLCNIC_MAX_VNIC_SDS_RINGS;
 -		adapter->max_tx_rings = QLCNIC_MAX_VNIC_TX_RINGS;
  	} else if (ret == QLC_83XX_DEFAULT_OPMODE) {
 -		ahw->nic_mode = QLCNIC_DEFAULT_MODE;
 +		ahw->nic_mode = QLC_83XX_DEFAULT_MODE;
  		adapter->nic_ops->init_driver = qlcnic_83xx_init_default_driver;
  		ahw->idc.state_entry = qlcnic_83xx_idc_ready_state_entry;
++<<<<<<< HEAD
++=======
+ 		adapter->max_sds_rings = QLCNIC_MAX_SDS_RINGS;
+ 		adapter->max_tx_rings = QLCNIC_MAX_TX_RINGS;
++>>>>>>> f9566265d7b4 (qlcnic: Fix TSS/RSS ring validation logic.)
  	} else {
  		return -EIO;
  	}
diff --cc drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
index b37ff7828969,78f5e815139e..000000000000
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
@@@ -664,6 -664,42 +664,45 @@@ qlcnic_set_ringparam(struct net_device 
  	return qlcnic_reset_context(adapter);
  }
  
++<<<<<<< HEAD
++=======
+ static int qlcnic_validate_ring_count(struct qlcnic_adapter *adapter,
+ 				      u8 rx_ring, u8 tx_ring)
+ {
+ 	if (rx_ring == 0 || tx_ring == 0)
+ 		return -EINVAL;
+ 
+ 	if (rx_ring != 0) {
+ 		if (rx_ring > adapter->max_sds_rings) {
+ 			netdev_err(adapter->netdev,
+ 				   "Invalid ring count, SDS ring count %d should not be greater than max %d driver sds rings.\n",
+ 				   rx_ring, adapter->max_sds_rings);
+ 			return -EINVAL;
+ 		}
+ 	}
+ 
+ 	 if (tx_ring != 0) {
+ 		if (qlcnic_82xx_check(adapter) &&
+ 		    (tx_ring > adapter->max_tx_rings)) {
+ 			netdev_err(adapter->netdev,
+ 				   "Invalid ring count, Tx ring count %d should not be greater than max %d driver Tx rings.\n",
+ 				   tx_ring, adapter->max_tx_rings);
+ 			return -EINVAL;
+ 		}
+ 
+ 		if (qlcnic_83xx_check(adapter) &&
+ 		    (tx_ring > QLCNIC_SINGLE_RING)) {
+ 			netdev_err(adapter->netdev,
+ 				   "Invalid ring count, Tx ring count %d should not be greater than %d driver Tx rings.\n",
+ 				   tx_ring, QLCNIC_SINGLE_RING);
+ 			 return -EINVAL;
+ 		}
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> f9566265d7b4 (qlcnic: Fix TSS/RSS ring validation logic.)
  static void qlcnic_get_channels(struct net_device *dev,
  		struct ethtool_channels *channel)
  {
diff --cc drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
index 0566a4688bc1,2c8cac0c6a55..000000000000
--- a/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
+++ b/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
@@@ -1140,14 -1168,19 +1140,22 @@@ qlcnic_initialize_nic(struct qlcnic_ada
  	adapter->ahw->max_mac_filters = nic_info.max_mac_filters;
  	adapter->ahw->max_mtu = nic_info.max_mtu;
  
 -	if (adapter->ahw->capabilities & BIT_6) {
 -		adapter->flags |= QLCNIC_ESWITCH_ENABLED;
 -		adapter->ahw->nic_mode = QLCNIC_VNIC_MODE;
 -		adapter->max_tx_rings = QLCNIC_MAX_HW_VNIC_TX_RINGS;
 -		adapter->max_sds_rings = QLCNIC_MAX_VNIC_SDS_RINGS;
 +	/* Disable NPAR for 83XX */
 +	if (qlcnic_83xx_check(adapter))
 +		return err;
  
++<<<<<<< HEAD
 +	if (adapter->ahw->capabilities & BIT_6)
 +		adapter->flags |= QLCNIC_ESWITCH_ENABLED;
 +	else
++=======
+ 		dev_info(&adapter->pdev->dev, "vNIC mode enabled.\n");
+ 	} else {
+ 		adapter->ahw->nic_mode = QLCNIC_DEFAULT_MODE;
+ 		adapter->max_tx_rings = QLCNIC_MAX_HW_TX_RINGS;
+ 		adapter->max_sds_rings = QLCNIC_MAX_SDS_RINGS;
++>>>>>>> f9566265d7b4 (qlcnic: Fix TSS/RSS ring validation logic.)
  		adapter->flags &= ~QLCNIC_ESWITCH_ENABLED;
 -	}
  
  	return err;
  }
* Unmerged path drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c
* Unmerged path drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c
* Unmerged path drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c
