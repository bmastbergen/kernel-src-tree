i40e: add xcast stats for port

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Shannon Nelson <shannon.nelson@intel.com>
commit 532d283d590d6c01457e71d59fdd5eb525a4d392
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/532d283d.failed

Add the missing unicast, multicast, and broadcast stats for the port.

Change-ID: Ifc366d7b7745f70eaac9d00eeb0694eb9ec076a9
	Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 532d283d590d6c01457e71d59fdd5eb525a4d392)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ethtool.c
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 4ad0ae53da96,df3917b68c99..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@@ -104,7 -104,12 +104,16 @@@ static int i40e_add_fdir_ethtool(struc
  static struct i40e_stats i40e_gstrings_stats[] = {
  	I40E_PF_STAT("rx_bytes", stats.eth.rx_bytes),
  	I40E_PF_STAT("tx_bytes", stats.eth.tx_bytes),
++<<<<<<< HEAD
 +	I40E_PF_STAT("rx_errors", stats.eth.rx_errors),
++=======
+ 	I40E_PF_STAT("rx_unicast", stats.eth.rx_unicast),
+ 	I40E_PF_STAT("tx_unicast", stats.eth.tx_unicast),
+ 	I40E_PF_STAT("rx_multicast", stats.eth.rx_multicast),
+ 	I40E_PF_STAT("tx_multicast", stats.eth.tx_multicast),
+ 	I40E_PF_STAT("rx_broadcast", stats.eth.rx_broadcast),
+ 	I40E_PF_STAT("tx_broadcast", stats.eth.tx_broadcast),
++>>>>>>> 532d283d590d (i40e: add xcast stats for port)
  	I40E_PF_STAT("tx_errors", stats.eth.tx_errors),
  	I40E_PF_STAT("rx_dropped", stats.eth.rx_discards),
  	I40E_PF_STAT("tx_dropped", stats.eth.tx_discards),
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 924a8f0d8b69,e9cd9bb16f39..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -822,166 -818,216 +822,373 @@@ void i40e_update_stats(struct i40e_vsi 
  	ons->tx_dropped = oes->tx_discards;
  	ns->tx_dropped = es->tx_discards;
  
 -	/* pull in a couple PF stats if this is the main vsi */
 +	/* Get the port data only if this is the main PF VSI */
  	if (vsi == pf->vsi[pf->lan_vsi]) {
 -		ns->rx_crc_errors = pf->stats.crc_errors;
 -		ns->rx_errors = pf->stats.crc_errors + pf->stats.illegal_bytes;
 -		ns->rx_length_errors = pf->stats.rx_length_errors;
 +		struct i40e_hw_port_stats *nsd = &pf->stats;
 +		struct i40e_hw_port_stats *osd = &pf->stats_offsets;
 +
 +		i40e_stat_update48(hw, I40E_GLPRT_GORCH(hw->port),
 +				   I40E_GLPRT_GORCL(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.rx_bytes, &nsd->eth.rx_bytes);
 +		i40e_stat_update48(hw, I40E_GLPRT_GOTCH(hw->port),
 +				   I40E_GLPRT_GOTCL(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.tx_bytes, &nsd->eth.tx_bytes);
 +		i40e_stat_update32(hw, I40E_GLPRT_RDPC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.rx_discards,
 +				   &nsd->eth.rx_discards);
 +		i40e_stat_update32(hw, I40E_GLPRT_TDPC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.tx_discards,
 +				   &nsd->eth.tx_discards);
 +		i40e_stat_update48(hw, I40E_GLPRT_MPRCH(hw->port),
 +				   I40E_GLPRT_MPRCL(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->eth.rx_multicast,
 +				   &nsd->eth.rx_multicast);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_TDOLD(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_dropped_link_down,
 +				   &nsd->tx_dropped_link_down);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_CRCERRS(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->crc_errors, &nsd->crc_errors);
 +		ns->rx_crc_errors = nsd->crc_errors;
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_ILLERRC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->illegal_bytes, &nsd->illegal_bytes);
 +		ns->rx_errors = nsd->crc_errors
 +				+ nsd->illegal_bytes;
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_MLFC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->mac_local_faults,
 +				   &nsd->mac_local_faults);
 +		i40e_stat_update32(hw, I40E_GLPRT_MRFC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->mac_remote_faults,
 +				   &nsd->mac_remote_faults);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_RLEC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_length_errors,
 +				   &nsd->rx_length_errors);
 +		ns->rx_length_errors = nsd->rx_length_errors;
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_LXONRXC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->link_xon_rx, &nsd->link_xon_rx);
 +		i40e_stat_update32(hw, I40E_GLPRT_LXONTXC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->link_xon_tx, &nsd->link_xon_tx);
 +		i40e_update_prio_xoff_rx(pf);  /* handles I40E_GLPRT_LXOFFRXC */
 +		i40e_stat_update32(hw, I40E_GLPRT_LXOFFTXC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->link_xoff_tx, &nsd->link_xoff_tx);
 +
 +		for (i = 0; i < 8; i++) {
 +			i40e_stat_update32(hw, I40E_GLPRT_PXONRXC(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xon_rx[i],
 +					   &nsd->priority_xon_rx[i]);
 +			i40e_stat_update32(hw, I40E_GLPRT_PXONTXC(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xon_tx[i],
 +					   &nsd->priority_xon_tx[i]);
 +			i40e_stat_update32(hw, I40E_GLPRT_PXOFFTXC(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xoff_tx[i],
 +					   &nsd->priority_xoff_tx[i]);
 +			i40e_stat_update32(hw,
 +					   I40E_GLPRT_RXON2OFFCNT(hw->port, i),
 +					   pf->stat_offsets_loaded,
 +					   &osd->priority_xon_2_xoff[i],
 +					   &nsd->priority_xon_2_xoff[i]);
 +		}
 +
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC64H(hw->port),
 +				   I40E_GLPRT_PRC64L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_64, &nsd->rx_size_64);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC127H(hw->port),
 +				   I40E_GLPRT_PRC127L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_127, &nsd->rx_size_127);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC255H(hw->port),
 +				   I40E_GLPRT_PRC255L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_255, &nsd->rx_size_255);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC511H(hw->port),
 +				   I40E_GLPRT_PRC511L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_511, &nsd->rx_size_511);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC1023H(hw->port),
 +				   I40E_GLPRT_PRC1023L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_1023, &nsd->rx_size_1023);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC1522H(hw->port),
 +				   I40E_GLPRT_PRC1522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_1522, &nsd->rx_size_1522);
 +		i40e_stat_update48(hw, I40E_GLPRT_PRC9522H(hw->port),
 +				   I40E_GLPRT_PRC9522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_size_big, &nsd->rx_size_big);
 +
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC64H(hw->port),
 +				   I40E_GLPRT_PTC64L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_64, &nsd->tx_size_64);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC127H(hw->port),
 +				   I40E_GLPRT_PTC127L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_127, &nsd->tx_size_127);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC255H(hw->port),
 +				   I40E_GLPRT_PTC255L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_255, &nsd->tx_size_255);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC511H(hw->port),
 +				   I40E_GLPRT_PTC511L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_511, &nsd->tx_size_511);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC1023H(hw->port),
 +				   I40E_GLPRT_PTC1023L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_1023, &nsd->tx_size_1023);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC1522H(hw->port),
 +				   I40E_GLPRT_PTC1522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_1522, &nsd->tx_size_1522);
 +		i40e_stat_update48(hw, I40E_GLPRT_PTC9522H(hw->port),
 +				   I40E_GLPRT_PTC9522L(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->tx_size_big, &nsd->tx_size_big);
 +
 +		i40e_stat_update32(hw, I40E_GLPRT_RUC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_undersize, &nsd->rx_undersize);
 +		i40e_stat_update32(hw, I40E_GLPRT_RFC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_fragments, &nsd->rx_fragments);
 +		i40e_stat_update32(hw, I40E_GLPRT_ROC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_oversize, &nsd->rx_oversize);
 +		i40e_stat_update32(hw, I40E_GLPRT_RJC(hw->port),
 +				   pf->stat_offsets_loaded,
 +				   &osd->rx_jabber, &nsd->rx_jabber);
  	}
++<<<<<<< HEAD
++=======
+ }
+ 
+ /**
+  * i40e_update_pf_stats - Update the pf statistics counters.
+  * @pf: the PF to be updated
+  **/
+ static void i40e_update_pf_stats(struct i40e_pf *pf)
+ {
+ 	struct i40e_hw_port_stats *osd = &pf->stats_offsets;
+ 	struct i40e_hw_port_stats *nsd = &pf->stats;
+ 	struct i40e_hw *hw = &pf->hw;
+ 	u32 val;
+ 	int i;
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_GORCH(hw->port),
+ 			   I40E_GLPRT_GORCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_bytes, &nsd->eth.rx_bytes);
+ 	i40e_stat_update48(hw, I40E_GLPRT_GOTCH(hw->port),
+ 			   I40E_GLPRT_GOTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_bytes, &nsd->eth.tx_bytes);
+ 	i40e_stat_update32(hw, I40E_GLPRT_RDPC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_discards,
+ 			   &nsd->eth.rx_discards);
+ 	i40e_stat_update32(hw, I40E_GLPRT_TDPC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_discards,
+ 			   &nsd->eth.tx_discards);
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_UPRCH(hw->port),
+ 			   I40E_GLPRT_UPRCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_unicast,
+ 			   &nsd->eth.rx_unicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_MPRCH(hw->port),
+ 			   I40E_GLPRT_MPRCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_multicast,
+ 			   &nsd->eth.rx_multicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_BPRCH(hw->port),
+ 			   I40E_GLPRT_BPRCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.rx_broadcast,
+ 			   &nsd->eth.rx_broadcast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_UPTCH(hw->port),
+ 			   I40E_GLPRT_UPTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_unicast,
+ 			   &nsd->eth.tx_unicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_MPTCH(hw->port),
+ 			   I40E_GLPRT_MPTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_multicast,
+ 			   &nsd->eth.tx_multicast);
+ 	i40e_stat_update48(hw, I40E_GLPRT_BPTCH(hw->port),
+ 			   I40E_GLPRT_BPTCL(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->eth.tx_broadcast,
+ 			   &nsd->eth.tx_broadcast);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_TDOLD(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_dropped_link_down,
+ 			   &nsd->tx_dropped_link_down);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_CRCERRS(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->crc_errors, &nsd->crc_errors);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_ILLERRC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->illegal_bytes, &nsd->illegal_bytes);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_MLFC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->mac_local_faults,
+ 			   &nsd->mac_local_faults);
+ 	i40e_stat_update32(hw, I40E_GLPRT_MRFC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->mac_remote_faults,
+ 			   &nsd->mac_remote_faults);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_RLEC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_length_errors,
+ 			   &nsd->rx_length_errors);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_LXONRXC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->link_xon_rx, &nsd->link_xon_rx);
+ 	i40e_stat_update32(hw, I40E_GLPRT_LXONTXC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->link_xon_tx, &nsd->link_xon_tx);
+ 	i40e_update_prio_xoff_rx(pf);  /* handles I40E_GLPRT_LXOFFRXC */
+ 	i40e_stat_update32(hw, I40E_GLPRT_LXOFFTXC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->link_xoff_tx, &nsd->link_xoff_tx);
+ 
+ 	for (i = 0; i < 8; i++) {
+ 		i40e_stat_update32(hw, I40E_GLPRT_PXONRXC(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xon_rx[i],
+ 				   &nsd->priority_xon_rx[i]);
+ 		i40e_stat_update32(hw, I40E_GLPRT_PXONTXC(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xon_tx[i],
+ 				   &nsd->priority_xon_tx[i]);
+ 		i40e_stat_update32(hw, I40E_GLPRT_PXOFFTXC(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xoff_tx[i],
+ 				   &nsd->priority_xoff_tx[i]);
+ 		i40e_stat_update32(hw,
+ 				   I40E_GLPRT_RXON2OFFCNT(hw->port, i),
+ 				   pf->stat_offsets_loaded,
+ 				   &osd->priority_xon_2_xoff[i],
+ 				   &nsd->priority_xon_2_xoff[i]);
+ 	}
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC64H(hw->port),
+ 			   I40E_GLPRT_PRC64L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_64, &nsd->rx_size_64);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC127H(hw->port),
+ 			   I40E_GLPRT_PRC127L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_127, &nsd->rx_size_127);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC255H(hw->port),
+ 			   I40E_GLPRT_PRC255L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_255, &nsd->rx_size_255);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC511H(hw->port),
+ 			   I40E_GLPRT_PRC511L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_511, &nsd->rx_size_511);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC1023H(hw->port),
+ 			   I40E_GLPRT_PRC1023L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_1023, &nsd->rx_size_1023);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC1522H(hw->port),
+ 			   I40E_GLPRT_PRC1522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_1522, &nsd->rx_size_1522);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PRC9522H(hw->port),
+ 			   I40E_GLPRT_PRC9522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_size_big, &nsd->rx_size_big);
+ 
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC64H(hw->port),
+ 			   I40E_GLPRT_PTC64L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_64, &nsd->tx_size_64);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC127H(hw->port),
+ 			   I40E_GLPRT_PTC127L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_127, &nsd->tx_size_127);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC255H(hw->port),
+ 			   I40E_GLPRT_PTC255L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_255, &nsd->tx_size_255);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC511H(hw->port),
+ 			   I40E_GLPRT_PTC511L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_511, &nsd->tx_size_511);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC1023H(hw->port),
+ 			   I40E_GLPRT_PTC1023L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_1023, &nsd->tx_size_1023);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC1522H(hw->port),
+ 			   I40E_GLPRT_PTC1522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_1522, &nsd->tx_size_1522);
+ 	i40e_stat_update48(hw, I40E_GLPRT_PTC9522H(hw->port),
+ 			   I40E_GLPRT_PTC9522L(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_size_big, &nsd->tx_size_big);
+ 
+ 	i40e_stat_update32(hw, I40E_GLPRT_RUC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_undersize, &nsd->rx_undersize);
+ 	i40e_stat_update32(hw, I40E_GLPRT_RFC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_fragments, &nsd->rx_fragments);
+ 	i40e_stat_update32(hw, I40E_GLPRT_ROC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_oversize, &nsd->rx_oversize);
+ 	i40e_stat_update32(hw, I40E_GLPRT_RJC(hw->port),
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_jabber, &nsd->rx_jabber);
+ 
+ 	val = rd32(hw, I40E_PRTPM_EEE_STAT);
+ 	nsd->tx_lpi_status =
+ 		       (val & I40E_PRTPM_EEE_STAT_TX_LPI_STATUS_MASK) >>
+ 			I40E_PRTPM_EEE_STAT_TX_LPI_STATUS_SHIFT;
+ 	nsd->rx_lpi_status =
+ 		       (val & I40E_PRTPM_EEE_STAT_RX_LPI_STATUS_MASK) >>
+ 			I40E_PRTPM_EEE_STAT_RX_LPI_STATUS_SHIFT;
+ 	i40e_stat_update32(hw, I40E_PRTPM_TLPIC,
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->tx_lpi_count, &nsd->tx_lpi_count);
+ 	i40e_stat_update32(hw, I40E_PRTPM_RLPIC,
+ 			   pf->stat_offsets_loaded,
+ 			   &osd->rx_lpi_count, &nsd->rx_lpi_count);
++>>>>>>> 532d283d590d (i40e: add xcast stats for port)
  
  	pf->stat_offsets_loaded = true;
  }
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ethtool.c
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
