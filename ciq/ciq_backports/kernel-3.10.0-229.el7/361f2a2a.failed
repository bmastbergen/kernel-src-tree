powrpc/powernv: Reset PHB in kdump kernel

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] powernv: Reset PHB in kdump kernel (Don Zickus) [1127366]
Rebuild_FUZZ: 90.67%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 361f2a2a1536a1d7ff6f52bf0e4848c1441e17ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/361f2a2a.failed

In the kdump scenario, the first kerenl doesn't shutdown PCI devices
and the kdump kerenl clean PHB IODA table at the early probe time.
That means the kdump kerenl can't support PCI transactions piled
by the first kerenl. Otherwise, lots of EEH errors and frozen PEs
will be detected.

In order to avoid the EEH errors, the PHB is resetted to drop all
PCI transaction from the first kerenl.

	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 361f2a2a1536a1d7ff6f52bf0e4848c1441e17ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/eeh-ioda.c
#	arch/powerpc/platforms/powernv/pci.h
diff --cc arch/powerpc/platforms/powernv/eeh-ioda.c
index be33a16408be,753f08e36dfa..000000000000
--- a/arch/powerpc/platforms/powernv/eeh-ioda.c
+++ b/arch/powerpc/platforms/powernv/eeh-ioda.c
@@@ -412,9 -420,17 +415,18 @@@ int ioda_eeh_phb_reset(struct pci_contr
  
  	/*
  	 * Poll state of the PHB until the request is done
 -	 * successfully. The PHB reset is usually PHB complete
 -	 * reset followed by hot reset on root bus. So we also
 -	 * need the PCI bus settlement delay.
 +	 * successfully.
  	 */
  	rc = ioda_eeh_phb_poll(phb);
++<<<<<<< HEAD
++=======
+ 	if (option == EEH_RESET_DEACTIVATE) {
+ 		if (system_state < SYSTEM_RUNNING)
+ 			udelay(1000 * EEH_PE_RST_SETTLE_TIME);
+ 		else
+ 			msleep(EEH_PE_RST_SETTLE_TIME);
+ 	}
++>>>>>>> 361f2a2a1536 (powrpc/powernv: Reset PHB in kdump kernel)
  out:
  	if (rc != OPAL_SUCCESS)
  		return -EIO;
diff --cc arch/powerpc/platforms/powernv/pci.h
index 48749fa60351,676232c34328..000000000000
--- a/arch/powerpc/platforms/powernv/pci.h
+++ b/arch/powerpc/platforms/powernv/pci.h
@@@ -197,6 -203,8 +197,12 @@@ extern void pnv_pci_init_p5ioc2_hub(str
  extern void pnv_pci_init_ioda_hub(struct device_node *np);
  extern void pnv_pci_init_ioda2_phb(struct device_node *np);
  extern void pnv_pci_ioda_tce_invalidate(struct iommu_table *tbl,
++<<<<<<< HEAD
 +					__be64 *startp, __be64 *endp);
++=======
+ 					__be64 *startp, __be64 *endp, bool rm);
+ extern void pnv_pci_reset_secondary_bus(struct pci_dev *dev);
+ extern int ioda_eeh_phb_reset(struct pci_controller *hose, int option);
++>>>>>>> 361f2a2a1536 (powrpc/powernv: Reset PHB in kdump kernel)
  
  #endif /* __POWERNV_PCI_H */
* Unmerged path arch/powerpc/platforms/powernv/eeh-ioda.c
diff --git a/arch/powerpc/platforms/powernv/pci-ioda.c b/arch/powerpc/platforms/powernv/pci-ioda.c
index c1b27800ef7a..a86b28ead721 100644
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@ -13,6 +13,7 @@
 
 #include <linux/kernel.h>
 #include <linux/pci.h>
+#include <linux/crash_dump.h>
 #include <linux/debugfs.h>
 #include <linux/delay.h>
 #include <linux/string.h>
@@ -1283,6 +1284,17 @@ void __init pnv_pci_init_ioda_phb(struct device_node *np,
 	rc = opal_pci_reset(phb_id, OPAL_PCI_IODA_TABLE_RESET, OPAL_ASSERT_RESET);
 	if (rc)
 		pr_warning("  OPAL Error %ld performing IODA table reset !\n", rc);
+
+	/* If we're running in kdump kerenl, the previous kerenl never
+	 * shutdown PCI devices correctly. We already got IODA table
+	 * cleaned out. So we have to issue PHB reset to stop all PCI
+	 * transactions from previous kerenl.
+	 */
+	if (is_kdump_kernel()) {
+		pr_info("  Issue PHB reset ...\n");
+		ioda_eeh_phb_reset(hose, EEH_RESET_FUNDAMENTAL);
+		ioda_eeh_phb_reset(hose, OPAL_DEASSERT_RESET);
+	}
 }
 
 void __init pnv_pci_init_ioda2_phb(struct device_node *np)
* Unmerged path arch/powerpc/platforms/powernv/pci.h
