perf top: Add --max-stack option to limit callchain stack scan

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/top: Add --max-stack option to limit callchain stack scan (Jiri Olsa) [1131394]
Rebuild_FUZZ: 98.39%
commit-author Waiman Long <Waiman.Long@hp.com>
commit 5dbb6e81d85e55ee2b4cf523c1738e16f63e5400
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/5dbb6e81.failed

When the callgraph function is enabled (-G), it may take a long time to
scan all the stack data and merge them accordingly.

This patch adds a new --max-stack option to perf-top to limit the depth
of callchain stack data to look at to reduce the time it takes for
perf-top to finish its processing. It reduces the amount of information
provided to the user in exchange for faster speed.

	Signed-off-by: Waiman Long <Waiman.Long@hp.com>
	Acked-by: David Ahern <dsahern@gmail.com>
	Tested-by: Davidlohr Bueso <davidlohr@hp.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Aswin Chandramouleeswaran <aswin@hp.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Scott J Norton <scott.norton@hp.com>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/r/1382107129-2010-5-git-send-email-Waiman.Long@hp.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 5dbb6e81d85e55ee2b4cf523c1738e16f63e5400)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-top.c
diff --cc tools/perf/builtin-top.c
index 9cf63369d1f6,386d83324a8d..000000000000
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@@ -1109,12 -1108,12 +1110,21 @@@ int cmd_top(int argc, const char **argv
  		   " abort, in_tx, transaction"),
  	OPT_BOOLEAN('n', "show-nr-samples", &symbol_conf.show_nr_samples,
  		    "Show a column with the number of samples"),
++<<<<<<< HEAD
 +	OPT_CALLBACK_NOOPT('G', NULL, &top.record_opts,
 +			   NULL, "enables call-graph recording",
 +			   &callchain_opt),
 +	OPT_CALLBACK(0, "call-graph", &top.record_opts,
 +		     "mode[,dump_size]", record_callchain_help,
 +		     &parse_callchain_opt),
++=======
+ 	OPT_CALLBACK_DEFAULT('G', "call-graph", &top.record_opts,
+ 			     "mode[,dump_size]", record_callchain_help,
+ 			     &parse_callchain_opt, "fp"),
+ 	OPT_INTEGER(0, "max-stack", &top.max_stack,
+ 		    "Set the maximum stack depth when parsing the callchain. "
+ 		    "Default: " __stringify(PERF_MAX_STACK_DEPTH)),
++>>>>>>> 5dbb6e81d85e (perf top: Add --max-stack option to limit callchain stack scan)
  	OPT_CALLBACK(0, "ignore-callees", NULL, "regex",
  		   "ignore callees of these functions in call graphs",
  		   report_parse_ignore_callees_opt),
diff --git a/tools/perf/Documentation/perf-top.txt b/tools/perf/Documentation/perf-top.txt
index 92e152d10d45..7de01dd79688 100644
--- a/tools/perf/Documentation/perf-top.txt
+++ b/tools/perf/Documentation/perf-top.txt
@@ -150,6 +150,14 @@ Default is to monitor all CPUS.
 	Setup and enable call-graph (stack chain/backtrace) recording,
 	implies -G.
 
+--max-stack::
+	Set the stack depth limit when parsing the callchain, anything
+	beyond the specified depth will be ignored. This is a trade-off
+	between information loss and faster processing especially for
+	workloads that can have a very long callchain stack.
+
+	Default: 127
+
 --ignore-callees=<regex>::
         Ignore callees of the function(s) matching the given regex.
         This has the effect of collecting the callers of each such
* Unmerged path tools/perf/builtin-top.c
diff --git a/tools/perf/util/top.h b/tools/perf/util/top.h
index b554ffc462b6..88cfeaff600b 100644
--- a/tools/perf/util/top.h
+++ b/tools/perf/util/top.h
@@ -24,6 +24,7 @@ struct perf_top {
 	u64		   exact_samples;
 	u64		   guest_us_samples, guest_kernel_samples;
 	int		   print_entries, count_filter, delay_secs;
+	int		   max_stack;
 	bool		   hide_kernel_symbols, hide_user_symbols, zero;
 	bool		   use_tui, use_stdio;
 	bool		   kptr_restrict_warned;
