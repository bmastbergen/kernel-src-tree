iommu/amd: Add sysfs support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [iommu] amd: Add sysfs support (Myron Stowe) [1136539]
Rebuild_FUZZ: 88.00%
commit-author Alex Williamson <alex.williamson@redhat.com>
commit 066f2e98d8c7f043747fb08ebaa66bad723b1121
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/066f2e98.failed

AMD-Vi support for IOMMU sysfs.  This allows us to associate devices
with a specific IOMMU device and examine the capabilities and features
of that IOMMU.  The AMD IOMMU is hosted on and actual PCI device, so
we make that device the parent for the IOMMU class device.  This
initial implementaiton exposes only the capability header and extended
features register for the IOMMU.

# find /sys | grep ivhd
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:00.0
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:02.0
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:04.0
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:09.0
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:11.0
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:12.0
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:12.2
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/devices/0000:00:13.0
...
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/power
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/power/control
...
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/device
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/subsystem
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/amd-iommu
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/amd-iommu/cap
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/amd-iommu/features
/sys/devices/pci0000:00/0000:00:00.2/iommu/ivhd0/uevent
/sys/class/iommu/ivhd0

	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 066f2e98d8c7f043747fb08ebaa66bad723b1121)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu_init.c
diff --cc drivers/iommu/amd_iommu_init.c
index 62b233329ef3,3783e0b44df6..000000000000
--- a/drivers/iommu/amd_iommu_init.c
+++ b/drivers/iommu/amd_iommu_init.c
@@@ -26,7 -26,7 +26,11 @@@
  #include <linux/msi.h>
  #include <linux/amd-iommu.h>
  #include <linux/export.h>
++<<<<<<< HEAD
 +#include <acpi/acpi.h>
++=======
+ #include <linux/iommu.h>
++>>>>>>> 066f2e98d8c7 (iommu/amd: Add sysfs support)
  #include <asm/pci-direct.h>
  #include <asm/iommu.h>
  #include <asm/gart.h>
@@@ -1160,6 -1172,66 +1164,69 @@@ static int __init init_iommu_all(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ 
+ static void init_iommu_perf_ctr(struct amd_iommu *iommu)
+ {
+ 	u64 val = 0xabcd, val2 = 0;
+ 
+ 	if (!iommu_feature(iommu, FEATURE_PC))
+ 		return;
+ 
+ 	amd_iommu_pc_present = true;
+ 
+ 	/* Check if the performance counters can be written to */
+ 	if ((0 != amd_iommu_pc_get_set_reg_val(0, 0, 0, 0, &val, true)) ||
+ 	    (0 != amd_iommu_pc_get_set_reg_val(0, 0, 0, 0, &val2, false)) ||
+ 	    (val != val2)) {
+ 		pr_err("AMD-Vi: Unable to write to IOMMU perf counter.\n");
+ 		amd_iommu_pc_present = false;
+ 		return;
+ 	}
+ 
+ 	pr_info("AMD-Vi: IOMMU performance counters supported\n");
+ 
+ 	val = readl(iommu->mmio_base + MMIO_CNTR_CONF_OFFSET);
+ 	iommu->max_banks = (u8) ((val >> 12) & 0x3f);
+ 	iommu->max_counters = (u8) ((val >> 7) & 0xf);
+ }
+ 
+ static ssize_t amd_iommu_show_cap(struct device *dev,
+ 				  struct device_attribute *attr,
+ 				  char *buf)
+ {
+ 	struct amd_iommu *iommu = dev_get_drvdata(dev);
+ 	return sprintf(buf, "%x\n", iommu->cap);
+ }
+ static DEVICE_ATTR(cap, S_IRUGO, amd_iommu_show_cap, NULL);
+ 
+ static ssize_t amd_iommu_show_features(struct device *dev,
+ 				       struct device_attribute *attr,
+ 				       char *buf)
+ {
+ 	struct amd_iommu *iommu = dev_get_drvdata(dev);
+ 	return sprintf(buf, "%llx\n", iommu->features);
+ }
+ static DEVICE_ATTR(features, S_IRUGO, amd_iommu_show_features, NULL);
+ 
+ static struct attribute *amd_iommu_attrs[] = {
+ 	&dev_attr_cap.attr,
+ 	&dev_attr_features.attr,
+ 	NULL,
+ };
+ 
+ static struct attribute_group amd_iommu_group = {
+ 	.name = "amd-iommu",
+ 	.attrs = amd_iommu_attrs,
+ };
+ 
+ static const struct attribute_group *amd_iommu_groups[] = {
+ 	&amd_iommu_group,
+ 	NULL,
+ };
+ 
++>>>>>>> 066f2e98d8c7 (iommu/amd: Add sysfs support)
  static int iommu_init_pci(struct amd_iommu *iommu)
  {
  	int cap_ptr = iommu->cap_ptr;
diff --git a/Documentation/ABI/testing/sysfs-class-iommu-amd-iommu b/Documentation/ABI/testing/sysfs-class-iommu-amd-iommu
new file mode 100644
index 000000000000..d6ba8e8a4a97
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-class-iommu-amd-iommu
@@ -0,0 +1,14 @@
+What:		/sys/class/iommu/<iommu>/amd-iommu/cap
+Date:		June 2014
+KernelVersion:	3.17
+Contact:	Alex Williamson <alex.williamson@redhat.com>
+Description:
+		IOMMU capability header as documented in the AMD IOMMU
+		specification.  Format: %x
+
+What:		/sys/class/iommu/<iommu>/amd-iommu/features
+Date:		June 2014
+KernelVersion:	3.17
+Contact:	Alex Williamson <alex.williamson@redhat.com>
+Description:
+		Extended features of the IOMMU.  Format: %llx
diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c
index ca8561556948..83a43b2414a3 100644
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@ -379,6 +379,9 @@ static int iommu_init_device(struct device *dev)
 
 	dev->archdata.iommu = dev_data;
 
+	iommu_device_link(amd_iommu_rlookup_table[dev_data->devid]->iommu_dev,
+			  dev);
+
 	return 0;
 }
 
@@ -403,6 +406,9 @@ static void iommu_uninit_device(struct device *dev)
 	if (!dev_data)
 		return;
 
+	iommu_device_unlink(amd_iommu_rlookup_table[dev_data->devid]->iommu_dev,
+			    dev);
+
 	iommu_group_remove_device(dev);
 
 	/* Unlink from alias, it may change if another device is re-plugged */
* Unmerged path drivers/iommu/amd_iommu_init.c
diff --git a/drivers/iommu/amd_iommu_types.h b/drivers/iommu/amd_iommu_types.h
index 08540ccb097c..897dcb83cc08 100644
--- a/drivers/iommu/amd_iommu_types.h
+++ b/drivers/iommu/amd_iommu_types.h
@@ -571,6 +571,9 @@ struct amd_iommu {
 	/* default dma_ops domain for that IOMMU */
 	struct dma_ops_domain *default_dom;
 
+	/* IOMMU sysfs device */
+	struct device *iommu_dev;
+
 	/*
 	 * We can't rely on the BIOS to restore all values on reinit, so we
 	 * need to stash them
