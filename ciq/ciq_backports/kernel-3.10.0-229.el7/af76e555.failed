blk-mq: initialize struct request fields individually

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Christoph Hellwig <hch@lst.de>
commit af76e555e5e29e08eb8ac1f7878e23dbf0d6741f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/af76e555.failed

This allows us to avoid a non-atomic memset over ->atomic_flags as well
as killing lots of duplicate initializations.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit af76e555e5e29e08eb8ac1f7878e23dbf0d6741f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 87e159e32dbc,492f49f96459..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -81,9 -81,8 +81,12 @@@ static struct request *__blk_mq_alloc_r
  
  	tag = blk_mq_get_tag(hctx->tags, gfp, reserved);
  	if (tag != BLK_MQ_TAG_FAIL) {
++<<<<<<< HEAD
 +		rq = hctx->rqs[tag];
++=======
+ 		rq = hctx->tags->rqs[tag];
++>>>>>>> af76e555e5e2 (blk-mq: initialize struct request fields individually)
  		rq->tag = tag;
- 
  		return rq;
  	}
  
@@@ -268,9 -300,8 +315,13 @@@ static void __blk_mq_free_request(struc
  	const int tag = rq->tag;
  	struct request_queue *q = rq->q;
  
++<<<<<<< HEAD
 +	blk_mq_rq_init(hctx, rq);
++=======
+ 	clear_bit(REQ_ATOM_STARTED, &rq->atomic_flags);
++>>>>>>> af76e555e5e2 (blk-mq: initialize struct request fields individually)
  	blk_mq_put_tag(hctx->tags, tag);
 +
  	blk_mq_queue_exit(q);
  }
  
* Unmerged path block/blk-mq.c
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 7073d451e562..deab9ecc1db9 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -90,9 +90,10 @@ enum rq_cmd_type_bits {
 #define BLK_MAX_CDB	16
 
 /*
- * try to put the fields that are referenced together in the same cacheline.
- * if you modify this structure, be sure to check block/blk-core.c:blk_rq_init()
- * as well!
+ * Try to put the fields that are referenced together in the same cacheline.
+ *
+ * If you modify this structure, make sure to update blk_rq_init() and
+ * especially blk_mq_rq_ctx_init() to take care of the added fields.
  */
 struct request {
 	union {
