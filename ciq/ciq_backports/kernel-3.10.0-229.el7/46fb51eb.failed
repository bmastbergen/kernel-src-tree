net: Fix save software checksum complete

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] Fix save software checksum complete (Florian Westphal) [1131999]
Rebuild_FUZZ: 93.33%
commit-author Tom Herbert <therbert@google.com>
commit 46fb51eb96cafb2c148b7b5119adb5e31a2bf3c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/46fb51eb.failed

Geert reported issues regarding checksum complete and UDP.
The logic introduced in commit 7e3cead5172927732f51fde
("net: Save software checksum complete") is not correct.

This patch:
1) Restores code in __skb_checksum_complete_header except for setting
   CHECKSUM_UNNECESSARY. This function may be calculating checksum on
   something less than skb->len.
2) Adds saving checksum to __skb_checksum_complete. The full packet
   checksum 0..skb->len is calculated without adding in pseudo header.
   This value is saved in skb->csum and then the pseudo header is added
   to that to derive the checksum for validation.
3) In both __skb_checksum_complete_header and __skb_checksum_complete,
   set skb->csum_valid to whether checksum of zero was computed. This
   allows skb_csum_unnecessary to return true without changing to
   CHECKSUM_UNNECESSARY which was done previously.
4) Copy new csum related bits in __copy_skb_header.

	Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
	Signed-off-by: Tom Herbert <therbert@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 46fb51eb96cafb2c148b7b5119adb5e31a2bf3c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/datagram.c
diff --cc net/core/datagram.c
index 8ab48cd89559,488dd1a825c0..000000000000
--- a/net/core/datagram.c
+++ b/net/core/datagram.c
@@@ -668,10 -740,11 +668,18 @@@ __sum16 __skb_checksum_complete_head(st
  
  	sum = csum_fold(skb_checksum(skb, 0, len, skb->csum));
  	if (likely(!sum)) {
++<<<<<<< HEAD
 +		if (unlikely(skb->ip_summed == CHECKSUM_COMPLETE))
 +			netdev_rx_csum_fault(skb->dev);
 +		skb->ip_summed = CHECKSUM_UNNECESSARY;
 +	}
++=======
+ 		if (unlikely(skb->ip_summed == CHECKSUM_COMPLETE) &&
+ 		    !skb->csum_complete_sw)
+ 			netdev_rx_csum_fault(skb->dev);
+ 	}
+ 	skb->csum_valid = !sum;
++>>>>>>> 46fb51eb96ca (net: Fix save software checksum complete)
  	return sum;
  }
  EXPORT_SYMBOL(__skb_checksum_complete_head);
* Unmerged path net/core/datagram.c
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 25fb6ef7b10e..889b7cafd1ac 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -706,6 +706,9 @@ static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 	new->l4_rxhash		= old->l4_rxhash;
 	new->no_fcs		= old->no_fcs;
 	new->encapsulation	= old->encapsulation;
+	new->encap_hdr_csum	= old->encap_hdr_csum;
+	new->csum_valid		= old->csum_valid;
+	new->csum_complete_sw	= old->csum_complete_sw;
 #ifdef CONFIG_XFRM
 	new->sp			= secpath_get(old->sp);
 #endif
