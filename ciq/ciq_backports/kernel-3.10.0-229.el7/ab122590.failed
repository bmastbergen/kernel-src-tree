Revert "ACPI / hotplug / PCI: Avoid doing too much for spurious notifies"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [pci] Revert: acpi / hotplug / pci: Avoid doing too much for spurious notifies (Myron Stowe) [1114228]
Rebuild_FUZZ: 97.93%
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit ab1225901da2d4cd2dcbae6840e93abbef417064
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/ab122590.failed

Commit 2dc4128 (ACPI / hotplug / PCI: Avoid doing too much for
spurious notifies) changed the enable_slot() to check return value of
pci_scan_slot() and if it is zero return early from the function. It
means that there were no new devices in this particular slot.

However, if a device appeared deeper in the hierarchy the code now
ignores it causing things like Thunderbolt chaining fail to recognize
new devices.

The problem with Alex Williamson's machine was solved with commit
a47d8c8 (ACPI / hotplug / PCI: Avoid parent bus rescans on spurious
device checks) and hence we should be able to restore the original
functionality that we always rescan on bus check notification.

On a device check notification we still check what acpiphp_rescan_slot()
returns and on zero bail out early.

Fixes: 2dc41281b1d1 (ACPI / hotplug / PCI: Avoid doing too much for spurious notifies)
	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Tested-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit ab1225901da2d4cd2dcbae6840e93abbef417064)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/hotplug/acpiphp_glue.c
diff --cc drivers/pci/hotplug/acpiphp_glue.c
index d210006fa4ad,1ea75236a15f..000000000000
--- a/drivers/pci/hotplug/acpiphp_glue.c
+++ b/drivers/pci/hotplug/acpiphp_glue.c
@@@ -676,27 -545,15 +676,31 @@@ static void check_hotplug_bridge(struc
   * This function should be called per *physical slot*,
   * not per each slot object in ACPI namespace.
   */
 -static void __ref enable_slot(struct acpiphp_slot *slot)
 +static int __ref enable_device(struct acpiphp_slot *slot)
  {
  	struct pci_dev *dev;
 -	struct pci_bus *bus = slot->bus;
 +	struct pci_bus *bus = slot->bridge->pci_bus;
  	struct acpiphp_func *func;
 -	int max, pass;
 +	int num, max, pass;
  	LIST_HEAD(add_list);
  
++<<<<<<< HEAD
 +	if (slot->flags & SLOT_ENABLED)
 +		goto err_exit;
 +
 +	list_for_each_entry(func, &slot->funcs, sibling)
 +		acpiphp_bus_add(func);
 +
 +	num = pci_scan_slot(bus, PCI_DEVFN(slot->device, 0));
 +	if (num == 0) {
 +		/* Maybe only part of funcs are added. */
 +		pr_debug("No new device found\n");
 +		goto err_exit;
 +	}
 +
++=======
+ 	acpiphp_rescan_slot(slot);
++>>>>>>> ab1225901da2 (Revert "ACPI / hotplug / PCI: Avoid doing too much for spurious notifies")
  	max = acpiphp_max_busnr(bus);
  	for (pass = 0; pass < 2; pass++) {
  		list_for_each_entry(dev, &bus->devices, bus_list) {
@@@ -714,8 -572,8 +718,12 @@@
  			}
  		}
  	}
++<<<<<<< HEAD
++=======
+ 	__pci_bus_assign_resources(bus, &add_list, NULL);
++>>>>>>> ab1225901da2 (Revert "ACPI / hotplug / PCI: Avoid doing too much for spurious notifies")
  
 +	__pci_bus_assign_resources(bus, &add_list, NULL);
  	acpiphp_sanitize_bus(bus);
  	acpiphp_set_hpp_values(bus);
  	acpiphp_set_acpi_region(slot);
* Unmerged path drivers/pci/hotplug/acpiphp_glue.c
