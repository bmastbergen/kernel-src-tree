GFS2: Rename quota qd_lru_lock qd_lock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Steven Whitehouse <swhiteho@redhat.com>
commit 7d80823e1d83e35977d77ae201bf63af3317ad0a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/7d80823e.failed

This is a straight forward rename which is in preparation for
introducing the generic list_lru infrastructure in the
following patch.

	Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
	Signed-off-by: Abhijith Das <adas@redhat.com>
	Tested-by: Abhijith Das <adas@redhat.com>
(cherry picked from commit 7d80823e1d83e35977d77ae201bf63af3317ad0a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/quota.c
diff --cc fs/gfs2/quota.c
index 679b366e073c,466516ac5e57..000000000000
--- a/fs/gfs2/quota.c
+++ b/fs/gfs2/quota.c
@@@ -74,21 -74,20 +74,21 @@@ struct gfs2_quota_change_host 
  
  static LIST_HEAD(qd_lru_list);
  static atomic_t qd_lru_count = ATOMIC_INIT(0);
- static DEFINE_SPINLOCK(qd_lru_lock);
+ static DEFINE_SPINLOCK(qd_lock);
  
 -unsigned long gfs2_qd_shrink_scan(struct shrinker *shrink,
 -				  struct shrink_control *sc)
 +int gfs2_shrink_qd_memory(struct shrinker *shrink, struct shrink_control *sc)
  {
  	struct gfs2_quota_data *qd;
  	struct gfs2_sbd *sdp;
  	int nr_to_scan = sc->nr_to_scan;
 -	long freed = 0;
 +
 +	if (nr_to_scan == 0)
 +		goto out;
  
  	if (!(sc->gfp_mask & __GFP_FS))
 -		return SHRINK_STOP;
 +		return -1;
  
- 	spin_lock(&qd_lru_lock);
+ 	spin_lock(&qd_lock);
  	while (nr_to_scan && !list_empty(&qd_lru_list)) {
  		qd = list_entry(qd_lru_list.next,
  				struct gfs2_quota_data, qd_reclaim);
@@@ -107,15 -106,20 +107,21 @@@
  		/* Delete it from the common reclaim list */
  		list_del_init(&qd->qd_reclaim);
  		atomic_dec(&qd_lru_count);
- 		spin_unlock(&qd_lru_lock);
+ 		spin_unlock(&qd_lock);
  		kmem_cache_free(gfs2_quotad_cachep, qd);
- 		spin_lock(&qd_lru_lock);
+ 		spin_lock(&qd_lock);
  		nr_to_scan--;
 -		freed++;
  	}
++<<<<<<< HEAD
 +	spin_unlock(&qd_lru_lock);
++=======
+ 	spin_unlock(&qd_lock);
+ 	return freed;
+ }
++>>>>>>> 7d80823e1d83 (GFS2: Rename quota qd_lru_lock qd_lock)
  
 -unsigned long gfs2_qd_shrink_count(struct shrinker *shrink,
 -				   struct shrink_control *sc)
 -{
 -	return vfs_pressure_ratio(atomic_read(&qd_lru_count));
 +out:
 +	return (atomic_read(&qd_lru_count) * sysctl_vfs_cache_pressure) / 100;
  }
  
  static u64 qd2index(struct gfs2_quota_data *qd)
* Unmerged path fs/gfs2/quota.c
