lib: Export interval_tree

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [lib] Export interval_tree (Rob Clark) [1101269]
Rebuild_FUZZ: 88.89%
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit a88cc108f6f39e56577793f66ac69eb0e18ae099
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/a88cc108.failed

lib/interval_tree.c provides a simple interface for an interval-tree
(an augmented red-black tree) but is only built when testing the generic
macros for building interval-trees. For drivers with modest needs,
export the simple interval-tree library as is.

v2: Lots of help from Michel Lespinasse to only compile the code
    as required:
    - make INTERVAL_TREE a config option
    - make INTERVAL_TREE_TEST select the library functions
      and sanitize the filenames & Makefile
    - prepare interval_tree for being built as a module if required

	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Michel Lespinasse <walken@google.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: David Woodhouse <dwmw2@infradead.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Michel Lespinasse <walken@google.com>
[Acked for inclusion via drm/i915 by Andrew Morton.]
[danvet: switch to _GPL as per the mailing list discussion.]
	Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
(cherry picked from commit a88cc108f6f39e56577793f66ac69eb0e18ae099)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/Makefile
diff --cc lib/Makefile
index f831e0f2d0ea,2c6c1a42e1d2..000000000000
--- a/lib/Makefile
+++ b/lib/Makefile
@@@ -150,7 -157,7 +151,11 @@@ lib-$(CONFIG_LIBFDT) += $(libfdt_files
  obj-$(CONFIG_RBTREE_TEST) += rbtree_test.o
  obj-$(CONFIG_INTERVAL_TREE_TEST) += interval_tree_test.o
  
++<<<<<<< HEAD
 +interval_tree_test-objs := interval_tree_test_main.o interval_tree.o
++=======
+ obj-$(CONFIG_PERCPU_TEST) += percpu_test.o
++>>>>>>> a88cc108f6f3 (lib: Export interval_tree)
  
  obj-$(CONFIG_ASN1) += asn1_decoder.o
  
diff --git a/lib/Kconfig b/lib/Kconfig
index c1d7cab4b6de..180630ac65a2 100644
--- a/lib/Kconfig
+++ b/lib/Kconfig
@@ -313,6 +313,20 @@ config TEXTSEARCH_FSM
 config BTREE
 	boolean
 
+config INTERVAL_TREE
+	boolean
+	help
+	  Simple, embeddable, interval-tree. Can find the start of an
+	  overlapping range in log(n) time and then iterate over all
+	  overlapping nodes. The algorithm is implemented as an
+	  augmented rbtree.
+
+	  See:
+
+		Documentation/rbtree.txt
+
+	  for more information.
+
 config ASSOCIATIVE_ARRAY
 	bool
 	help
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index 13b8c1c73e61..df04ed0dac47 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -1336,6 +1336,7 @@ config RBTREE_TEST
 config INTERVAL_TREE_TEST
 	tristate "Interval tree test"
 	depends on m && DEBUG_KERNEL
+	select INTERVAL_TREE
 	help
 	  A benchmark measuring the performance of the interval tree library
 
* Unmerged path lib/Makefile
diff --git a/lib/interval_tree.c b/lib/interval_tree.c
index e6eb406f2d65..f367f9ad544c 100644
--- a/lib/interval_tree.c
+++ b/lib/interval_tree.c
@@ -1,6 +1,7 @@
 #include <linux/init.h>
 #include <linux/interval_tree.h>
 #include <linux/interval_tree_generic.h>
+#include <linux/module.h>
 
 #define START(node) ((node)->start)
 #define LAST(node)  ((node)->last)
@@ -8,3 +9,8 @@
 INTERVAL_TREE_DEFINE(struct interval_tree_node, rb,
 		     unsigned long, __subtree_last,
 		     START, LAST,, interval_tree)
+
+EXPORT_SYMBOL_GPL(interval_tree_insert);
+EXPORT_SYMBOL_GPL(interval_tree_remove);
+EXPORT_SYMBOL_GPL(interval_tree_iter_first);
+EXPORT_SYMBOL_GPL(interval_tree_iter_next);
diff --git a/lib/interval_tree_test_main.c b/lib/interval_tree_test.c
similarity index 100%
rename from lib/interval_tree_test_main.c
rename to lib/interval_tree_test.c
