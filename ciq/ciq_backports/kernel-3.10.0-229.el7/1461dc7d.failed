cpufreq: don't restore policy->cpus on failure to move kobj

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] don't restore policy->cpus on failure to move kobj (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 91.74%
commit-author Viresh Kumar <viresh.kumar@linaro.org>
commit 1461dc7d1c252fbeb5baee0c94b5b28b7966e125
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/1461dc7d.failed

While hot-unplugging policy->cpu, we call cpufreq_nominate_new_policy_cpu() to
nominate next owner of policy, i.e. policy->cpu. If we fail to move policy
kobject under the new policy->cpu, we try to update policy->cpus with the old
policy->cpu.

This would have been required in case old-CPU is removed from policy->cpus in
the first place. But its not done before calling
cpufreq_nominate_new_policy_cpu(), but during the POST_DEAD notification which
happens quite late in the hot-unplugging path.

So, this is just some useless code hanging around, get rid of it.

	Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 1461dc7d1c252fbeb5baee0c94b5b28b7966e125)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/cpufreq.c
diff --cc drivers/cpufreq/cpufreq.c
index a029f5bcbc1e,e572d51db945..000000000000
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@@ -1144,22 -1316,13 +1144,27 @@@ static int cpufreq_nominate_new_policy_
  	int ret;
  
  	/* first sibling now owns the new sysfs dir */
 -	cpu_dev = get_cpu_device(cpumask_any_but(policy->cpus, old_cpu));
 -
 +	cpu_dev = get_cpu_device(cpumask_first(data->cpus));
  	sysfs_remove_link(&cpu_dev->kobj, "cpufreq");
 -	ret = kobject_move(&policy->kobj, &cpu_dev->kobj);
 +	ret = kobject_move(&data->kobj, &cpu_dev->kobj);
  	if (ret) {
++<<<<<<< HEAD
 +		pr_err("%s: Failed to move kobj: %d", __func__, ret);
 +
 +		WARN_ON(lock_policy_rwsem_write(old_cpu));
 +		cpumask_set_cpu(old_cpu, data->cpus);
 +
 +		write_lock_irqsave(&cpufreq_driver_lock, flags);
 +		per_cpu(cpufreq_cpu_data, old_cpu) = data;
 +		write_unlock_irqrestore(&cpufreq_driver_lock, flags);
 +
 +		unlock_policy_rwsem_write(old_cpu);
 +
 +		ret = sysfs_create_link(&cpu_dev->kobj, &data->kobj,
++=======
+ 		pr_err("%s: Failed to move kobj: %d\n", __func__, ret);
+ 		ret = sysfs_create_link(&cpu_dev->kobj, &policy->kobj,
++>>>>>>> 1461dc7d1c25 (cpufreq: don't restore policy->cpus on failure to move kobj)
  					"cpufreq");
  
  		return -EINVAL;
* Unmerged path drivers/cpufreq/cpufreq.c
