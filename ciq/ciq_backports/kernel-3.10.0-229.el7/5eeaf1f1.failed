cpufreq: Fix build error on some platforms that use cpufreq_for_each_*

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [cpufreq] Fix build error on some platforms that use cpufreq_for_each_* (Prarit Bhargava) [1134369]
Rebuild_FUZZ: 93.13%
commit-author Stratos Karafotis <stratosk@semaphore.gr>
commit 5eeaf1f1897372590105f155c6a7110b3fa36aef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/5eeaf1f1.failed

On platforms that use cpufreq_for_each_* macros, build fails if
CONFIG_CPU_FREQ=n, e.g. ARM/shmobile/koelsch/non-multiplatform:

drivers/built-in.o: In function `clk_round_parent':
clkdev.c:(.text+0xcf168): undefined reference to `cpufreq_next_valid'
drivers/built-in.o: In function `clk_rate_table_find':
clkdev.c:(.text+0xcf820): undefined reference to `cpufreq_next_valid'
make[3]: *** [vmlinux] Error 1

Fix this making cpufreq_next_valid function inline and move it to
cpufreq.h.

Fixes: 27e289dce297 (cpufreq: Introduce macros for cpufreq_frequency_table iteration)
Reported-and-tested-by: Geert Uytterhoeven <geert@linux-m68k.org>
	Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 5eeaf1f1897372590105f155c6a7110b3fa36aef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/cpufreq.h
diff --cc include/linux/cpufreq.h
index 3972fb457f19,3f458896d45c..000000000000
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@@ -413,7 -469,35 +413,39 @@@ struct cpufreq_frequency_table 
  				    * order */
  };
  
++<<<<<<< HEAD
 +bool cpufreq_next_valid(struct cpufreq_frequency_table **pos);
++=======
+ #if defined(CONFIG_CPU_FREQ) && defined(CONFIG_PM_OPP)
+ int dev_pm_opp_init_cpufreq_table(struct device *dev,
+ 				  struct cpufreq_frequency_table **table);
+ void dev_pm_opp_free_cpufreq_table(struct device *dev,
+ 				   struct cpufreq_frequency_table **table);
+ #else
+ static inline int dev_pm_opp_init_cpufreq_table(struct device *dev,
+ 						struct cpufreq_frequency_table
+ 						**table)
+ {
+ 	return -EINVAL;
+ }
+ 
+ static inline void dev_pm_opp_free_cpufreq_table(struct device *dev,
+ 						 struct cpufreq_frequency_table
+ 						 **table)
+ {
+ }
+ #endif
+ 
+ static inline bool cpufreq_next_valid(struct cpufreq_frequency_table **pos)
+ {
+ 	while ((*pos)->frequency != CPUFREQ_TABLE_END)
+ 		if ((*pos)->frequency != CPUFREQ_ENTRY_INVALID)
+ 			return true;
+ 		else
+ 			(*pos)++;
+ 	return false;
+ }
++>>>>>>> 5eeaf1f18973 (cpufreq: Fix build error on some platforms that use cpufreq_for_each_*)
  
  /*
   * cpufreq_for_each_entry -	iterate over a cpufreq_frequency_table
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index a029f5bcbc1e..c8bc717e8458 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -222,17 +222,6 @@ void cpufreq_cpu_put(struct cpufreq_policy *policy)
 }
 EXPORT_SYMBOL_GPL(cpufreq_cpu_put);
 
-bool cpufreq_next_valid(struct cpufreq_frequency_table **pos)
-{
-	while ((*pos)->frequency != CPUFREQ_TABLE_END)
-		if ((*pos)->frequency != CPUFREQ_ENTRY_INVALID)
-			return true;
-		else
-			(*pos)++;
-	return false;
-}
-EXPORT_SYMBOL_GPL(cpufreq_next_valid);
-
 /*********************************************************************
  *            EXTERNALLY AFFECTING FREQUENCY CHANGES                 *
  *********************************************************************/
* Unmerged path include/linux/cpufreq.h
