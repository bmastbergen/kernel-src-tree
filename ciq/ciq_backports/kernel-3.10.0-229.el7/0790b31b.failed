fs: disallow all fallocate operation on active swapfile

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [fs] ext4: disallow all fallocate operation on active swapfile (Lukas Czerner) [1150171]
Rebuild_FUZZ: 94.64%
commit-author Lukas Czerner <lczerner@redhat.com>
commit 0790b31b69374ddadefebb156251b319e5b43345
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0790b31b.failed

Currently some file system have IS_SWAPFILE check in their fallocate
implementations and some do not. However we should really prevent any
fallocate operation on swapfile so move the check to vfs and remove the
redundant checks from the file systems fallocate implementations.

	Signed-off-by: Lukas Czerner <lczerner@redhat.com>
	Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
(cherry picked from commit 0790b31b69374ddadefebb156251b319e5b43345)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 125dc8b5be9a,b74cfd2a42ec..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -3488,15 -3541,6 +3488,18 @@@ int ext4_punch_hole(struct inode *inode
  	}
  
  	mutex_lock(&inode->i_mutex);
++<<<<<<< HEAD
 +	/* It's not possible punch hole on append only file */
 +	if (IS_APPEND(inode) || IS_IMMUTABLE(inode)) {
 +		ret = -EPERM;
 +		goto out_mutex;
 +	}
 +	if (IS_SWAPFILE(inode)) {
 +		ret = -ETXTBSY;
 +		goto out_mutex;
 +	}
++=======
++>>>>>>> 0790b31b6937 (fs: disallow all fallocate operation on active swapfile)
  
  	/* No need to punch hole beyond i_size */
  	if (offset >= inode->i_size)
diff --git a/fs/ceph/file.c b/fs/ceph/file.c
index d37e8813350f..fd410ced2a48 100644
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@ -1213,9 +1213,6 @@ static long ceph_fallocate(struct file *file, int mode,
 	if (!S_ISREG(inode->i_mode))
 		return -EOPNOTSUPP;
 
-	if (IS_SWAPFILE(inode))
-		return -ETXTBSY;
-
 	mutex_lock(&inode->i_mutex);
 
 	if (ceph_snap(inode) != CEPH_NOSNAP) {
diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 098279c61cc8..0ee43e7d1b74 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -5122,11 +5122,6 @@ int ext4_collapse_range(struct inode *inode, loff_t offset, loff_t len)
 		goto out_mutex;
 	}
 
-	if (IS_SWAPFILE(inode)) {
-		ret = -ETXTBSY;
-		goto out_mutex;
-	}
-
 	/* Currently just for extent based files */
 	if (!ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS)) {
 		ret = -EOPNOTSUPP;
* Unmerged path fs/ext4/inode.c
diff --git a/fs/open.c b/fs/open.c
index 05cad6df8e3f..5ed37e2255d3 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -259,6 +259,13 @@ int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)
 	if (IS_IMMUTABLE(inode))
 		return -EPERM;
 
+	/*
+	 * We can not allow to do any fallocate operation on an active
+	 * swapfile
+	 */
+	if (IS_SWAPFILE(inode))
+		ret = -ETXTBSY;
+
 	/*
 	 * Revalidate the write permissions, in case security policy has
 	 * changed since the files were opened.
