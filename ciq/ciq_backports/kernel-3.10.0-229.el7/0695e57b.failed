perf tools: Factor features display code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Factor features display code (Jiri Olsa) [1134356]
Rebuild_FUZZ: 91.89%
commit-author Jiri Olsa <jolsa@redhat.com>
commit 0695e57b9a6a5eb856a58cf488f715b3bb7366a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0695e57b.failed

Currently the we display all detected features/libraries by following
rules:

 - if one of the features is missing
 - if it's build from clean tree

This patch changes changes this behavior in several ways.

- We no longer display all detected features, only detected libraries
  are displayed by default:

  $ make
    BUILD:   Doing 'make -j4' parallel build

  Auto-detecting system features:
  ...                         dwarf: [ on  ]
  ...                         glibc: [ on  ]
  ...                          gtk2: [ on  ]
  ...                      libaudit: [ on  ]
  ...                        libbfd: [ on  ]
  ...                        libelf: [ on  ]
  ...                       libnuma: [ on  ]
  ...                       libperl: [ on  ]
  ...                     libpython: [ on  ]
  ...                      libslang: [ on  ]
  ...                     libunwind: [ on  ]

  The assumption is, that above libraries are the most interesting part
of the detection, while we don't care much about detection of on-exit
support.

- If all above libraries are detected, the default is not shown on
  subsequent builds.

- If one of the above libraries is missing, the detection output is
  forced.

- The features status is stored in PERF-FEATURES file and the detection
  output is forced in case the there's difference between the file
  contents and currently detected features.

- If you want to see all detected features, you can use VF=1 make
  variable, that forces the detected features output.

  $ make VF=1
    BUILD:   Doing 'make -j4' parallel build

  Auto-detecting system features:
  ...                         dwarf: [ on  ]
  ...                         glibc: [ on  ]
  ...                          gtk2: [ on  ]
  ...                      libaudit: [ on  ]
  ...                        libbfd: [ on  ]
  ...                        libelf: [ on  ]
  ...                       libnuma: [ on  ]
  ...                       libperl: [ on  ]
  ...                     libpython: [ on  ]
  ...                      libslang: [ on  ]
  ...                     libunwind: [ on  ]
  ...                     backtrace: [ on  ]
  ...                fortify-source: [ on  ]
  ...                  gtk2-infobar: [ on  ]
  ...             libelf-getphdrnum: [ on  ]
  ...                   libelf-mmap: [ on  ]
  ...             libpython-version: [ on  ]
  ...                       on-exit: [ on  ]
  ...            stackprotector-all: [ on  ]
  ...                       timerfd: [ on  ]
  ...         libunwind-debug-frame: [ OFF ]
  ...                        bionic: [ OFF ]

	Signed-off-by: Jiri Olsa <jolsa@redhat.com>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jean Pihet <jean.pihet@linaro.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1392825179-5228-2-git-send-email-jolsa@redhat.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0695e57b9a6a5eb856a58cf488f715b3bb7366a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
#	tools/perf/config/Makefile
diff --cc tools/perf/Makefile.perf
index dbeeebbaa04f,bde91f8307ff..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -842,16 -893,14 +844,23 @@@ $(INSTALL_DOC_TARGETS)
  # not get included for the clean target:
  #
  config-clean:
 -	$(call QUIET_CLEAN, config)
 -	@$(MAKE) -C config/feature-checks clean >/dev/null
 -
 +	@$(MAKE) -C config/feature-checks clean
 +
++<<<<<<< HEAD
 +clean: $(LIBTRACEEVENT)-clean $(LIBLK)-clean config-clean
 +	$(RM) $(LIB_OBJS) $(BUILTIN_OBJS) $(LIB_FILE) $(OUTPUT)perf-archive $(OUTPUT)perf.o $(LANG_BINDINGS)
 +	$(RM) $(ALL_PROGRAMS) perf
 +	$(RM) *.spec *.pyc *.pyo */*.pyc */*.pyo $(OUTPUT)common-cmds.h TAGS tags cscope*
++=======
+ clean: $(LIBTRACEEVENT)-clean $(LIBAPIKFS)-clean config-clean
+ 	$(call QUIET_CLEAN, core-objs)  $(RM) $(LIB_OBJS) $(BUILTIN_OBJS) $(LIB_FILE) $(OUTPUT)perf-archive $(OUTPUT)perf.o $(LANG_BINDINGS) $(GTK_OBJS)
+ 	$(call QUIET_CLEAN, core-progs) $(RM) $(ALL_PROGRAMS) perf
+ 	$(call QUIET_CLEAN, core-gen)   $(RM)  *.spec *.pyc *.pyo */*.pyc */*.pyo $(OUTPUT)common-cmds.h TAGS tags cscope* $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)PERF-CFLAGS $(OUTPUT)PERF-FEATURES $(OUTPUT)util/*-bison* $(OUTPUT)util/*-flex*
++>>>>>>> 0695e57b9a6a (perf tools: Factor features display code)
  	$(QUIET_SUBDIR0)Documentation $(QUIET_SUBDIR1) clean
 +	$(RM) $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)PERF-CFLAGS
 +	$(RM) $(OUTPUT)util/*-bison*
 +	$(RM) $(OUTPUT)util/*-flex*
  	$(python-clean)
  
  #
diff --cc tools/perf/config/Makefile
index 374f88fe17c5,39e6e6cca8ed..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -102,52 -118,93 +102,105 @@@ ende
  #
  # Build the feature check binaries in parallel, ignore errors, ignore return value and suppress output:
  #
 +$(info )
 +$(info Auto-detecting system features:)
  
 -#
 -# Note that this is not a complete list of all feature tests, just
 -# those that are typically built on a fully configured system.
 -#
 -# [ Feature tests not mentioned here have to be built explicitly in
 -#   the rule that uses them - an example for that is the 'bionic'
 -#   feature check. ]
 -#
 -CORE_FEATURE_TESTS =			\
 -	backtrace			\
 -	dwarf				\
 +FEATURE_TESTS =				\
 +	hello				\
 +	stackprotector-all		\
++<<<<<<< HEAD
 +	stackprotector			\
 +	volatile-register-var		\
  	fortify-source			\
 -	glibc				\
 -	gtk2				\
 -	gtk2-infobar			\
 -	libaudit			\
 -	libbfd				\
 +	bionic				\
  	libelf				\
 -	libelf-getphdrnum		\
 -	libelf-mmap			\
 -	libnuma				\
 -	libperl				\
 -	libpython			\
 -	libpython-version		\
 -	libslang			\
 -	libunwind			\
 -	on-exit				\
 -	stackprotector-all		\
 +	glibc				\
 +	dwarf				\
 +	libnuma
++=======
+ 	timerfd
+ 
+ LIB_FEATURE_TESTS =			\
+ 	dwarf				\
+ 	glibc				\
+ 	gtk2				\
+ 	libaudit			\
+ 	libbfd				\
+ 	libelf				\
+ 	libnuma				\
+ 	libperl				\
+ 	libpython			\
+ 	libslang			\
+ 	libunwind
+ 
+ VF_FEATURE_TESTS =			\
+ 	backtrace			\
+ 	fortify-source			\
+ 	gtk2-infobar			\
+ 	libelf-getphdrnum		\
+ 	libelf-mmap			\
+ 	libpython-version		\
+ 	on-exit				\
+ 	stackprotector-all		\
+ 	timerfd				\
+ 	libunwind-debug-frame		\
+ 	bionic
+ 
+ # Set FEATURE_CHECK_(C|LD)FLAGS-all for all CORE_FEATURE_TESTS features.
+ # If in the future we need per-feature checks/flags for features not
+ # mentioned in this list we need to refactor this ;-).
+ set_test_all_flags = $(eval $(set_test_all_flags_code))
+ define set_test_all_flags_code
+   FEATURE_CHECK_CFLAGS-all  += $(FEATURE_CHECK_CFLAGS-$(1))
+   FEATURE_CHECK_LDFLAGS-all += $(FEATURE_CHECK_LDFLAGS-$(1))
+ endef
+ 
+ $(foreach feat,$(CORE_FEATURE_TESTS),$(call set_test_all_flags,$(feat)))
++>>>>>>> 0695e57b9a6a (perf tools: Factor features display code)
  
  #
  # Special fast-path for the 'all features are available' case:
  #
++<<<<<<< HEAD
 +$(call feature_check,all)
 +
++=======
+ $(call feature_check,all,$(MSG))
+ 
+ #
+ # Just in case the build freshly failed, make sure we print the
+ # feature matrix:
+ #
++>>>>>>> 0695e57b9a6a (perf tools: Factor features display code)
  ifeq ($(feature-all), 1)
 -  #
 -  # test-all.c passed - just set all the core feature flags to 1:
 -  #
 -  $(foreach feat,$(CORE_FEATURE_TESTS),$(call feature_set,$(feat)))
 +  $(foreach feat,$(FEATURE_TESTS),$(call feature_set,$(feat)))
  else
 -  $(shell $(MAKE) OUTPUT=$(OUTPUT_FEATURES) CFLAGS="$(EXTRA_CFLAGS)" LDFLAGS=$(LDFLAGS) -i -j -C config/feature-checks $(addsuffix .bin,$(CORE_FEATURE_TESTS)) >/dev/null 2>&1)
 -  $(foreach feat,$(CORE_FEATURE_TESTS),$(call feature_check,$(feat)))
 +  $(shell $(MAKE) -i -j -C config/feature-checks >/dev/null 2>&1)
 +  $(foreach feat,$(FEATURE_TESTS),$(call feature_check,$(feat)))
  endif
  
++<<<<<<< HEAD
 +feature_print = $(eval $(feature_print_code))
 +
 +#
 +# Print the result of the feature test:
 +#
 +define feature_print_code
 +  ifeq ($(feature-$(1)), 1)
 +    MSG = $(shell printf '...%30s: [ \033[32mon\033[m  ]' $(1))
 +  else
 +    MSG = $(shell printf '...%30s: [ \033[31mOFF\033[m ]' $(1))
 +  endif
 +  $(info $(MSG))
 +endef
 +
 +$(foreach feat,$(FEATURE_TESTS) DUMMY,$(call feature_print,$(feat)))
 +
 +# newline at the end of the feature printouts:
 +$(info )
 +
++=======
++>>>>>>> 0695e57b9a6a (perf tools: Factor features display code)
  ifeq ($(feature-stackprotector-all), 1)
    CFLAGS += -fstack-protector-all
  endif
@@@ -539,3 -579,67 +592,70 @@@ els
  perfexec_instdir = $(prefix)/$(perfexecdir)
  endif
  perfexec_instdir_SQ = $(subst ','\'',$(perfexec_instdir))
++<<<<<<< HEAD
++=======
+ 
+ # If we install to $(HOME) we keep the traceevent default:
+ # $(HOME)/.traceevent/plugins
+ # Otherwise we install plugins into the global $(libdir).
+ ifdef DESTDIR
+ plugindir=$(libdir)/traceevent/plugins
+ plugindir_SQ= $(subst ','\'',$(plugindir))
+ endif
+ 
+ #
+ # Print the result of the feature test:
+ #
+ feature_print = $(eval $(feature_print_code)) $(info $(MSG))
+ 
+ define feature_print_code
+   ifeq ($(feature-$(1)), 1)
+     MSG = $(shell printf '...%30s: [ \033[32mon\033[m  ]' $(1))
+   else
+     MSG = $(shell printf '...%30s: [ \033[31mOFF\033[m ]' $(1))
+   endif
+ endef
+ 
+ PERF_FEATURES := $(foreach feat,$(LIB_FEATURE_TESTS),feature-$(feat)($(feature-$(feat))))
+ PERF_FEATURES_FILE := $(shell touch $(OUTPUT)PERF-FEATURES; cat $(OUTPUT)PERF-FEATURES)
+ 
+ # The $(display_lib) controls the default detection message
+ # output. It's set if:
+ # - detected features differes from stored features from
+ #   last build (in PERF-FEATURES file)
+ # - one of the $(LIB_FEATURE_TESTS) is not detected
+ # - VF is enabled
+ 
+ ifneq ("$(PERF_FEATURES)","$(PERF_FEATURES_FILE)")
+   $(shell echo "$(PERF_FEATURES)" > $(OUTPUT)PERF-FEATURES)
+   display_lib := 1
+ endif
+ 
+ feature_check = $(eval $(feature_check_code))
+ define feature_check_code
+   ifneq ($(feature-$(1)), 1)
+     display_lib := 1
+   endif
+ endef
+ 
+ $(foreach feat,$(LIB_FEATURE_TESTS),$(call feature_check,$(feat)))
+ 
+ ifeq ($(VF),1)
+   display_lib := 1
+   display_vf := 1
+ endif
+ 
+ ifeq ($(display_lib),1)
+   $(info )
+   $(info Auto-detecting system features:)
+   $(foreach feat,$(LIB_FEATURE_TESTS),$(call feature_print,$(feat),))
+ endif
+ 
+ ifeq ($(display_vf),1)
+   $(foreach feat,$(VF_FEATURE_TESTS),$(call feature_print,$(feat),))
+ endif
+ 
+ ifeq ($(display_lib),1)
+   $(info )
+ endif
++>>>>>>> 0695e57b9a6a (perf tools: Factor features display code)
* Unmerged path tools/perf/Makefile.perf
* Unmerged path tools/perf/config/Makefile
