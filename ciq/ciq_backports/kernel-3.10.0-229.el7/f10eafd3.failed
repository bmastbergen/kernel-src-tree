xprtrdma: Fall back to MTHCAFMR when FRMR is not supported

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] sunrpc/xprtrdma: Fall back to MTHCAFMR when FRMR is not supported (Steve Dickson) [1113248]
Rebuild_FUZZ: 94.31%
commit-author Chuck Lever <chuck.lever@oracle.com>
commit f10eafd3a6ce9da7e96999c124b643ea6c4921f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f10eafd3.failed

An audit of in-kernel RDMA providers that do not support the FRMR
memory registration shows that several of them support MTHCAFMR.
Prefer MTHCAFMR when FRMR is not supported.

If MTHCAFMR is not supported, only then choose ALLPHYSICAL.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit f10eafd3a6ce9da7e96999c124b643ea6c4921f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sunrpc/xprtrdma/verbs.c
diff --cc net/sunrpc/xprtrdma/verbs.c
index 0ce6cc091efd,a3527989f5b3..000000000000
--- a/net/sunrpc/xprtrdma/verbs.c
+++ b/net/sunrpc/xprtrdma/verbs.c
@@@ -493,52 -491,14 +493,61 @@@ rpcrdma_ia_open(struct rpcrdma_xprt *xp
  		ia->ri_dma_lkey = ia->ri_id->device->local_dma_lkey;
  	}
  
++<<<<<<< HEAD
 +	switch (memreg) {
 +	case RPCRDMA_MEMWINDOWS:
 +	case RPCRDMA_MEMWINDOWS_ASYNC:
 +		if (!(devattr.device_cap_flags & IB_DEVICE_MEM_WINDOW)) {
 +			dprintk("RPC:       %s: MEMWINDOWS registration "
 +				"specified but not supported by adapter, "
 +				"using slower RPCRDMA_REGISTER\n",
 +				__func__);
 +			memreg = RPCRDMA_REGISTER;
 +		}
 +		break;
 +	case RPCRDMA_MTHCAFMR:
 +		if (!ia->ri_id->device->alloc_fmr) {
 +#if RPCRDMA_PERSISTENT_REGISTRATION
 +			dprintk("RPC:       %s: MTHCAFMR registration "
 +				"specified but not supported by adapter, "
 +				"using riskier RPCRDMA_ALLPHYSICAL\n",
 +				__func__);
 +			memreg = RPCRDMA_ALLPHYSICAL;
 +#else
 +			dprintk("RPC:       %s: MTHCAFMR registration "
 +				"specified but not supported by adapter, "
 +				"using slower RPCRDMA_REGISTER\n",
 +				__func__);
 +			memreg = RPCRDMA_REGISTER;
 +#endif
 +		}
 +		break;
 +	case RPCRDMA_FRMR:
++=======
+ 	if (memreg == RPCRDMA_FRMR) {
++>>>>>>> f10eafd3a6ce (xprtrdma: Fall back to MTHCAFMR when FRMR is not supported)
  		/* Requires both frmr reg and local dma lkey */
  		if ((devattr.device_cap_flags &
  		     (IB_DEVICE_MEM_MGT_EXTENSIONS|IB_DEVICE_LOCAL_DMA_LKEY)) !=
  		    (IB_DEVICE_MEM_MGT_EXTENSIONS|IB_DEVICE_LOCAL_DMA_LKEY)) {
 +#if RPCRDMA_PERSISTENT_REGISTRATION
  			dprintk("RPC:       %s: FRMR registration "
++<<<<<<< HEAD
 +				"specified but not supported by adapter, "
 +				"using riskier RPCRDMA_ALLPHYSICAL\n",
 +				__func__);
 +			memreg = RPCRDMA_ALLPHYSICAL;
 +#else
 +			dprintk("RPC:       %s: FRMR registration "
 +				"specified but not supported by adapter, "
 +				"using slower RPCRDMA_REGISTER\n",
 +				__func__);
 +			memreg = RPCRDMA_REGISTER;
 +#endif
++=======
+ 				"not supported by HCA\n", __func__);
+ 			memreg = RPCRDMA_MTHCAFMR;
++>>>>>>> f10eafd3a6ce (xprtrdma: Fall back to MTHCAFMR when FRMR is not supported)
  		} else {
  			/* Mind the ia limit on FRMR page list depth */
  			ia->ri_max_frmr_depth = min_t(unsigned int,
* Unmerged path net/sunrpc/xprtrdma/verbs.c
