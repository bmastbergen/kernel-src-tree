gre: Add support for checksum unnecessary conversions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Tom Herbert <therbert@google.com>
commit 884d338c041c2aa4536ade8620efa585e7c57f3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/884d338c.failed

Call skb_checksum_try_convert and skb_gro_checksum_try_convert
after checksum is found present and validated in the GRE header
for normal and GRO paths respectively.

In GRO path, call skb_gro_checksum_try_convert

	Signed-off-by: Tom Herbert <therbert@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 884d338c041c2aa4536ade8620efa585e7c57f3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/gre_demux.c
#	net/ipv4/gre_offload.c
diff --cc net/ipv4/gre_demux.c
index 2ef87d72389b,7e0756da8737..000000000000
--- a/net/ipv4/gre_demux.c
+++ b/net/ipv4/gre_demux.c
@@@ -124,7 -125,10 +124,14 @@@ static int parse_gre_header(struct sk_b
  			*csum_err = true;
  			return -EINVAL;
  		}
++<<<<<<< HEAD
 +		skb_pop_rcv_encapsulation(skb);
++=======
+ 
+ 		skb_checksum_try_convert(skb, IPPROTO_GRE, 0,
+ 					 null_compute_pseudo);
+ 
++>>>>>>> 884d338c041c (gre: Add support for checksum unnecessary conversions)
  		options++;
  	}
  
diff --cc net/ipv4/gre_offload.c
index 24deb3928b9e,d3fe2ac05167..000000000000
--- a/net/ipv4/gre_offload.c
+++ b/net/ipv4/gre_offload.c
@@@ -190,22 -170,16 +190,34 @@@ static struct sk_buff **gre_gro_receive
  		if (unlikely(!greh))
  			goto out_unlock;
  	}
 -
 +	if (greh->flags & GRE_CSUM) { /* Need to verify GRE csum first */
 +		__sum16 csum = 0;
 +
++<<<<<<< HEAD
 +		if (skb->ip_summed == CHECKSUM_COMPLETE)
 +			csum = csum_fold(NAPI_GRO_CB(skb)->csum);
 +		/* Don't trust csum error calculated/reported by h/w */
 +		if (skb->ip_summed == CHECKSUM_NONE || csum != 0)
 +			csum = gro_skb_checksum(skb);
 +
 +		/* GRE CSUM is the 1's complement of the 1's complement sum
 +		 * of the GRE hdr plus payload so it should add up to 0xffff
 +		 * (and 0 after csum_fold()) just like the IPv4 hdr csum.
 +		 */
 +		if (csum)
 +			goto out_unlock;
 +	}
++=======
+ 	/* Don't bother verifying checksum if we're going to flush anyway. */
+ 	if ((greh->flags & GRE_CSUM) && !NAPI_GRO_CB(skb)->flush) {
+ 		if (skb_gro_checksum_simple_validate(skb))
+ 			goto out_unlock;
+ 
+ 		skb_gro_checksum_try_convert(skb, IPPROTO_GRE, 0,
+ 					     null_compute_pseudo);
+ 	}
+ 
++>>>>>>> 884d338c041c (gre: Add support for checksum unnecessary conversions)
  	flush = 0;
  
  	for (p = *head; p; p = p->next) {
* Unmerged path net/ipv4/gre_demux.c
* Unmerged path net/ipv4/gre_offload.c
