perf tools: Add global list of opened dso objects

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Add global list of opened dso objects (Jiri Olsa) [1134356]
Rebuild_FUZZ: 93.48%
commit-author Jiri Olsa <jolsa@kernel.org>
commit eba5102d2f0b4117edd089f2d882d9386025c829
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/eba5102d.failed

Adding global list of opened dso objects, so we can
track them and use the list for caching dso data file
descriptors.

	Acked-by: Namhyung Kim <namhyung@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Jean Pihet <jean.pihet@linaro.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1401892622-30848-5-git-send-email-jolsa@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit eba5102d2f0b4117edd089f2d882d9386025c829)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/dso.c
#	tools/perf/util/dso.h
diff --cc tools/perf/util/dso.c
index ffd3d5ede878,5d7c7bcc6276..000000000000
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@@ -135,13 -136,27 +135,28 @@@ int dso__binary_type_file(struct dso *d
  	return ret;
  }
  
- static int open_dso(struct dso *dso, struct machine *machine)
+ /*
+  * Global list of open DSOs.
+  */
+ static LIST_HEAD(dso__data_open);
+ 
+ static void dso__list_add(struct dso *dso)
+ {
+ 	list_add_tail(&dso->data.open_entry, &dso__data_open);
+ }
+ 
+ static void dso__list_del(struct dso *dso)
+ {
+ 	list_del(&dso->data.open_entry);
+ }
+ 
+ static int __open_dso(struct dso *dso, struct machine *machine)
  {
 +	char *root_dir = (char *) "";
 +	char *name;
  	int fd;
 -	char *root_dir = (char *)"";
 -	char *name = malloc(PATH_MAX);
  
 +	name = malloc(PATH_MAX);
  	if (!name)
  		return -ENOMEM;
  
@@@ -159,6 -174,35 +174,38 @@@
  	return fd;
  }
  
++<<<<<<< HEAD
++=======
+ static int open_dso(struct dso *dso, struct machine *machine)
+ {
+ 	int fd = __open_dso(dso, machine);
+ 
+ 	if (fd > 0)
+ 		dso__list_add(dso);
+ 
+ 	return fd;
+ }
+ 
+ static void close_data_fd(struct dso *dso)
+ {
+ 	if (dso->data.fd >= 0) {
+ 		close(dso->data.fd);
+ 		dso->data.fd = -1;
+ 		dso__list_del(dso);
+ 	}
+ }
+ 
+ static void close_dso(struct dso *dso)
+ {
+ 	close_data_fd(dso);
+ }
+ 
+ void dso__data_close(struct dso *dso)
+ {
+ 	close_dso(dso);
+ }
+ 
++>>>>>>> eba5102d2f0b (perf tools: Add global list of opened dso objects)
  int dso__data_fd(struct dso *dso, struct machine *machine)
  {
  	enum dso_binary_type binary_type_data[] = {
diff --cc tools/perf/util/dso.h
index 433c80284bd6,90988bf06641..000000000000
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@@ -102,6 -102,8 +102,11 @@@ struct dso 
  	/* dso data file */
  	struct {
  		struct rb_root	 cache;
++<<<<<<< HEAD
++=======
+ 		int		 fd;
+ 		struct list_head open_entry;
++>>>>>>> eba5102d2f0b (perf tools: Add global list of opened dso objects)
  	} data;
  
  	char		 name[0];
* Unmerged path tools/perf/util/dso.c
* Unmerged path tools/perf/util/dso.h
