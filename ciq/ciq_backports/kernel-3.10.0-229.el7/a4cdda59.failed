NFS: Create a common pgio_rpc_prepare function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Anna Schumaker <Anna.Schumaker@netapp.com>
commit a4cdda59111f92000297e0d3edb1e0e08ba3549b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/a4cdda59.failed

The read and write paths do exactly the same thing for the rpc_prepare
rpc_op.  This patch combines them together into a single function.

	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit a4cdda59111f92000297e0d3edb1e0e08ba3549b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/internal.h
#	fs/nfs/nfs3proc.c
#	fs/nfs/nfs4proc.c
#	fs/nfs/proc.c
#	fs/nfs/read.c
#	fs/nfs/write.c
#	include/linux/nfs_page.h
#	include/linux/nfs_xdr.h
diff --cc fs/nfs/internal.h
index 96bd22580dbf,1959260f8c57..000000000000
--- a/fs/nfs/internal.h
+++ b/fs/nfs/internal.h
@@@ -238,6 -237,13 +238,16 @@@ extern void nfs_pgheader_init(struct nf
  void nfs_set_pgio_error(struct nfs_pgio_header *hdr, int error, loff_t pos);
  int nfs_iocounter_wait(struct nfs_io_counter *c);
  
++<<<<<<< HEAD
++=======
+ struct nfs_rw_header *nfs_rw_header_alloc(const struct nfs_rw_ops *);
+ void nfs_rw_header_free(struct nfs_pgio_header *);
+ struct nfs_pgio_data *nfs_pgio_data_alloc(struct nfs_pgio_header *, unsigned int);
+ void nfs_pgio_data_release(struct nfs_pgio_data *);
+ void nfs_pgio_prepare(struct rpc_task *, void *);
+ void nfs_pgio_release(void *);
+ 
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  static inline void nfs_iocounter_init(struct nfs_io_counter *c)
  {
  	c->flags = 0;
diff --cc fs/nfs/nfs3proc.c
index 8ced9deec5a6,e7daa42bbc86..000000000000
--- a/fs/nfs/nfs3proc.c
+++ b/fs/nfs/nfs3proc.c
@@@ -791,7 -812,7 +791,11 @@@ static void nfs3_proc_read_setup(struc
  	msg->rpc_proc = &nfs3_procedures[NFS3PROC_READ];
  }
  
++<<<<<<< HEAD
 +static int nfs3_proc_read_rpc_prepare(struct rpc_task *task, struct nfs_read_data *data)
++=======
+ static int nfs3_proc_pgio_rpc_prepare(struct rpc_task *task, struct nfs_pgio_data *data)
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  {
  	rpc_call_start(task);
  	return 0;
@@@ -813,12 -834,6 +817,15 @@@ static void nfs3_proc_write_setup(struc
  	msg->rpc_proc = &nfs3_procedures[NFS3PROC_WRITE];
  }
  
++<<<<<<< HEAD
 +static int nfs3_proc_write_rpc_prepare(struct rpc_task *task, struct nfs_write_data *data)
 +{
 +	rpc_call_start(task);
 +	return 0;
 +}
 +
++=======
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  static void nfs3_proc_commit_rpc_prepare(struct rpc_task *task, struct nfs_commit_data *data)
  {
  	rpc_call_start(task);
diff --cc fs/nfs/nfs4proc.c
index 4794ca693367,44fb93a66d26..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -4089,7 -4089,7 +4089,11 @@@ static void nfs4_proc_read_setup(struc
  	nfs4_init_sequence(&data->args.seq_args, &data->res.seq_res, 0);
  }
  
++<<<<<<< HEAD
 +static int nfs4_proc_read_rpc_prepare(struct rpc_task *task, struct nfs_read_data *data)
++=======
+ static int nfs4_proc_pgio_rpc_prepare(struct rpc_task *task, struct nfs_pgio_data *data)
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  {
  	if (nfs4_setup_sequence(NFS_SERVER(data->header->inode),
  			&data->args.seq_args,
@@@ -4177,21 -4177,6 +4181,24 @@@ static void nfs4_proc_write_setup(struc
  	nfs4_init_sequence(&data->args.seq_args, &data->res.seq_res, 1);
  }
  
++<<<<<<< HEAD
 +static int nfs4_proc_write_rpc_prepare(struct rpc_task *task, struct nfs_write_data *data)
 +{
 +	if (nfs4_setup_sequence(NFS_SERVER(data->header->inode),
 +			&data->args.seq_args,
 +			&data->res.seq_res,
 +			task))
 +		return 0;
 +	if (nfs4_set_rw_stateid(&data->args.stateid, data->args.context,
 +				data->args.lock_context, FMODE_WRITE) == -EIO)
 +		return -EIO;
 +	if (unlikely(test_bit(NFS_CONTEXT_BAD, &data->args.context->flags)))
 +		return -EIO;
 +	return 0;
 +}
 +
++=======
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  static void nfs4_proc_commit_rpc_prepare(struct rpc_task *task, struct nfs_commit_data *data)
  {
  	nfs4_setup_sequence(NFS_SERVER(data->inode),
diff --cc fs/nfs/proc.c
index 8cc227fcd4d2,c171ce1a8a30..000000000000
--- a/fs/nfs/proc.c
+++ b/fs/nfs/proc.c
@@@ -599,7 -599,7 +599,11 @@@ static void nfs_proc_read_setup(struct 
  	msg->rpc_proc = &nfs_procedures[NFSPROC_READ];
  }
  
++<<<<<<< HEAD
 +static int nfs_proc_read_rpc_prepare(struct rpc_task *task, struct nfs_read_data *data)
++=======
+ static int nfs_proc_pgio_rpc_prepare(struct rpc_task *task, struct nfs_pgio_data *data)
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  {
  	rpc_call_start(task);
  	return 0;
@@@ -621,12 -621,6 +625,15 @@@ static void nfs_proc_write_setup(struc
  	msg->rpc_proc = &nfs_procedures[NFSPROC_WRITE];
  }
  
++<<<<<<< HEAD
 +static int nfs_proc_write_rpc_prepare(struct rpc_task *task, struct nfs_write_data *data)
 +{
 +	rpc_call_start(task);
 +	return 0;
 +}
 +
++=======
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  static void nfs_proc_commit_rpc_prepare(struct rpc_task *task, struct nfs_commit_data *data)
  {
  	BUG();
diff --cc fs/nfs/read.c
index 473bba35a2cb,cfa15e828dd6..000000000000
--- a/fs/nfs/read.c
+++ b/fs/nfs/read.c
@@@ -513,24 -454,10 +513,27 @@@ static void nfs_readpage_result_common(
  		nfs_readpage_retry(task, data);
  }
  
++<<<<<<< HEAD
 +static void nfs_readpage_release_common(void *calldata)
 +{
 +	nfs_readdata_release(calldata);
 +}
 +
 +void nfs_read_prepare(struct rpc_task *task, void *calldata)
 +{
 +	struct nfs_read_data *data = calldata;
 +	int err;
 +	err = NFS_PROTO(data->header->inode)->read_rpc_prepare(task, data);
 +	if (err)
 +		rpc_exit(task, err);
 +}
 +
++=======
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  static const struct rpc_call_ops nfs_read_common_ops = {
- 	.rpc_call_prepare = nfs_read_prepare,
+ 	.rpc_call_prepare = nfs_pgio_prepare,
  	.rpc_call_done = nfs_readpage_result_common,
- 	.rpc_release = nfs_readpage_release_common,
+ 	.rpc_release = nfs_pgio_release,
  };
  
  /*
@@@ -693,3 -620,9 +696,12 @@@ void nfs_destroy_readpagecache(void
  {
  	kmem_cache_destroy(nfs_rdata_cachep);
  }
++<<<<<<< HEAD
++=======
+ 
+ static const struct nfs_rw_ops nfs_rw_read_ops = {
+ 	.rw_mode		= FMODE_READ,
+ 	.rw_alloc_header	= nfs_readhdr_alloc,
+ 	.rw_free_header		= nfs_readhdr_free,
+ };
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
diff --cc fs/nfs/write.c
index f9fc82c305d1,ae799c96ec2b..000000000000
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@@ -1305,15 -1248,6 +1305,18 @@@ void nfs_pageio_reset_write_mds(struct 
  EXPORT_SYMBOL_GPL(nfs_pageio_reset_write_mds);
  
  
++<<<<<<< HEAD
 +void nfs_write_prepare(struct rpc_task *task, void *calldata)
 +{
 +	struct nfs_write_data *data = calldata;
 +	int err;
 +	err = NFS_PROTO(data->header->inode)->write_rpc_prepare(task, data);
 +	if (err)
 +		rpc_exit(task, err);
 +}
 +
++=======
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  void nfs_commit_prepare(struct rpc_task *task, void *calldata)
  {
  	struct nfs_commit_data *data = calldata;
@@@ -1335,9 -1269,8 +1338,12 @@@ static void nfs_writeback_done_common(s
  	nfs_writeback_done(task, data);
  }
  
- static void nfs_writeback_release_common(void *calldata)
+ static void nfs_writeback_release_common(struct nfs_pgio_data *data)
  {
++<<<<<<< HEAD
 +	struct nfs_write_data	*data = calldata;
++=======
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  	struct nfs_pgio_header *hdr = data->header;
  	int status = data->task.tk_status;
  
@@@ -1351,7 -1284,6 +1357,10 @@@
  			set_bit(NFS_IOHDR_NEED_RESCHED, &hdr->flags);
  		spin_unlock(&hdr->lock);
  	}
++<<<<<<< HEAD
 +	nfs_writedata_release(data);
++=======
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  }
  
  static const struct rpc_call_ops nfs_write_common_ops = {
@@@ -1974,3 -1906,9 +1983,12 @@@ void nfs_destroy_writepagecache(void
  	kmem_cache_destroy(nfs_wdata_cachep);
  }
  
++<<<<<<< HEAD
++=======
+ static const struct nfs_rw_ops nfs_rw_write_ops = {
+ 	.rw_mode		= FMODE_WRITE,
+ 	.rw_alloc_header	= nfs_writehdr_alloc,
+ 	.rw_free_header		= nfs_writehdr_free,
+ 	.rw_release		= nfs_writeback_release_common,
+ };
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
diff --cc include/linux/nfs_page.h
index 92ce5783b707,da00a4d6f470..000000000000
--- a/include/linux/nfs_page.h
+++ b/include/linux/nfs_page.h
@@@ -52,6 -52,13 +52,16 @@@ struct nfs_pageio_ops 
  	int	(*pg_doio)(struct nfs_pageio_descriptor *);
  };
  
++<<<<<<< HEAD
++=======
+ struct nfs_rw_ops {
+ 	const fmode_t rw_mode;
+ 	struct nfs_rw_header *(*rw_alloc_header)(void);
+ 	void (*rw_free_header)(struct nfs_rw_header *);
+ 	void (*rw_release)(struct nfs_pgio_data *);
+ };
+ 
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  struct nfs_pageio_descriptor {
  	struct list_head	pg_list;
  	unsigned long		pg_bytes_written;
diff --cc include/linux/nfs_xdr.h
index 381f832b03c6,adef7bd2d06d..000000000000
--- a/include/linux/nfs_xdr.h
+++ b/include/linux/nfs_xdr.h
@@@ -1448,12 -1429,11 +1448,20 @@@ struct nfs_rpc_ops 
  			     struct nfs_pathconf *);
  	int	(*set_capabilities)(struct nfs_server *, struct nfs_fh *);
  	int	(*decode_dirent)(struct xdr_stream *, struct nfs_entry *, int);
++<<<<<<< HEAD
 +	void	(*read_setup)   (struct nfs_read_data *, struct rpc_message *);
 +	int	(*read_rpc_prepare)(struct rpc_task *, struct nfs_read_data *);
 +	int	(*read_done)  (struct rpc_task *, struct nfs_read_data *);
 +	void	(*write_setup)  (struct nfs_write_data *, struct rpc_message *);
 +	int	(*write_rpc_prepare)(struct rpc_task *, struct nfs_write_data *);
 +	int	(*write_done)  (struct rpc_task *, struct nfs_write_data *);
++=======
+ 	int	(*pgio_rpc_prepare)(struct rpc_task *, struct nfs_pgio_data *);
+ 	void	(*read_setup)   (struct nfs_pgio_data *, struct rpc_message *);
+ 	int	(*read_done)  (struct rpc_task *, struct nfs_pgio_data *);
+ 	void	(*write_setup)  (struct nfs_pgio_data *, struct rpc_message *);
+ 	int	(*write_done)  (struct rpc_task *, struct nfs_pgio_data *);
++>>>>>>> a4cdda59111f (NFS: Create a common pgio_rpc_prepare function)
  	void	(*commit_setup) (struct nfs_commit_data *, struct rpc_message *);
  	void	(*commit_rpc_prepare)(struct rpc_task *, struct nfs_commit_data *);
  	int	(*commit_done) (struct rpc_task *, struct nfs_commit_data *);
* Unmerged path fs/nfs/internal.h
* Unmerged path fs/nfs/nfs3proc.c
* Unmerged path fs/nfs/nfs4proc.c
diff --git a/fs/nfs/pagelist.c b/fs/nfs/pagelist.c
index 2ffebf2081ce..2b52710a707f 100644
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@ -295,6 +295,32 @@ bool nfs_generic_pg_test(struct nfs_pageio_descriptor *desc, struct nfs_page *pr
 }
 EXPORT_SYMBOL_GPL(nfs_generic_pg_test);
 
+/**
+ * nfs_pgio_prepare - Prepare pageio data to go over the wire
+ * @task: The current task
+ * @calldata: pageio data to prepare
+ */
+void nfs_pgio_prepare(struct rpc_task *task, void *calldata)
+{
+	struct nfs_pgio_data *data = calldata;
+	int err;
+	err = NFS_PROTO(data->header->inode)->pgio_rpc_prepare(task, data);
+	if (err)
+		rpc_exit(task, err);
+}
+
+/**
+ * nfs_pgio_release - Release pageio data
+ * @calldata: The pageio data to release
+ */
+void nfs_pgio_release(void *calldata)
+{
+	struct nfs_pgio_data *data = calldata;
+	if (data->header->rw_ops->rw_release)
+		data->header->rw_ops->rw_release(data);
+	nfs_pgio_data_release(data);
+}
+
 /**
  * nfs_pageio_init - initialise a page io descriptor
  * @desc: pointer to descriptor
* Unmerged path fs/nfs/proc.c
* Unmerged path fs/nfs/read.c
* Unmerged path fs/nfs/write.c
* Unmerged path include/linux/nfs_page.h
* Unmerged path include/linux/nfs_xdr.h
