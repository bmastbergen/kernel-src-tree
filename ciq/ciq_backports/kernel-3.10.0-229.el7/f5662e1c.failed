ALSA: hda - Refactor quirk picking and change quirk priority

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [alsa] hda: Refactor quirk picking and change quirk priority (Jaroslav Kysela) [1112200]
Rebuild_FUZZ: 92.04%
commit-author David Henningsson <david.henningsson@canonical.com>
commit f5662e1cbf3f0939a6e033a00c542be4a0c2edee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f5662e1c.failed

Previously, calling one quirk function first and another later
would make the latter one take priority, this is now changed
to make the former take priority.

By adding two special values for fixup_id we can also get rid of the
fixup_forced flag.

	Signed-off-by: David Henningsson <david.henningsson@canonical.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit f5662e1cbf3f0939a6e033a00c542be4a0c2edee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/hda_auto_parser.c
diff --cc sound/pci/hda/hda_auto_parser.c
index abf9594417ee,51dea49aadd4..000000000000
--- a/sound/pci/hda/hda_auto_parser.c
+++ b/sound/pci/hda/hda_auto_parser.c
@@@ -891,16 -889,18 +894,28 @@@ void snd_hda_pick_fixup(struct hda_code
  	/* when model=nofixup is given, don't pick up any fixups */
  	if (codec->modelname && !strcmp(codec->modelname, "nofixup")) {
  		codec->fixup_list = NULL;
++<<<<<<< HEAD
 +		codec->fixup_id = -1;
++=======
+ 		codec->fixup_name = NULL;
+ 		codec->fixup_id = HDA_FIXUP_ID_NO_FIXUP;
++>>>>>>> f5662e1cbf3f (ALSA: hda - Refactor quirk picking and change quirk priority)
  		return;
  	}
  
  	if (codec->modelname && models) {
  		while (models->name) {
  			if (!strcmp(codec->modelname, models->name)) {
++<<<<<<< HEAD
 +				id = models->id;
 +				name = models->name;
 +				break;
++=======
+ 				codec->fixup_id = models->id;
+ 				codec->fixup_name = models->name;
+ 				codec->fixup_list = fixlist;
+ 				return;
++>>>>>>> f5662e1cbf3f (ALSA: hda - Refactor quirk picking and change quirk priority)
  			}
  			models++;
  		}
* Unmerged path sound/pci/hda/hda_auto_parser.c
diff --git a/sound/pci/hda/hda_codec.c b/sound/pci/hda/hda_codec.c
index d0422f97ef10..0c3e50e9f8c2 100644
--- a/sound/pci/hda/hda_codec.c
+++ b/sound/pci/hda/hda_codec.c
@@ -1468,6 +1468,7 @@ int snd_hda_codec_new(struct hda_bus *bus,
 
 	INIT_DELAYED_WORK(&codec->jackpoll_work, hda_jackpoll_work);
 	codec->depop_delay = -1;
+	codec->fixup_id = HDA_FIXUP_ID_NOT_SET;
 
 #ifdef CONFIG_PM
 	spin_lock_init(&codec->power_lock);
diff --git a/sound/pci/hda/hda_local.h b/sound/pci/hda/hda_local.h
index d5900d4376f2..1710174c3873 100644
--- a/sound/pci/hda/hda_local.h
+++ b/sound/pci/hda/hda_local.h
@@ -437,6 +437,8 @@ struct snd_hda_pin_quirk {
 
 #endif
 
+#define HDA_FIXUP_ID_NOT_SET -1
+#define HDA_FIXUP_ID_NO_FIXUP -2
 
 /* fixup types */
 enum {
diff --git a/sound/pci/hda/patch_cirrus.c b/sound/pci/hda/patch_cirrus.c
index 387f0b551889..3db724eaa53c 100644
--- a/sound/pci/hda/patch_cirrus.c
+++ b/sound/pci/hda/patch_cirrus.c
@@ -657,8 +657,10 @@ static void cs4208_fixup_mac(struct hda_codec *codec,
 {
 	if (action != HDA_FIXUP_ACT_PRE_PROBE)
 		return;
+
+	codec->fixup_id = HDA_FIXUP_ID_NOT_SET;
 	snd_hda_pick_fixup(codec, NULL, cs4208_mac_fixup_tbl, cs4208_fixups);
-	if (codec->fixup_id < 0 || codec->fixup_id == CS4208_MAC_AUTO)
+	if (codec->fixup_id == HDA_FIXUP_ID_NOT_SET)
 		codec->fixup_id = CS4208_GPIO0; /* default fixup */
 	snd_hda_apply_fixup(codec, action);
 }
diff --git a/sound/pci/hda/patch_sigmatel.c b/sound/pci/hda/patch_sigmatel.c
index c8fb93385b9c..47218f4c426b 100644
--- a/sound/pci/hda/patch_sigmatel.c
+++ b/sound/pci/hda/patch_sigmatel.c
@@ -3449,9 +3449,11 @@ static void stac922x_fixup_intel_mac_auto(struct hda_codec *codec,
 {
 	if (action != HDA_FIXUP_ACT_PRE_PROBE)
 		return;
+
+	codec->fixup_id = HDA_FIXUP_ID_NOT_SET;
 	snd_hda_pick_fixup(codec, NULL, stac922x_intel_mac_fixup_tbl,
 			   stac922x_fixups);
-	if (codec->fixup_id != STAC_INTEL_MAC_AUTO)
+	if (codec->fixup_id != HDA_FIXUP_ID_NOT_SET)
 		snd_hda_apply_fixup(codec, action);
 }
 
