mm: page_alloc: do not cache reclaim distances

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [mm] page_alloc: do not cache reclaim distances (Larry Woodman) [1120342]
Rebuild_FUZZ: 95.45%
commit-author Mel Gorman <mgorman@suse.de>
commit 5f7a75acdb24c7b9c436b3a0a66eec12e101d19c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/5f7a75ac.failed

pgdat->reclaim_nodes tracks if a remote node is allowed to be reclaimed
by zone_reclaim due to its distance.  As it is expected that
zone_reclaim_mode will be rarely enabled it is unreasonable for all
machines to take a penalty.  Fortunately, the zone_reclaim_mode() path
is already slow and it is the path that takes the hit.

	Signed-off-by: Mel Gorman <mgorman@suse.de>
	Acked-by: Johannes Weiner <hannes@cmpxchg.org>
	Reviewed-by: Zhang Yanfei <zhangyanfei@cn.fujitsu.com>
	Acked-by: Michal Hocko <mhocko@suse.cz>
	Reviewed-by: Christoph Lameter <cl@linux.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 5f7a75acdb24c7b9c436b3a0a66eec12e101d19c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index c2c1427d74ec,9f13bcfb6762..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -4809,9 -4922,11 +4798,17 @@@ void __paginginit free_area_init_node(i
  
  	pgdat->node_id = nid;
  	pgdat->node_start_pfn = node_start_pfn;
++<<<<<<< HEAD
 +	if (node_state(nid, N_MEMORY))
 +		init_zone_allows_reclaim(nid);
 +	calculate_node_totalpages(pgdat, zones_size, zholes_size);
++=======
+ #ifdef CONFIG_HAVE_MEMBLOCK_NODE_MAP
+ 	get_pfn_range_for_nid(nid, &start_pfn, &end_pfn);
+ #endif
+ 	calculate_node_totalpages(pgdat, start_pfn, end_pfn,
+ 				  zones_size, zholes_size);
++>>>>>>> 5f7a75acdb24 (mm: page_alloc: do not cache reclaim distances)
  
  	alloc_node_mem_map(pgdat);
  #ifdef CONFIG_FLAT_NODE_MEM_MAP
diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index e663dc6fa0e1..f79a1c48d075 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -766,7 +766,6 @@ typedef struct pglist_data {
 	unsigned long node_spanned_pages; /* total size of physical page
 					     range, including holes */
 	int node_id;
-	nodemask_t reclaim_nodes;	/* Nodes allowed to reclaim from */
 	wait_queue_head_t kswapd_wait;
 	wait_queue_head_t pfmemalloc_wait;
 	struct task_struct *kswapd;	/* Protected by lock_memory_hotplug() */
* Unmerged path mm/page_alloc.c
