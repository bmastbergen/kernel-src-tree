dm: change sector_count member in clone_info from sector_t to unsigned

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Mikulas Patocka <mpatocka@redhat.com>
commit e0d6609a5fe34463ae2fd48d846931f70de8b37b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/e0d6609a.failed

It is impossible to create bios with 2^23 or more sectors (the size is
stored as a 32-bit byte count in the bio). So we convert some sector_t
values to unsigned integers.

This is needed for the next commit ("dm: introduce
dm_accept_partial_bio") that replaces integer value arguments with
pointers, so the size of the integer must match.

	Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit e0d6609a5fe34463ae2fd48d846931f70de8b37b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index a8b8e3774456,368a20dd85c2..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1179,34 -1152,13 +1179,38 @@@ struct clone_info 
  	struct bio *bio;
  	struct dm_io *io;
  	sector_t sector;
++<<<<<<< HEAD
 +	sector_t sector_count;
 +	unsigned short idx;
++=======
+ 	unsigned sector_count;
++>>>>>>> e0d6609a5fe3 (dm: change sector_count member in clone_info from sector_t to unsigned)
  };
  
- static void bio_setup_sector(struct bio *bio, sector_t sector, sector_t len)
+ static void bio_setup_sector(struct bio *bio, sector_t sector, unsigned len)
  {
 -	bio->bi_iter.bi_sector = sector;
 -	bio->bi_iter.bi_size = to_bytes(len);
 +	bio->bi_sector = sector;
 +	bio->bi_size = to_bytes(len);
 +}
 +
 +static void bio_setup_bv(struct bio *bio, unsigned short idx, unsigned short bv_count)
 +{
 +	bio->bi_idx = idx;
 +	bio->bi_vcnt = idx + bv_count;
 +	bio->bi_flags &= ~(1 << BIO_SEG_VALID);
 +}
 +
 +static void clone_bio_integrity(struct bio *bio, struct bio *clone,
 +				unsigned short idx, unsigned len, unsigned offset,
 +				unsigned trim)
 +{
 +	if (!bio_integrity(bio))
 +		return;
 +
 +	bio_integrity_clone(clone, bio, GFP_NOIO);
 +
 +	if (trim)
 +		bio_integrity_trim(clone, bio_sector_offset(bio, idx, offset), len);
  }
  
  /*
* Unmerged path drivers/md/dm.c
