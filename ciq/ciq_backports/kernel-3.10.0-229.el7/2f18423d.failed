hyperv: fix apparent cut-n-paste error in send path teardown

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Dave Jones <davej@redhat.com>
commit 2f18423d7ebf8044a9edaca840be5ae199fb32f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/2f18423d.failed

c25aaf814a63: "hyperv: Enable sendbuf mechanism on the send path" added
some teardown code that looks like it was copied from the recieve path
above, but missed a variable name replacement.

	Signed-off-by: Dave Jones <davej@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2f18423d7ebf8044a9edaca840be5ae199fb32f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index 9cc0753cff9d,4ed38eaecea8..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -147,6 -147,58 +147,61 @@@ static int netvsc_destroy_recv_buf(stru
  		net_device->recv_section = NULL;
  	}
  
++<<<<<<< HEAD
++=======
+ 	/* Deal with the send buffer we may have setup.
+ 	 * If we got a  send section size, it means we received a
+ 	 * SendsendBufferComplete msg (ie sent
+ 	 * NvspMessage1TypeSendReceiveBuffer msg) therefore, we need
+ 	 * to send a revoke msg here
+ 	 */
+ 	if (net_device->send_section_size) {
+ 		/* Send the revoke receive buffer */
+ 		revoke_packet = &net_device->revoke_packet;
+ 		memset(revoke_packet, 0, sizeof(struct nvsp_message));
+ 
+ 		revoke_packet->hdr.msg_type =
+ 			NVSP_MSG1_TYPE_REVOKE_SEND_BUF;
+ 		revoke_packet->msg.v1_msg.revoke_recv_buf.id = 0;
+ 
+ 		ret = vmbus_sendpacket(net_device->dev->channel,
+ 				       revoke_packet,
+ 				       sizeof(struct nvsp_message),
+ 				       (unsigned long)revoke_packet,
+ 				       VM_PKT_DATA_INBAND, 0);
+ 		/* If we failed here, we might as well return and
+ 		 * have a leak rather than continue and a bugchk
+ 		 */
+ 		if (ret != 0) {
+ 			netdev_err(ndev, "unable to send "
+ 				   "revoke send buffer to netvsp\n");
+ 			return ret;
+ 		}
+ 	}
+ 	/* Teardown the gpadl on the vsp end */
+ 	if (net_device->send_buf_gpadl_handle) {
+ 		ret = vmbus_teardown_gpadl(net_device->dev->channel,
+ 					   net_device->send_buf_gpadl_handle);
+ 
+ 		/* If we failed here, we might as well return and have a leak
+ 		 * rather than continue and a bugchk
+ 		 */
+ 		if (ret != 0) {
+ 			netdev_err(ndev,
+ 				   "unable to teardown send buffer's gpadl\n");
+ 			return ret;
+ 		}
+ 		net_device->send_buf_gpadl_handle = 0;
+ 	}
+ 	if (net_device->send_buf) {
+ 		/* Free up the receive buffer */
+ 		free_pages((unsigned long)net_device->send_buf,
+ 			   get_order(net_device->send_buf_size));
+ 		net_device->send_buf = NULL;
+ 	}
+ 	kfree(net_device->send_section_map);
+ 
++>>>>>>> 2f18423d7ebf (hyperv: fix apparent cut-n-paste error in send path teardown)
  	return ret;
  }
  
* Unmerged path drivers/net/hyperv/netvsc.c
