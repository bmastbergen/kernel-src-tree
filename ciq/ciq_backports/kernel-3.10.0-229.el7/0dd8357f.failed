i40e: remove ptp_tx_work timestamp work item

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 0dd8357f8fab1d82aa8fc8267261203f393d5a1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0dd8357f.failed

This patch removes the unnecessary ptp_tx_work item. It conflicts with
the interrupt-based handler, and will cause spurious warning messages to
be displayed in the kernel log. Since the hardware can properly trigger
an interrupt, we do not need to poll for an available timestamp in a
work queue any more.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Acked-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Tested-by: Kavindya Deegala <kavindya.s.deegala@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 0dd8357f8fab1d82aa8fc8267261203f393d5a1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ptp.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ptp.c
index e33ec6c842b7,1fedc7a1589d..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ptp.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ptp.c
@@@ -217,40 -217,6 +217,43 @@@ static int i40e_ptp_settime(struct ptp_
  }
  
  /**
++<<<<<<< HEAD
 + * i40e_ptp_tx_work
 + * @work: pointer to work struct
 + *
 + * This work function polls the PRTTSYN_STAT_0.TXTIME bit to determine when a
 + * Tx timestamp event has occurred, in order to pass the Tx timestamp value up
 + * the stack in the skb.
 + */
 +static void i40e_ptp_tx_work(struct work_struct *work)
 +{
 +	struct i40e_pf *pf = container_of(work, struct i40e_pf,
 +					  ptp_tx_work);
 +	struct i40e_hw *hw = &pf->hw;
 +	u32 prttsyn_stat_0;
 +
 +	if (!pf->ptp_tx_skb)
 +		return;
 +
 +	if (time_is_before_jiffies(pf->ptp_tx_start +
 +				   I40E_PTP_TX_TIMEOUT)) {
 +		dev_kfree_skb_any(pf->ptp_tx_skb);
 +		pf->ptp_tx_skb = NULL;
 +		pf->tx_hwtstamp_timeouts++;
 +		dev_warn(&pf->pdev->dev, "clearing Tx timestamp hang");
 +		return;
 +	}
 +
 +	prttsyn_stat_0 = rd32(hw, I40E_PRTTSYN_STAT_0);
 +	if (prttsyn_stat_0 & I40E_PRTTSYN_STAT_0_TXTIME_MASK)
 +		i40e_ptp_tx_hwtstamp(pf);
 +	else
 +		schedule_work(&pf->ptp_tx_work);
 +}
 +
 +/**
++=======
++>>>>>>> 0dd8357f8fab (i40e: remove ptp_tx_work timestamp work item)
   * i40e_ptp_enable - Enable/disable ancillary features of the PHC subsystem
   * @ptp: The PTP clock structure
   * @rq: The requested feature to change
diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index beb7b4393a6c..a46571c1e9f1 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -329,9 +329,7 @@ struct i40e_pf {
 	struct ptp_clock *ptp_clock;
 	struct ptp_clock_info ptp_caps;
 	struct sk_buff *ptp_tx_skb;
-	struct work_struct ptp_tx_work;
 	struct hwtstamp_config tstamp_config;
-	unsigned long ptp_tx_start;
 	unsigned long last_rx_ptp_check;
 	spinlock_t tmreg_lock; /* Used to protect the device time registers. */
 	u64 ptp_base_adj;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ptp.c
diff --git a/drivers/net/ethernet/intel/i40e/i40e_txrx.c b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
index 81e2680b3f57..b9bf23b361c7 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@ -1780,9 +1780,6 @@ static int i40e_tsyn(struct i40e_ring *tx_ring, struct sk_buff *skb,
 	*cd_type_cmd_tso_mss |= (u64)I40E_TX_CTX_DESC_TSYN <<
 				I40E_TXD_CTX_QW1_CMD_SHIFT;
 
-	pf->ptp_tx_start = jiffies;
-	schedule_work(&pf->ptp_tx_work);
-
 	return 1;
 }
 
