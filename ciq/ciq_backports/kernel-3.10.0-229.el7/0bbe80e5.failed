netfilter: masquerading needs to be independent of x_tables in Kconfig

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 0bbe80e571c7b866afd92a98edd32a969467a7a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/0bbe80e5.failed

Users are starting to test nf_tables with no x_tables support. Therefore,
masquerading needs to be indenpendent of it from Kconfig.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 0bbe80e571c7b866afd92a98edd32a969467a7a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/netfilter/Kconfig
#	net/ipv6/netfilter/Kconfig
diff --cc net/ipv4/netfilter/Kconfig
index b7a7dd415103,345242a79db6..000000000000
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@@ -72,6 -72,76 +72,79 @@@ config NF_TABLES_AR
  	help
  	  This option enables the ARP support for nf_tables.
  
++<<<<<<< HEAD
++=======
+ config NF_NAT_IPV4
+ 	tristate "IPv4 NAT"
+ 	depends on NF_CONNTRACK_IPV4
+ 	default m if NETFILTER_ADVANCED=n
+ 	select NF_NAT
+ 	help
+ 	  The IPv4 NAT option allows masquerading, port forwarding and other
+ 	  forms of full Network Address Port Translation. This can be
+ 	  controlled by iptables or nft.
+ 
+ if NF_NAT_IPV4
+ 
+ config NFT_CHAIN_NAT_IPV4
+ 	depends on NF_TABLES_IPV4
+ 	tristate "IPv4 nf_tables nat chain support"
+ 	help
+ 	  This option enables the "nat" chain for IPv4 in nf_tables. This
+ 	  chain type is used to perform Network Address Translation (NAT)
+ 	  packet transformations such as the source, destination address and
+ 	  source and destination ports.
+ 
+ config NF_NAT_MASQUERADE_IPV4
+ 	tristate "IPv4 masquerade support"
+ 	help
+ 	  This is the kernel functionality to provide NAT in the masquerade
+ 	  flavour (automatic source address selection).
+ 
+ config NFT_MASQ_IPV4
+ 	tristate "IPv4 masquerading support for nf_tables"
+ 	depends on NF_TABLES_IPV4
+ 	depends on NFT_MASQ
+ 	select NF_NAT_MASQUERADE_IPV4
+ 	help
+ 	  This is the expression that provides IPv4 masquerading support for
+ 	  nf_tables.
+ 
+ config NF_NAT_SNMP_BASIC
+ 	tristate "Basic SNMP-ALG support"
+ 	depends on NF_CONNTRACK_SNMP
+ 	depends on NETFILTER_ADVANCED
+ 	default NF_NAT && NF_CONNTRACK_SNMP
+ 	---help---
+ 
+ 	  This module implements an Application Layer Gateway (ALG) for
+ 	  SNMP payloads.  In conjunction with NAT, it allows a network
+ 	  management system to access multiple private networks with
+ 	  conflicting addresses.  It works by modifying IP addresses
+ 	  inside SNMP payloads to match IP-layer NAT mapping.
+ 
+ 	  This is the "basic" form of SNMP-ALG, as described in RFC 2962
+ 
+ 	  To compile it as a module, choose M here.  If unsure, say N.
+ 
+ config NF_NAT_PROTO_GRE
+ 	tristate
+ 	depends on NF_CT_PROTO_GRE
+ 
+ config NF_NAT_PPTP
+ 	tristate
+ 	depends on NF_CONNTRACK
+ 	default NF_CONNTRACK_PPTP
+ 	select NF_NAT_PROTO_GRE
+ 
+ config NF_NAT_H323
+ 	tristate
+ 	depends on NF_CONNTRACK
+ 	default NF_CONNTRACK_H323
+ 
+ endif # NF_NAT_IPV4
+ 
++>>>>>>> 0bbe80e571c7 (netfilter: masquerading needs to be independent of x_tables in Kconfig)
  config IP_NF_IPTABLES
  	tristate "IP tables support (required for filtering/masq/NAT)"
  	default m if NETFILTER_ADVANCED=n
@@@ -159,28 -229,9 +232,29 @@@ config IP_NF_TARGET_SYNPROX
  
  	  To compile it as a module, choose M here. If unsure, say N.
  
 +config IP_NF_TARGET_ULOG
 +	tristate "ULOG target support"
 +	default m if NETFILTER_ADVANCED=n
 +	---help---
 +
 +	  This option enables the old IPv4-only "ipt_ULOG" implementation
 +	  which has been obsoleted by the new "nfnetlink_log" code (see
 +	  CONFIG_NETFILTER_NETLINK_LOG).
 +
 +	  This option adds a `ULOG' target, which allows you to create rules in
 +	  any iptables table. The packet is passed to a userspace logging
 +	  daemon using netlink multicast sockets; unlike the LOG target
 +	  which can only be viewed through syslog.
 +
 +	  The appropriate userspace logging daemon (ulogd) may be obtained from
 +	  <http://www.netfilter.org/projects/ulogd/index.html>
 +
 +	  To compile it as a module, choose M here.  If unsure, say N.
 +
++<<<<<<< HEAD
  # NAT + specific targets: nf_conntrack
 -config IP_NF_NAT
 -	tristate "iptables NAT support"
 +config NF_NAT_IPV4
 +	tristate "IPv4 NAT"
  	depends on NF_CONNTRACK_IPV4
  	default m if NETFILTER_ADVANCED=n
  	select NF_NAT
@@@ -191,7 -244,7 +265,10 @@@
  
  	  To compile it as a module, choose M here.  If unsure, say N.
  
 +if NF_NAT_IPV4
++=======
+ if IP_NF_NAT
++>>>>>>> 0bbe80e571c7 (netfilter: masquerading needs to be independent of x_tables in Kconfig)
  
  config IP_NF_TARGET_MASQUERADE
  	tristate "MASQUERADE target support"
diff --cc net/ipv6/netfilter/Kconfig
index 4bff1f297e39,bb1a40db7be1..000000000000
--- a/net/ipv6/netfilter/Kconfig
+++ b/net/ipv6/netfilter/Kconfig
@@@ -50,10 -71,22 +50,29 @@@ config NFT_CHAIN_NAT_IPV
  	  packet transformations such as the source, destination address and
  	  source and destination ports.
  
++<<<<<<< HEAD
 +config NFT_REJECT_IPV6
 +	depends on NF_TABLES_IPV6
 +	default NFT_REJECT
 +	tristate
++=======
+ config NF_NAT_MASQUERADE_IPV6
+ 	tristate "IPv6 masquerade support"
+ 	help
+ 	  This is the kernel functionality to provide NAT in the masquerade
+ 	  flavour (automatic source address selection) for IPv6.
+ 
+ config NFT_MASQ_IPV6
+ 	tristate "IPv6 masquerade support for nf_tables"
+ 	depends on NF_TABLES_IPV6
+ 	depends on NFT_MASQ
+ 	select NF_NAT_MASQUERADE_IPV6
+ 	help
+ 	  This is the expression that provides IPv4 masquerading support for
+ 	  nf_tables.
+ 
+ endif # NF_NAT_IPV6
++>>>>>>> 0bbe80e571c7 (netfilter: masquerading needs to be independent of x_tables in Kconfig)
  
  config IP6_NF_IPTABLES
  	tristate "IP6 tables support (required for filtering)"
@@@ -239,7 -274,7 +258,11 @@@ config NF_NAT_IPV
  
  	  To compile it as a module, choose M here.  If unsure, say N.
  
++<<<<<<< HEAD
 +if NF_NAT_IPV6
++=======
+ if IP6_NF_NAT
++>>>>>>> 0bbe80e571c7 (netfilter: masquerading needs to be independent of x_tables in Kconfig)
  
  config IP6_NF_TARGET_MASQUERADE
  	tristate "MASQUERADE target support"
* Unmerged path net/ipv4/netfilter/Kconfig
* Unmerged path net/ipv6/netfilter/Kconfig
