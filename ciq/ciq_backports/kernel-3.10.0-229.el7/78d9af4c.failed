uprobes/x86: Cleanup the usage of arch_uprobe->def.fixups, make it u8

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [kernel] uprobes: Cleanup the usage of arch_uprobe->def.fixups, make it u8 (Oleg Nesterov) [1073627]
Rebuild_FUZZ: 97.01%
commit-author Oleg Nesterov <oleg@redhat.com>
commit 78d9af4cd375880a574327210eb9dab572618364
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/78d9af4c.failed

handle_riprel_insn() assumes that nobody else could modify ->fixups
before. This is correct but fragile, change it to use "|=".

Also make ->fixups u8, we are going to add the new members into the
union. It is not clear why UPROBE_FIX_RIP_.X lived in the upper byte,
redefine them so that they can fit into u8.

	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
(cherry picked from commit 78d9af4cd375880a574327210eb9dab572618364)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/uprobes.h
#	arch/x86/kernel/uprobes.c
diff --cc arch/x86/include/asm/uprobes.h
index 6e5197910fd8,9ce25ce04fee..000000000000
--- a/arch/x86/include/asm/uprobes.h
+++ b/arch/x86/include/asm/uprobes.h
@@@ -33,12 -33,29 +33,18 @@@ typedef u8 uprobe_opcode_t
  #define UPROBE_SWBP_INSN		0xcc
  #define UPROBE_SWBP_INSN_SIZE		   1
  
 -struct uprobe_xol_ops;
 -
  struct arch_uprobe {
 -	union {
 -		u8			insn[MAX_UINSN_BYTES];
 -		u8			ixol[MAX_UINSN_BYTES];
 -	};
 -
 -	const struct uprobe_xol_ops	*ops;
 -
 -	union {
 -		struct {
 -			s32	offs;
 -			u8	ilen;
 -			u8	opc1;
 -		}			branch;
 -		struct {
 +	u16				fixups;
 +	u8				insn[MAX_UINSN_BYTES];
  #ifdef CONFIG_X86_64
 -			long	riprel_target;
 +	unsigned long			rip_rela_target_address;
  #endif
++<<<<<<< HEAD
++=======
+ 			u8	fixups;
+ 		} 			def;
+ 	};
++>>>>>>> 78d9af4cd375 (uprobes/x86: Cleanup the usage of arch_uprobe->def.fixups, make it u8)
  };
  
  struct arch_uprobe_task {
diff --cc arch/x86/kernel/uprobes.c
index 99569dc5b83d,a8e1d7e47001..000000000000
--- a/arch/x86/kernel/uprobes.c
+++ b/arch/x86/kernel/uprobes.c
@@@ -307,12 -307,12 +307,20 @@@ handle_riprel_insn(struct arch_uprobe *
  		 * is NOT the register operand, so we use %rcx (register
  		 * #1) for the scratch register.
  		 */
++<<<<<<< HEAD
 +		auprobe->fixups = UPROBE_FIX_RIP_CX;
++=======
+ 		auprobe->def.fixups |= UPROBE_FIX_RIP_CX;
++>>>>>>> 78d9af4cd375 (uprobes/x86: Cleanup the usage of arch_uprobe->def.fixups, make it u8)
  		/* Change modrm from 00 000 101 to 00 000 001. */
  		*cursor = 0x1;
  	} else {
  		/* Use %rax (register #0) for the scratch register. */
++<<<<<<< HEAD
 +		auprobe->fixups = UPROBE_FIX_RIP_AX;
++=======
+ 		auprobe->def.fixups |= UPROBE_FIX_RIP_AX;
++>>>>>>> 78d9af4cd375 (uprobes/x86: Cleanup the usage of arch_uprobe->def.fixups, make it u8)
  		/* Change modrm from 00 xxx 101 to 00 xxx 000 */
  		*cursor = (reg << 3);
  	}
* Unmerged path arch/x86/include/asm/uprobes.h
* Unmerged path arch/x86/kernel/uprobes.c
