e1000e Refactor of Runtime Power Management

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [ethernet] e1000e: Refactor of Runtime Power Management (John Greene) [1091119]
Rebuild_FUZZ: 98.85%
commit-author David Ertman <davidx.m.ertman@intel.com>
commit 63eb48f151b5f1d8dba35d6176d0d7c9643b33af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/63eb48f1.failed

Fix issues with:
RuntimePM causing the device to repeatedly flip between suspend and resume
with the interface administratively downed.
Having RuntimePM enabled interfering with the functionality of Energy
Efficient Ethernet.

Added checks to disallow functions that should not be executed if the
device is currently runtime suspended

Make runtime_idle callback to use same deterministic behavior as the igb
driver.

	Signed-off-by: Dave Ertman <davidx.m.ertman@intel.com>
	Acked-by: Bruce Allan <bruce.w.allan@intel.com>
	Tested-by: Jeff Pieper <jeffrey.e.pieper@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 63eb48f151b5f1d8dba35d6176d0d7c9643b33af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/e1000e/netdev.c
diff --cc drivers/net/ethernet/intel/e1000e/netdev.c
index 790d26582a8a,7fd1feaeb405..000000000000
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@@ -4392,8 -4369,11 +4394,11 @@@ static int e1000_close(struct net_devic
  	pm_runtime_get_sync(&pdev->dev);
  
  	if (!test_bit(__E1000_DOWN, &adapter->state)) {
 -		e1000e_down(adapter, true);
 +		e1000e_down(adapter);
  		e1000_free_irq(adapter);
+ 
+ 		/* Link status message must follow this format */
+ 		pr_info("%s NIC Link is Down\n", adapter->netdev->name);
  	}
  
  	napi_disable(&adapter->napi);
@@@ -5702,8 -5683,11 +5707,11 @@@ static int e1000_change_mtu(struct net_
  	adapter->max_frame_size = max_frame;
  	e_info("changing MTU from %d to %d\n", netdev->mtu, new_mtu);
  	netdev->mtu = new_mtu;
+ 
+ 	pm_runtime_get_sync(netdev->dev.parent);
+ 
  	if (netif_running(netdev))
 -		e1000e_down(adapter, true);
 +		e1000e_down(adapter);
  
  	/* NOTE: netdev_alloc_skb reserves 16 bytes, and typically NET_IP_ALIGN
  	 * means we reserve 2 more, this pushes us to allocate from the next
@@@ -7044,9 -7060,14 +7059,20 @@@ static DEFINE_PCI_DEVICE_TABLE(e1000_pc
  MODULE_DEVICE_TABLE(pci, e1000_pci_tbl);
  
  static const struct dev_pm_ops e1000_pm_ops = {
++<<<<<<< HEAD
 +	SET_SYSTEM_SLEEP_PM_OPS(e1000_suspend, e1000_resume)
 +	SET_RUNTIME_PM_OPS(e1000_runtime_suspend, e1000_runtime_resume,
 +			   e1000_idle)
++=======
+ 	.suspend	= e1000e_pm_suspend,
+ 	.resume		= e1000e_pm_resume,
+ 	.freeze		= e1000e_pm_freeze,
+ 	.thaw		= e1000e_pm_thaw,
+ 	.poweroff	= e1000e_pm_suspend,
+ 	.restore	= e1000e_pm_resume,
+ 	SET_RUNTIME_PM_OPS(e1000e_pm_runtime_suspend, e1000e_pm_runtime_resume,
+ 			   e1000e_pm_runtime_idle)
++>>>>>>> 63eb48f151b5 (e1000e Refactor of Runtime Power Management)
  };
  
  /* PCI Device API Driver */
diff --git a/drivers/net/ethernet/intel/e1000e/e1000.h b/drivers/net/ethernet/intel/e1000e/e1000.h
index 6c425d724e74..569be3916467 100644
--- a/drivers/net/ethernet/intel/e1000e/e1000.h
+++ b/drivers/net/ethernet/intel/e1000e/e1000.h
@@ -326,7 +326,6 @@ struct e1000_adapter {
 	struct work_struct update_phy_task;
 	struct work_struct print_hang_task;
 
-	bool idle_check;
 	int phy_hang_count;
 
 	u16 tx_ring_count;
* Unmerged path drivers/net/ethernet/intel/e1000e/netdev.c
