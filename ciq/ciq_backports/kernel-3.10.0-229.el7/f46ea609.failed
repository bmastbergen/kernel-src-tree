ALSA: hda - Add function pointer for disabling MSI

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [alsa] hda: Add function pointer for disabling MSI (Jaroslav Kysela) [1112200]
Rebuild_FUZZ: 90.32%
commit-author Dylan Reid <dgreid@chromium.org>
commit f46ea609d1484818f39e6760c33a1629c756116e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f46ea609.failed

This is a PCI-only feature, but adding a callback for it in the chip
structure breaks the PCI dependency in the RIRB code allowing the
logic there to be re-used by the platform HDA driver.

	Signed-off-by: Dylan Reid <dgreid@chromium.org>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit f46ea609d1484818f39e6760c33a1629c756116e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/hda_intel.c
diff --cc sound/pci/hda/hda_intel.c
index 2012917a0745,c4b6447bfc7e..000000000000
--- a/sound/pci/hda/hda_intel.c
+++ b/sound/pci/hda/hda_intel.c
@@@ -605,14 -597,11 +605,22 @@@ static unsigned int azx_rirb_get_respon
  	}
  
  	if (chip->msi) {
++<<<<<<< HEAD
 +		snd_printk(KERN_WARNING SFX "%s: No response from codec, "
 +			   "disabling MSI: last cmd=0x%08x\n",
 +			   pci_name(chip->pci), chip->last_cmd[addr]);
 +		free_irq(chip->irq, chip);
 +		chip->irq = -1;
 +		pci_disable_msi(chip->pci);
 +		chip->msi = 0;
 +		if (azx_acquire_irq(chip, 1) < 0) {
++=======
+ 		dev_warn(chip->card->dev,
+ 			 "No response from codec, disabling MSI: last cmd=0x%08x\n",
+ 			 chip->last_cmd[addr]);
+ 		if (chip->ops->disable_msi_reset_irq &&
+ 		    chip->ops->disable_msi_reset_irq(chip) < 0) {
++>>>>>>> f46ea609d148 (ALSA: hda - Add function pointer for disabling MSI)
  			bus->rirb_error = 1;
  			return -1;
  		}
* Unmerged path sound/pci/hda/hda_intel.c
diff --git a/sound/pci/hda/hda_priv.h b/sound/pci/hda/hda_priv.h
index 6d082d65baed..fe266319fa30 100644
--- a/sound/pci/hda/hda_priv.h
+++ b/sound/pci/hda/hda_priv.h
@@ -285,6 +285,8 @@ struct azx_rb {
 	u32 res[AZX_MAX_CODECS];	/* last read value */
 };
 
+struct azx;
+
 /* Functions to read/write to hda registers. */
 struct hda_controller_ops {
 	/* Register Access */
@@ -294,6 +296,8 @@ struct hda_controller_ops {
 	u16 (*readw)(u16 *addr);
 	void (*writeb)(u8 value, u8 *addr);
 	u8 (*readb)(u8 *addr);
+	/* Disable msi if supported, PCI only */
+	int (*disable_msi_reset_irq)(struct azx *);
 };
 
 struct azx_pcm {
