kexec: new syscall kexec_file_load() declaration

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Vivek Goyal <vgoyal@redhat.com>
commit f0895685c7fd8c938c91a9d8a6f7c11f22df58d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/f0895685.failed

This is the new syscall kexec_file_load() declaration/interface.  I have
reserved the syscall number only for x86_64 so far.  Other architectures
(including i386) can reserve syscall number when they enable the support
for this new syscall.

	Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
	Cc: Michael Kerrisk <mtk.manpages@gmail.com>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Yinghai Lu <yinghai@kernel.org>
	Cc: Eric Biederman <ebiederm@xmission.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Matthew Garrett <mjg59@srcf.ucam.org>
	Cc: Greg Kroah-Hartman <greg@kroah.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: WANG Chao <chaowang@redhat.com>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f0895685c7fd8c938c91a9d8a6f7c11f22df58d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/syscalls/syscall_64.tbl
diff --cc arch/x86/syscalls/syscall_64.tbl
index 38ae65dfd14f,35dd922727b9..000000000000
--- a/arch/x86/syscalls/syscall_64.tbl
+++ b/arch/x86/syscalls/syscall_64.tbl
@@@ -320,6 -320,13 +320,16 @@@
  311	64	process_vm_writev	sys_process_vm_writev
  312	common	kcmp			sys_kcmp
  313	common	finit_module		sys_finit_module
++<<<<<<< HEAD
++=======
+ 314	common	sched_setattr		sys_sched_setattr
+ 315	common	sched_getattr		sys_sched_getattr
+ 316	common	renameat2		sys_renameat2
+ 317	common	seccomp			sys_seccomp
+ 318	common	getrandom		sys_getrandom
+ 319	common	memfd_create		sys_memfd_create
+ 320	common	kexec_file_load		sys_kexec_file_load
++>>>>>>> f0895685c7fd (kexec: new syscall kexec_file_load() declaration)
  
  #
  # x32-specific system call numbers start at 512 to avoid cache impact
* Unmerged path arch/x86/syscalls/syscall_64.tbl
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 84662ecc7b51..c89c93885853 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -300,6 +300,10 @@ asmlinkage long sys_restart_syscall(void);
 asmlinkage long sys_kexec_load(unsigned long entry, unsigned long nr_segments,
 				struct kexec_segment __user *segments,
 				unsigned long flags);
+asmlinkage long sys_kexec_file_load(int kernel_fd, int initrd_fd,
+				    unsigned long cmdline_len,
+				    const char __user *cmdline_ptr,
+				    unsigned long flags);
 
 asmlinkage long sys_exit(int error_code);
 asmlinkage long sys_exit_group(int error_code);
diff --git a/kernel/kexec.c b/kernel/kexec.c
index 4b1d9ca3907c..dcc9be45f60e 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -1082,6 +1082,13 @@ COMPAT_SYSCALL_DEFINE4(kexec_load, compat_ulong_t, entry,
 }
 #endif
 
+SYSCALL_DEFINE5(kexec_file_load, int, kernel_fd, int, initrd_fd,
+		unsigned long, cmdline_len, const char __user *, cmdline_ptr,
+		unsigned long, flags)
+{
+	return -ENOSYS;
+}
+
 void crash_kexec(struct pt_regs *regs)
 {
 	/* Take the kexec_mutex here to prevent sys_kexec_load
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index 7078052284fd..7e1e13d76acc 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -25,6 +25,7 @@ cond_syscall(sys_swapon);
 cond_syscall(sys_swapoff);
 cond_syscall(sys_kexec_load);
 cond_syscall(compat_sys_kexec_load);
+cond_syscall(sys_kexec_file_load);
 cond_syscall(sys_init_module);
 cond_syscall(sys_finit_module);
 cond_syscall(sys_delete_module);
