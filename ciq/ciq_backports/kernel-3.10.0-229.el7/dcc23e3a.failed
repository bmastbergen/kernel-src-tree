ixgbe: define IXGBE_MAX_VFS_DRV_LIMIT macro and cleanup const 63

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author ethan.zhao <ethan.zhao@oracle.com>
commit dcc23e3ab6e86e49a234e9def1e001722fdb48f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/dcc23e3a.failed

Because ixgbe driver limit the max number of VF
 functions could be enabled to 63, so define one macro IXGBE_MAX_VFS_DRV_LIMIT
 and cleanup the const 63 in code.

v3: revised for net-next tree.

	Signed-off-by: Ethan Zhao <ethan.kernel@gmail.com>
	Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
	Signed-off-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dcc23e3ab6e86e49a234e9def1e001722fdb48f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 7aba452833e5,3fd4d3f22478..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@@ -4809,11 -5062,20 +4809,23 @@@ static int ixgbe_sw_init(struct ixgbe_a
  	hw->fc.disable_fc_autoneg = ixgbe_device_supports_autoneg_fc(hw);
  
  #ifdef CONFIG_PCI_IOV
 -	if (max_vfs > 0)
 -		e_dev_warn("Enabling SR-IOV VFs using the max_vfs module parameter is deprecated - please use the pci sysfs interface instead.\n");
 -
  	/* assign number of SR-IOV VFs */
++<<<<<<< HEAD
 +	if (hw->mac.type != ixgbe_mac_82598EB)
 +		adapter->num_vfs = (max_vfs > 63) ? 0 : max_vfs;
++=======
+ 	if (hw->mac.type != ixgbe_mac_82598EB) {
+ 		if (max_vfs > IXGBE_MAX_VFS_DRV_LIMIT) {
+ 			adapter->num_vfs = 0;
+ 			e_dev_warn("max_vfs parameter out of range. Not assigning any SR-IOV VFs\n");
+ 		} else {
+ 			adapter->num_vfs = max_vfs;
+ 		}
+ 	}
+ #endif /* CONFIG_PCI_IOV */
++>>>>>>> dcc23e3ab6e8 (ixgbe: define IXGBE_MAX_VFS_DRV_LIMIT macro and cleanup const 63)
  
 +#endif
  	/* enable itr by default in dynamic mode */
  	adapter->rx_itr_setting = 1;
  	adapter->tx_itr_setting = 1;
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
index 276d7b135332..ddf4ce01942d 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
@@ -152,7 +152,7 @@ void ixgbe_enable_sriov(struct ixgbe_adapter *adapter)
 		 * physical function.  If the user requests greater thn
 		 * 63 VFs then it is an error - reset to default of zero.
 		 */
-		adapter->num_vfs = min_t(unsigned int, adapter->num_vfs, 63);
+		adapter->num_vfs = min_t(unsigned int, adapter->num_vfs, IXGBE_MAX_VFS_DRV_LIMIT);
 
 		err = pci_enable_sriov(adapter->pdev, adapter->num_vfs);
 		if (err) {
@@ -259,7 +259,7 @@ static int ixgbe_pci_sriov_enable(struct pci_dev *dev, int num_vfs)
 	 * PF.  The PCI bus driver already checks for other values out of
 	 * range.
 	 */
-	if (num_vfs > 63) {
+	if (num_vfs > IXGBE_MAX_VFS_DRV_LIMIT) {
 		err = -EPERM;
 		goto err_out;
 	}
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
index 4713f9fc7f46..8bd29190514e 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
@@ -28,6 +28,11 @@
 #ifndef _IXGBE_SRIOV_H_
 #define _IXGBE_SRIOV_H_
 
+/*  ixgbe driver limit the max number of VFs could be enabled to
+ *  63 (IXGBE_MAX_VF_FUNCTIONS - 1)
+ */
+#define IXGBE_MAX_VFS_DRV_LIMIT  (IXGBE_MAX_VF_FUNCTIONS - 1)
+
 void ixgbe_restore_vf_multicasts(struct ixgbe_adapter *adapter);
 void ixgbe_msg_task(struct ixgbe_adapter *adapter);
 int ixgbe_vf_configuration(struct pci_dev *pdev, unsigned int event_mask);
