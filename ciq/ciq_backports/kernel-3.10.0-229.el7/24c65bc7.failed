hwrng: pseries - port to new read API and fix stack corruption

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [char] hwrng/pseries: port to new read API and fix stack corruption (Gustavo Duarte) [1163659]
Rebuild_FUZZ: 95.08%
commit-author Greg Kurz <gkurz@linux.vnet.ibm.com>
commit 24c65bc7037e7d0f362c0df70d17dd72ee64b8b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/24c65bc7.failed

The add_early_randomness() function in drivers/char/hw_random/core.c passes
a 16-byte buffer to pseries_rng_data_read(). Unfortunately, plpar_hcall()
returns four 64-bit values and trashes 16 bytes on the stack.

This bug has been lying around for a long time. It got unveiled by:

commit d3cc7996473a7bdd33256029988ea690754e4e2a
Author: Amit Shah <amit.shah@redhat.com>
Date:   Thu Jul 10 15:42:34 2014 +0530

    hwrng: fetch randomness only after device init

It may trig a oops while loading or unloading the pseries-rng module for both
PowerVM and PowerKVM guests.

This patch does two things:
- pass an intermediate well sized buffer to plpar_hcall(). This is acceptalbe
  since we're not on a hot path.
- move to the new read API so that we know the return buffer size for sure.

	Cc: stable@vger.kernel.org
	Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 24c65bc7037e7d0f362c0df70d17dd72ee64b8b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/hw_random/pseries-rng.c
diff --cc drivers/char/hw_random/pseries-rng.c
index 5f1197929f0c,bcf86f91800a..000000000000
--- a/drivers/char/hw_random/pseries-rng.c
+++ b/drivers/char/hw_random/pseries-rng.c
@@@ -21,15 -24,22 +21,31 @@@
  #include <linux/hw_random.h>
  #include <asm/vio.h>
  
 +#define MODULE_NAME "pseries-rng"
  
- static int pseries_rng_data_read(struct hwrng *rng, u32 *data)
+ static int pseries_rng_read(struct hwrng *rng, void *data, size_t max, bool wait)
  {
++<<<<<<< HEAD
 +	if (plpar_hcall(H_RANDOM, (unsigned long *)data) != H_SUCCESS) {
 +		printk(KERN_ERR "pseries rng hcall error\n");
 +		return 0;
 +	}
 +	return 8;
++=======
+ 	u64 buffer[PLPAR_HCALL_BUFSIZE];
+ 	size_t size = max < 8 ? max : 8;
+ 	int rc;
+ 
+ 	rc = plpar_hcall(H_RANDOM, (unsigned long *)buffer);
+ 	if (rc != H_SUCCESS) {
+ 		pr_err_ratelimited("H_RANDOM call failed %d\n", rc);
+ 		return -EIO;
+ 	}
+ 	memcpy(data, buffer, size);
+ 
+ 	/* The hypervisor interface returns 64 bits */
+ 	return size;
++>>>>>>> 24c65bc7037e (hwrng: pseries - port to new read API and fix stack corruption)
  }
  
  /**
@@@ -47,8 -57,8 +63,13 @@@ static unsigned long pseries_rng_get_de
  };
  
  static struct hwrng pseries_rng = {
++<<<<<<< HEAD
 +	.name		= MODULE_NAME,
 +	.data_read	= pseries_rng_data_read,
++=======
+ 	.name		= KBUILD_MODNAME,
+ 	.read		= pseries_rng_read,
++>>>>>>> 24c65bc7037e (hwrng: pseries - port to new read API and fix stack corruption)
  };
  
  static int __init pseries_rng_probe(struct vio_dev *dev,
* Unmerged path drivers/char/hw_random/pseries-rng.c
