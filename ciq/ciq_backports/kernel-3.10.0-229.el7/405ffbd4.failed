perf tools: Check libunwind for availability of dwarf parsing feature

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Check libunwind for availability of dwarf parsing feature (Jiri Olsa) [1131394]
Rebuild_FUZZ: 95.45%
commit-author Jean Pihet <jean.pihet@linaro.org>
commit 405ffbd4988118c56ff127792ebddae77d2c7a43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/405ffbd4.failed

The newly added dwarf unwinding feature [1] requires:
. a recent version (>= 1.1) of libunwind,
. libunwind to be configured with --enable-debug-frame.

[1] http://www.spinics.net/lists/kernel/msg1598951.html

Add the corresponding API tests in the feature check list.

	Acked-by: Jiri Olsa <jolsa@redhat.com>
	Signed-off-by: Jean Pihet <jean.pihet@linaro.org>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit 405ffbd4988118c56ff127792ebddae77d2c7a43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/config/Makefile
#	tools/perf/config/feature-tests.mak
diff --cc tools/perf/config/Makefile
index 6aeff9d0cb98,75b93d7f7860..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -271,19 -217,23 +271,32 @@@ ifneq ($(ARCH),x86
  endif
  
  ifndef NO_LIBUNWIND
 -# for linking with debug library, run like:
 -# make DEBUG=1 LIBUNWIND_DIR=/opt/libunwind/
 -ifdef LIBUNWIND_DIR
 -  LIBUNWIND_CFLAGS  := -I$(LIBUNWIND_DIR)/include
 -  LIBUNWIND_LDFLAGS := -L$(LIBUNWIND_DIR)/lib
 -endif
 +  # for linking with debug library, run like:
 +  # make DEBUG=1 LIBUNWIND_DIR=/opt/libunwind/
 +  ifdef LIBUNWIND_DIR
 +    LIBUNWIND_CFLAGS  := -I$(LIBUNWIND_DIR)/include
 +    LIBUNWIND_LDFLAGS := -L$(LIBUNWIND_DIR)/lib
 +  endif
  
++<<<<<<< HEAD
 +  FLAGS_UNWIND=$(LIBUNWIND_CFLAGS) $(CFLAGS) $(LIBUNWIND_LDFLAGS) $(LDFLAGS) $(EXTLIBS) $(LIBUNWIND_LIBS)
 +  ifneq ($(call try-cc,$(SOURCE_LIBUNWIND),$(FLAGS_UNWIND),libunwind),y)
 +    msg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 0.99);
 +    NO_LIBUNWIND := 1
 +  endif
 +endif
++=======
+ FLAGS_UNWIND=$(LIBUNWIND_CFLAGS) $(CFLAGS) $(LIBUNWIND_LDFLAGS) $(LDFLAGS) $(EXTLIBS) $(LIBUNWIND_LIBS)
+ ifneq ($(call try-cc,$(SOURCE_LIBUNWIND),$(FLAGS_UNWIND),libunwind),y)
+   msg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 1.1);
+   NO_LIBUNWIND := 1
+ endif # Libunwind support
+ ifneq ($(call try-cc,$(SOURCE_LIBUNWIND_DEBUG_FRAME),$(FLAGS_UNWIND),libunwind debug_frame),y)
+   msg := $(warning No debug_frame support found in libunwind);
+ CFLAGS += -DNO_LIBUNWIND_DEBUG_FRAME
+ endif # debug_frame support in libunwind
+ endif # NO_LIBUNWIND
++>>>>>>> 405ffbd49881 (perf tools: Check libunwind for availability of dwarf parsing feature)
  
  ifndef NO_LIBUNWIND
    CFLAGS += -DLIBUNWIND_SUPPORT
diff --cc tools/perf/config/feature-tests.mak
index 139597f9cb07,40b21c0bc10a..000000000000
--- a/tools/perf/config/feature-tests.mak
+++ b/tools/perf/config/feature-tests.mak
@@@ -1,2 -1,265 +1,83 @@@
 -define SOURCE_HELLO
 -#include <stdio.h>
 -int main(void)
 -{
 -	return puts(\"hi\");
 -}
 -endef
 -
 -ifndef NO_DWARF
 -define SOURCE_DWARF
 -#include <dwarf.h>
 -#include <elfutils/libdw.h>
 -#include <elfutils/version.h>
 -#ifndef _ELFUTILS_PREREQ
 -#error
 -#endif
 -
 -int main(void)
 -{
 -	Dwarf *dbg = dwarf_begin(0, DWARF_C_READ);
 -	return (long)dbg;
 -}
 -endef
 -endif
 -
 -define SOURCE_LIBELF
 -#include <libelf.h>
 -
 -int main(void)
 -{
 -	Elf *elf = elf_begin(0, ELF_C_READ, 0);
 -	return (long)elf;
 -}
 -endef
 -
 -define SOURCE_GLIBC
 -#include <gnu/libc-version.h>
 -
 -int main(void)
 -{
 -	const char *version = gnu_get_libc_version();
 -	return (long)version;
 -}
 -endef
 -
 -define SOURCE_BIONIC
 -#include <android/api-level.h>
 -
 -int main(void)
 -{
 -	return __ANDROID_API__;
 -}
 -endef
 -
 -define SOURCE_ELF_MMAP
 -#include <libelf.h>
 -int main(void)
 -{
 -	Elf *elf = elf_begin(0, ELF_C_READ_MMAP, 0);
 -	return (long)elf;
 -}
 -endef
 -
 -define SOURCE_ELF_GETPHDRNUM
 -#include <libelf.h>
 -int main(void)
 -{
 -	size_t dst;
 -	return elf_getphdrnum(0, &dst);
 -}
 -endef
 -
 -ifndef NO_SLANG
 -define SOURCE_SLANG
 -#include <slang.h>
 -
 -int main(void)
 -{
 -	return SLsmg_init_smg();
 -}
 -endef
 -endif
 -
 -ifndef NO_GTK2
 -define SOURCE_GTK2
 -#pragma GCC diagnostic ignored \"-Wstrict-prototypes\"
 -#include <gtk/gtk.h>
 -#pragma GCC diagnostic error \"-Wstrict-prototypes\"
 -
 -int main(int argc, char *argv[])
 -{
 -        gtk_init(&argc, &argv);
 -
 -        return 0;
 -}
 -endef
 -
 -define SOURCE_GTK2_INFOBAR
 -#pragma GCC diagnostic ignored \"-Wstrict-prototypes\"
 -#include <gtk/gtk.h>
 -#pragma GCC diagnostic error \"-Wstrict-prototypes\"
 -
 -int main(void)
 -{
 -	gtk_info_bar_new();
 -
 -	return 0;
 -}
 -endef
 -endif
 -
 -ifndef NO_LIBPERL
 -define SOURCE_PERL_EMBED
 -#include <EXTERN.h>
 -#include <perl.h>
 -
 -int main(void)
 -{
 -perl_alloc();
 -return 0;
 -}
 -endef
 -endif
 -
 -ifndef NO_LIBPYTHON
 -define SOURCE_PYTHON_VERSION
 -#include <Python.h>
 -#if PY_VERSION_HEX >= 0x03000000
 -	#error
 -#endif
 -int main(void)
 -{
 -	return 0;
 -}
 -endef
 -define SOURCE_PYTHON_EMBED
 -#include <Python.h>
 -int main(void)
 -{
 -	Py_Initialize();
 -	return 0;
 -}
 -endef
 -endif
 -
 -define SOURCE_BFD
 -#include <bfd.h>
 -
 -int main(void)
 -{
 -	bfd_demangle(0, 0, 0);
 -	return 0;
 -}
 -endef
 -
 -define SOURCE_CPLUS_DEMANGLE
 -extern char *cplus_demangle(const char *, int);
 -
 -int main(void)
 -{
 -	cplus_demangle(0, 0);
 -	return 0;
 -}
 -endef
 -
 -define SOURCE_STRLCPY
 -#include <stdlib.h>
 -extern size_t strlcpy(char *dest, const char *src, size_t size);
 -
 -int main(void)
 -{
 -	strlcpy(NULL, NULL, 0);
 -	return 0;
 -}
 -endef
 -
 -ifndef NO_LIBUNWIND
 -define SOURCE_LIBUNWIND
 -#include <libunwind.h>
 -#include <stdlib.h>
  
 -extern int UNW_OBJ(dwarf_search_unwind_table) (unw_addr_space_t as,
 -                                      unw_word_t ip,
 -                                      unw_dyn_info_t *di,
 -                                      unw_proc_info_t *pi,
 -                                      int need_unwind_info, void *arg);
++<<<<<<< HEAD
  
++=======
+ #define dwarf_search_unwind_table UNW_OBJ(dwarf_search_unwind_table)
+ 
+ int main(void)
+ {
+ 	unw_addr_space_t addr_space;
+ 	addr_space = unw_create_addr_space(NULL, 0);
+ 	unw_init_remote(NULL, addr_space, NULL);
+ 	dwarf_search_unwind_table(addr_space, 0, NULL, NULL, 0, NULL);
+ 	return 0;
+ }
+ endef
+ 
+ define SOURCE_LIBUNWIND_DEBUG_FRAME
+ #include <libunwind.h>
+ #include <stdlib.h>
+ 
+ extern int
+ UNW_OBJ(dwarf_find_debug_frame) (int found, unw_dyn_info_t *di_debug,
+ 				 unw_word_t ip, unw_word_t segbase,
+ 				 const char *obj_name, unw_word_t start,
+ 				 unw_word_t end);
+ 
+ #define dwarf_find_debug_frame UNW_OBJ(dwarf_find_debug_frame)
+ 
+ int main(void)
+ {
+ 	dwarf_find_debug_frame(0, NULL, 0, 0, NULL, 0, 0);
+ 	return 0;
+ }
+ endef
+ 
+ endif
+ 
+ ifndef NO_BACKTRACE
+ define SOURCE_BACKTRACE
+ #include <execinfo.h>
+ #include <stdio.h>
+ 
+ int main(void)
+ {
+ 	backtrace(NULL, 0);
+ 	backtrace_symbols(NULL, 0);
+ 	return 0;
+ }
+ endef
+ endif
+ 
+ ifndef NO_LIBAUDIT
+ define SOURCE_LIBAUDIT
+ #include <libaudit.h>
+ 
+ int main(void)
+ {
+ 	printf(\"error message: %s\n\", audit_errno_to_name(0));
+ 	return audit_open();
+ }
+ endef
+ endif
+ 
+ define SOURCE_ON_EXIT
+ #include <stdio.h>
+ 
+ int main(void)
+ {
+ 	return on_exit(NULL, NULL);
+ }
+ endef
+ 
+ define SOURCE_LIBNUMA
+ #include <numa.h>
+ #include <numaif.h>
+ 
+ int main(void)
+ {
+ 	numa_available();
+ 	return 0;
+ }
+ endef
++>>>>>>> 405ffbd49881 (perf tools: Check libunwind for availability of dwarf parsing feature)
* Unmerged path tools/perf/config/Makefile
* Unmerged path tools/perf/config/feature-tests.mak
