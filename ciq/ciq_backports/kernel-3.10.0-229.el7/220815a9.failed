genetlink: fix genlmsg_multicast() bug

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Johannes Berg <johannes.berg@intel.com>
commit 220815a9665f7deca98a09ecca655044f94cfa44
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/220815a9.failed

Unfortunately, I introduced a tremendously stupid bug into
genlmsg_multicast() when doing all those multicast group
changes: it adjusts the group number, but then passes it
to genlmsg_multicast_netns() which does that again.

Somehow, my tests failed to catch this, so add a warning
into genlmsg_multicast_netns() and remove the offending
group ID adjustment.

Also add a warning to the similar code in other functions
so people who misuse them are more loudly warned.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 220815a9665f7deca98a09ecca655044f94cfa44)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/genetlink.h
#	net/netlink/genetlink.c
diff --cc include/net/genetlink.h
index 27c2f8bde546,771af09e90eb..000000000000
--- a/include/net/genetlink.h
+++ b/include/net/genetlink.h
@@@ -256,26 -257,34 +256,37 @@@ static inline void genlmsg_cancel(struc
   * @net: the net namespace
   * @skb: netlink message as socket buffer
   * @portid: own netlink portid to avoid sending to yourself
 - * @group: offset of multicast group in groups array
 + * @group: multicast group id
   * @flags: allocation flags
   */
 -static inline int genlmsg_multicast_netns(struct genl_family *family,
 -					  struct net *net, struct sk_buff *skb,
 +static inline int genlmsg_multicast_netns(struct net *net, struct sk_buff *skb,
  					  u32 portid, unsigned int group, gfp_t flags)
  {
++<<<<<<< HEAD
++=======
+ 	if (WARN_ON_ONCE(group >= family->n_mcgrps))
+ 		return -EINVAL;
+ 	group = family->mcgrp_offset + group;
++>>>>>>> 220815a9665f (genetlink: fix genlmsg_multicast() bug)
  	return nlmsg_multicast(net->genl_sock, skb, portid, group, flags);
  }
  
  /**
   * genlmsg_multicast - multicast a netlink message to the default netns
 - * @family: the generic netlink family
   * @skb: netlink message as socket buffer
   * @portid: own netlink portid to avoid sending to yourself
 - * @group: offset of multicast group in groups array
 + * @group: multicast group id
   * @flags: allocation flags
   */
 -static inline int genlmsg_multicast(struct genl_family *family,
 -				    struct sk_buff *skb, u32 portid,
 +static inline int genlmsg_multicast(struct sk_buff *skb, u32 portid,
  				    unsigned int group, gfp_t flags)
  {
++<<<<<<< HEAD
 +	return genlmsg_multicast_netns(&init_net, skb, portid, group, flags);
++=======
+ 	return genlmsg_multicast_netns(family, &init_net, skb,
+ 				       portid, group, flags);
++>>>>>>> 220815a9665f (genetlink: fix genlmsg_multicast() bug)
  }
  
  /**
diff --cc net/netlink/genetlink.c
index fa66966658bc,4518a57aa5fe..000000000000
--- a/net/netlink/genetlink.c
+++ b/net/netlink/genetlink.c
@@@ -1012,9 -1042,12 +1012,15 @@@ static int genlmsg_mcast(struct sk_buf
  	return err;
  }
  
 -int genlmsg_multicast_allns(struct genl_family *family, struct sk_buff *skb,
 -			    u32 portid, unsigned int group, gfp_t flags)
 +int genlmsg_multicast_allns(struct sk_buff *skb, u32 portid, unsigned int group,
 +			    gfp_t flags)
  {
++<<<<<<< HEAD
++=======
+ 	if (WARN_ON_ONCE(group >= family->n_mcgrps))
+ 		return -EINVAL;
+ 	group = family->mcgrp_offset + group;
++>>>>>>> 220815a9665f (genetlink: fix genlmsg_multicast() bug)
  	return genlmsg_mcast(skb, portid, group, flags);
  }
  EXPORT_SYMBOL(genlmsg_multicast_allns);
@@@ -1028,6 -1062,9 +1034,12 @@@ void genl_notify(struct sk_buff *skb, s
  	if (nlh)
  		report = nlmsg_report(nlh);
  
++<<<<<<< HEAD
++=======
+ 	if (WARN_ON_ONCE(group >= family->n_mcgrps))
+ 		return;
+ 	group = family->mcgrp_offset + group;
++>>>>>>> 220815a9665f (genetlink: fix genlmsg_multicast() bug)
  	nlmsg_notify(sk, skb, portid, group, report, flags);
  }
  EXPORT_SYMBOL(genl_notify);
* Unmerged path include/net/genetlink.h
* Unmerged path net/netlink/genetlink.c
