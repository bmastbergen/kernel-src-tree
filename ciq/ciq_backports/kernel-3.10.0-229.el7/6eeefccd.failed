perf bench: Fix NULL pointer dereference in "perf bench all"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/bench: Fix NULL pointer dereference in "perf bench all" (Jiri Olsa) [1133083]
Rebuild_FUZZ: 98.33%
commit-author Patrick Palka <patrick@parcs.ath.cx>
commit 6eeefccdcfc2cc9697562e740bfe6c35fddd4e1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/6eeefccd.failed

The for_each_bench() macro must check that the "benchmarks" field of a
collection is not NULL before dereferencing it because the "all"
collection in particular has a NULL "benchmarks" field (signifying that
it has no benchmarks to iterate over).

This fixes this NULL pointer dereference when running "perf bench all":

  [root@ssdandy ~]# perf bench all
  <SNIP>

  # Running mem/memset benchmark...
  # Copying 1MB Bytes ...

         2.453675 GB/Sec
        12.056327 GB/Sec (with prefault)

  Segmentation fault (core dumped)
  [root@ssdandy ~]#

	Signed-off-by: Patrick Palka <patrick@parcs.ath.cx>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1394664051-6037-1-git-send-email-patrick@parcs.ath.cx
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 6eeefccdcfc2cc9697562e740bfe6c35fddd4e1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-bench.c
diff --cc tools/perf/builtin-bench.c
index 77298bf892b8,8a987d252780..000000000000
--- a/tools/perf/builtin-bench.c
+++ b/tools/perf/builtin-bench.c
@@@ -47,72 -40,54 +47,84 @@@ static struct bench_suite numa_suites[
  };
  #endif
  
 -static struct bench sched_benchmarks[] = {
 -	{ "messaging",	"Benchmark for scheduling and IPC",		bench_sched_messaging	},
 -	{ "pipe",	"Benchmark for pipe() between two processes",	bench_sched_pipe	},
 -	{ "all",	"Test all scheduler benchmarks",		NULL			},
 -	{ NULL,		NULL,						NULL			}
 +static struct bench_suite sched_suites[] = {
 +	{ "messaging",
 +	  "Benchmark for scheduler and IPC mechanisms",
 +	  bench_sched_messaging },
 +	{ "pipe",
 +	  "Flood of communication over pipe() between two processes",
 +	  bench_sched_pipe      },
 +	suite_all,
 +	{ NULL,
 +	  NULL,
 +	  NULL                  }
  };
  
 -static struct bench mem_benchmarks[] = {
 -	{ "memcpy",	"Benchmark for memcpy()",			bench_mem_memcpy	},
 -	{ "memset",	"Benchmark for memset() tests",			bench_mem_memset	},
 -	{ "all",	"Test all memory benchmarks",			NULL			},
 -	{ NULL,		NULL,						NULL			}
 +static struct bench_suite mem_suites[] = {
 +	{ "memcpy",
 +	  "Simple memory copy in various ways",
 +	  bench_mem_memcpy },
 +	{ "memset",
 +	  "Simple memory set in various ways",
 +	  bench_mem_memset },
 +	suite_all,
 +	{ NULL,
 +	  NULL,
 +	  NULL             }
  };
  
 -struct collection {
 -	const char	*name;
 -	const char	*summary;
 -	struct bench	*benchmarks;
 +struct bench_subsys {
 +	const char *name;
 +	const char *summary;
 +	struct bench_suite *suites;
  };
  
 -static struct collection collections[] = {
 -	{ "sched",	"Scheduler and IPC benchmarks",		sched_benchmarks	},
 -	{ "mem",	"Memory access benchmarks",			mem_benchmarks		},
 -#ifdef HAVE_LIBNUMA_SUPPORT
 -	{ "numa",	"NUMA scheduling and MM benchmarks",		numa_benchmarks		},
 +static struct bench_subsys subsystems[] = {
 +#ifdef LIBNUMA_SUPPORT
 +	{ "numa",
 +	  "NUMA scheduling and MM behavior",
 +	  numa_suites },
  #endif
 -	{ "all",	"All benchmarks",				NULL			},
 -	{ NULL,		NULL,						NULL			}
 +	{ "sched",
 +	  "scheduler and IPC mechanism",
 +	  sched_suites },
 +	{ "mem",
 +	  "memory access performance",
 +	  mem_suites },
 +	{ "all",		/* sentinel: easy for help */
 +	  "all benchmark subsystem",
 +	  NULL },
 +	{ NULL,
 +	  NULL,
 +	  NULL       }
  };
  
++<<<<<<< HEAD
 +static void dump_suites(int subsys_index)
++=======
+ /* Iterate over all benchmark collections: */
+ #define for_each_collection(coll) \
+ 	for (coll = collections; coll->name; coll++)
+ 
+ /* Iterate over all benchmarks within a collection: */
+ #define for_each_bench(coll, bench) \
+ 	for (bench = coll->benchmarks; bench && bench->name; bench++)
+ 
+ static void dump_benchmarks(struct collection *coll)
++>>>>>>> 6eeefccdcfc2 (perf bench: Fix NULL pointer dereference in "perf bench all")
  {
 -	struct bench *bench;
 +	int i;
  
 -	printf("\n        # List of available benchmarks for collection '%s':\n\n", coll->name);
 +	printf("# List of available suites for %s...\n\n",
 +	       subsystems[subsys_index].name);
  
 -	for_each_bench(coll, bench)
 -		printf("%14s: %s\n", bench->name, bench->summary);
 +	for (i = 0; subsystems[subsys_index].suites[i].name; i++)
 +		printf("%14s: %s\n",
 +		       subsystems[subsys_index].suites[i].name,
 +		       subsystems[subsys_index].suites[i].summary);
  
  	printf("\n");
 +	return;
  }
  
  static const char *bench_format_str;
* Unmerged path tools/perf/builtin-bench.c
