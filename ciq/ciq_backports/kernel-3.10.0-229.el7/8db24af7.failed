bridge: Add functionality to sync static fdb entries to hw

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Vlad Yasevich <vyasevic@redhat.com>
commit 8db24af71b31690a30ad371b35936fa10e547ee7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/8db24af7.failed

Add code that allows static fdb entires to be synced to the
hw list for a specified port.  This will be used later to
program ports that can function in non-promiscuous mode.

	Acked-by: Michael S. Tsirkin <mst@redhat.com>
	Signed-off-by: Vlad Yasevich <vyasevic@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8db24af71b31690a30ad371b35936fa10e547ee7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_private.h
diff --cc net/bridge/br_private.h
index 10b5654d52ef,c0a804b5ff08..000000000000
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@@ -385,71 -372,60 +385,82 @@@ static inline void br_netpoll_disable(s
  #endif
  
  /* br_fdb.c */
 -int br_fdb_init(void);
 -void br_fdb_fini(void);
 -void br_fdb_flush(struct net_bridge *br);
 -void br_fdb_find_delete_local(struct net_bridge *br,
 -			      const struct net_bridge_port *p,
 -			      const unsigned char *addr, u16 vid);
 -void br_fdb_changeaddr(struct net_bridge_port *p, const unsigned char *newaddr);
 -void br_fdb_change_mac_address(struct net_bridge *br, const u8 *newaddr);
 -void br_fdb_cleanup(unsigned long arg);
 -void br_fdb_delete_by_port(struct net_bridge *br,
 -			   const struct net_bridge_port *p, int do_all);
 -struct net_bridge_fdb_entry *__br_fdb_get(struct net_bridge *br,
 -					  const unsigned char *addr, __u16 vid);
 -int br_fdb_test_addr(struct net_device *dev, unsigned char *addr);
 -int br_fdb_fillbuf(struct net_bridge *br, void *buf, unsigned long count,
 -		   unsigned long off);
 -int br_fdb_insert(struct net_bridge *br, struct net_bridge_port *source,
 -		  const unsigned char *addr, u16 vid);
 -void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 -		   const unsigned char *addr, u16 vid, bool added_by_user);
 -
 +extern int br_fdb_init(void);
 +extern void br_fdb_fini(void);
 +extern void br_fdb_flush(struct net_bridge *br);
 +extern void br_fdb_changeaddr(struct net_bridge_port *p,
 +			      const unsigned char *newaddr);
 +extern void br_fdb_change_mac_address(struct net_bridge *br, const u8 *newaddr);
 +extern void br_fdb_cleanup(unsigned long arg);
 +extern void br_fdb_delete_by_port(struct net_bridge *br,
 +				  const struct net_bridge_port *p, int do_all);
 +extern struct net_bridge_fdb_entry *__br_fdb_get(struct net_bridge *br,
 +						 const unsigned char *addr,
 +						 __u16 vid);
 +extern int br_fdb_test_addr(struct net_device *dev, unsigned char *addr);
 +extern int br_fdb_fillbuf(struct net_bridge *br, void *buf,
 +			  unsigned long count, unsigned long off);
 +extern int br_fdb_insert(struct net_bridge *br,
 +			 struct net_bridge_port *source,
 +			 const unsigned char *addr,
 +			 u16 vid);
 +extern void br_fdb_update(struct net_bridge *br,
 +			  struct net_bridge_port *source,
 +			  const unsigned char *addr,
 +			  u16 vid);
 +extern int fdb_delete_by_addr(struct net_bridge *br, const u8 *addr, u16 vid);
 +
++<<<<<<< HEAD
 +extern int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 +			 struct net_device *dev,
 +			 const unsigned char *addr);
 +extern int br_fdb_add(struct ndmsg *nlh, struct nlattr *tb[],
 +		      struct net_device *dev,
 +		      const unsigned char *addr,
 +		      u16 nlh_flags);
 +extern int br_fdb_dump(struct sk_buff *skb,
 +		       struct netlink_callback *cb,
 +		       struct net_device *dev,
 +		       int idx);
++=======
+ int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
+ 		  struct net_device *dev, const unsigned char *addr);
+ int br_fdb_add(struct ndmsg *nlh, struct nlattr *tb[], struct net_device *dev,
+ 	       const unsigned char *addr, u16 nlh_flags);
+ int br_fdb_dump(struct sk_buff *skb, struct netlink_callback *cb,
+ 		struct net_device *dev, int idx);
+ int br_fdb_sync_static(struct net_bridge *br, struct net_bridge_port *p);
+ void br_fdb_unsync_static(struct net_bridge *br, struct net_bridge_port *p);
++>>>>>>> 8db24af71b31 (bridge: Add functionality to sync static fdb entries to hw)
  
  /* br_forward.c */
 -void br_deliver(const struct net_bridge_port *to, struct sk_buff *skb);
 -int br_dev_queue_push_xmit(struct sk_buff *skb);
 -void br_forward(const struct net_bridge_port *to,
 +extern void br_deliver(const struct net_bridge_port *to,
 +		struct sk_buff *skb);
 +extern int br_dev_queue_push_xmit(struct sk_buff *skb);
 +extern void br_forward(const struct net_bridge_port *to,
  		struct sk_buff *skb, struct sk_buff *skb0);
 -int br_forward_finish(struct sk_buff *skb);
 -void br_flood_deliver(struct net_bridge *br, struct sk_buff *skb, bool unicast);
 -void br_flood_forward(struct net_bridge *br, struct sk_buff *skb,
 -		      struct sk_buff *skb2, bool unicast);
 +extern int br_forward_finish(struct sk_buff *skb);
 +extern void br_flood_deliver(struct net_bridge *br, struct sk_buff *skb,
 +			     bool unicast);
 +extern void br_flood_forward(struct net_bridge *br, struct sk_buff *skb,
 +			     struct sk_buff *skb2, bool unicast);
  
  /* br_if.c */
 -void br_port_carrier_check(struct net_bridge_port *p);
 -int br_add_bridge(struct net *net, const char *name);
 -int br_del_bridge(struct net *net, const char *name);
 -int br_add_if(struct net_bridge *br, struct net_device *dev);
 -int br_del_if(struct net_bridge *br, struct net_device *dev);
 -int br_min_mtu(const struct net_bridge *br);
 -netdev_features_t br_features_recompute(struct net_bridge *br,
 -					netdev_features_t features);
 -void br_port_flags_change(struct net_bridge_port *port, unsigned long mask);
 +extern void br_port_carrier_check(struct net_bridge_port *p);
 +extern int br_add_bridge(struct net *net, const char *name);
 +extern int br_del_bridge(struct net *net, const char *name);
 +extern void br_net_exit(struct net *net);
 +extern int br_add_if(struct net_bridge *br,
 +	      struct net_device *dev);
 +extern int br_del_if(struct net_bridge *br,
 +	      struct net_device *dev);
 +extern int br_min_mtu(const struct net_bridge *br);
 +extern netdev_features_t br_features_recompute(struct net_bridge *br,
 +	netdev_features_t features);
  
  /* br_input.c */
 -int br_handle_frame_finish(struct sk_buff *skb);
 -rx_handler_result_t br_handle_frame(struct sk_buff **pskb);
 +extern int br_handle_frame_finish(struct sk_buff *skb);
 +extern rx_handler_result_t br_handle_frame(struct sk_buff **pskb);
  
  static inline bool br_rx_handler_check_rcu(const struct net_device *dev)
  {
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index ee27e08f9b4b..bf196bdc876d 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -829,3 +829,59 @@ int br_fdb_delete(struct ndmsg *ndm, struct nlattr *tb[],
 out:
 	return err;
 }
+
+int br_fdb_sync_static(struct net_bridge *br, struct net_bridge_port *p)
+{
+	struct net_bridge_fdb_entry *fdb, *tmp;
+	int i;
+	int err;
+
+	ASSERT_RTNL();
+
+	for (i = 0; i < BR_HASH_SIZE; i++) {
+		hlist_for_each_entry(fdb, &br->hash[i], hlist) {
+			/* We only care for static entries */
+			if (!fdb->is_static)
+				continue;
+
+			err = dev_uc_add(p->dev, fdb->addr.addr);
+			if (err)
+				goto rollback;
+		}
+	}
+	return 0;
+
+rollback:
+	for (i = 0; i < BR_HASH_SIZE; i++) {
+		hlist_for_each_entry(tmp, &br->hash[i], hlist) {
+			/* If we reached the fdb that failed, we can stop */
+			if (tmp == fdb)
+				break;
+
+			/* We only care for static entries */
+			if (!tmp->is_static)
+				continue;
+
+			dev_uc_del(p->dev, tmp->addr.addr);
+		}
+	}
+	return err;
+}
+
+void br_fdb_unsync_static(struct net_bridge *br, struct net_bridge_port *p)
+{
+	struct net_bridge_fdb_entry *fdb;
+	int i;
+
+	ASSERT_RTNL();
+
+	for (i = 0; i < BR_HASH_SIZE; i++) {
+		hlist_for_each_entry_rcu(fdb, &br->hash[i], hlist) {
+			/* We only care for static entries */
+			if (!fdb->is_static)
+				continue;
+
+			dev_uc_del(p->dev, fdb->addr.addr);
+		}
+	}
+}
* Unmerged path net/bridge/br_private.h
