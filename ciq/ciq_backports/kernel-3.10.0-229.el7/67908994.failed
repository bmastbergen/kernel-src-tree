ALSA: hda - Pull pages allocation to hda_controller

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [alsa] hda: Pull pages allocation to hda_controller (Jaroslav Kysela) [1112200]
Rebuild_FUZZ: 90.53%
commit-author Dylan Reid <dgreid@chromium.org>
commit 679089944317963e9abf51899b48db3b6f424489
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/67908994.failed

Pull allocation from first_init to a new function in hda_controller.c.
Short term this will allow the dsp loader to be moved as well.  In
later commits it will allow the same allocation to be used by the
platform hda driver.

	Signed-off-by: Dylan Reid <dgreid@chromium.org>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 679089944317963e9abf51899b48db3b6f424489)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/hda_controller.c
#	sound/pci/hda/hda_controller.h
#	sound/pci/hda/hda_intel.c
diff --cc sound/pci/hda/hda_intel.c
index f803cf3b4c64,4a0b228d70f7..000000000000
--- a/sound/pci/hda/hda_intel.c
+++ b/sound/pci/hda/hda_intel.c
@@@ -2890,21 -1864,7 +2890,25 @@@ static int azx_free(struct azx *chip
  	if (chip->remap_addr)
  		iounmap(chip->remap_addr);
  
++<<<<<<< HEAD
 +	if (chip->azx_dev) {
 +		for (i = 0; i < chip->num_streams; i++)
 +			if (chip->azx_dev[i].bdl.area) {
 +				mark_pages_wc(chip, &chip->azx_dev[i].bdl, false);
 +				snd_dma_free_pages(&chip->azx_dev[i].bdl);
 +			}
 +	}
 +	if (chip->rb.area) {
 +		mark_pages_wc(chip, &chip->rb, false);
 +		snd_dma_free_pages(&chip->rb);
 +	}
 +	if (chip->posbuf.area) {
 +		mark_pages_wc(chip, &chip->posbuf, false);
 +		snd_dma_free_pages(&chip->posbuf);
 +	}
++=======
+ 	azx_free_stream_pages(chip);
++>>>>>>> 679089944317 (ALSA: hda - Pull pages allocation to hda_controller)
  	if (chip->region_requested)
  		pci_release_regions(chip->pci);
  	pci_disable_device(chip->pci);
@@@ -3355,27 -2313,9 +3359,33 @@@ static int azx_first_init(struct azx *c
  		return -ENOMEM;
  	}
  
++<<<<<<< HEAD
 +	for (i = 0; i < chip->num_streams; i++) {
 +		dsp_lock_init(&chip->azx_dev[i]);
 +		/* allocate memory for the BDL for each stream */
 +		err = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV,
 +					  chip->card->dev,
 +					  BDL_SIZE, &chip->azx_dev[i].bdl);
 +		if (err < 0) {
 +			snd_printk(KERN_ERR SFX "%s: cannot allocate BDL\n", pci_name(chip->pci));
 +			return -ENOMEM;
 +		}
 +		mark_pages_wc(chip, &chip->azx_dev[i].bdl, true);
 +	}
 +	/* allocate memory for the position buffer */
 +	err = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV,
 +				  chip->card->dev,
 +				  chip->num_streams * 8, &chip->posbuf);
 +	if (err < 0) {
 +		snd_printk(KERN_ERR SFX "%s: cannot allocate posbuf\n", pci_name(chip->pci));
 +		return -ENOMEM;
 +	}
 +	mark_pages_wc(chip, &chip->posbuf, true);
++=======
+ 	err = azx_alloc_stream_pages(chip);
+ 	if (err < 0)
+ 		return err;
++>>>>>>> 679089944317 (ALSA: hda - Pull pages allocation to hda_controller)
  	/* allocate CORB/RIRB */
  	err = azx_alloc_cmd_io(chip);
  	if (err < 0)
* Unmerged path sound/pci/hda/hda_controller.c
* Unmerged path sound/pci/hda/hda_controller.h
* Unmerged path sound/pci/hda/hda_controller.c
* Unmerged path sound/pci/hda/hda_controller.h
* Unmerged path sound/pci/hda/hda_intel.c
