powerpc/ftrace: Fix nop of modules on 64bit LE (ABIv2)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [powerpc] ftrace: Fix nop of modules on 64bit LE (ABIv2) (Don Zickus) [1127366]
Rebuild_FUZZ: 92.00%
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit d84e0d69c26b4d739214974d6ad6baf23f510580
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/d84e0d69.failed

There is a bug in the handling of the function entry when we are nopping
out a branch from a module in ftrace.

We compare the result of module_trampoline_target() with the value of
ppc_function_entry(), and expect them to be true. But they never will
be.

module_trampoline_target() will always return the global entry point of
the function, whereas ppc_function_entry() will always return the local.

Fix it by using the newly added ppc_global_function_entry().

	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit d84e0d69c26b4d739214974d6ad6baf23f510580)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/ftrace.c
diff --cc arch/powerpc/kernel/ftrace.c
index 48a3dd30f08e,96efc664b49d..000000000000
--- a/arch/powerpc/kernel/ftrace.c
+++ b/arch/powerpc/kernel/ftrace.c
@@@ -105,11 -105,9 +105,15 @@@ __ftrace_make_nop(struct module *mod
  		  struct dyn_ftrace *rec, unsigned long addr)
  {
  	unsigned int op;
++<<<<<<< HEAD
 +	unsigned int jmp[5];
 +	unsigned long ptr;
++=======
+ 	unsigned long entry, ptr;
++>>>>>>> d84e0d69c26b (powerpc/ftrace: Fix nop of modules on 64bit LE (ABIv2))
  	unsigned long ip = rec->ip;
 -	void *tramp;
 +	unsigned long tramp;
 +	int offset;
  
  	/* read where this goes */
  	if (probe_kernel_read(&op, (void *)ip, sizeof(int)))
@@@ -173,13 -134,13 +177,20 @@@
  		return -EFAULT;
  	}
  
 -	pr_devel("trampoline target %lx", ptr);
 +	pr_devel(" %08x %08x\n", jmp[0], jmp[1]);
 +
 +	ptr = ((unsigned long)jmp[0] << 32) + jmp[1];
  
+ 	entry = ppc_global_function_entry((void *)addr);
  	/* This should match what was called */
++<<<<<<< HEAD
 +	if (ptr != ppc_function_entry((void *)addr)) {
 +		printk(KERN_ERR "addr does not match %lx\n", ptr);
++=======
+ 	if (ptr != entry) {
+ 		printk(KERN_ERR "addr %lx does not match expected %lx\n",
+ 			ptr, entry);
++>>>>>>> d84e0d69c26b (powerpc/ftrace: Fix nop of modules on 64bit LE (ABIv2))
  		return -EINVAL;
  	}
  
* Unmerged path arch/powerpc/kernel/ftrace.c
