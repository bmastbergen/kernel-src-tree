perf tools: Fix bfd dependency libraries detection

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf: Fix bfd dependency libraries detection (Jiri Olsa) [1134356]
Rebuild_FUZZ: 93.62%
commit-author Jiri Olsa <jolsa@kernel.org>
commit 2cf9040714f3e63f94935c9f1ed4e5bc54265ddb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/2cf90407.failed

There's false assumption in the library detection code
assuming -liberty and -lz are always present once bfd
is detected. The fails on Ubuntu (14.04) as reported
by Ingo.

Forcing the bdf dependency libraries detection any
time bfd library is detected.

	Reported-by: Ingo Molnar <mingo@kernel.org>
	Tested-by: Ingo Molnar <mingo@kernel.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1398676935-6615-1-git-send-email-jolsa@kernel.org
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
(cherry picked from commit 2cf9040714f3e63f94935c9f1ed4e5bc54265ddb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/config/Makefile
diff --cc tools/perf/config/Makefile
index 8a0483155189,a57d59e7fe4b..000000000000
--- a/tools/perf/config/Makefile
+++ b/tools/perf/config/Makefile
@@@ -102,20 -137,78 +102,46 @@@ ende
  #
  # Build the feature check binaries in parallel, ignore errors, ignore return value and suppress output:
  #
 +$(info )
 +$(info Auto-detecting system features:)
  
 -#
 -# Note that this is not a complete list of all feature tests, just
 -# those that are typically built on a fully configured system.
 -#
 -# [ Feature tests not mentioned here have to be built explicitly in
 -#   the rule that uses them - an example for that is the 'bionic'
 -#   feature check. ]
 -#
 -CORE_FEATURE_TESTS =			\
 -	backtrace			\
 -	dwarf				\
 +FEATURE_TESTS =				\
 +	hello				\
 +	stackprotector-all		\
 +	stackprotector			\
 +	volatile-register-var		\
  	fortify-source			\
 -	glibc				\
 -	gtk2				\
 -	gtk2-infobar			\
 -	libaudit			\
 -	libbfd				\
++<<<<<<< HEAD
 +	bionic				\
  	libelf				\
 -	libelf-getphdrnum		\
 -	libelf-mmap			\
 -	libnuma				\
 -	libperl				\
 -	libpython			\
 -	libpython-version		\
 -	libslang			\
 -	libunwind			\
 -	on-exit				\
 -	stackprotector-all		\
 -	timerfd				\
 -	libdw-dwarf-unwind
 -
 -LIB_FEATURE_TESTS =			\
 -	dwarf				\
  	glibc				\
 -	gtk2				\
 -	libaudit			\
 -	libbfd				\
 -	libelf				\
 -	libnuma				\
 -	libperl				\
 -	libpython			\
 -	libslang			\
 -	libunwind			\
 -	libdw-dwarf-unwind
 -
 -VF_FEATURE_TESTS =			\
 -	backtrace			\
 -	fortify-source			\
 +	dwarf				\
 +	libnuma
++=======
+ 	gtk2-infobar			\
+ 	libelf-getphdrnum		\
+ 	libelf-mmap			\
+ 	libpython-version		\
+ 	on-exit				\
+ 	stackprotector-all		\
+ 	timerfd				\
+ 	libunwind-debug-frame		\
+ 	bionic				\
+ 	liberty				\
+ 	liberty-z			\
+ 	cplus-demangle
+ 
+ # Set FEATURE_CHECK_(C|LD)FLAGS-all for all CORE_FEATURE_TESTS features.
+ # If in the future we need per-feature checks/flags for features not
+ # mentioned in this list we need to refactor this ;-).
+ set_test_all_flags = $(eval $(set_test_all_flags_code))
+ define set_test_all_flags_code
+   FEATURE_CHECK_CFLAGS-all  += $(FEATURE_CHECK_CFLAGS-$(1))
+   FEATURE_CHECK_LDFLAGS-all += $(FEATURE_CHECK_LDFLAGS-$(1))
+ endef
+ 
+ $(foreach feat,$(CORE_FEATURE_TESTS),$(call set_test_all_flags,$(feat)))
++>>>>>>> 2cf9040714f3 (perf tools: Fix bfd dependency libraries detection)
  
  #
  # Special fast-path for the 'all features are available' case:
@@@ -422,33 -514,39 +448,63 @@@ els
    endif
  endif
  
++<<<<<<< HEAD
++=======
+ ifeq ($(feature-libbfd), 1)
+   EXTLIBS += -lbfd
+ 
+   # call all detections now so we get correct
+   # status in VF output
+   $(call feature_check,liberty)
+   $(call feature_check,liberty-z)
+   $(call feature_check,cplus-demangle)
+ 
+   ifeq ($(feature-liberty), 1)
+     EXTLIBS += -liberty
+   else
+     ifeq ($(feature-liberty-z), 1)
+       EXTLIBS += -liberty -lz
+     endif
+   endif
+ endif
+ 
++>>>>>>> 2cf9040714f3 (perf tools: Fix bfd dependency libraries detection)
  ifdef NO_DEMANGLE
    CFLAGS += -DNO_DEMANGLE
  else
 -  ifdef HAVE_CPLUS_DEMANGLE_SUPPORT
 +  ifdef HAVE_CPLUS_DEMANGLE
      EXTLIBS += -liberty
 -    CFLAGS += -DHAVE_CPLUS_DEMANGLE_SUPPORT
 +    CFLAGS += -DHAVE_CPLUS_DEMANGLE
    else
++<<<<<<< HEAD
 +    FLAGS_BFD=$(CFLAGS) $(LDFLAGS) $(EXTLIBS) -DPACKAGE='perf' -lbfd
 +    has_bfd := $(call try-cc,$(SOURCE_BFD),$(FLAGS_BFD),libbfd)
 +    ifeq ($(has_bfd),y)
 +      EXTLIBS += -lbfd
 +    else
 +      FLAGS_BFD_IBERTY=$(FLAGS_BFD) -liberty
 +      has_bfd_iberty := $(call try-cc,$(SOURCE_BFD),$(FLAGS_BFD_IBERTY),liberty)
 +      ifeq ($(has_bfd_iberty),y)
 +        EXTLIBS += -lbfd -liberty
 +      else
 +        FLAGS_BFD_IBERTY_Z=$(FLAGS_BFD_IBERTY) -lz
 +        has_bfd_iberty_z := $(call try-cc,$(SOURCE_BFD),$(FLAGS_BFD_IBERTY_Z),libz)
 +        ifeq ($(has_bfd_iberty_z),y)
 +          EXTLIBS += -lbfd -liberty -lz
 +        else
 +          FLAGS_CPLUS_DEMANGLE=$(CFLAGS) $(LDFLAGS) $(EXTLIBS) -liberty
 +          has_cplus_demangle := $(call try-cc,$(SOURCE_CPLUS_DEMANGLE),$(FLAGS_CPLUS_DEMANGLE),demangle)
 +          ifeq ($(has_cplus_demangle),y)
++=======
+     ifneq ($(feature-libbfd), 1)
+       ifneq ($(feature-liberty), 1)
+         ifneq ($(feature-liberty-z), 1)
+           # we dont have neither HAVE_CPLUS_DEMANGLE_SUPPORT
+           # or any of 'bfd iberty z' trinity
+           ifeq ($(feature-cplus-demangle), 1)
++>>>>>>> 2cf9040714f3 (perf tools: Fix bfd dependency libraries detection)
              EXTLIBS += -liberty
 -            CFLAGS += -DHAVE_CPLUS_DEMANGLE_SUPPORT
 +            CFLAGS += -DHAVE_CPLUS_DEMANGLE
            else
              msg := $(warning No bfd.h/libbfd found, install binutils-dev[el]/zlib-static to gain symbol demangling)
              CFLAGS += -DNO_DEMANGLE
* Unmerged path tools/perf/config/Makefile
