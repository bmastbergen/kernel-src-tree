blk-mq: add blk_mq_start_hw_queues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 2f268556567ebeb3538f99b9bdad177581439dcb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/2f268556.failed

Add a helper to unconditionally kick contexts of a queue.  This will
be needed by the SCSI layer to provide fair queueing between multiple
devices on a single host.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 2f268556567ebeb3538f99b9bdad177581439dcb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
#	include/linux/blk-mq.h
diff --cc block/blk-mq.c
index 9a84bbb2459d,543bbc08a261..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -676,7 -701,18 +676,22 @@@ void blk_mq_start_hw_queue(struct blk_m
  }
  EXPORT_SYMBOL(blk_mq_start_hw_queue);
  
++<<<<<<< HEAD
 +void blk_mq_start_stopped_hw_queues(struct request_queue *q)
++=======
+ void blk_mq_start_hw_queues(struct request_queue *q)
+ {
+ 	struct blk_mq_hw_ctx *hctx;
+ 	int i;
+ 
+ 	queue_for_each_hw_ctx(q, hctx, i)
+ 		blk_mq_start_hw_queue(hctx);
+ }
+ EXPORT_SYMBOL(blk_mq_start_hw_queues);
+ 
+ 
+ void blk_mq_start_stopped_hw_queues(struct request_queue *q, bool async)
++>>>>>>> 2f268556567e (blk-mq: add blk_mq_start_hw_queues)
  {
  	struct blk_mq_hw_ctx *hctx;
  	int i;
diff --cc include/linux/blk-mq.h
index f13671a6c70c,391377e53367..000000000000
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@@ -147,7 -158,9 +147,13 @@@ void blk_mq_complete_request(struct req
  void blk_mq_stop_hw_queue(struct blk_mq_hw_ctx *hctx);
  void blk_mq_start_hw_queue(struct blk_mq_hw_ctx *hctx);
  void blk_mq_stop_hw_queues(struct request_queue *q);
++<<<<<<< HEAD
 +void blk_mq_start_stopped_hw_queues(struct request_queue *q);
++=======
+ void blk_mq_start_hw_queues(struct request_queue *q);
+ void blk_mq_start_stopped_hw_queues(struct request_queue *q, bool async);
+ void blk_mq_delay_queue(struct blk_mq_hw_ctx *hctx, unsigned long msecs);
++>>>>>>> 2f268556567e (blk-mq: add blk_mq_start_hw_queues)
  
  /*
   * Driver command data is immediately after the request. So subtract request
* Unmerged path block/blk-mq.c
* Unmerged path include/linux/blk-mq.h
