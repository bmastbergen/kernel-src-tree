perf symbols: Clarify method to get DSO binary_type filename

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [tools] perf/symbols: Clarify method to get DSO binary_type filename (Jiri Olsa) [1133083]
Rebuild_FUZZ: 98.33%
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit ee4e9625c8d4ec3a35322a882f7b6e035d2a1ad5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/ee4e9625.failed

Using dso__binary_type_file() make it look like this function will
return a file, not just its filename, so rename it to:

	dso__read_binary_type_filename()

to make its purpose clear, just like we have:

	dso__read_running_kernel_build_id()

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/n/tip-vkf3upzrfrxtr01wueej4xw4@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ee4e9625c8d4ec3a35322a882f7b6e035d2a1ad5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/dso.c
#	tools/perf/util/dso.h
diff --cc tools/perf/util/dso.c
index f2c00bf6c5e6,eef166212324..000000000000
--- a/tools/perf/util/dso.c
+++ b/tools/perf/util/dso.c
@@@ -28,8 -28,9 +28,14 @@@ char dso__symtab_origin(const struct ds
  	return origin[dso->symtab_type];
  }
  
++<<<<<<< HEAD
 +int dso__binary_type_file(struct dso *dso, enum dso_binary_type type,
 +			  char *root_dir, char *file, size_t size)
++=======
+ int dso__read_binary_type_filename(const struct dso *dso,
+ 				   enum dso_binary_type type,
+ 				   char *root_dir, char *filename, size_t size)
++>>>>>>> ee4e9625c8d4 (perf symbols: Clarify method to get DSO binary_type filename)
  {
  	char build_id_hex[BUILD_ID_SIZE * 2 + 1];
  	int ret = 0;
diff --cc tools/perf/util/dso.h
index a2d71292f746,aa3384745d75..000000000000
--- a/tools/perf/util/dso.h
+++ b/tools/perf/util/dso.h
@@@ -128,8 -128,8 +128,13 @@@ void dso__read_running_kernel_build_id(
  int dso__kernel_module_get_build_id(struct dso *dso, const char *root_dir);
  
  char dso__symtab_origin(const struct dso *dso);
++<<<<<<< HEAD
 +int dso__binary_type_file(struct dso *dso, enum dso_binary_type type,
 +			  char *root_dir, char *file, size_t size);
++=======
+ int dso__read_binary_type_filename(const struct dso *dso, enum dso_binary_type type,
+ 				   char *root_dir, char *filename, size_t size);
++>>>>>>> ee4e9625c8d4 (perf symbols: Clarify method to get DSO binary_type filename)
  
  int dso__data_fd(struct dso *dso, struct machine *machine);
  ssize_t dso__data_read_offset(struct dso *dso, struct machine *machine,
* Unmerged path tools/perf/util/dso.c
* Unmerged path tools/perf/util/dso.h
diff --git a/tools/perf/util/symbol.c b/tools/perf/util/symbol.c
index 61eb1cddf01a..9ee4b80dac57 100644
--- a/tools/perf/util/symbol.c
+++ b/tools/perf/util/symbol.c
@@ -1258,8 +1258,8 @@ int dso__load(struct dso *dso, struct map *map, symbol_filter_t filter)
 
 		enum dso_binary_type symtab_type = binary_type_symtab[i];
 
-		if (dso__binary_type_file(dso, symtab_type,
-					  root_dir, name, PATH_MAX))
+		if (dso__read_binary_type_filename(dso, symtab_type,
+						   root_dir, name, PATH_MAX))
 			continue;
 
 		/* Name is now the name of the next image to try */
