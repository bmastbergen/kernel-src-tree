bridge: Simplify pvid checks.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-229.el7
Rebuild_CHGLOG: - [net] bridge: Simplify pvid checks (Vlad Yasevich) [1164653]
Rebuild_FUZZ: 98.25%
commit-author Vlad Yasevich <vyasevich@gmail.com>
commit 3df6bf45ec008942f16f1814123c4bdebcf50741
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-229.el7/3df6bf45.failed

Currently, if the pvid is not set, we return an illegal vlan value
even though the pvid value is set to 0.  Since pvid of 0 is currently
invalid, just return 0 instead.  This makes the current and future
checks simpler.

	Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3df6bf45ec008942f16f1814123c4bdebcf50741)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_vlan.c
diff --cc net/bridge/br_vlan.c
index c5c15c7d9539,e11c9932e706..000000000000
--- a/net/bridge/br_vlan.c
+++ b/net/bridge/br_vlan.c
@@@ -227,6 -273,37 +227,40 @@@ bool br_allowed_egress(struct net_bridg
  	return false;
  }
  
++<<<<<<< HEAD
++=======
+ /* Called under RCU */
+ bool br_should_learn(struct net_bridge_port *p, struct sk_buff *skb, u16 *vid)
+ {
+ 	struct net_bridge *br = p->br;
+ 	struct net_port_vlans *v;
+ 
+ 	/* If filtering was disabled at input, let it pass. */
+ 	if (!br->vlan_enabled)
+ 		return true;
+ 
+ 	v = rcu_dereference(p->vlan_info);
+ 	if (!v)
+ 		return false;
+ 
+ 	if (!br_vlan_get_tag(skb, vid) && skb->vlan_proto != br->vlan_proto)
+ 		*vid = 0;
+ 
+ 	if (!*vid) {
+ 		*vid = br_get_pvid(v);
+ 		if (!*vid)
+ 			return false;
+ 
+ 		return true;
+ 	}
+ 
+ 	if (test_bit(*vid, v->vlan_bitmap))
+ 		return true;
+ 
+ 	return false;
+ }
+ 
++>>>>>>> 3df6bf45ec00 (bridge: Simplify pvid checks.)
  /* Must be protected by RTNL.
   * Must be called with vid in range from 1 to 4094 inclusive.
   */
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index 10b5654d52ef..9fd2f8f7661b 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -659,11 +659,8 @@ static inline int br_vlan_get_tag(const struct sk_buff *skb, u16 *vid)
 
 static inline u16 br_get_pvid(const struct net_port_vlans *v)
 {
-	/* Return just the VID if it is set, or VLAN_N_VID (invalid vid) if
-	 * vid wasn't set
-	 */
 	smp_rmb();
-	return v->pvid ?: VLAN_N_VID;
+	return v->pvid;
 }
 
 #else
@@ -739,7 +736,7 @@ static inline u16 br_vlan_get_tag(const struct sk_buff *skb, u16 *tag)
 }
 static inline u16 br_get_pvid(const struct net_port_vlans *v)
 {
-	return VLAN_N_VID;	/* Returns invalid vid */
+	return 0;
 }
 #endif
 
* Unmerged path net/bridge/br_vlan.c
