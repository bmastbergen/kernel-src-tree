net: fix __dst_negative_advice() race

jira LE-1907
cve CVE-2024-36971
Rebuild_History Non-Buildable kernel-5.14.0-427.31.1.el9_4
commit-author Eric Dumazet <edumazet@google.com>
commit 92f1655aa2b2294d0b49925f3b875a634bd3b59e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-427.31.1.el9_4/92f1655a.failed

__dst_negative_advice() does not enforce proper RCU rules when
sk->dst_cache must be cleared, leading to possible UAF.

RCU rules are that we must first clear sk->sk_dst_cache,
then call dst_release(old_dst).

Note that sk_dst_reset(sk) is implementing this protocol correctly,
while __dst_negative_advice() uses the wrong order.

Given that ip6_negative_advice() has special logic
against RTF_CACHE, this means each of the three ->negative_advice()
existing methods must perform the sk_dst_reset() themselves.

Note the check against NULL dst is centralized in
__dst_negative_advice(), there is no need to duplicate
it in various callbacks.

Many thanks to Clement Lecigne for tracking this issue.

This old bug became visible after the blamed commit, using UDP sockets.

Fixes: a87cb3e48ee8 ("net: Facility to report route quality of connected sockets")
	Reported-by: Clement Lecigne <clecigne@google.com>
Diagnosed-by: Clement Lecigne <clecigne@google.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Tom Herbert <tom@herbertland.com>
	Reviewed-by: David Ahern <dsahern@kernel.org>
Link: https://lore.kernel.org/r/20240528114353.1794151-1-edumazet@google.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 92f1655aa2b2294d0b49925f3b875a634bd3b59e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/dst_ops.h
#	net/ipv4/route.c
diff --cc include/net/dst_ops.h
index bf20caf7f9c0,3a9001a042a5..000000000000
--- a/include/net/dst_ops.h
+++ b/include/net/dst_ops.h
@@@ -25,8 -23,8 +25,13 @@@ struct dst_ops 
  	u32 *			(*cow_metrics)(struct dst_entry *, unsigned long);
  	void			(*destroy)(struct dst_entry *);
  	void			(*ifdown)(struct dst_entry *,
++<<<<<<< HEAD
 +					  struct net_device *dev, int how);
 +	struct dst_entry *	(*negative_advice)(struct dst_entry *);
++=======
+ 					  struct net_device *dev);
+ 	void			(*negative_advice)(struct sock *sk, struct dst_entry *);
++>>>>>>> 92f1655aa2b2 (net: fix __dst_negative_advice() race)
  	void			(*link_failure)(struct sk_buff *);
  	void			(*update_pmtu)(struct dst_entry *dst, struct sock *sk,
  					       struct sk_buff *skb, u32 mtu,
diff --cc net/ipv4/route.c
index 9a239e4bbe20,b3073d1c8f8f..000000000000
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@@ -844,22 -826,15 +845,20 @@@ static void ip_do_redirect(struct dst_e
  	__ip_do_redirect(rt, skb, &fl4, true);
  }
  
- static struct dst_entry *ipv4_negative_advice(struct dst_entry *dst)
+ static void ipv4_negative_advice(struct sock *sk,
+ 				 struct dst_entry *dst)
  {
++<<<<<<< HEAD
 +	struct rtable *rt = (struct rtable *)dst;
 +	struct dst_entry *ret = dst;
- 
- 	if (rt) {
- 		if (dst->obsolete > 0) {
- 			ip_rt_put(rt);
- 			ret = NULL;
- 		} else if ((rt->rt_flags & RTCF_REDIRECTED) ||
- 			   rt->dst.expires) {
- 			ip_rt_put(rt);
- 			ret = NULL;
- 		}
- 	}
- 	return ret;
++=======
+ 	struct rtable *rt = dst_rtable(dst);
++>>>>>>> 92f1655aa2b2 (net: fix __dst_negative_advice() race)
+ 
+ 	if ((dst->obsolete > 0) ||
+ 	    (rt->rt_flags & RTCF_REDIRECTED) ||
+ 	    rt->dst.expires)
+ 		sk_dst_reset(sk);
  }
  
  /*
* Unmerged path include/net/dst_ops.h
diff --git a/include/net/sock.h b/include/net/sock.h
index 4f35d30d63a1..07fc5cadf120 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -2183,17 +2183,10 @@ sk_dst_get(struct sock *sk)
 
 static inline void __dst_negative_advice(struct sock *sk)
 {
-	struct dst_entry *ndst, *dst = __sk_dst_get(sk);
+	struct dst_entry *dst = __sk_dst_get(sk);
 
-	if (dst && dst->ops->negative_advice) {
-		ndst = dst->ops->negative_advice(dst);
-
-		if (ndst != dst) {
-			rcu_assign_pointer(sk->sk_dst_cache, ndst);
-			sk_tx_queue_clear(sk);
-			WRITE_ONCE(sk->sk_dst_pending_confirm, 0);
-		}
-	}
+	if (dst && dst->ops->negative_advice)
+		dst->ops->negative_advice(sk, dst);
 }
 
 static inline void dst_negative_advice(struct sock *sk)
* Unmerged path net/ipv4/route.c
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index be789c8d2cdd..efc73a5e0367 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -87,7 +87,8 @@ struct dst_entry	*ip6_dst_check(struct dst_entry *dst, u32 cookie);
 static unsigned int	 ip6_default_advmss(const struct dst_entry *dst);
 INDIRECT_CALLABLE_SCOPE
 unsigned int		ip6_mtu(const struct dst_entry *dst);
-static struct dst_entry *ip6_negative_advice(struct dst_entry *);
+static void		ip6_negative_advice(struct sock *sk,
+					    struct dst_entry *dst);
 static void		ip6_dst_destroy(struct dst_entry *);
 static void		ip6_dst_ifdown(struct dst_entry *,
 				       struct net_device *dev, int how);
@@ -2762,24 +2763,24 @@ INDIRECT_CALLABLE_SCOPE struct dst_entry *ip6_dst_check(struct dst_entry *dst,
 }
 EXPORT_INDIRECT_CALLABLE(ip6_dst_check);
 
-static struct dst_entry *ip6_negative_advice(struct dst_entry *dst)
+static void ip6_negative_advice(struct sock *sk,
+				struct dst_entry *dst)
 {
 	struct rt6_info *rt = (struct rt6_info *) dst;
 
-	if (rt) {
-		if (rt->rt6i_flags & RTF_CACHE) {
-			rcu_read_lock();
-			if (rt6_check_expired(rt)) {
-				rt6_remove_exception_rt(rt);
-				dst = NULL;
-			}
-			rcu_read_unlock();
-		} else {
-			dst_release(dst);
-			dst = NULL;
+	if (rt->rt6i_flags & RTF_CACHE) {
+		rcu_read_lock();
+		if (rt6_check_expired(rt)) {
+			/* counteract the dst_release() in sk_dst_reset() */
+			dst_hold(dst);
+			sk_dst_reset(sk);
+
+			rt6_remove_exception_rt(rt);
 		}
+		rcu_read_unlock();
+		return;
 	}
-	return dst;
+	sk_dst_reset(sk);
 }
 
 static void ip6_link_failure(struct sk_buff *skb)
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
index 21b350f51521..aa7f6615ecc5 100644
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -3839,15 +3839,10 @@ static void xfrm_link_failure(struct sk_buff *skb)
 	/* Impossible. Such dst must be popped before reaches point of failure. */
 }
 
-static struct dst_entry *xfrm_negative_advice(struct dst_entry *dst)
+static void xfrm_negative_advice(struct sock *sk, struct dst_entry *dst)
 {
-	if (dst) {
-		if (dst->obsolete) {
-			dst_release(dst);
-			dst = NULL;
-		}
-	}
-	return dst;
+	if (dst->obsolete)
+		sk_dst_reset(sk);
 }
 
 static void xfrm_init_pmtu(struct xfrm_dst **bundle, int nr)
