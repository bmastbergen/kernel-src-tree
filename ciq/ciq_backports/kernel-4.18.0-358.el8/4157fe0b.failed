loop: don't call loop_lookup before adding a loop device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 4157fe0b3d16ceca4316674a90c681405cdd23bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/4157fe0b.failed

loop_add returns the right error if the slot wasn't available.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/r/20210623145908.92973-5-hch@lst.de
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 4157fe0b3d16ceca4316674a90c681405cdd23bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/loop.c
diff --cc drivers/block/loop.c
index c2f478450eaa,5b77c1e160b5..000000000000
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@@ -2247,8 -2393,7 +2246,12 @@@ static void loop_probe(dev_t dev
  		return;
  
  	mutex_lock(&loop_ctl_mutex);
++<<<<<<< HEAD
 +	if (loop_lookup(&lo, idx) < 0)
 +		loop_add(&lo, idx);
++=======
+ 	loop_add(idx);
++>>>>>>> 4157fe0b3d16 (loop: don't call loop_lookup before adding a loop device)
  	mutex_unlock(&loop_ctl_mutex);
  }
  
@@@ -2265,12 -2410,7 +2268,16 @@@ static long loop_control_ioctl(struct f
  	ret = -ENOSYS;
  	switch (cmd) {
  	case LOOP_CTL_ADD:
++<<<<<<< HEAD
 +		ret = loop_lookup(&lo, parm);
 +		if (ret >= 0) {
 +			ret = -EEXIST;
 +			break;
 +		}
 +		ret = loop_add(&lo, parm);
++=======
+ 		ret = loop_add(parm);
++>>>>>>> 4157fe0b3d16 (loop: don't call loop_lookup before adding a loop device)
  		break;
  	case LOOP_CTL_REMOVE:
  		ret = loop_lookup(&lo, parm);
* Unmerged path drivers/block/loop.c
