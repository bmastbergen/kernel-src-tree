KVM: selftests: Refactor help message for -s backing_src

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author David Matlack <dmatlack@google.com>
commit 9f2fc5554a4093e80084389f760d0b06ec2ff782
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/9f2fc555.failed

All selftests that support the backing_src option were printing their
own description of the flag and then calling backing_src_help() to dump
the list of available backing sources. Consolidate the flag printing in
backing_src_help() to align indentation, reduce duplicated strings, and
improve consistency across tests.

Note: Passing "-s" to backing_src_help is unnecessary since every test
uses the same flag. However I decided to keep it for code readability
at the call sites.

While here this opportunistically fixes the incorrectly interleaved
printing -x help message and list of backing source types in
dirty_log_perf_test.

Fixes: 609e6202ea5f ("KVM: selftests: Support multiple slots in dirty_log_perf_test")
	Reviewed-by: Ben Gardon <bgardon@google.com>
	Reviewed-by: Andrew Jones <drjones@redhat.com>
	Signed-off-by: David Matlack <dmatlack@google.com>
Message-Id: <20210917173657.44011-3-dmatlack@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 9f2fc5554a4093e80084389f760d0b06ec2ff782)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/access_tracking_perf_test.c
#	tools/testing/selftests/kvm/demand_paging_test.c
#	tools/testing/selftests/kvm/dirty_log_perf_test.c
diff --cc tools/testing/selftests/kvm/demand_paging_test.c
index daf09c393175,1510b21e6306..000000000000
--- a/tools/testing/selftests/kvm/demand_paging_test.c
+++ b/tools/testing/selftests/kvm/demand_paging_test.c
@@@ -388,8 -426,7 +388,12 @@@ static void help(char *name
  	printf(" -b: specify the size of the memory region which should be\n"
  	       "     demand paged by each vCPU. e.g. 10M or 3G.\n"
  	       "     Default: 1G\n");
++<<<<<<< HEAD
 +	printf(" -t: The type of backing memory to use. Default: anonymous\n");
 +	backing_src_help();
++=======
+ 	backing_src_help("-s");
++>>>>>>> 9f2fc5554a40 (KVM: selftests: Refactor help message for -s backing_src)
  	printf(" -v: specify the number of vCPUs to run.\n");
  	printf(" -o: Overlap guest memory accesses instead of partitioning\n"
  	       "     them into a separate region of memory for each vCPU.\n");
diff --cc tools/testing/selftests/kvm/dirty_log_perf_test.c
index f0dd381e0a16,b076dfa3ae1b..000000000000
--- a/tools/testing/selftests/kvm/dirty_log_perf_test.c
+++ b/tools/testing/selftests/kvm/dirty_log_perf_test.c
@@@ -261,9 -308,9 +261,15 @@@ static void help(char *name
  	printf(" -v: specify the number of vCPUs to run.\n");
  	printf(" -o: Overlap guest memory accesses instead of partitioning\n"
  	       "     them into a separate region of memory for each vCPU.\n");
++<<<<<<< HEAD
 +	printf(" -s: specify the type of memory that should be used to\n"
 +	       "     back the guest data region.\n\n");
 +	backing_src_help();
++=======
+ 	backing_src_help("-s");
+ 	printf(" -x: Split the memory region into this number of memslots.\n"
+ 	       "     (default: 1)\n");
++>>>>>>> 9f2fc5554a40 (KVM: selftests: Refactor help message for -s backing_src)
  	puts("");
  	exit(0);
  }
@@@ -275,7 -322,8 +281,12 @@@ int main(int argc, char *argv[]
  		.iterations = TEST_HOST_LOOP_N,
  		.wr_fract = 1,
  		.partition_vcpu_memory_access = true,
++<<<<<<< HEAD
 +		.backing_src = VM_MEM_SRC_ANONYMOUS,
++=======
+ 		.backing_src = DEFAULT_VM_MEM_SRC,
+ 		.slots = 1,
++>>>>>>> 9f2fc5554a40 (KVM: selftests: Refactor help message for -s backing_src)
  	};
  	int opt;
  
* Unmerged path tools/testing/selftests/kvm/access_tracking_perf_test.c
* Unmerged path tools/testing/selftests/kvm/access_tracking_perf_test.c
* Unmerged path tools/testing/selftests/kvm/demand_paging_test.c
* Unmerged path tools/testing/selftests/kvm/dirty_log_perf_test.c
diff --git a/tools/testing/selftests/kvm/include/test_util.h b/tools/testing/selftests/kvm/include/test_util.h
index dfdccf1641b6..2405c5b89c88 100644
--- a/tools/testing/selftests/kvm/include/test_util.h
+++ b/tools/testing/selftests/kvm/include/test_util.h
@@ -88,6 +88,8 @@ enum vm_mem_backing_src_type {
 	NUM_SRC_TYPES,
 };
 
+#define DEFAULT_VM_MEM_SRC VM_MEM_SRC_ANONYMOUS
+
 struct vm_mem_backing_src_alias {
 	const char *name;
 	uint32_t flag;
@@ -100,7 +102,7 @@ size_t get_trans_hugepagesz(void);
 size_t get_def_hugetlb_pagesz(void);
 const struct vm_mem_backing_src_alias *vm_mem_backing_src_alias(uint32_t i);
 size_t get_backing_src_pagesz(uint32_t i);
-void backing_src_help(void);
+void backing_src_help(const char *flag);
 enum vm_mem_backing_src_type parse_backing_src_type(const char *type_name);
 long get_run_delay(void);
 
diff --git a/tools/testing/selftests/kvm/kvm_page_table_test.c b/tools/testing/selftests/kvm/kvm_page_table_test.c
index 1c4753fff19e..efc1a943e004 100644
--- a/tools/testing/selftests/kvm/kvm_page_table_test.c
+++ b/tools/testing/selftests/kvm/kvm_page_table_test.c
@@ -456,10 +456,7 @@ static void help(char *name)
 	       "     (default: 1G)\n");
 	printf(" -v: specify the number of vCPUs to run\n"
 	       "     (default: 1)\n");
-	printf(" -s: specify the type of memory that should be used to\n"
-	       "     back the guest data region.\n"
-	       "     (default: anonymous)\n\n");
-	backing_src_help();
+	backing_src_help("-s");
 	puts("");
 }
 
@@ -468,7 +465,7 @@ int main(int argc, char *argv[])
 	int max_vcpus = kvm_check_cap(KVM_CAP_MAX_VCPUS);
 	struct test_params p = {
 		.test_mem_size = DEFAULT_TEST_MEM_SIZE,
-		.src_type = VM_MEM_SRC_ANONYMOUS,
+		.src_type = DEFAULT_VM_MEM_SRC,
 	};
 	int opt;
 
diff --git a/tools/testing/selftests/kvm/lib/test_util.c b/tools/testing/selftests/kvm/lib/test_util.c
index ae34ede4fff8..322fd045334e 100644
--- a/tools/testing/selftests/kvm/lib/test_util.c
+++ b/tools/testing/selftests/kvm/lib/test_util.c
@@ -272,13 +272,22 @@ size_t get_backing_src_pagesz(uint32_t i)
 	}
 }
 
-void backing_src_help(void)
+static void print_available_backing_src_types(const char *prefix)
 {
 	int i;
 
-	printf("Available backing src types:\n");
+	printf("%sAvailable backing src types:\n", prefix);
+
 	for (i = 0; i < NUM_SRC_TYPES; i++)
-		printf("\t%s\n", vm_mem_backing_src_alias(i)->name);
+		printf("%s    %s\n", prefix, vm_mem_backing_src_alias(i)->name);
+}
+
+void backing_src_help(const char *flag)
+{
+	printf(" %s: specify the type of memory that should be used to\n"
+	       "     back the guest data region. (default: %s)\n",
+	       flag, vm_mem_backing_src_alias(DEFAULT_VM_MEM_SRC)->name);
+	print_available_backing_src_types("     ");
 }
 
 enum vm_mem_backing_src_type parse_backing_src_type(const char *type_name)
@@ -289,7 +298,7 @@ enum vm_mem_backing_src_type parse_backing_src_type(const char *type_name)
 		if (!strcmp(type_name, vm_mem_backing_src_alias(i)->name))
 			return i;
 
-	backing_src_help();
+	print_available_backing_src_types("");
 	TEST_FAIL("Unknown backing src type: %s", type_name);
 	return -1;
 }
