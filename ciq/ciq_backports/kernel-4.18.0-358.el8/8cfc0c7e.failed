ceph: properly handle statfs on multifs setups

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Jeff Layton <jlayton@kernel.org>
commit 8cfc0c7ed34f7929ce7e5d7c6eecf4d01ba89a84
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/8cfc0c7e.failed

ceph_statfs currently stuffs the cluster fsid into the f_fsid field.
This was fine when we only had a single filesystem per cluster, but now
that we have multiples we need to use something that will vary between
them.

Change ceph_statfs to xor each 32-bit chunk of the fsid (aka cluster id)
into the lower bits of the statfs->f_fsid. Change the lower bits to hold
the fscid (filesystem ID within the cluster).

That should give us a value that is guaranteed to be unique between
filesystems within a cluster, and should minimize the chance of
collisions between mounts of different clusters.

URL: https://tracker.ceph.com/issues/52812
	Reported-by: Sachin Prabhu <sprabhu@redhat.com>
	Signed-off-by: Jeff Layton <jlayton@kernel.org>
	Reviewed-by: Xiubo Li <xiubli@redhat.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 8cfc0c7ed34f7929ce7e5d7c6eecf4d01ba89a84)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/super.c
diff --cc fs/ceph/super.c
index 765c58886d78,bab61232dc5a..000000000000
--- a/fs/ceph/super.c
+++ b/fs/ceph/super.c
@@@ -97,13 -98,14 +96,19 @@@ static int ceph_statfs(struct dentry *d
  	buf->f_namelen = NAME_MAX;
  
  	/* Must convert the fsid, for consistent values across arches */
+ 	buf->f_fsid.val[0] = 0;
  	mutex_lock(&monc->mutex);
- 	fsid = le64_to_cpu(*(__le64 *)(&monc->monmap->fsid)) ^
- 	       le64_to_cpu(*((__le64 *)&monc->monmap->fsid + 1));
+ 	for (i = 0 ; i < sizeof(monc->monmap->fsid) / sizeof(__le32) ; ++i)
+ 		buf->f_fsid.val[0] ^= le32_to_cpu(((__le32 *)&monc->monmap->fsid)[i]);
  	mutex_unlock(&monc->mutex);
  
++<<<<<<< HEAD
 +	buf->f_fsid.val[0] = fsid & 0xffffffff;
 +	buf->f_fsid.val[1] = fsid >> 32;
++=======
+ 	/* fold the fs_cluster_id into the upper bits */
+ 	buf->f_fsid.val[1] = monc->fs_cluster_id;
++>>>>>>> 8cfc0c7ed34f (ceph: properly handle statfs on multifs setups)
  
  	return 0;
  }
* Unmerged path fs/ceph/super.c
