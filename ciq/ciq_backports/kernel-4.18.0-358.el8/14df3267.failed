x86: Support kmap_local() forced debugging

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 14df32670291588036a498051a54cd8462d7f611
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/14df3267.failed

kmap_local() and related interfaces are NOOPs on 64bit and only create
temporary fixmaps for highmem pages on 32bit. That means the test coverage
for this code is pretty small.

CONFIG_KMAP_LOCAL can be enabled independent from CONFIG_HIGHMEM, which
allows to provide support for enforced kmap_local() debugging even on
64bit.

For 32bit the support is unconditional, for 64bit it's only supported when
CONFIG_NR_CPUS <= 4096 as supporting it for 8192 CPUs would require to set
up yet another fixmap PGT.

If CONFIG_KMAP_LOCAL_FORCE_DEBUG is enabled then kmap_local()/kmap_atomic()
will use the temporary fixmap mapping path.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lore.kernel.org/r/20201118204007.169209557@linutronix.de

(cherry picked from commit 14df32670291588036a498051a54cd8462d7f611)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/fixmap.h
diff --cc arch/x86/include/asm/fixmap.h
index 3ea818f86acf,9f1a0a987e5e..000000000000
--- a/arch/x86/include/asm/fixmap.h
+++ b/arch/x86/include/asm/fixmap.h
@@@ -25,15 -32,12 +32,18 @@@
  #define FIXMAP_PMD_TOP	507
  
  #ifndef __ASSEMBLY__
 +#include <linux/rh_kabi.h>
  #include <linux/kernel.h>
 +#include RH_KABI_FAKE_INCLUDE(<asm/acpi.h>)
  #include <asm/apicdef.h>
  #include <asm/page.h>
 -#include <asm/pgtable_types.h>
 +#include RH_KABI_HIDE_INCLUDE(<asm/pgtable_types.h>)
  #ifdef CONFIG_X86_32
  #include <linux/threads.h>
++<<<<<<< HEAD
 +#include <asm/kmap_types.h>
++=======
++>>>>>>> 14df32670291 (x86: Support kmap_local() forced debugging)
  #else
  #include <uapi/asm/vsyscall.h>
  #endif
@@@ -95,9 -98,9 +105,9 @@@ enum fixed_addresses 
  	FIX_IO_APIC_BASE_0,
  	FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + MAX_IO_APICS - 1,
  #endif
- #ifdef CONFIG_X86_32
+ #ifdef CONFIG_KMAP_LOCAL
  	FIX_KMAP_BEGIN,	/* reserved pte's for temporary kernel mappings */
 -	FIX_KMAP_END = FIX_KMAP_BEGIN + (KM_MAX_IDX * NR_CPUS) - 1,
 +	FIX_KMAP_END = FIX_KMAP_BEGIN+(KM_TYPE_NR*NR_CPUS)-1,
  #ifdef CONFIG_PCI_MMCONFIG
  	FIX_PCIE_MCFG,
  #endif
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index bd9df7cf6689..744e46906d88 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -94,6 +94,7 @@ config X86
 	select ARCH_SUPPORTS_ATOMIC_RMW
 	select ARCH_SUPPORTS_DEBUG_PAGEALLOC
 	select ARCH_SUPPORTS_NUMA_BALANCING	if X86_64
+	select ARCH_SUPPORTS_KMAP_LOCAL_FORCE_MAP	if NR_CPUS <= 4096
 	select ARCH_USE_BUILTIN_BSWAP
 	select ARCH_USE_QUEUED_RWLOCKS
 	select ARCH_USE_QUEUED_SPINLOCKS
* Unmerged path arch/x86/include/asm/fixmap.h
diff --git a/arch/x86/include/asm/pgtable_64_types.h b/arch/x86/include/asm/pgtable_64_types.h
index 88bca456da99..a13cff4598fc 100644
--- a/arch/x86/include/asm/pgtable_64_types.h
+++ b/arch/x86/include/asm/pgtable_64_types.h
@@ -143,7 +143,11 @@ extern unsigned int ptrs_per_p4d;
 
 #define MODULES_VADDR		(__START_KERNEL_map + KERNEL_IMAGE_SIZE)
 /* The module sections ends with the start of the fixmap */
-#define MODULES_END		_AC(0xffffffffff000000, UL)
+#ifndef CONFIG_DEBUG_KMAP_LOCAL_FORCE_MAP
+# define MODULES_END		_AC(0xffffffffff000000, UL)
+#else
+# define MODULES_END		_AC(0xfffffffffe000000, UL)
+#endif
 #define MODULES_LEN		(MODULES_END - MODULES_VADDR)
 
 #define ESPFIX_PGD_ENTRY	_AC(-2, UL)
