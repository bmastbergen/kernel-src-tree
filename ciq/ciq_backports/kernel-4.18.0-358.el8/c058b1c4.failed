arm64: mte: system register definitions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Vincenzo Frascino <vincenzo.frascino@arm.com>
commit c058b1c4a5ea7b88cce4c961c1000acf482ea64b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/c058b1c4.failed

Add Memory Tagging Extension system register definitions together with
the relevant bitfields.

	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
Co-developed-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will@kernel.org>
(cherry picked from commit c058b1c4a5ea7b88cce4c961c1000acf482ea64b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/sysreg.h
#	arch/arm64/kernel/ptrace.c
diff --cc arch/arm64/include/asm/sysreg.h
index 45beb570eda3,6fa9aa477e76..000000000000
--- a/arch/arm64/include/asm/sysreg.h
+++ b/arch/arm64/include/asm/sysreg.h
@@@ -182,9 -183,10 +184,11 @@@
  #define SYS_SCTLR_EL1			sys_reg(3, 0, 1, 0, 0)
  #define SYS_ACTLR_EL1			sys_reg(3, 0, 1, 0, 1)
  #define SYS_CPACR_EL1			sys_reg(3, 0, 1, 0, 2)
+ #define SYS_RGSR_EL1			sys_reg(3, 0, 1, 0, 5)
+ #define SYS_GCR_EL1			sys_reg(3, 0, 1, 0, 6)
  
  #define SYS_ZCR_EL1			sys_reg(3, 0, 1, 2, 0)
 +#define SYS_TRFCR_EL1			sys_reg(3, 0, 1, 2, 1)
  
  #define SYS_TTBR0_EL1			sys_reg(3, 0, 2, 0, 0)
  #define SYS_TTBR1_EL1			sys_reg(3, 0, 2, 0, 1)
@@@ -535,19 -539,28 +544,44 @@@
  #define SYS_CNTV_CVAL_EL02		sys_reg(3, 5, 14, 3, 2)
  
  /* Common SCTLR_ELx flags. */
++<<<<<<< HEAD
 +#define SCTLR_ELx_DSSBS	(1UL << 44)
 +#define SCTLR_ELx_ENIA	(1U << 31)
 +#define SCTLR_ELx_ENIB	(1 << 30)
 +#define SCTLR_ELx_ENDA	(1 << 27)
 +#define SCTLR_ELx_EE    (1 << 25)
 +#define SCTLR_ELx_IESB	(1 << 21)
 +#define SCTLR_ELx_WXN	(1 << 19)
 +#define SCTLR_ELx_ENDB	(1 << 13)
 +#define SCTLR_ELx_I	(1 << 12)
 +#define SCTLR_ELx_SA	(1 << 3)
 +#define SCTLR_ELx_C	(1 << 2)
 +#define SCTLR_ELx_A	(1 << 1)
 +#define SCTLR_ELx_M	1
++=======
+ #define SCTLR_ELx_DSSBS	(BIT(44))
+ #define SCTLR_ELx_ATA	(BIT(43))
+ 
+ #define SCTLR_ELx_TCF_SHIFT	40
+ #define SCTLR_ELx_TCF_NONE	(UL(0x0) << SCTLR_ELx_TCF_SHIFT)
+ #define SCTLR_ELx_TCF_SYNC	(UL(0x1) << SCTLR_ELx_TCF_SHIFT)
+ #define SCTLR_ELx_TCF_ASYNC	(UL(0x2) << SCTLR_ELx_TCF_SHIFT)
+ #define SCTLR_ELx_TCF_MASK	(UL(0x3) << SCTLR_ELx_TCF_SHIFT)
+ 
+ #define SCTLR_ELx_ITFSB	(BIT(37))
+ #define SCTLR_ELx_ENIA	(BIT(31))
+ #define SCTLR_ELx_ENIB	(BIT(30))
+ #define SCTLR_ELx_ENDA	(BIT(27))
+ #define SCTLR_ELx_EE    (BIT(25))
+ #define SCTLR_ELx_IESB	(BIT(21))
+ #define SCTLR_ELx_WXN	(BIT(19))
+ #define SCTLR_ELx_ENDB	(BIT(13))
+ #define SCTLR_ELx_I	(BIT(12))
+ #define SCTLR_ELx_SA	(BIT(3))
+ #define SCTLR_ELx_C	(BIT(2))
+ #define SCTLR_ELx_A	(BIT(1))
+ #define SCTLR_ELx_M	(BIT(0))
++>>>>>>> c058b1c4a5ea (arm64: mte: system register definitions)
  
  #define SCTLR_ELx_FLAGS	(SCTLR_ELx_M  | SCTLR_ELx_A | SCTLR_ELx_C | \
  			 SCTLR_ELx_SA | SCTLR_ELx_I | SCTLR_ELx_IESB)
@@@ -581,24 -577,31 +615,49 @@@
  #endif
  
  /* SCTLR_EL1 specific flags. */
++<<<<<<< HEAD
 +#define SCTLR_EL1_UCI		(1 << 26)
 +#define SCTLR_EL1_E0E		(1 << 24)
 +#define SCTLR_EL1_SPAN		(1 << 23)
 +#define SCTLR_EL1_NTWE		(1 << 18)
 +#define SCTLR_EL1_NTWI		(1 << 16)
 +#define SCTLR_EL1_UCT		(1 << 15)
 +#define SCTLR_EL1_DZE		(1 << 14)
 +#define SCTLR_EL1_UMA		(1 << 9)
 +#define SCTLR_EL1_SED		(1 << 8)
 +#define SCTLR_EL1_ITD		(1 << 7)
 +#define SCTLR_EL1_CP15BEN	(1 << 5)
 +#define SCTLR_EL1_SA0		(1 << 4)
++=======
+ #define SCTLR_EL1_ATA0		(BIT(42))
+ 
+ #define SCTLR_EL1_TCF0_SHIFT	38
+ #define SCTLR_EL1_TCF0_NONE	(UL(0x0) << SCTLR_EL1_TCF0_SHIFT)
+ #define SCTLR_EL1_TCF0_SYNC	(UL(0x1) << SCTLR_EL1_TCF0_SHIFT)
+ #define SCTLR_EL1_TCF0_ASYNC	(UL(0x2) << SCTLR_EL1_TCF0_SHIFT)
+ #define SCTLR_EL1_TCF0_MASK	(UL(0x3) << SCTLR_EL1_TCF0_SHIFT)
+ 
+ #define SCTLR_EL1_BT1		(BIT(36))
+ #define SCTLR_EL1_BT0		(BIT(35))
+ #define SCTLR_EL1_UCI		(BIT(26))
+ #define SCTLR_EL1_E0E		(BIT(24))
+ #define SCTLR_EL1_SPAN		(BIT(23))
+ #define SCTLR_EL1_NTWE		(BIT(18))
+ #define SCTLR_EL1_NTWI		(BIT(16))
+ #define SCTLR_EL1_UCT		(BIT(15))
+ #define SCTLR_EL1_DZE		(BIT(14))
+ #define SCTLR_EL1_UMA		(BIT(9))
+ #define SCTLR_EL1_SED		(BIT(8))
+ #define SCTLR_EL1_ITD		(BIT(7))
+ #define SCTLR_EL1_CP15BEN	(BIT(5))
+ #define SCTLR_EL1_SA0		(BIT(4))
++>>>>>>> c058b1c4a5ea (arm64: mte: system register definitions)
  
 -#define SCTLR_EL1_RES1	((BIT(11)) | (BIT(20)) | (BIT(22)) | (BIT(28)) | \
 -			 (BIT(29)))
 +#define SCTLR_EL1_RES1	((1 << 11) | (1 << 20) | (1 << 22) | (1 << 28) | \
 +			 (1 << 29))
 +#define SCTLR_EL1_RES0  ((1 << 6)  | (1 << 10) | (1 << 13) | (1 << 17) | \
 +			 (1 << 27) | (1 << 30) | (1 << 31) | \
 +			 (0xffffefffUL << 32))
  
  #ifdef CONFIG_CPU_BIG_ENDIAN
  #define ENDIAN_SET_EL1		(SCTLR_EL1_E0E | SCTLR_ELx_EE)
@@@ -610,16 -611,22 +669,31 @@@
  
  #define SCTLR_EL1_SET	(SCTLR_ELx_M    | SCTLR_ELx_C    | SCTLR_ELx_SA   |\
  			 SCTLR_EL1_SA0  | SCTLR_EL1_SED  | SCTLR_ELx_I    |\
 -			 SCTLR_EL1_DZE  | SCTLR_EL1_UCT                   |\
 +			 SCTLR_EL1_DZE  | SCTLR_EL1_UCT  | SCTLR_EL1_NTWI |\
  			 SCTLR_EL1_NTWE | SCTLR_ELx_IESB | SCTLR_EL1_SPAN |\
  			 ENDIAN_SET_EL1 | SCTLR_EL1_UCI  | SCTLR_EL1_RES1)
 +#define SCTLR_EL1_CLEAR	(SCTLR_ELx_A   | SCTLR_EL1_CP15BEN | SCTLR_EL1_ITD    |\
 +			 SCTLR_EL1_UMA | SCTLR_ELx_WXN     | ENDIAN_CLEAR_EL1 |\
 +			 SCTLR_ELx_DSSBS | SCTLR_EL1_RES0)
  
++<<<<<<< HEAD
 +#if (SCTLR_EL1_SET ^ SCTLR_EL1_CLEAR) != 0xffffffffffffffff
 +#error "Inconsistent SCTLR_EL1 set/clear bits"
 +#endif
++=======
+ /* MAIR_ELx memory attributes (used by Linux) */
+ #define MAIR_ATTR_DEVICE_nGnRnE		UL(0x00)
+ #define MAIR_ATTR_DEVICE_nGnRE		UL(0x04)
+ #define MAIR_ATTR_DEVICE_GRE		UL(0x0c)
+ #define MAIR_ATTR_NORMAL_NC		UL(0x44)
+ #define MAIR_ATTR_NORMAL_WT		UL(0xbb)
+ #define MAIR_ATTR_NORMAL_TAGGED		UL(0xf0)
+ #define MAIR_ATTR_NORMAL		UL(0xff)
+ #define MAIR_ATTR_MASK			UL(0xff)
+ 
+ /* Position the attr at the correct index */
+ #define MAIR_ATTRIDX(attr, idx)		((attr) << ((idx) * 8))
++>>>>>>> c058b1c4a5ea (arm64: mte: system register definitions)
  
  /* id_aa64isar0 */
  #define ID_AA64ISAR0_RNDR_SHIFT		60
@@@ -697,7 -711,12 +771,11 @@@
  #define ID_AA64PFR1_SSBS_PSTATE_NI	0
  #define ID_AA64PFR1_SSBS_PSTATE_ONLY	1
  #define ID_AA64PFR1_SSBS_PSTATE_INSNS	2
 -#define ID_AA64PFR1_BT_BTI		0x1
  
+ #define ID_AA64PFR1_MTE_NI		0x0
+ #define ID_AA64PFR1_MTE_EL0		0x1
+ #define ID_AA64PFR1_MTE			0x2
+ 
  /* id_aa64zfr0 */
  #define ID_AA64ZFR0_F64MM_SHIFT		56
  #define ID_AA64ZFR0_F32MM_SHIFT		52
@@@ -852,21 -947,35 +930,43 @@@
  #define ZCR_ELx_LEN_SIZE	9
  #define ZCR_ELx_LEN_MASK	0x1ff
  
 -#define CPACR_EL1_ZEN_EL1EN	(BIT(16)) /* enable EL1 access */
 -#define CPACR_EL1_ZEN_EL0EN	(BIT(17)) /* enable EL0 access, if EL1EN set */
 +#define CPACR_EL1_ZEN_EL1EN	(1 << 16) /* enable EL1 access */
 +#define CPACR_EL1_ZEN_EL0EN	(1 << 17) /* enable EL0 access, if EL1EN set */
  #define CPACR_EL1_ZEN		(CPACR_EL1_ZEN_EL1EN | CPACR_EL1_ZEN_EL0EN)
  
+ /* TCR EL1 Bit Definitions */
+ #define SYS_TCR_EL1_TCMA1	(BIT(58))
+ #define SYS_TCR_EL1_TCMA0	(BIT(57))
+ 
+ /* GCR_EL1 Definitions */
+ #define SYS_GCR_EL1_RRND	(BIT(16))
+ #define SYS_GCR_EL1_EXCL_MASK	0xffffUL
+ 
+ /* RGSR_EL1 Definitions */
+ #define SYS_RGSR_EL1_TAG_MASK	0xfUL
+ #define SYS_RGSR_EL1_SEED_SHIFT	8
+ #define SYS_RGSR_EL1_SEED_MASK	0xffffUL
+ 
+ /* GMID_EL1 field definitions */
+ #define SYS_GMID_EL1_BS_SHIFT	0
+ #define SYS_GMID_EL1_BS_SIZE	4
+ 
+ /* TFSR{,E0}_EL1 bit definitions */
+ #define SYS_TFSR_EL1_TF0_SHIFT	0
+ #define SYS_TFSR_EL1_TF1_SHIFT	1
+ #define SYS_TFSR_EL1_TF0	(UL(1) << SYS_TFSR_EL1_TF0_SHIFT)
+ #define SYS_TFSR_EL1_TF1	(UK(2) << SYS_TFSR_EL1_TF1_SHIFT)
  
  /* Safe value for MPIDR_EL1: Bit31:RES1, Bit30:U:0, Bit24:MT:0 */
 -#define SYS_MPIDR_SAFE_VAL	(BIT(31))
 +#define SYS_MPIDR_SAFE_VAL		(1UL << 31)
 +
 +#define TRFCR_ELx_TS_SHIFT		5
 +#define TRFCR_ELx_TS_VIRTUAL		((0x1UL) << TRFCR_ELx_TS_SHIFT)
 +#define TRFCR_ELx_TS_GUEST_PHYSICAL	((0x2UL) << TRFCR_ELx_TS_SHIFT)
 +#define TRFCR_ELx_TS_PHYSICAL		((0x3UL) << TRFCR_ELx_TS_SHIFT)
 +#define TRFCR_EL2_CX			BIT(3)
 +#define TRFCR_ELx_ExTRE			BIT(1)
 +#define TRFCR_ELx_E0TRE			BIT(0)
  
  #ifdef __ASSEMBLY__
  
diff --cc arch/arm64/kernel/ptrace.c
index 659fca630d94,8942de814b72..000000000000
--- a/arch/arm64/kernel/ptrace.c
+++ b/arch/arm64/kernel/ptrace.c
@@@ -1857,8 -1793,8 +1857,13 @@@ asmlinkage void syscall_trace_exit(stru
   * We also reserve IL for the kernel; SS is handled dynamically.
   */
  #define SPSR_EL1_AARCH64_RES0_BITS \
++<<<<<<< HEAD
 +	(GENMASK_ULL(63, 32) | GENMASK_ULL(27, 25) | GENMASK_ULL(23, 22) | \
 +	 GENMASK_ULL(20, 13) | GENMASK_ULL(11, 10) | GENMASK_ULL(5, 5))
++=======
+ 	(GENMASK_ULL(63, 32) | GENMASK_ULL(27, 26) | GENMASK_ULL(23, 22) | \
+ 	 GENMASK_ULL(20, 13) | GENMASK_ULL(5, 5))
++>>>>>>> c058b1c4a5ea (arm64: mte: system register definitions)
  #define SPSR_EL1_AARCH32_RES0_BITS \
  	(GENMASK_ULL(63, 32) | GENMASK_ULL(22, 22) | GENMASK_ULL(20, 20))
  
diff --git a/arch/arm64/include/asm/kvm_arm.h b/arch/arm64/include/asm/kvm_arm.h
index 0a47bd410c17..b947bc51487a 100644
--- a/arch/arm64/include/asm/kvm_arm.h
+++ b/arch/arm64/include/asm/kvm_arm.h
@@ -23,6 +23,7 @@
 #include <asm/types.h>
 
 /* Hyp Configuration Register (HCR) bits */
+#define HCR_ATA		(UL(1) << 56)
 #define HCR_FWB		(UL(1) << 46)
 #define HCR_API		(UL(1) << 41)
 #define HCR_APK		(UL(1) << 40)
* Unmerged path arch/arm64/include/asm/sysreg.h
diff --git a/arch/arm64/include/uapi/asm/ptrace.h b/arch/arm64/include/uapi/asm/ptrace.h
index d0d087188377..2e889609cc50 100644
--- a/arch/arm64/include/uapi/asm/ptrace.h
+++ b/arch/arm64/include/uapi/asm/ptrace.h
@@ -51,6 +51,7 @@
 #define PSR_PAN_BIT	0x00400000
 #define PSR_UAO_BIT	0x00800000
 #define PSR_DIT_BIT	0x01000000
+#define PSR_TCO_BIT	0x02000000
 #define PSR_V_BIT	0x10000000
 #define PSR_C_BIT	0x20000000
 #define PSR_Z_BIT	0x40000000
* Unmerged path arch/arm64/kernel/ptrace.c
