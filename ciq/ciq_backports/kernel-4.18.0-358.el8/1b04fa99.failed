rcu-tasks: Move RCU-tasks initialization to before early_initcall()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Uladzislau Rezki (Sony) <urezki@gmail.com>
commit 1b04fa9900263b4e217ca2509fd778b32c2b4eb2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/1b04fa99.failed

PowerPC testing encountered boot failures due to RCU Tasks not being
fully initialized until core_initcall() time.  This commit therefore
initializes RCU Tasks (along with Rude RCU and RCU Tasks Trace) just
before early_initcall() time, thus allowing waiting on RCU Tasks grace
periods from early_initcall() handlers.

Link: https://lore.kernel.org/rcu/87eekfh80a.fsf@dja-thinkpad.axtens.net/
Fixes: 36dadef23fcc ("kprobes: Init kprobes in early_initcall")
	Tested-by: Daniel Axtens <dja@axtens.net>
	Signed-off-by: Uladzislau Rezki (Sony) <urezki@gmail.com>
	Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
(cherry picked from commit 1b04fa9900263b4e217ca2509fd778b32c2b4eb2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcu/tasks.h
diff --cc kernel/rcu/tasks.h
index 568e6453bbb3,73bbe792fe1e..000000000000
--- a/kernel/rcu/tasks.h
+++ b/kernel/rcu/tasks.h
@@@ -564,10 -569,9 +564,9 @@@ static int __init rcu_spawn_tasks_kthre
  	rcu_spawn_tasks_kthread_generic(&rcu_tasks);
  	return 0;
  }
- core_initcall(rcu_spawn_tasks_kthread);
  
 -#ifndef CONFIG_TINY_RCU
 -static void show_rcu_tasks_classic_gp_kthread(void)
 +#if !defined(CONFIG_TINY_RCU)
 +void show_rcu_tasks_classic_gp_kthread(void)
  {
  	show_rcu_tasks_generic_gp_kthread(&rcu_tasks, "");
  }
@@@ -692,10 -696,9 +691,9 @@@ static int __init rcu_spawn_tasks_rude_
  	rcu_spawn_tasks_kthread_generic(&rcu_tasks_rude);
  	return 0;
  }
- core_initcall(rcu_spawn_tasks_rude_kthread);
  
 -#ifndef CONFIG_TINY_RCU
 -static void show_rcu_tasks_rude_gp_kthread(void)
 +#if !defined(CONFIG_TINY_RCU)
 +void show_rcu_tasks_rude_gp_kthread(void)
  {
  	show_rcu_tasks_generic_gp_kthread(&rcu_tasks_rude, "");
  }
@@@ -976,11 -973,14 +974,22 @@@ static void rcu_tasks_trace_pregp_step(
  static void rcu_tasks_trace_pertask(struct task_struct *t,
  				    struct list_head *hop)
  {
++<<<<<<< HEAD
 +	struct task_struct_rh *t_rh = t->task_struct_rh;
 +
 +	WRITE_ONCE(t_rh->trc_reader_special.b.need_qs, false);
 +	WRITE_ONCE(t_rh->trc_reader_checked, false);
 +	t_rh->trc_ipi_to_cpu = -1;
++=======
+ 	// During early boot when there is only the one boot CPU, there
+ 	// is no idle task for the other CPUs. Just return.
+ 	if (unlikely(t == NULL))
+ 		return;
+ 
+ 	WRITE_ONCE(t->trc_reader_special.b.need_qs, false);
+ 	WRITE_ONCE(t->trc_reader_checked, false);
+ 	t->trc_ipi_to_cpu = -1;
++>>>>>>> 1b04fa990026 (rcu-tasks: Move RCU-tasks initialization to before early_initcall())
  	trc_wait_for_one_reader(t, hop);
  }
  
@@@ -1210,10 -1203,9 +1219,9 @@@ static int __init rcu_spawn_tasks_trace
  	rcu_spawn_tasks_kthread_generic(&rcu_tasks_trace);
  	return 0;
  }
- core_initcall(rcu_spawn_tasks_trace_kthread);
  
 -#ifndef CONFIG_TINY_RCU
 -static void show_rcu_tasks_trace_gp_kthread(void)
 +#if !defined(CONFIG_TINY_RCU)
 +void show_rcu_tasks_trace_gp_kthread(void)
  {
  	char buf[64];
  
diff --git a/include/linux/rcupdate.h b/include/linux/rcupdate.h
index 95a12eb5f6b0..b2de793c453f 100644
--- a/include/linux/rcupdate.h
+++ b/include/linux/rcupdate.h
@@ -100,6 +100,12 @@ void rcu_sched_clock_irq(int user);
 void rcu_report_dead(unsigned int cpu);
 void rcutree_migrate_callbacks(int cpu);
 
+#ifdef CONFIG_TASKS_RCU_GENERIC
+void rcu_init_tasks_generic(void);
+#else
+static inline void rcu_init_tasks_generic(void) { }
+#endif
+
 #ifdef CONFIG_RCU_STALL_COMMON
 void rcu_sysrq_start(void);
 void rcu_sysrq_end(void);
diff --git a/init/main.c b/init/main.c
index 4b5df336efd2..a201b9941de1 100644
--- a/init/main.c
+++ b/init/main.c
@@ -1157,6 +1157,7 @@ static noinline void __init kernel_init_freeable(void)
 
 	init_mm_internals();
 
+	rcu_init_tasks_generic();
 	do_pre_smp_initcalls();
 	lockup_detector_init();
 
* Unmerged path kernel/rcu/tasks.h
