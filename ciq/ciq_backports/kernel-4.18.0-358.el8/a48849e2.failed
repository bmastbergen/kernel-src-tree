printk: clarify the documentation for plain pointer printing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Vlastimil Babka <vbabka@suse.cz>
commit a48849e2358ecf1a347a03b33dc27b9b2f25f8fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a48849e2.failed

We have several modifiers for plain pointers (%p, %px and %pK) and now
also the no_hash_pointers boot parameter. The documentation should help
to choose which variant to use. Importantly, we should discourage %px
in favor of %p (with the new boot parameter when debugging), and stress
that %pK should be only used for procfs and similar files, not dmesg
buffer. This patch clarifies the documentation in that regard.

	Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
	Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
	Reviewed-by: Petr Mladek <pmladek@suse.com>
	Signed-off-by: Petr Mladek <pmladek@suse.com>
Link: https://lore.kernel.org/r/20210225164639.27212-1-vbabka@suse.cz
(cherry picked from commit a48849e2358ecf1a347a03b33dc27b9b2f25f8fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/vsprintf.c
diff --cc lib/vsprintf.c
index 78daa14b8699,5ec8ad238d03..000000000000
--- a/lib/vsprintf.c
+++ b/lib/vsprintf.c
@@@ -2146,7 -2226,12 +2148,16 @@@ early_param("no_hash_pointers", no_hash
   *                  F device node flags
   *                  c major compatible string
   *                  C full compatible string
++<<<<<<< HEAD
 + * - 'x' For printing the address. Equivalent to "%lx".
++=======
+  * - 'fw[fP]'	For a firmware node (struct fwnode_handle) pointer
+  *		Without an option prints the full name of the node
+  *		f full name
+  *		P node name, including a possible unit address
+  * - 'x' For printing the address unmodified. Equivalent to "%lx".
+  *       Please read the documentation (path below) before using!
++>>>>>>> a48849e2358e (printk: clarify the documentation for plain pointer printing)
   * - '[ku]s' For a BPF/tracing related format specifier, e.g. used out of
   *           bpf_trace_printk() where [ku] prefix specifies either kernel (k)
   *           or user (u) memory to probe, and:
diff --git a/Documentation/core-api/printk-formats.rst b/Documentation/core-api/printk-formats.rst
index bf0d26e41603..c7453c0a515d 100644
--- a/Documentation/core-api/printk-formats.rst
+++ b/Documentation/core-api/printk-formats.rst
@@ -77,7 +77,19 @@ Pointers printed without a specifier extension (i.e unadorned %p) are
 hashed to prevent leaking information about the kernel memory layout. This
 has the added benefit of providing a unique identifier. On 64-bit machines
 the first 32 bits are zeroed. The kernel will print ``(ptrval)`` until it
-gathers enough entropy. If you *really* want the address see %px below.
+gathers enough entropy.
+
+When possible, use specialised modifiers such as %pS or %pB (described below)
+to avoid the need of providing an unhashed address that has to be interpreted
+post-hoc. If not possible, and the aim of printing the address is to provide
+more information for debugging, use %p and boot the kernel with the
+``no_hash_pointers`` parameter during debugging, which will print all %p
+addresses unmodified. If you *really* always want the unmodified address, see
+%px below.
+
+If (and only if) you are printing addresses as a content of a virtual file in
+e.g. procfs or sysfs (using e.g. seq_printf(), not printk()) read by a
+userspace process, use the %pK modifier described below instead of %p or %px.
 
 Error Pointers
 --------------
@@ -137,6 +149,11 @@ For printing kernel pointers which should be hidden from unprivileged
 users. The behaviour of %pK depends on the kptr_restrict sysctl - see
 Documentation/sysctl/kernel.txt for more details.
 
+This modifier is *only* intended when producing content of a file read by
+userspace from e.g. procfs or sysfs, not for dmesg. Please refer to the
+section about %p above for discussion about how to manage hashing pointers
+in printk().
+
 Unmodified Addresses
 --------------------
 
@@ -151,6 +168,13 @@ equivalent to %lx (or %lu). %px is preferred because it is more uniquely
 grep'able. If in the future we need to modify the way the kernel handles
 printing pointers we will be better equipped to find the call sites.
 
+Before using %px, consider if using %p is sufficient together with enabling the
+``no_hash_pointers`` kernel parameter during debugging sessions (see the %p
+description above). One valid scenario for %px might be printing information
+immediately before a panic, which prevents any sensitive information to be
+exploited anyway, and with %px there would be no need to reproduce the panic
+with no_hash_pointers.
+
 Pointer Differences
 -------------------
 
* Unmerged path lib/vsprintf.c
