locking/ww_mutex: Add rt_mutex based lock type and accessors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 2408f7a3782a6bfa69a573f5408b3a9666db78ca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/2408f7a3.failed

Provide the defines for RT mutex based ww_mutexes and fix up the debug logic
so it's either enabled by DEBUG_MUTEXES or DEBUG_RT_MUTEXES on RT kernels.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20210815211304.908012566@linutronix.de
(cherry picked from commit 2408f7a3782a6bfa69a573f5408b3a9666db78ca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ww_mutex.h
#	kernel/locking/ww_mutex.h
diff --cc include/linux/ww_mutex.h
index 590aaa207757,29db736af86d..000000000000
--- a/include/linux/ww_mutex.h
+++ b/include/linux/ww_mutex.h
@@@ -18,7 -18,25 +18,28 @@@
  #define __LINUX_WW_MUTEX_H
  
  #include <linux/mutex.h>
+ #include <linux/rtmutex.h>
  
++<<<<<<< HEAD
++=======
+ #if defined(CONFIG_DEBUG_MUTEXES) || \
+    (defined(CONFIG_PREEMPT_RT) && defined(CONFIG_DEBUG_RT_MUTEXES))
+ #define DEBUG_WW_MUTEXES
+ #endif
+ 
+ #ifndef CONFIG_PREEMPT_RT
+ #define WW_MUTEX_BASE			mutex
+ #define ww_mutex_base_init(l,n,k)	__mutex_init(l,n,k)
+ #define ww_mutex_base_trylock(l)	mutex_trylock(l)
+ #define ww_mutex_base_is_locked(b)	mutex_is_locked((b))
+ #else
+ #define WW_MUTEX_BASE			rt_mutex
+ #define ww_mutex_base_init(l,n,k)	__rt_mutex_init(l,n,k)
+ #define ww_mutex_base_trylock(l)	rt_mutex_trylock(l)
+ #define ww_mutex_base_is_locked(b)	rt_mutex_base_is_locked(&(b)->rtmutex)
+ #endif
+ 
++>>>>>>> 2408f7a3782a (locking/ww_mutex: Add rt_mutex based lock type and accessors)
  struct ww_class {
  	atomic_long_t stamp;
  	struct lock_class_key acquire_key;
@@@ -29,9 -47,9 +50,9 @@@
  };
  
  struct ww_mutex {
 -	struct WW_MUTEX_BASE base;
 +	struct mutex base;
  	struct ww_acquire_ctx *ctx;
- #ifdef CONFIG_DEBUG_MUTEXES
+ #ifdef DEBUG_WW_MUTEXES
  	struct ww_class *ww_class;
  #endif
  };
@@@ -82,9 -100,9 +103,9 @@@ struct ww_acquire_ctx 
  static inline void ww_mutex_init(struct ww_mutex *lock,
  				 struct ww_class *ww_class)
  {
 -	ww_mutex_base_init(&lock->base, ww_class->mutex_name, &ww_class->mutex_key);
 +	__mutex_init(&lock->base, ww_class->mutex_name, &ww_class->mutex_key);
  	lock->ctx = NULL;
- #ifdef CONFIG_DEBUG_MUTEXES
+ #ifdef DEBUG_WW_MUTEXES
  	lock->ww_class = ww_class;
  #endif
  }
* Unmerged path kernel/locking/ww_mutex.h
* Unmerged path include/linux/ww_mutex.h
* Unmerged path kernel/locking/ww_mutex.h
