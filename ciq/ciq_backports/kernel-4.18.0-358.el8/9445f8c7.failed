selftests: xsk: Refactor teardown/bidi test cases and testapp_validate

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit 9445f8c765838edf84dd0d3910ff309bdab8f95f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/9445f8c7.failed

Currently, there is a testapp_sockets() that acts like a wrapper around
testapp_validate() and it is called for bidi and teardown test types.
Other test types call testapp_validate() directly.

Split testapp_sockets() onto two separate functions so a bunch of bidi
specific logic can be moved there and out of testapp_validate() itself.

Introduce function pointer to ifobject struct which will be used for
assigning the Rx/Tx function that is assigned to worker thread. Let's
also have a global ifobject Rx/Tx pointers so it's easier to swap the
vectors on a second run of a bi-directional test. Thread creation now is
easey to follow.

switching_notify variable is useless, info about vector switch can be
printed based on bidi_pass state.

Last but not least, init/destroy synchronization variables only once,
not per each test.

	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20210329224316.17793-12-maciej.fijalkowski@intel.com
(cherry picked from commit 9445f8c765838edf84dd0d3910ff309bdab8f95f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/xdpxceiver.c
#	tools/testing/selftests/bpf/xdpxceiver.h
diff --cc tools/testing/selftests/bpf/xdpxceiver.c
index 9f8d5dabf30a,c0ebca8f55f8..000000000000
--- a/tools/testing/selftests/bpf/xdpxceiver.c
+++ b/tools/testing/selftests/bpf/xdpxceiver.c
@@@ -895,26 -896,10 +895,33 @@@ static void testapp_validate(void
  	pthread_attr_init(&attr);
  	pthread_attr_setstacksize(&attr, THREAD_STACK);
  
++<<<<<<< HEAD
 +	if (opt_bidi && bidi_pass) {
 +		pthread_init_mutex();
 +		if (!switching_notify) {
 +			print_verbose("Switching Tx/Rx vectors\n");
 +			switching_notify++;
 +		}
 +	}
 +
 +	pthread_mutex_lock(&sync_mutex);
 +
 +	/*Spawn RX thread */
 +	if (!opt_bidi || !bidi_pass) {
 +		if (pthread_create(&t0, &attr, worker_testapp_validate, ifdict[1]))
 +			exit_with_error(errno);
 +	} else if (opt_bidi && bidi_pass) {
 +		/*switch Tx/Rx vectors */
 +		ifdict[0]->fv.vector = rx;
 +		if (pthread_create(&t0, &attr, worker_testapp_validate, ifdict[0]))
 +			exit_with_error(errno);
 +	}
++=======
+ 	pthread_mutex_lock(&sync_mutex);
+ 
+ 	/*Spawn RX thread */
+ 	pthread_create(&t0, &attr, ifdict_rx->func_ptr, ifdict_rx);
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  
  	if (clock_gettime(CLOCK_REALTIME, &max_wait))
  		exit_with_error(errno);
@@@ -926,15 -911,7 +933,19 @@@
  	pthread_mutex_unlock(&sync_mutex);
  
  	/*Spawn TX thread */
++<<<<<<< HEAD
 +	if (!opt_bidi || !bidi_pass) {
 +		if (pthread_create(&t1, &attr, worker_testapp_validate, ifdict[0]))
 +			exit_with_error(errno);
 +	} else if (opt_bidi && bidi_pass) {
 +		/*switch Tx/Rx vectors */
 +		ifdict[1]->fv.vector = tx;
 +		if (pthread_create(&t1, &attr, worker_testapp_validate, ifdict[1]))
 +			exit_with_error(errno);
 +	}
++=======
+ 	pthread_create(&t1, &attr, ifdict_tx->func_ptr, ifdict_tx);
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  
  	pthread_join(t1, NULL);
  	pthread_join(t0, NULL);
@@@ -952,39 -929,151 +963,181 @@@
  		print_ksft_result();
  }
  
- static void testapp_sockets(void)
+ static void testapp_teardown(void)
  {
++<<<<<<< HEAD
 +	for (int i = 0; i < (opt_teardown ? MAX_TEARDOWN_ITER : MAX_BIDI_ITER); i++) {
++=======
+ 	int i;
+ 
+ 	for (i = 0; i < MAX_TEARDOWN_ITER; i++) {
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  		pkt_counter = 0;
  		prev_pkt = -1;
  		sigvar = 0;
  		print_verbose("Creating socket\n");
  		testapp_validate();
++<<<<<<< HEAD
 +		opt_bidi ? bidi_pass++ : bidi_pass;
++=======
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  	}
  
  	print_ksft_result();
  }
  
++<<<<<<< HEAD
 +static void init_iface_config(struct ifaceconfigobj *ifaceconfig)
 +{
 +	/*Init interface0 */
 +	ifdict[0]->fv.vector = tx;
 +	memcpy(ifdict[0]->dst_mac, ifaceconfig->dst_mac, ETH_ALEN);
 +	memcpy(ifdict[0]->src_mac, ifaceconfig->src_mac, ETH_ALEN);
 +	ifdict[0]->dst_ip = ifaceconfig->dst_ip.s_addr;
 +	ifdict[0]->src_ip = ifaceconfig->src_ip.s_addr;
 +	ifdict[0]->dst_port = ifaceconfig->dst_port;
 +	ifdict[0]->src_port = ifaceconfig->src_port;
 +
 +	/*Init interface1 */
 +	ifdict[1]->fv.vector = rx;
 +	memcpy(ifdict[1]->dst_mac, ifaceconfig->src_mac, ETH_ALEN);
 +	memcpy(ifdict[1]->src_mac, ifaceconfig->dst_mac, ETH_ALEN);
 +	ifdict[1]->dst_ip = ifaceconfig->src_ip.s_addr;
 +	ifdict[1]->src_ip = ifaceconfig->dst_ip.s_addr;
 +	ifdict[1]->dst_port = ifaceconfig->src_port;
 +	ifdict[1]->src_port = ifaceconfig->dst_port;
++=======
+ static void swap_vectors(struct ifobject *ifobj1, struct ifobject *ifobj2)
+ {
+ 	void *(*tmp_func_ptr)(void *) = ifobj1->func_ptr;
+ 	enum fvector tmp_vector = ifobj1->fv.vector;
+ 
+ 	ifobj1->func_ptr = ifobj2->func_ptr;
+ 	ifobj1->fv.vector = ifobj2->fv.vector;
+ 
+ 	ifobj2->func_ptr = tmp_func_ptr;
+ 	ifobj2->fv.vector = tmp_vector;
+ 
+ 	ifdict_tx = ifobj1;
+ 	ifdict_rx = ifobj2;
+ }
+ 
+ static void testapp_bidi(void)
+ {
+ 	for (int i = 0; i < MAX_BIDI_ITER; i++) {
+ 		pkt_counter = 0;
+ 		prev_pkt = -1;
+ 		sigvar = 0;
+ 		print_verbose("Creating socket\n");
+ 		testapp_validate();
+ 		if (!bidi_pass) {
+ 			print_verbose("Switching Tx/Rx vectors\n");
+ 			swap_vectors(ifdict[1], ifdict[0]);
+ 		}
+ 		bidi_pass++;
+ 	}
+ 
+ 	swap_vectors(ifdict[0], ifdict[1]);
+ 
+ 	print_ksft_result();
+ }
+ 
+ static void testapp_stats(void)
+ {
+ 	for (int i = 0; i < STAT_TEST_TYPE_MAX; i++) {
+ 		stat_test_type = i;
+ 
+ 		/* reset defaults */
+ 		rxqsize = XSK_RING_CONS__DEFAULT_NUM_DESCS;
+ 		frame_headroom = XSK_UMEM__DEFAULT_FRAME_HEADROOM;
+ 
+ 		switch (stat_test_type) {
+ 		case STAT_TEST_RX_DROPPED:
+ 			frame_headroom = XSK_UMEM__DEFAULT_FRAME_SIZE -
+ 						XDP_PACKET_HEADROOM - 1;
+ 			break;
+ 		case STAT_TEST_RX_FULL:
+ 			rxqsize = RX_FULL_RXQSIZE;
+ 			break;
+ 		default:
+ 			break;
+ 		}
+ 		testapp_validate();
+ 	}
+ 
+ 	print_ksft_result();
+ }
+ 
+ static void init_iface(struct ifobject *ifobj, const char *dst_mac,
+ 		       const char *src_mac, const char *dst_ip,
+ 		       const char *src_ip, const u16 dst_port,
+ 		       const u16 src_port, enum fvector vector)
+ {
+ 	struct in_addr ip;
+ 
+ 	memcpy(ifobj->dst_mac, dst_mac, ETH_ALEN);
+ 	memcpy(ifobj->src_mac, src_mac, ETH_ALEN);
+ 
+ 	inet_aton(dst_ip, &ip);
+ 	ifobj->dst_ip = ip.s_addr;
+ 
+ 	inet_aton(src_ip, &ip);
+ 	ifobj->src_ip = ip.s_addr;
+ 
+ 	ifobj->dst_port = dst_port;
+ 	ifobj->src_port = src_port;
+ 
+ 	if (vector == tx) {
+ 		ifobj->fv.vector = tx;
+ 		ifobj->func_ptr = worker_testapp_validate_tx;
+ 		ifdict_tx = ifobj;
+ 	} else {
+ 		ifobj->fv.vector = rx;
+ 		ifobj->func_ptr = worker_testapp_validate_rx;
+ 		ifdict_rx = ifobj;
+ 	}
+ }
+ 
+ static void run_pkt_test(int mode, int type)
+ {
+ 	test_type = type;
+ 
+ 	/* reset defaults after potential previous test */
+ 	xdp_flags = XDP_FLAGS_UPDATE_IF_NOEXIST;
+ 	pkt_counter = 0;
+ 	bidi_pass = 0;
+ 	prev_pkt = -1;
+ 	sigvar = 0;
+ 	stat_test_type = -1;
+ 	rxqsize = XSK_RING_CONS__DEFAULT_NUM_DESCS;
+ 	frame_headroom = XSK_UMEM__DEFAULT_FRAME_HEADROOM;
+ 
+ 	switch (mode) {
+ 	case (TEST_MODE_SKB):
+ 		xdp_flags |= XDP_FLAGS_SKB_MODE;
+ 		break;
+ 	case (TEST_MODE_DRV):
+ 		xdp_flags |= XDP_FLAGS_DRV_MODE;
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	switch (test_type) {
+ 	case TEST_TYPE_STATS:
+ 		testapp_stats();
+ 		break;
+ 	case TEST_TYPE_TEARDOWN:
+ 		testapp_teardown();
+ 		break;
+ 	case TEST_TYPE_BIDI:
+ 		testapp_bidi();
+ 		break;
+ 	default:
+ 		testapp_validate();
+ 		break;
+ 	}
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  }
  
  int main(int argc, char **argv)
@@@ -1023,26 -1098,26 +1176,41 @@@
  
  	num_frames = ++opt_pkt_count;
  
++<<<<<<< HEAD
 +	init_iface_config(ifaceconfig);
 +
 +	pthread_init_mutex();
++=======
+ 	init_iface(ifdict[0], MAC1, MAC2, IP1, IP2, UDP_PORT1, UDP_PORT2, tx);
+ 	init_iface(ifdict[1], MAC2, MAC1, IP2, IP1, UDP_PORT2, UDP_PORT1, rx);
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  
 -	ksft_set_plan(TEST_MODE_MAX * TEST_TYPE_MAX);
 +	ksft_set_plan(1);
  
++<<<<<<< HEAD
 +	if (!opt_teardown && !opt_bidi) {
 +		testapp_validate();
 +	} else if (opt_teardown && opt_bidi) {
 +		ksft_test_result_fail("ERROR: parameters -T and -B cannot be used together\n");
 +		ksft_exit_xfail();
 +	} else {
 +		testapp_sockets();
++=======
+ 	pthread_init_mutex();
+ 
+ 	for (i = 0; i < TEST_MODE_MAX; i++) {
+ 		for (j = 0; j < TEST_TYPE_MAX; j++)
+ 			run_pkt_test(i, j);
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  	}
  
 -	for (int i = 0; i < MAX_INTERFACES; i++) {
 -		if (ifdict[i]->ns_fd != -1)
 -			close(ifdict[i]->ns_fd);
 +	for (int i = 0; i < MAX_INTERFACES; i++)
  		free(ifdict[i]);
 -	}
 +
 +	pthread_destroy_mutex();
  
+ 	pthread_destroy_mutex();
+ 
  	ksft_exit_pass();
  
  	return 0;
diff --cc tools/testing/selftests/bpf/xdpxceiver.h
index f66f399dfb2d,3945746900af..000000000000
--- a/tools/testing/selftests/bpf/xdpxceiver.h
+++ b/tools/testing/selftests/bpf/xdpxceiver.h
@@@ -48,29 -50,49 +48,28 @@@ typedef __u32 u32
  typedef __u16 u16;
  typedef __u8 u8;
  
 -enum TEST_MODES {
 -	TEST_MODE_UNCONFIGURED = -1,
 -	TEST_MODE_SKB,
 -	TEST_MODE_DRV,
 -	TEST_MODE_MAX
 +enum TESTS {
 +	ORDER_CONTENT_VALIDATE_XDP_SKB = 0,
 +	ORDER_CONTENT_VALIDATE_XDP_DRV = 1,
  };
  
 -enum TEST_TYPES {
 -	TEST_TYPE_NOPOLL,
 -	TEST_TYPE_POLL,
 -	TEST_TYPE_TEARDOWN,
 -	TEST_TYPE_BIDI,
 -	TEST_TYPE_STATS,
 -	TEST_TYPE_MAX
 -};
 -
 -enum STAT_TEST_TYPES {
 -	STAT_TEST_RX_DROPPED,
 -	STAT_TEST_TX_INVALID,
 -	STAT_TEST_RX_FULL,
 -	STAT_TEST_RX_FILL_EMPTY,
 -	STAT_TEST_TYPE_MAX
 -};
 -
 -static int configured_mode = TEST_MODE_UNCONFIGURED;
 +static u8 uut;
  static u8 debug_pkt_dump;
  static u32 num_frames;
- static u8 switching_notify;
  static u8 bidi_pass;
 -static int test_type;
  
 +static u32 opt_xdp_flags = XDP_FLAGS_UPDATE_IF_NOEXIST;
  static int opt_queue;
  static int opt_pkt_count;
 +static int opt_poll;
 +static int opt_teardown;
 +static int opt_bidi;
 +static u32 opt_xdp_bind_flags = XDP_USE_NEED_WAKEUP;
  static u8 opt_verbose;
 -
 -static u32 xdp_flags = XDP_FLAGS_UPDATE_IF_NOEXIST;
 -static u32 xdp_bind_flags = XDP_USE_NEED_WAKEUP | XDP_COPY;
  static u8 pkt_data[XSK_UMEM__DEFAULT_FRAME_SIZE];
  static u32 pkt_counter;
 -static long prev_pkt = -1;
 +static u32 prev_pkt = -1;
  static int sigvar;
 -static int stat_test_type;
 -static u32 rxqsize;
 -static u32 frame_headroom;
  
  struct xsk_umem_info {
  	struct xsk_ring_prod fq;
@@@ -102,25 -124,15 +101,29 @@@ struct generic_data 
  	u32 seqnum;
  };
  
 +struct ifaceconfigobj {
 +	u8 dst_mac[ETH_ALEN];
 +	u8 src_mac[ETH_ALEN];
 +	struct in_addr dst_ip;
 +	struct in_addr src_ip;
 +	u16 src_port;
 +	u16 dst_port;
 +} *ifaceconfig;
 +
  struct ifobject {
++<<<<<<< HEAD
 +	int ifindex;
 +	int ifdict_index;
++=======
++>>>>>>> 9445f8c76583 (selftests: xsk: Refactor teardown/bidi test cases and testapp_validate)
  	char ifname[MAX_INTERFACE_NAME_CHARS];
  	char nsname[MAX_INTERFACES_NAMESPACE_CHARS];
- 	struct flow_vector fv;
  	struct xsk_socket_info *xsk;
  	struct xsk_umem_info *umem;
- 	u8 dst_mac[ETH_ALEN];
- 	u8 src_mac[ETH_ALEN];
+ 	void *(*func_ptr)(void *arg);
+ 	struct flow_vector fv;
+ 	int ns_fd;
+ 	int ifdict_index;
  	u32 dst_ip;
  	u32 src_ip;
  	u16 src_port;
@@@ -128,9 -142,10 +133,11 @@@
  };
  
  static struct ifobject *ifdict[MAX_INTERFACES];
+ static struct ifobject *ifdict_rx;
+ static struct ifobject *ifdict_tx;
  
  /*threads*/
 +atomic_int spinning_tx;
  atomic_int spinning_rx;
  pthread_mutex_t sync_mutex;
  pthread_mutex_t sync_mutex_tx;
* Unmerged path tools/testing/selftests/bpf/xdpxceiver.c
* Unmerged path tools/testing/selftests/bpf/xdpxceiver.h
