x86/mce/amd: Cleanup threshold device remove path

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit f26d2580a7ddc84aa9e51e47fdbb5ad63dbee5a7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/f26d2580.failed

Pass in the bank pointer directly to the cleaning up functions,
obviating the need for per-CPU accesses. Make the clean up path
interrupt-safe by cleaning the bank pointer first so that the rest of
the teardown happens safe from the thresholding interrupt.

No functional changes.

 [ bp: Write commit message and reverse bank->shared test to save an
   indentation level in threshold_remove_bank(). ]

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20200403161943.1458-7-bp@alien8.de
(cherry picked from commit f26d2580a7ddc84aa9e51e47fdbb5ad63dbee5a7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mce/amd.c
diff --cc arch/x86/kernel/cpu/mce/amd.c
index 3dd2b7c6ab0e,16e7aea86ab1..000000000000
--- a/arch/x86/kernel/cpu/mce/amd.c
+++ b/arch/x86/kernel/cpu/mce/amd.c
@@@ -1434,40 -1415,34 +1430,54 @@@ static void __threshold_remove_blocks(s
  		kobject_del(&pos->kobj);
  }
  
- static void threshold_remove_bank(unsigned int cpu, int bank)
+ static void threshold_remove_bank(struct threshold_bank *bank)
  {
  	struct amd_northbridge *nb;
- 	struct threshold_bank *b;
  
- 	b = per_cpu(threshold_banks, cpu)[bank];
- 	if (!b)
+ 	if (!bank->blocks)
+ 		goto out_free;
+ 
+ 	if (!bank->shared)
+ 		goto out_dealloc;
+ 
+ 	if (!refcount_dec_and_test(&bank->cpus)) {
+ 		__threshold_remove_blocks(bank);
  		return;
++<<<<<<< HEAD
 +
 +	if (!b->blocks)
 +		goto free_out;
 +
 +	if (is_shared_bank(bank)) {
 +		if (!refcount_dec_and_test(&b->cpus)) {
 +			__threshold_remove_blocks(b);
 +			per_cpu(threshold_banks, cpu)[bank] = NULL;
 +			return;
 +		} else {
 +			/*
 +			 * the last CPU on this node using the shared bank is
 +			 * going away, remove that bank now.
 +			 */
 +			nb = node_to_amd_nb(topology_die_id(cpu));
 +			nb->bank4 = NULL;
 +		}
++=======
+ 	} else {
+ 		/*
+ 		 * The last CPU on this node using the shared bank is going
+ 		 * away, remove that bank now.
+ 		 */
+ 		nb = node_to_amd_nb(amd_get_nb_id(smp_processor_id()));
+ 		nb->bank4 = NULL;
++>>>>>>> f26d2580a7dd (x86/mce/amd: Cleanup threshold device remove path)
  	}
  
- 	deallocate_threshold_block(cpu, bank);
+ out_dealloc:
+ 	deallocate_threshold_blocks(bank);
  
- free_out:
- 	kobject_del(b->kobj);
- 	kobject_put(b->kobj);
- 	kfree(b);
- 	per_cpu(threshold_banks, cpu)[bank] = NULL;
+ out_free:
+ 	kobject_put(bank->kobj);
+ 	kfree(bank);
  }
  
  int mce_threshold_remove_device(unsigned int cpu)
diff --git a/arch/x86/include/asm/amd_nb.h b/arch/x86/include/asm/amd_nb.h
index c7df20e78b09..455066a06f60 100644
--- a/arch/x86/include/asm/amd_nb.h
+++ b/arch/x86/include/asm/amd_nb.h
@@ -57,6 +57,7 @@ struct threshold_bank {
 
 	/* initialized to the number of CPUs on the node sharing this bank */
 	refcount_t		cpus;
+	unsigned int		shared;
 };
 
 struct amd_northbridge {
* Unmerged path arch/x86/kernel/cpu/mce/amd.c
