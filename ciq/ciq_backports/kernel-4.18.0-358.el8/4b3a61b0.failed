bridge: mrp: Set the priority of MRP instance

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Horatiu Vultur <horatiu.vultur@microchip.com>
commit 4b3a61b030d1131dcf3633a276158a3d0a435a47
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/4b3a61b0.failed

Each MRP instance has a priority, a lower value means a higher priority.
The priority of MRP instance is stored in MRP_Test frame in this way
all the MRP nodes in the ring can see other nodes priority.

	Signed-off-by: Horatiu Vultur <horatiu.vultur@microchip.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4b3a61b030d1131dcf3633a276158a3d0a435a47)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/switchdev.h
diff --cc include/net/switchdev.h
index 4c14c5b37237,f82ef4c45f5e..000000000000
--- a/include/net/switchdev.h
+++ b/include/net/switchdev.h
@@@ -115,38 -108,56 +115,89 @@@ struct switchdev_obj_port_mdb 
  #define SWITCHDEV_OBJ_PORT_MDB(OBJ) \
  	container_of((OBJ), struct switchdev_obj_port_mdb, obj)
  
++<<<<<<< HEAD
++=======
+ 
+ #if IS_ENABLED(CONFIG_BRIDGE_MRP)
+ /* SWITCHDEV_OBJ_ID_MRP */
+ struct switchdev_obj_mrp {
+ 	struct switchdev_obj obj;
+ 	struct net_device *p_port;
+ 	struct net_device *s_port;
+ 	u32 ring_id;
+ 	u16 prio;
+ };
+ 
+ #define SWITCHDEV_OBJ_MRP(OBJ) \
+ 	container_of((OBJ), struct switchdev_obj_mrp, obj)
+ 
+ /* SWITCHDEV_OBJ_ID_RING_TEST_MRP */
+ struct switchdev_obj_ring_test_mrp {
+ 	struct switchdev_obj obj;
+ 	/* The value is in us and a value of 0 represents to stop */
+ 	u32 interval;
+ 	u8 max_miss;
+ 	u32 ring_id;
+ 	u32 period;
+ };
+ 
+ #define SWITCHDEV_OBJ_RING_TEST_MRP(OBJ) \
+ 	container_of((OBJ), struct switchdev_obj_ring_test_mrp, obj)
+ 
+ /* SWICHDEV_OBJ_ID_RING_ROLE_MRP */
+ struct switchdev_obj_ring_role_mrp {
+ 	struct switchdev_obj obj;
+ 	u8 ring_role;
+ 	u32 ring_id;
+ };
+ 
+ #define SWITCHDEV_OBJ_RING_ROLE_MRP(OBJ) \
+ 	container_of((OBJ), struct switchdev_obj_ring_role_mrp, obj)
+ 
+ struct switchdev_obj_ring_state_mrp {
+ 	struct switchdev_obj obj;
+ 	u8 ring_state;
+ 	u32 ring_id;
+ };
+ 
+ #define SWITCHDEV_OBJ_RING_STATE_MRP(OBJ) \
+ 	container_of((OBJ), struct switchdev_obj_ring_state_mrp, obj)
+ 
+ #endif
+ 
++>>>>>>> 4b3a61b030d1 (bridge: mrp: Set the priority of MRP instance)
  typedef int switchdev_obj_dump_cb_t(struct switchdev_obj *obj);
  
 +struct switchdev_ops_extended_rh {
 +};
 +
 +/**
 + * struct switchdev_ops - switchdev operations
 + *
 + * @switchdev_port_attr_set: Set a port attribute (see switchdev_attr).
 + */
 +struct RH_KABI_RENAME(switchdev_ops, rh_deprecated_switchdev_ops) {
 +	RH_KABI_DEPRECATE_FN(int, switchdev_port_attr_get, struct net_device *dev,
 +					   struct switchdev_attr *attr)
 +	RH_KABI_DEPRECATE_FN(int, switchdev_port_attr_set, struct net_device *dev,
 +					   const struct switchdev_attr *attr,
 +					   struct switchdev_trans *trans)
 +	RH_KABI_DEPRECATE_FN(int, switchdev_port_obj_add, struct net_device *dev,
 +					  const struct switchdev_obj *obj,
 +					  struct switchdev_trans *trans)
 +	RH_KABI_DEPRECATE_FN(int, switchdev_port_obj_del, struct net_device *dev,
 +					  const struct switchdev_obj *obj)
 +
 +	RH_KABI_RESERVE(1)
 +	RH_KABI_RESERVE(2)
 +	RH_KABI_RESERVE(3)
 +	RH_KABI_RESERVE(4)
 +	RH_KABI_RESERVE(5)
 +	RH_KABI_RESERVE(6)
 +	RH_KABI_RESERVE(7)
 +	RH_KABI_AUX_EMBED(switchdev_ops_extended)
 +};
 +
  enum switchdev_notifier_type {
  	SWITCHDEV_FDB_ADD_TO_BRIDGE = 1,
  	SWITCHDEV_FDB_DEL_TO_BRIDGE,
* Unmerged path include/net/switchdev.h
diff --git a/include/uapi/linux/if_bridge.h b/include/uapi/linux/if_bridge.h
index 5b3c4b80d01b..fb9f22faeb8f 100644
--- a/include/uapi/linux/if_bridge.h
+++ b/include/uapi/linux/if_bridge.h
@@ -176,6 +176,7 @@ enum {
 	IFLA_BRIDGE_MRP_INSTANCE_RING_ID,
 	IFLA_BRIDGE_MRP_INSTANCE_P_IFINDEX,
 	IFLA_BRIDGE_MRP_INSTANCE_S_IFINDEX,
+	IFLA_BRIDGE_MRP_INSTANCE_PRIO,
 	__IFLA_BRIDGE_MRP_INSTANCE_MAX,
 };
 
@@ -230,6 +231,7 @@ struct br_mrp_instance {
 	__u32 ring_id;
 	__u32 p_ifindex;
 	__u32 s_ifindex;
+	__u16 prio;
 };
 
 struct br_mrp_ring_state {
diff --git a/net/bridge/br_mrp.c b/net/bridge/br_mrp.c
index 8ea59504ef47..f8fd037219fe 100644
--- a/net/bridge/br_mrp.c
+++ b/net/bridge/br_mrp.c
@@ -147,7 +147,7 @@ static struct sk_buff *br_mrp_alloc_test_skb(struct br_mrp *mrp,
 	br_mrp_skb_tlv(skb, BR_MRP_TLV_HEADER_RING_TEST, sizeof(*hdr));
 	hdr = skb_put(skb, sizeof(*hdr));
 
-	hdr->prio = cpu_to_be16(MRP_DEFAULT_PRIO);
+	hdr->prio = cpu_to_be16(mrp->prio);
 	ether_addr_copy(hdr->sa, p->br->dev->dev_addr);
 	hdr->port_role = cpu_to_be16(port_role);
 	hdr->state = cpu_to_be16(mrp->ring_state);
@@ -290,6 +290,7 @@ int br_mrp_add(struct net_bridge *br, struct br_mrp_instance *instance)
 		return -ENOMEM;
 
 	mrp->ring_id = instance->ring_id;
+	mrp->prio = instance->prio;
 
 	p = br_mrp_get_port(br, instance->p_ifindex);
 	spin_lock_bh(&br->lock);
diff --git a/net/bridge/br_mrp_netlink.c b/net/bridge/br_mrp_netlink.c
index df45c6748864..6bb2e88a7a8c 100644
--- a/net/bridge/br_mrp_netlink.c
+++ b/net/bridge/br_mrp_netlink.c
@@ -22,6 +22,7 @@ br_mrp_instance_policy[IFLA_BRIDGE_MRP_INSTANCE_MAX + 1] = {
 	[IFLA_BRIDGE_MRP_INSTANCE_RING_ID]	= { .type = NLA_U32 },
 	[IFLA_BRIDGE_MRP_INSTANCE_P_IFINDEX]	= { .type = NLA_U32 },
 	[IFLA_BRIDGE_MRP_INSTANCE_S_IFINDEX]	= { .type = NLA_U32 },
+	[IFLA_BRIDGE_MRP_INSTANCE_PRIO]		= { .type = NLA_U16 },
 };
 
 static int br_mrp_instance_parse(struct net_bridge *br, struct nlattr *attr,
@@ -49,6 +50,10 @@ static int br_mrp_instance_parse(struct net_bridge *br, struct nlattr *attr,
 	inst.ring_id = nla_get_u32(tb[IFLA_BRIDGE_MRP_INSTANCE_RING_ID]);
 	inst.p_ifindex = nla_get_u32(tb[IFLA_BRIDGE_MRP_INSTANCE_P_IFINDEX]);
 	inst.s_ifindex = nla_get_u32(tb[IFLA_BRIDGE_MRP_INSTANCE_S_IFINDEX]);
+	inst.prio = MRP_DEFAULT_PRIO;
+
+	if (tb[IFLA_BRIDGE_MRP_INSTANCE_PRIO])
+		inst.prio = nla_get_u16(tb[IFLA_BRIDGE_MRP_INSTANCE_PRIO]);
 
 	if (cmd == RTM_SETLINK)
 		return br_mrp_add(br, &inst);
diff --git a/net/bridge/br_mrp_switchdev.c b/net/bridge/br_mrp_switchdev.c
index 51cb1d5a24b4..3a776043bf80 100644
--- a/net/bridge/br_mrp_switchdev.c
+++ b/net/bridge/br_mrp_switchdev.c
@@ -12,6 +12,7 @@ int br_mrp_switchdev_add(struct net_bridge *br, struct br_mrp *mrp)
 		.p_port = rtnl_dereference(mrp->p_port)->dev,
 		.s_port = rtnl_dereference(mrp->s_port)->dev,
 		.ring_id = mrp->ring_id,
+		.prio = mrp->prio,
 	};
 	int err;
 
diff --git a/net/bridge/br_private_mrp.h b/net/bridge/br_private_mrp.h
index a0f53cc3ab85..558941ce2366 100644
--- a/net/bridge/br_private_mrp.h
+++ b/net/bridge/br_private_mrp.h
@@ -14,6 +14,7 @@ struct br_mrp {
 	struct net_bridge_port __rcu	*s_port;
 
 	u32				ring_id;
+	u16				prio;
 
 	enum br_mrp_ring_role_type	ring_role;
 	u8				ring_role_offloaded;
