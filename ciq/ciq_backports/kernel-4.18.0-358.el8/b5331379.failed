KVM: arm64: Only reschedule if MMU_NOTIFIER_RANGE_BLOCKABLE is not set

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Will Deacon <will@kernel.org>
commit b5331379bc62611d1026173a09c73573384201d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/b5331379.failed

When an MMU notifier call results in unmapping a range that spans multiple
PGDs, we end up calling into cond_resched_lock() when crossing a PGD boundary,
since this avoids running into RCU stalls during VM teardown. Unfortunately,
if the VM is destroyed as a result of OOM, then blocking is not permitted
and the call to the scheduler triggers the following BUG():

 | BUG: sleeping function called from invalid context at arch/arm64/kvm/mmu.c:394
 | in_atomic(): 1, irqs_disabled(): 0, non_block: 1, pid: 36, name: oom_reaper
 | INFO: lockdep is turned off.
 | CPU: 3 PID: 36 Comm: oom_reaper Not tainted 5.8.0 #1
 | Hardware name: QEMU QEMU Virtual Machine, BIOS 0.0.0 02/06/2015
 | Call trace:
 |  dump_backtrace+0x0/0x284
 |  show_stack+0x1c/0x28
 |  dump_stack+0xf0/0x1a4
 |  ___might_sleep+0x2bc/0x2cc
 |  unmap_stage2_range+0x160/0x1ac
 |  kvm_unmap_hva_range+0x1a0/0x1c8
 |  kvm_mmu_notifier_invalidate_range_start+0x8c/0xf8
 |  __mmu_notifier_invalidate_range_start+0x218/0x31c
 |  mmu_notifier_invalidate_range_start_nonblock+0x78/0xb0
 |  __oom_reap_task_mm+0x128/0x268
 |  oom_reap_task+0xac/0x298
 |  oom_reaper+0x178/0x17c
 |  kthread+0x1e4/0x1fc
 |  ret_from_fork+0x10/0x30

Use the new 'flags' argument to kvm_unmap_hva_range() to ensure that we
only reschedule if MMU_NOTIFIER_RANGE_BLOCKABLE is set in the notifier
flags.

	Cc: <stable@vger.kernel.org>
Fixes: 8b3405e345b5 ("kvm: arm/arm64: Fix locking for kvm_free_stage2_pgd")
	Cc: Marc Zyngier <maz@kernel.org>
	Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
	Cc: James Morse <james.morse@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
Message-Id: <20200811102725.7121-3-will@kernel.org>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b5331379bc62611d1026173a09c73573384201d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kvm/mmu.c
diff --cc arch/arm64/kvm/mmu.c
index da158928567b,ba00bcc0c884..000000000000
--- a/arch/arm64/kvm/mmu.c
+++ b/arch/arm64/kvm/mmu.c
@@@ -311,8 -343,10 +311,13 @@@ static void unmap_stage2_puds(struct kv
   * destroying the VM), otherwise another faulting VCPU may come in and mess
   * with things behind our backs.
   */
++<<<<<<< HEAD
 +static void unmap_stage2_range(struct kvm *kvm, phys_addr_t start, u64 size)
++=======
+ static void __unmap_stage2_range(struct kvm_s2_mmu *mmu, phys_addr_t start, u64 size,
+ 				 bool may_block)
++>>>>>>> b5331379bc62 (KVM: arm64: Only reschedule if MMU_NOTIFIER_RANGE_BLOCKABLE is not set)
  {
 -	struct kvm *kvm = mmu->kvm;
  	pgd_t *pgd;
  	phys_addr_t addr = start, end = start + size;
  	phys_addr_t next;
@@@ -341,7 -375,12 +346,16 @@@
  	} while (pgd++, addr = next, addr != end);
  }
  
++<<<<<<< HEAD
 +static void stage2_flush_ptes(struct kvm *kvm, pmd_t *pmd,
++=======
+ static void unmap_stage2_range(struct kvm_s2_mmu *mmu, phys_addr_t start, u64 size)
+ {
+ 	__unmap_stage2_range(mmu, start, size, true);
+ }
+ 
+ static void stage2_flush_ptes(struct kvm_s2_mmu *mmu, pmd_t *pmd,
++>>>>>>> b5331379bc62 (KVM: arm64: Only reschedule if MMU_NOTIFIER_RANGE_BLOCKABLE is not set)
  			      phys_addr_t addr, phys_addr_t end)
  {
  	pte_t *pte;
@@@ -2046,7 -2214,10 +2060,14 @@@ static int handle_hva_to_gpa(struct kv
  
  static int kvm_unmap_hva_handler(struct kvm *kvm, gpa_t gpa, u64 size, void *data)
  {
++<<<<<<< HEAD
 +	unmap_stage2_range(kvm, gpa, size);
++=======
+ 	unsigned flags = *(unsigned *)data;
+ 	bool may_block = flags & MMU_NOTIFIER_RANGE_BLOCKABLE;
+ 
+ 	__unmap_stage2_range(&kvm->arch.mmu, gpa, size, may_block);
++>>>>>>> b5331379bc62 (KVM: arm64: Only reschedule if MMU_NOTIFIER_RANGE_BLOCKABLE is not set)
  	return 0;
  }
  
* Unmerged path arch/arm64/kvm/mmu.c
