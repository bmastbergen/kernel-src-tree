mm/gup: documentation fix for pin_user_pages*() APIs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author John Hubbard <jhubbard@nvidia.com>
commit 6a005645edd6de2b535783c96e66e08cccc5e067
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/6a005645.failed

All of the pin_user_pages*() API calls will cause pages to be
dma-pinned.  As such, they are all suitable for either DMA, RDMA, and/or
Direct IO.

The documentation should say so, but it was instead saying that three of
the API calls were only suitable for Direct IO.  This was discovered
when a reviewer wondered why an API call that specifically recommended
against Case 2 (DMA/RDMA) was being used in a DMA situation [1].

Fix this by simply deleting those claims.  The gup.c comments already
refer to the more extensive Documentation/core-api/pin_user_pages.rst,
which does have the correct guidance.  So let's just write it once,
there.

[1] https://lore.kernel.org/r/20200529074658.GM30374@kadam

	Signed-off-by: John Hubbard <jhubbard@nvidia.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Acked-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
	Acked-by: Souptick Joarder <jrdr.linux@gmail.com>
	Cc: Dan Carpenter <dan.carpenter@oracle.com>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Vlastimil Babka <vbabka@suse.cz>
Link: http://lkml.kernel.org/r/20200529084515.46259-1-jhubbard@nvidia.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6a005645edd6de2b535783c96e66e08cccc5e067)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/gup.c
diff --cc mm/gup.c
index 96a0a95afb63,8bd090b36d1d..000000000000
--- a/mm/gup.c
+++ b/mm/gup.c
@@@ -2837,10 -2917,7 +2837,14 @@@ EXPORT_SYMBOL_GPL(get_user_pages_fast)
   * the arguments here are identical.
   *
   * FOLL_PIN means that the pages must be released via unpin_user_page(). Please
++<<<<<<< HEAD
 + * see Documentation/vm/pin_user_pages.rst for further details.
 + *
 + * This is intended for Case 1 (DIO) in Documentation/vm/pin_user_pages.rst. It
 + * is NOT intended for Case 2 (RDMA: long-term pins).
++=======
+  * see Documentation/core-api/pin_user_pages.rst for further details.
++>>>>>>> 6a005645edd6 (mm/gup: documentation fix for pin_user_pages*() APIs)
   */
  int pin_user_pages_fast(unsigned long start, int nr_pages,
  			unsigned int gup_flags, struct page **pages)
@@@ -2913,10 -2990,7 +2917,14 @@@ EXPORT_SYMBOL_GPL(pin_user_pages_fast_o
   * the arguments here are identical.
   *
   * FOLL_PIN means that the pages must be released via unpin_user_page(). Please
++<<<<<<< HEAD
 + * see Documentation/vm/pin_user_pages.rst for details.
 + *
 + * This is intended for Case 1 (DIO) in Documentation/vm/pin_user_pages.rst. It
 + * is NOT intended for Case 2 (RDMA: long-term pins).
++=======
+  * see Documentation/core-api/pin_user_pages.rst for details.
++>>>>>>> 6a005645edd6 (mm/gup: documentation fix for pin_user_pages*() APIs)
   */
  long pin_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
  			   unsigned long start, unsigned long nr_pages,
@@@ -2949,10 -3023,7 +2957,14 @@@ EXPORT_SYMBOL(pin_user_pages_remote)
   * FOLL_PIN is set.
   *
   * FOLL_PIN means that the pages must be released via unpin_user_page(). Please
++<<<<<<< HEAD
 + * see Documentation/vm/pin_user_pages.rst for details.
 + *
 + * This is intended for Case 1 (DIO) in Documentation/vm/pin_user_pages.rst. It
 + * is NOT intended for Case 2 (RDMA: long-term pins).
++=======
+  * see Documentation/core-api/pin_user_pages.rst for details.
++>>>>>>> 6a005645edd6 (mm/gup: documentation fix for pin_user_pages*() APIs)
   */
  long pin_user_pages(unsigned long start, unsigned long nr_pages,
  		    unsigned int gup_flags, struct page **pages,
* Unmerged path mm/gup.c
