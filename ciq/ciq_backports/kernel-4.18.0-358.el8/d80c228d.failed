block: fix the problem of io_ticks becoming smaller

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Chunguang Xu <brookxu@tencent.com>
commit d80c228d44640f0b47b57a2ca4afa26ef87e16b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/d80c228d.failed

On the IO submission path, blk_account_io_start() may interrupt
the system interruption. When the interruption returns, the value
of part->stamp may have been updated by other cores, so the time
value collected before the interruption may be less than part->
stamp. So when this happens, we should do nothing to make io_ticks
more accurate? For kernels less than 5.0, this may cause io_ticks
to become smaller, which in turn may cause abnormal ioutil values.

	Signed-off-by: Chunguang Xu <brookxu@tencent.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
Link: https://lore.kernel.org/r/1625521646-1069-1-git-send-email-brookxu.cn@gmail.com
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit d80c228d44640f0b47b57a2ca4afa26ef87e16b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
diff --cc block/blk-core.c
index 2039b6dc98fe,04477697ee4b..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -1255,6 -1235,22 +1255,25 @@@ unsigned int blk_rq_err_bytes(const str
  }
  EXPORT_SYMBOL_GPL(blk_rq_err_bytes);
  
++<<<<<<< HEAD
++=======
+ static void update_io_ticks(struct block_device *part, unsigned long now,
+ 		bool end)
+ {
+ 	unsigned long stamp;
+ again:
+ 	stamp = READ_ONCE(part->bd_stamp);
+ 	if (unlikely(time_after(now, stamp))) {
+ 		if (likely(cmpxchg(&part->bd_stamp, stamp, now) == stamp))
+ 			__part_stat_add(part, io_ticks, end ? now - stamp : 1);
+ 	}
+ 	if (part->bd_partno) {
+ 		part = bdev_whole(part);
+ 		goto again;
+ 	}
+ }
+ 
++>>>>>>> d80c228d4464 (block: fix the problem of io_ticks becoming smaller)
  static void blk_account_io_completion(struct request *req, unsigned int bytes)
  {
  	if (req->part && blk_do_io_stat(req)) {
* Unmerged path block/blk-core.c
