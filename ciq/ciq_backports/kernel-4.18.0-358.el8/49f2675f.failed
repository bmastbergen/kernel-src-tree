tools headers UAPI: Sync linux/kvm.h with the kernel sources

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 49f2675f5b4d5d0af22c963f9f6152abb1bb15aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/49f2675f.failed

To pick the changes in:

  30b5c851af7991ad ("KVM: x86/xen: Add support for vCPU runstate information")

That don't cause any change in tooling as it doesn't introduce any new
ioctl, just parameters to existing one.

This silences this perf build warning:

  Warning: Kernel ABI header at 'tools/include/uapi/linux/kvm.h' differs from latest version at 'include/uapi/linux/kvm.h'
  diff -u tools/include/uapi/linux/kvm.h include/uapi/linux/kvm.h

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Woodhouse <dwmw@amazon.co.uk>
	Cc: Ian Rogers <irogers@google.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 49f2675f5b4d5d0af22c963f9f6152abb1bb15aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/include/uapi/linux/kvm.h
diff --cc tools/include/uapi/linux/kvm.h
index dab31a4a50a9,f6afee209620..000000000000
--- a/tools/include/uapi/linux/kvm.h
+++ b/tools/include/uapi/linux/kvm.h
@@@ -1081,6 -1151,11 +1081,14 @@@ struct kvm_x86_mce 
  #endif
  
  #ifdef KVM_CAP_XEN_HVM
++<<<<<<< HEAD
++=======
+ #define KVM_XEN_HVM_CONFIG_HYPERCALL_MSR	(1 << 0)
+ #define KVM_XEN_HVM_CONFIG_INTERCEPT_HCALL	(1 << 1)
+ #define KVM_XEN_HVM_CONFIG_SHARED_INFO		(1 << 2)
+ #define KVM_XEN_HVM_CONFIG_RUNSTATE		(1 << 3)
+ 
++>>>>>>> 49f2675f5b4d (tools headers UAPI: Sync linux/kvm.h with the kernel sources)
  struct kvm_xen_hvm_config {
  	__u32 flags;
  	__u32 msr;
@@@ -1470,6 -1547,100 +1478,103 @@@ struct kvm_enc_region 
  /* Available with KVM_CAP_ARM_SVE */
  #define KVM_ARM_VCPU_FINALIZE	  _IOW(KVMIO,  0xc2, int)
  
++<<<<<<< HEAD
++=======
+ /* Available with  KVM_CAP_S390_VCPU_RESETS */
+ #define KVM_S390_NORMAL_RESET	_IO(KVMIO,   0xc3)
+ #define KVM_S390_CLEAR_RESET	_IO(KVMIO,   0xc4)
+ 
+ struct kvm_s390_pv_sec_parm {
+ 	__u64 origin;
+ 	__u64 length;
+ };
+ 
+ struct kvm_s390_pv_unp {
+ 	__u64 addr;
+ 	__u64 size;
+ 	__u64 tweak;
+ };
+ 
+ enum pv_cmd_id {
+ 	KVM_PV_ENABLE,
+ 	KVM_PV_DISABLE,
+ 	KVM_PV_SET_SEC_PARMS,
+ 	KVM_PV_UNPACK,
+ 	KVM_PV_VERIFY,
+ 	KVM_PV_PREP_RESET,
+ 	KVM_PV_UNSHARE_ALL,
+ };
+ 
+ struct kvm_pv_cmd {
+ 	__u32 cmd;	/* Command to be executed */
+ 	__u16 rc;	/* Ultravisor return code */
+ 	__u16 rrc;	/* Ultravisor return reason code */
+ 	__u64 data;	/* Data or address */
+ 	__u32 flags;    /* flags for future extensions. Must be 0 for now */
+ 	__u32 reserved[3];
+ };
+ 
+ /* Available with KVM_CAP_S390_PROTECTED */
+ #define KVM_S390_PV_COMMAND		_IOWR(KVMIO, 0xc5, struct kvm_pv_cmd)
+ 
+ /* Available with KVM_CAP_X86_MSR_FILTER */
+ #define KVM_X86_SET_MSR_FILTER	_IOW(KVMIO,  0xc6, struct kvm_msr_filter)
+ 
+ /* Available with KVM_CAP_DIRTY_LOG_RING */
+ #define KVM_RESET_DIRTY_RINGS		_IO(KVMIO, 0xc7)
+ 
+ /* Per-VM Xen attributes */
+ #define KVM_XEN_HVM_GET_ATTR	_IOWR(KVMIO, 0xc8, struct kvm_xen_hvm_attr)
+ #define KVM_XEN_HVM_SET_ATTR	_IOW(KVMIO,  0xc9, struct kvm_xen_hvm_attr)
+ 
+ struct kvm_xen_hvm_attr {
+ 	__u16 type;
+ 	__u16 pad[3];
+ 	union {
+ 		__u8 long_mode;
+ 		__u8 vector;
+ 		struct {
+ 			__u64 gfn;
+ 		} shared_info;
+ 		__u64 pad[8];
+ 	} u;
+ };
+ 
+ /* Available with KVM_CAP_XEN_HVM / KVM_XEN_HVM_CONFIG_SHARED_INFO */
+ #define KVM_XEN_ATTR_TYPE_LONG_MODE		0x0
+ #define KVM_XEN_ATTR_TYPE_SHARED_INFO		0x1
+ #define KVM_XEN_ATTR_TYPE_UPCALL_VECTOR		0x2
+ 
+ /* Per-vCPU Xen attributes */
+ #define KVM_XEN_VCPU_GET_ATTR	_IOWR(KVMIO, 0xca, struct kvm_xen_vcpu_attr)
+ #define KVM_XEN_VCPU_SET_ATTR	_IOW(KVMIO,  0xcb, struct kvm_xen_vcpu_attr)
+ 
+ struct kvm_xen_vcpu_attr {
+ 	__u16 type;
+ 	__u16 pad[3];
+ 	union {
+ 		__u64 gpa;
+ 		__u64 pad[8];
+ 		struct {
+ 			__u64 state;
+ 			__u64 state_entry_time;
+ 			__u64 time_running;
+ 			__u64 time_runnable;
+ 			__u64 time_blocked;
+ 			__u64 time_offline;
+ 		} runstate;
+ 	} u;
+ };
+ 
+ /* Available with KVM_CAP_XEN_HVM / KVM_XEN_HVM_CONFIG_SHARED_INFO */
+ #define KVM_XEN_VCPU_ATTR_TYPE_VCPU_INFO	0x0
+ #define KVM_XEN_VCPU_ATTR_TYPE_VCPU_TIME_INFO	0x1
+ #define KVM_XEN_VCPU_ATTR_TYPE_RUNSTATE_ADDR	0x2
+ #define KVM_XEN_VCPU_ATTR_TYPE_RUNSTATE_CURRENT	0x3
+ #define KVM_XEN_VCPU_ATTR_TYPE_RUNSTATE_DATA	0x4
+ #define KVM_XEN_VCPU_ATTR_TYPE_RUNSTATE_ADJUST	0x5
+ 
++>>>>>>> 49f2675f5b4d (tools headers UAPI: Sync linux/kvm.h with the kernel sources)
  /* Secure Encrypted Virtualization command */
  enum sev_cmd_id {
  	/* Guest initialization commands */
* Unmerged path tools/include/uapi/linux/kvm.h
