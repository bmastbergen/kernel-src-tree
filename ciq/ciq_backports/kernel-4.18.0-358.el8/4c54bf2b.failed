Bluetooth: Add get/set device flags mgmt op

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
commit 4c54bf2b093bb2ae95e756342646d868e8101cb4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/4c54bf2b.failed

Add the get device flags and set device flags mgmt ops and the device
flags changed event. Their behavior is described in detail in
mgmt-api.txt in bluez.

Sample btmon trace when a HID device is added (trimmed to 75 chars):

@ MGMT Command: Unknown (0x0050) plen 11        {0x0001} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00                 ...........
@ MGMT Event: Unknown (0x002a) plen 15          {0x0004} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00 01 00 00 00     ...............
@ MGMT Event: Unknown (0x002a) plen 15          {0x0003} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00 01 00 00 00     ...............
@ MGMT Event: Unknown (0x002a) plen 15          {0x0002} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00 01 00 00 00     ...............
@ MGMT Event: Command Compl.. (0x0001) plen 10  {0x0001} [hci0] 18:06:14.98
      Unknown (0x0050) plen 7
        Status: Success (0x00)
        90 c5 13 cd f3 cd 02                             .......
@ MGMT Command: Add Device (0x0033) plen 8      {0x0001} [hci0] 18:06:14.98
        LE Address: CD:F3:CD:13:C5:90 (Static)
        Action: Auto-connect remote device (0x02)
@ MGMT Event: Device Added (0x001a) plen 8      {0x0004} [hci0] 18:06:14.98
        LE Address: CD:F3:CD:13:C5:90 (Static)
        Action: Auto-connect remote device (0x02)
@ MGMT Event: Device Added (0x001a) plen 8      {0x0003} [hci0] 18:06:14.98
        LE Address: CD:F3:CD:13:C5:90 (Static)
        Action: Auto-connect remote device (0x02)
@ MGMT Event: Device Added (0x001a) plen 8      {0x0002} [hci0] 18:06:14.98
        LE Address: CD:F3:CD:13:C5:90 (Static)
        Action: Auto-connect remote device (0x02)
@ MGMT Event: Unknown (0x002a) plen 15          {0x0004} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00 01 00 00 00     ...............
@ MGMT Event: Unknown (0x002a) plen 15          {0x0003} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00 01 00 00 00     ...............
@ MGMT Event: Unknown (0x002a) plen 15          {0x0002} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00 01 00 00 00     ...............
@ MGMT Event: Unknown (0x002a) plen 15          {0x0001} [hci0] 18:06:14.98
        90 c5 13 cd f3 cd 02 01 00 00 00 01 00 00 00     ...............

	Signed-off-by: Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
	Reviewed-by: Alain Michaud <alainm@chromium.org>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
	Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
(cherry picked from commit 4c54bf2b093bb2ae95e756342646d868e8101cb4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bluetooth/mgmt.h
#	net/bluetooth/mgmt.c
diff --cc include/net/bluetooth/mgmt.h
index 79792be43000,8e47b0c5fe52..000000000000
--- a/include/net/bluetooth/mgmt.h
+++ b/include/net/bluetooth/mgmt.h
@@@ -674,6 -678,69 +674,72 @@@ struct mgmt_cp_set_blocked_keys 
  } __packed;
  #define MGMT_OP_SET_BLOCKED_KEYS_SIZE 2
  
++<<<<<<< HEAD
++=======
+ #define MGMT_OP_SET_WIDEBAND_SPEECH	0x0047
+ 
+ #define MGMT_OP_READ_SECURITY_INFO	0x0048
+ #define MGMT_READ_SECURITY_INFO_SIZE	0
+ struct mgmt_rp_read_security_info {
+ 	__le16   sec_len;
+ 	__u8     sec[];
+ } __packed;
+ 
+ #define MGMT_OP_READ_EXP_FEATURES_INFO	0x0049
+ #define MGMT_READ_EXP_FEATURES_INFO_SIZE 0
+ struct mgmt_rp_read_exp_features_info {
+ 	__le16 feature_count;
+ 	struct {
+ 		__u8   uuid[16];
+ 		__le32 flags;
+ 	} features[];
+ } __packed;
+ 
+ #define MGMT_OP_SET_EXP_FEATURE		0x004a
+ struct mgmt_cp_set_exp_feature {
+ 	__u8   uuid[16];
+ 	__u8   param[];
+ } __packed;
+ #define MGMT_SET_EXP_FEATURE_SIZE	16
+ struct mgmt_rp_set_exp_feature {
+ 	__u8   uuid[16];
+ 	__le32 flags;
+ } __packed;
+ 
+ #define MGMT_OP_READ_DEF_SYSTEM_CONFIG	0x004b
+ #define MGMT_READ_DEF_SYSTEM_CONFIG_SIZE	0
+ 
+ #define MGMT_OP_SET_DEF_SYSTEM_CONFIG	0x004c
+ #define MGMT_SET_DEF_SYSTEM_CONFIG_SIZE		0
+ 
+ #define MGMT_OP_READ_DEF_RUNTIME_CONFIG	0x004d
+ #define MGMT_READ_DEF_RUNTIME_CONFIG_SIZE	0
+ 
+ #define MGMT_OP_SET_DEF_RUNTIME_CONFIG	0x004e
+ #define MGMT_SET_DEF_RUNTIME_CONFIG_SIZE	0
+ 
+ #define MGMT_OP_GET_DEVICE_FLAGS	0x004F
+ #define MGMT_GET_DEVICE_FLAGS_SIZE	7
+ struct mgmt_cp_get_device_flags {
+ 	struct mgmt_addr_info addr;
+ } __packed;
+ struct mgmt_rp_get_device_flags {
+ 	struct mgmt_addr_info addr;
+ 	__le32 supported_flags;
+ 	__le32 current_flags;
+ } __packed;
+ 
+ #define MGMT_OP_SET_DEVICE_FLAGS	0x0050
+ #define MGMT_SET_DEVICE_FLAGS_SIZE	11
+ struct mgmt_cp_set_device_flags {
+ 	struct mgmt_addr_info addr;
+ 	__le32 current_flags;
+ } __packed;
+ struct mgmt_rp_set_device_flags {
+ 	struct mgmt_addr_info addr;
+ } __packed;
+ 
++>>>>>>> 4c54bf2b093b (Bluetooth: Add get/set device flags mgmt op)
  #define MGMT_EV_CMD_COMPLETE		0x0001
  struct mgmt_ev_cmd_complete {
  	__le16	opcode;
@@@ -899,3 -966,16 +965,19 @@@ struct mgmt_ev_ext_info_changed 
  struct mgmt_ev_phy_configuration_changed {
  	__le32	selected_phys;
  } __packed;
++<<<<<<< HEAD
++=======
+ 
+ #define MGMT_EV_EXP_FEATURE_CHANGED	0x0027
+ struct mgmt_ev_exp_feature_changed {
+ 	__u8	uuid[16];
+ 	__le32	flags;
+ } __packed;
+ 
+ #define MGMT_EV_DEVICE_FLAGS_CHANGED		0x002a
+ struct mgmt_ev_device_flags_changed {
+ 	struct mgmt_addr_info addr;
+ 	__le32 supported_flags;
+ 	__le32 current_flags;
+ } __packed;
++>>>>>>> 4c54bf2b093b (Bluetooth: Add get/set device flags mgmt op)
diff --cc net/bluetooth/mgmt.c
index 46a1d1b65411,e409ff48e8e6..000000000000
--- a/net/bluetooth/mgmt.c
+++ b/net/bluetooth/mgmt.c
@@@ -108,6 -109,15 +108,18 @@@ static const u16 mgmt_commands[] = 
  	MGMT_OP_SET_APPEARANCE,
  	MGMT_OP_SET_BLOCKED_KEYS,
  	MGMT_OP_SET_WIDEBAND_SPEECH,
++<<<<<<< HEAD
++=======
+ 	MGMT_OP_READ_SECURITY_INFO,
+ 	MGMT_OP_READ_EXP_FEATURES_INFO,
+ 	MGMT_OP_SET_EXP_FEATURE,
+ 	MGMT_OP_READ_DEF_SYSTEM_CONFIG,
+ 	MGMT_OP_SET_DEF_SYSTEM_CONFIG,
+ 	MGMT_OP_READ_DEF_RUNTIME_CONFIG,
+ 	MGMT_OP_SET_DEF_RUNTIME_CONFIG,
+ 	MGMT_OP_GET_DEVICE_FLAGS,
+ 	MGMT_OP_SET_DEVICE_FLAGS,
++>>>>>>> 4c54bf2b093b (Bluetooth: Add get/set device flags mgmt op)
  };
  
  static const u16 mgmt_events[] = {
@@@ -147,6 -157,8 +159,11 @@@
  	MGMT_EV_ADVERTISING_REMOVED,
  	MGMT_EV_EXT_INFO_CHANGED,
  	MGMT_EV_PHY_CONFIGURATION_CHANGED,
++<<<<<<< HEAD
++=======
+ 	MGMT_EV_EXP_FEATURE_CHANGED,
+ 	MGMT_EV_DEVICE_FLAGS_CHANGED,
++>>>>>>> 4c54bf2b093b (Bluetooth: Add get/set device flags mgmt op)
  };
  
  static const u16 mgmt_untrusted_commands[] = {
@@@ -3611,55 -3676,303 +3628,169 @@@ unlock
  	return err;
  }
  
 -static int read_security_info(struct sock *sk, struct hci_dev *hdev,
 -			      void *data, u16 data_len)
 -{
 -	char buf[16];
 -	struct mgmt_rp_read_security_info *rp = (void *)buf;
 -	u16 sec_len = 0;
 -	u8 flags = 0;
 -
 -	bt_dev_dbg(hdev, "sock %p", sk);
 -
 -	memset(&buf, 0, sizeof(buf));
 -
 -	hci_dev_lock(hdev);
 -
 -	/* When the Read Simple Pairing Options command is supported, then
 -	 * the remote public key validation is supported.
 -	 */
 -	if (hdev->commands[41] & 0x08)
 -		flags |= 0x01;	/* Remote public key validation (BR/EDR) */
 -
 -	flags |= 0x02;		/* Remote public key validation (LE) */
 -
 -	/* When the Read Encryption Key Size command is supported, then the
 -	 * encryption key size is enforced.
 -	 */
 -	if (hdev->commands[20] & 0x10)
 -		flags |= 0x04;	/* Encryption key size enforcement (BR/EDR) */
 -
 -	flags |= 0x08;		/* Encryption key size enforcement (LE) */
 -
 -	sec_len = eir_append_data(rp->sec, sec_len, 0x01, &flags, 1);
 -
 -	/* When the Read Simple Pairing Options command is supported, then
 -	 * also max encryption key size information is provided.
 -	 */
 -	if (hdev->commands[41] & 0x08)
 -		sec_len = eir_append_le16(rp->sec, sec_len, 0x02,
 -					  hdev->max_enc_key_size);
 -
 -	sec_len = eir_append_le16(rp->sec, sec_len, 0x03, SMP_MAX_ENC_KEY_SIZE);
 -
 -	rp->sec_len = cpu_to_le16(sec_len);
 -
 -	hci_dev_unlock(hdev);
 -
 -	return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_READ_SECURITY_INFO, 0,
 -				 rp, sizeof(*rp) + sec_len);
 -}
 -
 -#ifdef CONFIG_BT_FEATURE_DEBUG
 -/* d4992530-b9ec-469f-ab01-6c481c47da1c */
 -static const u8 debug_uuid[16] = {
 -	0x1c, 0xda, 0x47, 0x1c, 0x48, 0x6c, 0x01, 0xab,
 -	0x9f, 0x46, 0xec, 0xb9, 0x30, 0x25, 0x99, 0xd4,
 -};
 -#endif
 -
 -static int read_exp_features_info(struct sock *sk, struct hci_dev *hdev,
 -				  void *data, u16 data_len)
 +static int set_blocked_keys(struct sock *sk, struct hci_dev *hdev, void *data,
 +			    u16 len)
  {
 -	char buf[42];
 -	struct mgmt_rp_read_exp_features_info *rp = (void *)buf;
 -	u16 idx = 0;
 -
 -	bt_dev_dbg(hdev, "sock %p", sk);
 -
 -	memset(&buf, 0, sizeof(buf));
 +	int err = MGMT_STATUS_SUCCESS;
 +	struct mgmt_cp_set_blocked_keys *keys = data;
 +	const u16 max_key_count = ((U16_MAX - sizeof(*keys)) /
 +				   sizeof(struct mgmt_blocked_key_info));
 +	u16 key_count, expected_len;
 +	int i;
  
 -#ifdef CONFIG_BT_FEATURE_DEBUG
 -	if (!hdev) {
 -		u32 flags = bt_dbg_get() ? BIT(0) : 0;
 +	BT_DBG("request for %s", hdev->name);
  
 -		memcpy(rp->features[idx].uuid, debug_uuid, 16);
 -		rp->features[idx].flags = cpu_to_le32(flags);
 -		idx++;
 +	key_count = __le16_to_cpu(keys->key_count);
 +	if (key_count > max_key_count) {
 +		bt_dev_err(hdev, "too big key_count value %u", key_count);
 +		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_BLOCKED_KEYS,
 +				       MGMT_STATUS_INVALID_PARAMS);
  	}
 -#endif
  
 -	rp->feature_count = cpu_to_le16(idx);
 -
 -	/* After reading the experimental features information, enable
 -	 * the events to update client on any future change.
 -	 */
 -	hci_sock_set_flag(sk, HCI_MGMT_EXP_FEATURE_EVENTS);
 -
 -	return mgmt_cmd_complete(sk, hdev ? hdev->id : MGMT_INDEX_NONE,
 -				 MGMT_OP_READ_EXP_FEATURES_INFO,
 -				 0, rp, sizeof(*rp) + (20 * idx));
 -}
 -
 -#ifdef CONFIG_BT_FEATURE_DEBUG
 -static int exp_debug_feature_changed(bool enabled, struct sock *skip)
 -{
 -	struct mgmt_ev_exp_feature_changed ev;
 -
 -	memset(&ev, 0, sizeof(ev));
 -	memcpy(ev.uuid, debug_uuid, 16);
 -	ev.flags = cpu_to_le32(enabled ? BIT(0) : 0);
 -
 -	return mgmt_limited_event(MGMT_EV_EXP_FEATURE_CHANGED, NULL,
 -				  &ev, sizeof(ev),
 -				  HCI_MGMT_EXP_FEATURE_EVENTS, skip);
 -}
 -#endif
 -
 -static int set_exp_feature(struct sock *sk, struct hci_dev *hdev,
 -			   void *data, u16 data_len)
 -{
 -	struct mgmt_cp_set_exp_feature *cp = data;
 -	struct mgmt_rp_set_exp_feature rp;
 -
 -	bt_dev_dbg(hdev, "sock %p", sk);
 -
 -	if (!memcmp(cp->uuid, ZERO_KEY, 16)) {
 -		memset(rp.uuid, 0, 16);
 -		rp.flags = cpu_to_le32(0);
 -
 -#ifdef CONFIG_BT_FEATURE_DEBUG
 -		if (!hdev) {
 -			bool changed = bt_dbg_get();
 -
 -			bt_dbg_set(false);
 -
 -			if (changed)
 -				exp_debug_feature_changed(false, sk);
 -		}
 -#endif
 -
 -		hci_sock_set_flag(sk, HCI_MGMT_EXP_FEATURE_EVENTS);
 -
 -		return mgmt_cmd_complete(sk, hdev ? hdev->id : MGMT_INDEX_NONE,
 -					 MGMT_OP_SET_EXP_FEATURE, 0,
 -					 &rp, sizeof(rp));
 +	expected_len = struct_size(keys, keys, key_count);
 +	if (expected_len != len) {
 +		bt_dev_err(hdev, "expected %u bytes, got %u bytes",
 +			   expected_len, len);
 +		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_BLOCKED_KEYS,
 +				       MGMT_STATUS_INVALID_PARAMS);
  	}
  
 -#ifdef CONFIG_BT_FEATURE_DEBUG
 -	if (!memcmp(cp->uuid, debug_uuid, 16)) {
 -		bool val, changed;
 -		int err;
 -
 -		/* Command requires to use the non-controller index */
 -		if (hdev)
 -			return mgmt_cmd_status(sk, hdev->id,
 -					       MGMT_OP_SET_EXP_FEATURE,
 -					       MGMT_STATUS_INVALID_INDEX);
 -
 -		/* Parameters are limited to a single octet */
 -		if (data_len != MGMT_SET_EXP_FEATURE_SIZE + 1)
 -			return mgmt_cmd_status(sk, MGMT_INDEX_NONE,
 -					       MGMT_OP_SET_EXP_FEATURE,
 -					       MGMT_STATUS_INVALID_PARAMS);
 -
 -		/* Only boolean on/off is supported */
 -		if (cp->param[0] != 0x00 && cp->param[0] != 0x01)
 -			return mgmt_cmd_status(sk, MGMT_INDEX_NONE,
 -					       MGMT_OP_SET_EXP_FEATURE,
 -					       MGMT_STATUS_INVALID_PARAMS);
 -
 -		val = !!cp->param[0];
 -		changed = val ? !bt_dbg_get() : bt_dbg_get();
 -		bt_dbg_set(val);
 -
 -		memcpy(rp.uuid, debug_uuid, 16);
 -		rp.flags = cpu_to_le32(val ? BIT(0) : 0);
 +	hci_dev_lock(hdev);
  
 -		hci_sock_set_flag(sk, HCI_MGMT_EXP_FEATURE_EVENTS);
 +	hci_blocked_keys_clear(hdev);
  
 -		err = mgmt_cmd_complete(sk, MGMT_INDEX_NONE,
 -					MGMT_OP_SET_EXP_FEATURE, 0,
 -					&rp, sizeof(rp));
 +	for (i = 0; i < keys->key_count; ++i) {
 +		struct blocked_key *b = kzalloc(sizeof(*b), GFP_KERNEL);
  
 -		if (changed)
 -			exp_debug_feature_changed(val, sk);
 +		if (!b) {
 +			err = MGMT_STATUS_NO_RESOURCES;
 +			break;
 +		}
  
 -		return err;
 +		b->type = keys->keys[i].type;
 +		memcpy(b->val, keys->keys[i].val, sizeof(b->val));
 +		list_add_rcu(&b->list, &hdev->blocked_keys);
  	}
 -#endif
 +	hci_dev_unlock(hdev);
  
 -	return mgmt_cmd_status(sk, hdev ? hdev->id : MGMT_INDEX_NONE,
 -			       MGMT_OP_SET_EXP_FEATURE,
 -			       MGMT_STATUS_NOT_SUPPORTED);
 +	return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_SET_BLOCKED_KEYS,
 +				err, NULL, 0);
  }
  
+ #define SUPPORTED_DEVICE_FLAGS() ((1U << HCI_CONN_FLAG_MAX) - 1)
+ 
+ static int get_device_flags(struct sock *sk, struct hci_dev *hdev, void *data,
+ 			    u16 data_len)
+ {
+ 	struct mgmt_cp_get_device_flags *cp = data;
+ 	struct mgmt_rp_get_device_flags rp;
+ 	struct bdaddr_list_with_flags *br_params;
+ 	struct hci_conn_params *params;
+ 	u32 supported_flags = SUPPORTED_DEVICE_FLAGS();
+ 	u32 current_flags = 0;
+ 	u8 status = MGMT_STATUS_INVALID_PARAMS;
+ 
+ 	bt_dev_dbg(hdev, "Get device flags %pMR (type 0x%x)\n",
+ 		   &cp->addr.bdaddr, cp->addr.type);
+ 
+ 	if (cp->addr.type == BDADDR_BREDR) {
+ 		br_params = hci_bdaddr_list_lookup_with_flags(&hdev->whitelist,
+ 							      &cp->addr.bdaddr,
+ 							      cp->addr.type);
+ 		if (!br_params)
+ 			goto done;
+ 
+ 		current_flags = br_params->current_flags;
+ 	} else {
+ 		params = hci_conn_params_lookup(hdev, &cp->addr.bdaddr,
+ 						le_addr_type(cp->addr.type));
+ 
+ 		if (!params)
+ 			goto done;
+ 
+ 		current_flags = params->current_flags;
+ 	}
+ 
+ 	bacpy(&rp.addr.bdaddr, &cp->addr.bdaddr);
+ 	rp.addr.type = cp->addr.type;
+ 	rp.supported_flags = cpu_to_le32(supported_flags);
+ 	rp.current_flags = cpu_to_le32(current_flags);
+ 
+ 	status = MGMT_STATUS_SUCCESS;
+ 
+ done:
+ 	return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_GET_DEVICE_FLAGS, status,
+ 				&rp, sizeof(rp));
+ }
+ 
+ static void device_flags_changed(struct sock *sk, struct hci_dev *hdev,
+ 				 bdaddr_t *bdaddr, u8 bdaddr_type,
+ 				 u32 supported_flags, u32 current_flags)
+ {
+ 	struct mgmt_ev_device_flags_changed ev;
+ 
+ 	bacpy(&ev.addr.bdaddr, bdaddr);
+ 	ev.addr.type = bdaddr_type;
+ 	ev.supported_flags = cpu_to_le32(supported_flags);
+ 	ev.current_flags = cpu_to_le32(current_flags);
+ 
+ 	mgmt_event(MGMT_EV_DEVICE_FLAGS_CHANGED, hdev, &ev, sizeof(ev), sk);
+ }
+ 
+ static int set_device_flags(struct sock *sk, struct hci_dev *hdev, void *data,
+ 			    u16 len)
+ {
+ 	struct mgmt_cp_set_device_flags *cp = data;
+ 	struct bdaddr_list_with_flags *br_params;
+ 	struct hci_conn_params *params;
+ 	u8 status = MGMT_STATUS_INVALID_PARAMS;
+ 	u32 supported_flags = SUPPORTED_DEVICE_FLAGS();
+ 	u32 current_flags = __le32_to_cpu(cp->current_flags);
+ 
+ 	bt_dev_dbg(hdev, "Set device flags %pMR (type 0x%x) = 0x%x",
+ 		   &cp->addr.bdaddr, cp->addr.type,
+ 		   __le32_to_cpu(current_flags));
+ 
+ 	if ((supported_flags | current_flags) != supported_flags) {
+ 		bt_dev_warn(hdev, "Bad flag given (0x%x) vs supported (0x%0x)",
+ 			    current_flags, supported_flags);
+ 		goto done;
+ 	}
+ 
+ 	if (cp->addr.type == BDADDR_BREDR) {
+ 		br_params = hci_bdaddr_list_lookup_with_flags(&hdev->whitelist,
+ 							      &cp->addr.bdaddr,
+ 							      cp->addr.type);
+ 
+ 		if (br_params) {
+ 			br_params->current_flags = current_flags;
+ 			status = MGMT_STATUS_SUCCESS;
+ 		} else {
+ 			bt_dev_warn(hdev, "No such BR/EDR device %pMR (0x%x)",
+ 				    &cp->addr.bdaddr, cp->addr.type);
+ 		}
+ 	} else {
+ 		params = hci_conn_params_lookup(hdev, &cp->addr.bdaddr,
+ 						le_addr_type(cp->addr.type));
+ 		if (params) {
+ 			params->current_flags = current_flags;
+ 			status = MGMT_STATUS_SUCCESS;
+ 		} else {
+ 			bt_dev_warn(hdev, "No such LE device %pMR (0x%x)",
+ 				    &cp->addr.bdaddr,
+ 				    le_addr_type(cp->addr.type));
+ 		}
+ 	}
+ 
+ done:
+ 	if (status == MGMT_STATUS_SUCCESS)
+ 		device_flags_changed(sk, hdev, &cp->addr.bdaddr, cp->addr.type,
+ 				     supported_flags, current_flags);
+ 
+ 	return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_SET_DEVICE_FLAGS, status,
+ 				 &cp->addr, sizeof(cp->addr));
+ }
+ 
  static void read_local_oob_data_complete(struct hci_dev *hdev, u8 status,
  				         u16 opcode, struct sk_buff *skb)
  {
@@@ -5777,9 -6090,11 +5908,11 @@@ static int add_device(struct sock *sk, 
  {
  	struct mgmt_cp_add_device *cp = data;
  	u8 auto_conn, addr_type;
+ 	struct hci_conn_params *params;
  	int err;
+ 	u32 current_flags = 0;
  
 -	bt_dev_dbg(hdev, "sock %p", sk);
 +	BT_DBG("%s", hdev->name);
  
  	if (!bdaddr_type_is_valid(cp->addr.type) ||
  	    !bacmp(&cp->addr.bdaddr, BDADDR_ANY))
@@@ -7101,6 -7423,24 +7241,27 @@@ static const struct hci_mgmt_handler mg
  	{ set_blocked_keys,	   MGMT_OP_SET_BLOCKED_KEYS_SIZE,
  						HCI_MGMT_VAR_LEN },
  	{ set_wideband_speech,	   MGMT_SETTING_SIZE },
++<<<<<<< HEAD
++=======
+ 	{ read_security_info,      MGMT_READ_SECURITY_INFO_SIZE,
+ 						HCI_MGMT_UNTRUSTED },
+ 	{ read_exp_features_info,  MGMT_READ_EXP_FEATURES_INFO_SIZE,
+ 						HCI_MGMT_UNTRUSTED |
+ 						HCI_MGMT_HDEV_OPTIONAL },
+ 	{ set_exp_feature,         MGMT_SET_EXP_FEATURE_SIZE,
+ 						HCI_MGMT_VAR_LEN |
+ 						HCI_MGMT_HDEV_OPTIONAL },
+ 	{ read_def_system_config,  MGMT_READ_DEF_SYSTEM_CONFIG_SIZE,
+ 						HCI_MGMT_UNTRUSTED },
+ 	{ set_def_system_config,   MGMT_SET_DEF_SYSTEM_CONFIG_SIZE,
+ 						HCI_MGMT_VAR_LEN },
+ 	{ read_def_runtime_config, MGMT_READ_DEF_RUNTIME_CONFIG_SIZE,
+ 						HCI_MGMT_UNTRUSTED },
+ 	{ set_def_runtime_config,  MGMT_SET_DEF_RUNTIME_CONFIG_SIZE,
+ 						HCI_MGMT_VAR_LEN },
+ 	{ get_device_flags,        MGMT_GET_DEVICE_FLAGS_SIZE },
+ 	{ set_device_flags,        MGMT_SET_DEVICE_FLAGS_SIZE },
++>>>>>>> 4c54bf2b093b (Bluetooth: Add get/set device flags mgmt op)
  };
  
  void mgmt_index_added(struct hci_dev *hdev)
* Unmerged path include/net/bluetooth/mgmt.h
* Unmerged path net/bluetooth/mgmt.c
