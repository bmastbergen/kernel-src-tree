Bluetooth: Add support for experimental features configuration

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Marcel Holtmann <marcel@holtmann.org>
commit a10c907ce0e5e138c3da091fcb7c3d109a15aec5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a10c907c.failed

To enable platform specific experimental features, introduce this new set of
management commands and events.

	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
	Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
(cherry picked from commit a10c907ce0e5e138c3da091fcb7c3d109a15aec5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bluetooth/mgmt.h
#	net/bluetooth/mgmt.c
diff --cc include/net/bluetooth/mgmt.h
index 79792be43000,16e0d87bd8fa..000000000000
--- a/include/net/bluetooth/mgmt.h
+++ b/include/net/bluetooth/mgmt.h
@@@ -674,6 -672,36 +674,39 @@@ struct mgmt_cp_set_blocked_keys 
  } __packed;
  #define MGMT_OP_SET_BLOCKED_KEYS_SIZE 2
  
++<<<<<<< HEAD
++=======
+ #define MGMT_OP_SET_WIDEBAND_SPEECH	0x0047
+ 
+ #define MGMT_OP_READ_SECURITY_INFO	0x0048
+ #define MGMT_READ_SECURITY_INFO_SIZE	0
+ struct mgmt_rp_read_security_info {
+ 	__le16   sec_len;
+ 	__u8     sec[];
+ } __packed;
+ 
+ #define MGMT_OP_READ_EXP_FEATURES_INFO	0x0049
+ #define MGMT_READ_EXP_FEATURES_INFO_SIZE 0
+ struct mgmt_rp_read_exp_features_info {
+ 	__le16 feature_count;
+ 	struct {
+ 		__u8   uuid[16];
+ 		__le32 flags;
+ 	} features[];
+ } __packed;
+ 
+ #define MGMT_OP_SET_EXP_FEATURE		0x004a
+ struct mgmt_cp_set_exp_feature {
+ 	__u8   uuid[16];
+ 	__u8   param[];
+ } __packed;
+ #define MGMT_SET_EXP_FEATURE_SIZE	16
+ struct mgmt_rp_set_exp_feature {
+ 	__u8   uuid[16];
+ 	__le32 flags;
+ } __packed;
+ 
++>>>>>>> a10c907ce0e5 (Bluetooth: Add support for experimental features configuration)
  #define MGMT_EV_CMD_COMPLETE		0x0001
  struct mgmt_ev_cmd_complete {
  	__le16	opcode;
diff --cc net/bluetooth/mgmt.c
index b19362d866b4,3c6be70d98ef..000000000000
--- a/net/bluetooth/mgmt.c
+++ b/net/bluetooth/mgmt.c
@@@ -108,6 -108,9 +108,12 @@@ static const u16 mgmt_commands[] = 
  	MGMT_OP_SET_APPEARANCE,
  	MGMT_OP_SET_BLOCKED_KEYS,
  	MGMT_OP_SET_WIDEBAND_SPEECH,
++<<<<<<< HEAD
++=======
+ 	MGMT_OP_READ_SECURITY_INFO,
+ 	MGMT_OP_READ_EXP_FEATURES_INFO,
+ 	MGMT_OP_SET_EXP_FEATURE,
++>>>>>>> a10c907ce0e5 (Bluetooth: Add support for experimental features configuration)
  };
  
  static const u16 mgmt_events[] = {
@@@ -156,6 -160,8 +163,11 @@@ static const u16 mgmt_untrusted_command
  	MGMT_OP_READ_CONFIG_INFO,
  	MGMT_OP_READ_EXT_INDEX_LIST,
  	MGMT_OP_READ_EXT_INFO,
++<<<<<<< HEAD
++=======
+ 	MGMT_OP_READ_SECURITY_INFO,
+ 	MGMT_OP_READ_EXP_FEATURES_INFO,
++>>>>>>> a10c907ce0e5 (Bluetooth: Add support for experimental features configuration)
  };
  
  static const u16 mgmt_untrusted_events[] = {
@@@ -3611,55 -3666,102 +3624,102 @@@ unlock
  	return err;
  }
  
 -static int read_security_info(struct sock *sk, struct hci_dev *hdev,
 -			      void *data, u16 data_len)
 +static int set_blocked_keys(struct sock *sk, struct hci_dev *hdev, void *data,
 +			    u16 len)
  {
 -	char buf[16];
 -	struct mgmt_rp_read_security_info *rp = (void *)buf;
 -	u16 sec_len = 0;
 -	u8 flags = 0;
 -
 -	bt_dev_dbg(hdev, "sock %p", sk);
 -
 -	memset(&buf, 0, sizeof(buf));
 -
 -	hci_dev_lock(hdev);
 -
 -	/* When the Read Simple Pairing Options command is supported, then
 -	 * the remote public key validation is supported.
 -	 */
 -	if (hdev->commands[41] & 0x08)
 -		flags |= 0x01;	/* Remote public key validation (BR/EDR) */
 +	int err = MGMT_STATUS_SUCCESS;
 +	struct mgmt_cp_set_blocked_keys *keys = data;
 +	const u16 max_key_count = ((U16_MAX - sizeof(*keys)) /
 +				   sizeof(struct mgmt_blocked_key_info));
 +	u16 key_count, expected_len;
 +	int i;
  
 -	flags |= 0x02;		/* Remote public key validation (LE) */
 +	BT_DBG("request for %s", hdev->name);
  
 -	/* When the Read Encryption Key Size command is supported, then the
 -	 * encryption key size is enforced.
 -	 */
 -	if (hdev->commands[20] & 0x10)
 -		flags |= 0x04;	/* Encryption key size enforcement (BR/EDR) */
 +	key_count = __le16_to_cpu(keys->key_count);
 +	if (key_count > max_key_count) {
 +		bt_dev_err(hdev, "too big key_count value %u", key_count);
 +		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_BLOCKED_KEYS,
 +				       MGMT_STATUS_INVALID_PARAMS);
 +	}
  
 -	flags |= 0x08;		/* Encryption key size enforcement (LE) */
 +	expected_len = struct_size(keys, keys, key_count);
 +	if (expected_len != len) {
 +		bt_dev_err(hdev, "expected %u bytes, got %u bytes",
 +			   expected_len, len);
 +		return mgmt_cmd_status(sk, hdev->id, MGMT_OP_SET_BLOCKED_KEYS,
 +				       MGMT_STATUS_INVALID_PARAMS);
 +	}
  
 -	sec_len = eir_append_data(rp->sec, sec_len, 0x01, &flags, 1);
 +	hci_dev_lock(hdev);
  
 -	/* When the Read Simple Pairing Options command is supported, then
 -	 * also max encryption key size information is provided.
 -	 */
 -	if (hdev->commands[41] & 0x08)
 -		sec_len = eir_append_le16(rp->sec, sec_len, 0x02,
 -					  hdev->max_enc_key_size);
 +	hci_blocked_keys_clear(hdev);
  
 -	sec_len = eir_append_le16(rp->sec, sec_len, 0x03, SMP_MAX_ENC_KEY_SIZE);
 +	for (i = 0; i < keys->key_count; ++i) {
 +		struct blocked_key *b = kzalloc(sizeof(*b), GFP_KERNEL);
  
 -	rp->sec_len = cpu_to_le16(sec_len);
 +		if (!b) {
 +			err = MGMT_STATUS_NO_RESOURCES;
 +			break;
 +		}
  
 +		b->type = keys->keys[i].type;
 +		memcpy(b->val, keys->keys[i].val, sizeof(b->val));
 +		list_add_rcu(&b->list, &hdev->blocked_keys);
 +	}
  	hci_dev_unlock(hdev);
  
 -	return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_READ_SECURITY_INFO, 0,
 -				 rp, sizeof(*rp) + sec_len);
 +	return mgmt_cmd_complete(sk, hdev->id, MGMT_OP_SET_BLOCKED_KEYS,
 +				err, NULL, 0);
  }
  
+ static int read_exp_features_info(struct sock *sk, struct hci_dev *hdev,
+ 				  void *data, u16 data_len)
+ {
+ 	char buf[42];
+ 	struct mgmt_rp_read_exp_features_info *rp = (void *)buf;
+ 	u16 idx = 0;
+ 
+ 	bt_dev_dbg(hdev, "sock %p", sk);
+ 
+ 	memset(&buf, 0, sizeof(buf));
+ 
+ 	rp->feature_count = cpu_to_le16(idx);
+ 
+ 	/* After reading the experimental features information, enable
+ 	 * the events to update client on any future change.
+ 	 */
+ 	hci_sock_set_flag(sk, HCI_MGMT_EXP_FEATURE_EVENTS);
+ 
+ 	return mgmt_cmd_complete(sk, hdev ? hdev->id : MGMT_INDEX_NONE,
+ 				 MGMT_OP_READ_EXP_FEATURES_INFO,
+ 				 0, rp, sizeof(*rp) + (20 * idx));
+ }
+ 
+ static int set_exp_feature(struct sock *sk, struct hci_dev *hdev,
+ 			   void *data, u16 data_len)
+ {
+ 	struct mgmt_cp_set_exp_feature *cp = data;
+ 	struct mgmt_rp_set_exp_feature rp;
+ 
+ 	bt_dev_dbg(hdev, "sock %p", sk);
+ 
+ 	if (!memcmp(cp->uuid, ZERO_KEY, 16)) {
+ 		memset(rp.uuid, 0, 16);
+ 		rp.flags = cpu_to_le32(0);
+ 
+ 		hci_sock_set_flag(sk, HCI_MGMT_EXP_FEATURE_EVENTS);
+ 
+ 		return mgmt_cmd_complete(sk, hdev ? hdev->id : MGMT_INDEX_NONE,
+ 					 MGMT_OP_SET_EXP_FEATURE, 0,
+ 					 &rp, sizeof(rp));
+ 	}
+ 
+ 	return mgmt_cmd_status(sk, hdev ? hdev->id : MGMT_INDEX_NONE,
+ 			       MGMT_OP_SET_EXP_FEATURE,
+ 			       MGMT_STATUS_NOT_SUPPORTED);
+ }
+ 
  static void read_local_oob_data_complete(struct hci_dev *hdev, u8 status,
  				         u16 opcode, struct sk_buff *skb)
  {
@@@ -7100,6 -7202,14 +7160,17 @@@ static const struct hci_mgmt_handler mg
  	{ set_blocked_keys,	   MGMT_OP_SET_BLOCKED_KEYS_SIZE,
  						HCI_MGMT_VAR_LEN },
  	{ set_wideband_speech,	   MGMT_SETTING_SIZE },
++<<<<<<< HEAD
++=======
+ 	{ read_security_info,      MGMT_READ_SECURITY_INFO_SIZE,
+ 						HCI_MGMT_UNTRUSTED },
+ 	{ read_exp_features_info,  MGMT_READ_EXP_FEATURES_INFO_SIZE,
+ 						HCI_MGMT_UNTRUSTED |
+ 						HCI_MGMT_HDEV_OPTIONAL },
+ 	{ set_exp_feature,         MGMT_SET_EXP_FEATURE_SIZE,
+ 						HCI_MGMT_VAR_LEN |
+ 						HCI_MGMT_HDEV_OPTIONAL },
++>>>>>>> a10c907ce0e5 (Bluetooth: Add support for experimental features configuration)
  };
  
  void mgmt_index_added(struct hci_dev *hdev)
diff --git a/include/net/bluetooth/hci.h b/include/net/bluetooth/hci.h
index 956bcff9d80d..31f4a6d71af4 100644
--- a/include/net/bluetooth/hci.h
+++ b/include/net/bluetooth/hci.h
@@ -268,6 +268,7 @@ enum {
 	HCI_MGMT_DEV_CLASS_EVENTS,
 	HCI_MGMT_LOCAL_NAME_EVENTS,
 	HCI_MGMT_OOB_DATA_EVENTS,
+	HCI_MGMT_EXP_FEATURE_EVENTS,
 };
 
 /*
* Unmerged path include/net/bluetooth/mgmt.h
* Unmerged path net/bluetooth/mgmt.c
