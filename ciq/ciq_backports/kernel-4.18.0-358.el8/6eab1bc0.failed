ata: move sata_scr_*() to libata-sata.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
commit 6eab1bc0eecb541f4c383a0823902dc8f5d99861
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/6eab1bc0.failed

* move sata_scr_*() to libata-sata.c

* add static inlines for CONFIG_SATA_HOST=n case

Code size savings on m68k arch using (modified) atari_defconfig:

   text    data     bss     dec     hex filename
before:
  35642     572      40   36254    8d9e drivers/ata/libata-core.o
  16607      18       0   16625    40f1 drivers/ata/libata-eh.o
after:
  32846     572      40   33458    82b2 drivers/ata/libata-core.o
  16243      18       0   16261    3f85 drivers/ata/libata-eh.o

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 6eab1bc0eecb541f4c383a0823902dc8f5d99861)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/ata/libata-core.c
#	drivers/ata/libata-sata.c
#	include/linux/libata.h
diff --cc drivers/ata/libata-core.c
index d6da17431f7f,ba1e5c4d3c09..000000000000
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@@ -5510,111 -5216,6 +5510,114 @@@ err
  }
  
  /**
++<<<<<<< HEAD
 + *	sata_scr_valid - test whether SCRs are accessible
 + *	@link: ATA link to test SCR accessibility for
 + *
 + *	Test whether SCRs are accessible for @link.
 + *
 + *	LOCKING:
 + *	None.
 + *
 + *	RETURNS:
 + *	1 if SCRs are accessible, 0 otherwise.
 + */
 +int sata_scr_valid(struct ata_link *link)
 +{
 +	struct ata_port *ap = link->ap;
 +
 +	return (ap->flags & ATA_FLAG_SATA) && ap->ops->scr_read;
 +}
 +
 +/**
 + *	sata_scr_read - read SCR register of the specified port
 + *	@link: ATA link to read SCR for
 + *	@reg: SCR to read
 + *	@val: Place to store read value
 + *
 + *	Read SCR register @reg of @link into *@val.  This function is
 + *	guaranteed to succeed if @link is ap->link, the cable type of
 + *	the port is SATA and the port implements ->scr_read.
 + *
 + *	LOCKING:
 + *	None if @link is ap->link.  Kernel thread context otherwise.
 + *
 + *	RETURNS:
 + *	0 on success, negative errno on failure.
 + */
 +int sata_scr_read(struct ata_link *link, int reg, u32 *val)
 +{
 +	if (ata_is_host_link(link)) {
 +		if (sata_scr_valid(link))
 +			return link->ap->ops->scr_read(link, reg, val);
 +		return -EOPNOTSUPP;
 +	}
 +
 +	return sata_pmp_scr_read(link, reg, val);
 +}
 +
 +/**
 + *	sata_scr_write - write SCR register of the specified port
 + *	@link: ATA link to write SCR for
 + *	@reg: SCR to write
 + *	@val: value to write
 + *
 + *	Write @val to SCR register @reg of @link.  This function is
 + *	guaranteed to succeed if @link is ap->link, the cable type of
 + *	the port is SATA and the port implements ->scr_read.
 + *
 + *	LOCKING:
 + *	None if @link is ap->link.  Kernel thread context otherwise.
 + *
 + *	RETURNS:
 + *	0 on success, negative errno on failure.
 + */
 +int sata_scr_write(struct ata_link *link, int reg, u32 val)
 +{
 +	if (ata_is_host_link(link)) {
 +		if (sata_scr_valid(link))
 +			return link->ap->ops->scr_write(link, reg, val);
 +		return -EOPNOTSUPP;
 +	}
 +
 +	return sata_pmp_scr_write(link, reg, val);
 +}
 +
 +/**
 + *	sata_scr_write_flush - write SCR register of the specified port and flush
 + *	@link: ATA link to write SCR for
 + *	@reg: SCR to write
 + *	@val: value to write
 + *
 + *	This function is identical to sata_scr_write() except that this
 + *	function performs flush after writing to the register.
 + *
 + *	LOCKING:
 + *	None if @link is ap->link.  Kernel thread context otherwise.
 + *
 + *	RETURNS:
 + *	0 on success, negative errno on failure.
 + */
 +int sata_scr_write_flush(struct ata_link *link, int reg, u32 val)
 +{
 +	if (ata_is_host_link(link)) {
 +		int rc;
 +
 +		if (sata_scr_valid(link)) {
 +			rc = link->ap->ops->scr_write(link, reg, val);
 +			if (rc == 0)
 +				rc = link->ap->ops->scr_read(link, reg, &val);
 +			return rc;
 +		}
 +		return -EOPNOTSUPP;
 +	}
 +
 +	return sata_pmp_scr_write(link, reg, val);
 +}
 +
 +/**
++=======
++>>>>>>> 6eab1bc0eecb (ata: move sata_scr_*() to libata-sata.c)
   *	ata_phys_link_online - test whether the given link is online
   *	@link: ATA link to test
   *
diff --cc include/linux/libata.h
index ce0dc53b9adc,86703ce5a33e..000000000000
--- a/include/linux/libata.h
+++ b/include/linux/libata.h
@@@ -1208,6 -1185,36 +1204,39 @@@ extern struct ata_device *ata_dev_pair(
  extern int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_dev);
  extern void ata_scsi_port_error_handler(struct Scsi_Host *host, struct ata_port *ap);
  extern void ata_scsi_cmd_error_handler(struct Scsi_Host *host, struct ata_port *ap, struct list_head *eh_q);
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * SATA specific code - drivers/ata/libata-sata.c
+  */
+ #ifdef CONFIG_SATA_HOST
+ extern int sata_scr_valid(struct ata_link *link);
+ extern int sata_scr_read(struct ata_link *link, int reg, u32 *val);
+ extern int sata_scr_write(struct ata_link *link, int reg, u32 val);
+ extern int sata_scr_write_flush(struct ata_link *link, int reg, u32 val);
+ #else
+ static inline int sata_scr_valid(struct ata_link *link) { return 0; }
+ static inline int sata_scr_read(struct ata_link *link, int reg, u32 *val)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ static inline int sata_scr_write(struct ata_link *link, int reg, u32 val)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ static inline int sata_scr_write_flush(struct ata_link *link, int reg, u32 val)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ #endif
+ extern int sata_link_scr_lpm(struct ata_link *link, enum ata_lpm_policy policy,
+ 			     bool spm_wakeup);
+ extern int ata_slave_link_init(struct ata_port *ap);
+ extern void ata_tf_to_fis(const struct ata_taskfile *tf,
+ 			  u8 pmp, int is_cmd, u8 *fis);
+ extern void ata_tf_from_fis(const u8 *fis, struct ata_taskfile *tf);
++>>>>>>> 6eab1bc0eecb (ata: move sata_scr_*() to libata-sata.c)
  extern bool sata_lpm_ignore_phy_events(struct ata_link *link);
  
  extern int ata_cable_40wire(struct ata_port *ap);
* Unmerged path drivers/ata/libata-sata.c
* Unmerged path drivers/ata/libata-core.c
* Unmerged path drivers/ata/libata-sata.c
* Unmerged path include/linux/libata.h
