net: bridge: explicitly convert between mdb entry state and port group flags

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Vladimir Oltean <vladimir.oltean@nxp.com>
commit 0e761ac08fd8d53dfc53bb762748a61ffe3fe7b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/0e761ac0.failed

When creating a new multicast port group, there is implicit conversion
between the __u8 state member of struct br_mdb_entry and the unsigned
char flags member of struct net_bridge_port_group. This implicit
conversion relies on the fact that MDB_PERMANENT is equal to
MDB_PG_FLAGS_PERMANENT.

Let's be more explicit and convert the state to flags manually.

	Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
Link: https://lore.kernel.org/r/20201028234815.613226-1-vladimir.oltean@nxp.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 0e761ac08fd8d53dfc53bb762748a61ffe3fe7b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_mdb.c
diff --cc net/bridge/br_mdb.c
index 40754c5e5bdc,8846c5bcd075..000000000000
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@@ -737,18 -837,42 +737,23 @@@ static int br_mdb_parse(struct sk_buff 
  }
  
  static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
 -			    struct br_mdb_entry *entry,
 -			    struct nlattr **mdb_attrs,
 +			    struct br_ip *group, struct br_mdb_entry *entry,
  			    struct netlink_ext_ack *extack)
  {
 -	struct net_bridge_mdb_entry *mp, *star_mp;
 +	struct net_bridge_mdb_entry *mp;
  	struct net_bridge_port_group *p;
  	struct net_bridge_port_group __rcu **pp;
 -	struct br_ip group, star_group;
  	unsigned long now = jiffies;
++<<<<<<< HEAD
++=======
+ 	unsigned char flags = 0;
+ 	u8 filter_mode;
++>>>>>>> 0e761ac08fd8 (net: bridge: explicitly convert between mdb entry state and port group flags)
  	int err;
  
 -	__mdb_entry_to_br_ip(entry, &group, mdb_attrs);
 -
 -	/* host join errors which can happen before creating the group */
 -	if (!port) {
 -		/* don't allow any flags for host-joined groups */
 -		if (entry->state) {
 -			NL_SET_ERR_MSG_MOD(extack, "Flags are not allowed for host groups");
 -			return -EINVAL;
 -		}
 -		if (!br_multicast_is_star_g(&group)) {
 -			NL_SET_ERR_MSG_MOD(extack, "Groups with sources cannot be manually host joined");
 -			return -EINVAL;
 -		}
 -	}
 -
 -	if (br_group_is_l2(&group) && entry->state != MDB_PERMANENT) {
 -		NL_SET_ERR_MSG_MOD(extack, "Only permanent L2 entries allowed");
 -		return -EINVAL;
 -	}
 -
 -	mp = br_mdb_ip_get(br, &group);
 +	mp = br_mdb_ip_get(br, group);
  	if (!mp) {
 -		mp = br_multicast_new_group(br, &group);
 +		mp = br_multicast_new_group(br, group);
  		err = PTR_ERR_OR_ZERO(mp);
  		if (err)
  			return err;
@@@ -783,8 -902,14 +788,19 @@@
  			break;
  	}
  
++<<<<<<< HEAD
 +	p = br_multicast_new_port_group(port, group, *pp, entry->state, NULL,
 +					MCAST_EXCLUDE);
++=======
+ 	filter_mode = br_multicast_is_star_g(&group) ? MCAST_EXCLUDE :
+ 						       MCAST_INCLUDE;
+ 
+ 	if (entry->state == MDB_PERMANENT)
+ 		flags |= MDB_PG_FLAGS_PERMANENT;
+ 
+ 	p = br_multicast_new_port_group(port, &group, *pp, flags, NULL,
+ 					filter_mode, RTPROT_STATIC);
++>>>>>>> 0e761ac08fd8 (net: bridge: explicitly convert between mdb entry state and port group flags)
  	if (unlikely(!p)) {
  		NL_SET_ERR_MSG_MOD(extack, "Couldn't allocate new port group");
  		return -ENOMEM;
* Unmerged path net/bridge/br_mdb.c
