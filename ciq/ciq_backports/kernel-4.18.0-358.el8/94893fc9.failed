KVM: arm64: Limit the debug architecture to ARMv8.0

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Marc Zyngier <maz@kernel.org>
commit 94893fc9ad8cdb05fdb64e00128997bc530e2ca9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/94893fc9.failed

Let's not pretend we support anything but ARMv8.0 as far as the
debug architecture is concerned.

	Reviewed-by: Eric Auger <eric.auger@redhat.com>
	Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
(cherry picked from commit 94893fc9ad8cdb05fdb64e00128997bc530e2ca9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kvm/sys_regs.c
diff --cc arch/arm64/kvm/sys_regs.c
index 8891dfe1bddb,8f79ec1fffa7..000000000000
--- a/arch/arm64/kvm/sys_regs.c
+++ b/arch/arm64/kvm/sys_regs.c
@@@ -1108,31 -1027,36 +1108,55 @@@ static u64 read_id_reg(const struct kvm
  			 (u32)r->CRn, (u32)r->CRm, (u32)r->Op2);
  	u64 val = raz ? 0 : read_sanitised_ftr_reg(id);
  
 -	switch (id) {
 -	case SYS_ID_AA64PFR0_EL1:
 +	if (id == SYS_ID_AA64PFR0_EL1) {
  		if (!vcpu_has_sve(vcpu))
++<<<<<<< HEAD
 +			val &= ~(0xfUL << ID_AA64PFR0_SVE_SHIFT);
 +		val &= ~(0xfUL << ID_AA64PFR0_AMU_SHIFT);
 +	} else if (id == SYS_ID_AA64PFR1_EL1) {
 +		val &= ~(0xfUL << ID_AA64PFR1_MTE_SHIFT);
 +	} else if (id == SYS_ID_AA64ISAR1_EL1 && !vcpu_has_ptrauth(vcpu)) {
 +		val &= ~((0xfUL << ID_AA64ISAR1_APA_SHIFT) |
 +			 (0xfUL << ID_AA64ISAR1_API_SHIFT) |
 +			 (0xfUL << ID_AA64ISAR1_GPA_SHIFT) |
 +			 (0xfUL << ID_AA64ISAR1_GPI_SHIFT));
 +	} else if (id == SYS_ID_AA64DFR0_EL1) {
 +		u64 cap = 0;
 +
++=======
+ 			val &= ~FEATURE(ID_AA64PFR0_SVE);
+ 		val &= ~FEATURE(ID_AA64PFR0_AMU);
+ 		val &= ~FEATURE(ID_AA64PFR0_CSV2);
+ 		val |= FIELD_PREP(FEATURE(ID_AA64PFR0_CSV2), (u64)vcpu->kvm->arch.pfr0_csv2);
+ 		val &= ~FEATURE(ID_AA64PFR0_CSV3);
+ 		val |= FIELD_PREP(FEATURE(ID_AA64PFR0_CSV3), (u64)vcpu->kvm->arch.pfr0_csv3);
+ 		break;
+ 	case SYS_ID_AA64PFR1_EL1:
+ 		val &= ~FEATURE(ID_AA64PFR1_MTE);
+ 		break;
+ 	case SYS_ID_AA64ISAR1_EL1:
+ 		if (!vcpu_has_ptrauth(vcpu))
+ 			val &= ~(FEATURE(ID_AA64ISAR1_APA) |
+ 				 FEATURE(ID_AA64ISAR1_API) |
+ 				 FEATURE(ID_AA64ISAR1_GPA) |
+ 				 FEATURE(ID_AA64ISAR1_GPI));
+ 		break;
+ 	case SYS_ID_AA64DFR0_EL1:
+ 		/* Limit debug to ARMv8.0 */
+ 		val &= ~FEATURE(ID_AA64DFR0_DEBUGVER);
+ 		val |= FIELD_PREP(FEATURE(ID_AA64DFR0_DEBUGVER), 6);
++>>>>>>> 94893fc9ad8c (KVM: arm64: Limit the debug architecture to ARMv8.0)
  		/* Limit guests to PMUv3 for ARMv8.1 */
 +		if (kvm_vcpu_has_pmu(vcpu))
 +			cap = ID_AA64DFR0_PMUVER_8_1;
 +
  		val = cpuid_feature_cap_perfmon_field(val,
 -						      ID_AA64DFR0_PMUVER_SHIFT,
 -						      kvm_vcpu_has_pmu(vcpu) ? ID_AA64DFR0_PMUVER_8_1 : 0);
 -		break;
 -	case SYS_ID_DFR0_EL1:
 +						ID_AA64DFR0_PMUVER_SHIFT,
 +						cap);
 +		/* Hide SPE from guests */
 +		val &= ~GENMASK_ULL(ID_AA64DFR0_PMSVER_SHIFT + 3,
 +				    ID_AA64DFR0_PMSVER_SHIFT);
 +	} else if (id == SYS_ID_DFR0_EL1) {
  		/* Limit guests to PMUv3 for ARMv8.1 */
  		val = cpuid_feature_cap_perfmon_field(val,
  						      ID_DFR0_PERFMON_SHIFT,
* Unmerged path arch/arm64/kvm/sys_regs.c
