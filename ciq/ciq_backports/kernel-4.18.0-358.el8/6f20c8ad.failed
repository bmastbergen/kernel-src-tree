net/tcp_fastopen: fix data races around tfo_active_disable_stamp

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 6f20c8adb1813467ea52c1296d52c4e95978cb2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/6f20c8ad.failed

tfo_active_disable_stamp is read and written locklessly.
We need to annotate these accesses appropriately.

Then, we need to perform the atomic_inc(tfo_active_disable_times)
after the timestamp has been updated, and thus add barriers
to make sure tcp_fastopen_active_should_disable() wont read
a stale timestamp.

Fixes: cf1ef3f0719b ("net/tcp_fastopen: Disable active side TFO in certain scenarios")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Wei Wang <weiwan@google.com>
	Cc: Yuchung Cheng <ycheng@google.com>
	Cc: Neal Cardwell <ncardwell@google.com>
	Acked-by: Wei Wang <weiwan@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6f20c8adb1813467ea52c1296d52c4e95978cb2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_fastopen.c
diff --cc net/ipv4/tcp_fastopen.c
index bf27f5c73916,b32af76e2132..000000000000
--- a/net/ipv4/tcp_fastopen.c
+++ b/net/ipv4/tcp_fastopen.c
@@@ -473,10 -533,16 +480,20 @@@ bool tcp_fastopen_active_should_disable
  	if (!tfo_da_times)
  		return false;
  
++<<<<<<< HEAD
 +	/* Limit timout to max: 2^6 * initial timeout */
++=======
+ 	/* Paired with smp_mb__before_atomic() in tcp_fastopen_active_disable() */
+ 	smp_rmb();
+ 
+ 	/* Limit timeout to max: 2^6 * initial timeout */
++>>>>>>> 6f20c8adb181 (net/tcp_fastopen: fix data races around tfo_active_disable_stamp)
  	multiplier = 1 << min(tfo_da_times - 1, 6);
- 	timeout = multiplier * tfo_bh_timeout * HZ;
- 	if (time_before(jiffies, sock_net(sk)->ipv4.tfo_active_disable_stamp + timeout))
+ 
+ 	/* Paired with the WRITE_ONCE() in tcp_fastopen_active_disable(). */
+ 	timeout = READ_ONCE(sock_net(sk)->ipv4.tfo_active_disable_stamp) +
+ 		  multiplier * tfo_bh_timeout * HZ;
+ 	if (time_before(jiffies, timeout))
  		return true;
  
  	/* Mark check bit so we can check for successful active TFO
* Unmerged path net/ipv4/tcp_fastopen.c
