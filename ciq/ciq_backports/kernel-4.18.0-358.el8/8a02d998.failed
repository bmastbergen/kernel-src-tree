ACPI: CPPC: Add emtpy stubs of functions for CONFIG_ACPI_CPPC_LIB unset

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 8a02d99876362f35bc918097440445de18e3c47c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/8a02d998.failed

For convenience, add empty stubs of library functions defined in
cppc_acpi.c for the CONFIG_ACPI_CPPC_LIB unset case.

Because one of them needs to return CPUFREQ_ETERNAL, include
linux/cpufreq.h into the CPPC library header file and drop the
direct inclusion of it from cppc_acpi.c.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Tested-by: Chen Yu <yu.c.chen@intel.com>
(cherry picked from commit 8a02d99876362f35bc918097440445de18e3c47c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/acpi/cppc_acpi.h
diff --cc include/acpi/cppc_acpi.h
index af87e18572a8,9f4985b4d64d..000000000000
--- a/include/acpi/cppc_acpi.h
+++ b/include/acpi/cppc_acpi.h
@@@ -141,7 -138,49 +143,51 @@@ extern int cppc_get_desired_perf(int cp
  extern int cppc_get_perf_ctrs(int cpu, struct cppc_perf_fb_ctrs *perf_fb_ctrs);
  extern int cppc_set_perf(int cpu, struct cppc_perf_ctrls *perf_ctrls);
  extern int cppc_get_perf_caps(int cpu, struct cppc_perf_caps *caps);
 -extern bool acpi_cpc_valid(void);
 -extern int acpi_get_psd_map(unsigned int cpu, struct cppc_cpudata *cpu_data);
 +extern int acpi_get_psd_map(struct cppc_cpudata **);
  extern unsigned int cppc_get_transition_latency(int cpu);
++<<<<<<< HEAD
++=======
+ extern bool cpc_ffh_supported(void);
+ extern int cpc_read_ffh(int cpunum, struct cpc_reg *reg, u64 *val);
+ extern int cpc_write_ffh(int cpunum, struct cpc_reg *reg, u64 val);
+ #else /* !CONFIG_ACPI_CPPC_LIB */
+ static inline int cppc_get_desired_perf(int cpunum, u64 *desired_perf)
+ {
+ 	return -ENOTSUPP;
+ }
+ static inline int cppc_get_perf_ctrs(int cpu, struct cppc_perf_fb_ctrs *perf_fb_ctrs)
+ {
+ 	return -ENOTSUPP;
+ }
+ static inline int cppc_set_perf(int cpu, struct cppc_perf_ctrls *perf_ctrls)
+ {
+ 	return -ENOTSUPP;
+ }
+ static inline int cppc_get_perf_caps(int cpu, struct cppc_perf_caps *caps)
+ {
+ 	return -ENOTSUPP;
+ }
+ static inline bool acpi_cpc_valid(void)
+ {
+ 	return false;
+ }
+ static inline unsigned int cppc_get_transition_latency(int cpu)
+ {
+ 	return CPUFREQ_ETERNAL;
+ }
+ static inline bool cpc_ffh_supported(void)
+ {
+ 	return false;
+ }
+ static inline int cpc_read_ffh(int cpunum, struct cpc_reg *reg, u64 *val)
+ {
+ 	return -ENOTSUPP;
+ }
+ static inline int cpc_write_ffh(int cpunum, struct cpc_reg *reg, u64 val)
+ {
+ 	return -ENOTSUPP;
+ }
+ #endif /* !CONFIG_ACPI_CPPC_LIB */
++>>>>>>> 8a02d9987636 (ACPI: CPPC: Add emtpy stubs of functions for CONFIG_ACPI_CPPC_LIB unset)
  
  #endif /* _CPPC_ACPI_H*/
diff --git a/drivers/acpi/cppc_acpi.c b/drivers/acpi/cppc_acpi.c
index a7780a4cb9f0..675f14c6712d 100644
--- a/drivers/acpi/cppc_acpi.c
+++ b/drivers/acpi/cppc_acpi.c
@@ -37,7 +37,6 @@
 
 #define pr_fmt(fmt)	"ACPI CPPC: " fmt
 
-#include <linux/cpufreq.h>
 #include <linux/delay.h>
 #include <linux/iopoll.h>
 #include <linux/ktime.h>
* Unmerged path include/acpi/cppc_acpi.h
