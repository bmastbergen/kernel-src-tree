RDMA/core: Expose the ib port sysfs attribute machinery

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Jason Gunthorpe <jgg@nvidia.com>
commit 054239f45c6346025afe252fe6f470a4093f61f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/054239f4.failed

Other things outside the core code are creating attributes against the
port. This patch exposes the basic machinery to do this.

The ib_port_attribute type allows creating groups of attributes attatched
to the port and comes with the usual machinery to do this.

Link: https://lore.kernel.org/r/5c4aeae57f6fa7c59a1d6d1c5506069516ae9bbf.1623427137.git.leonro@nvidia.com
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 054239f45c6346025afe252fe6f470a4093f61f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/sysfs.c
diff --cc drivers/infiniband/core/sysfs.c
index 1ae9eecb09be,3c5541c39bf6..000000000000
--- a/drivers/infiniband/core/sysfs.c
+++ b/drivers/infiniband/core/sysfs.c
@@@ -44,57 -44,62 +44,111 @@@
  #include <rdma/ib_pma.h>
  #include <rdma/ib_cache.h>
  #include <rdma/rdma_counter.h>
++<<<<<<< HEAD
 +
 +struct ib_port;
 +
 +struct gid_attr_group {
 +	struct ib_port		*port;
 +	struct kobject		kobj;
 +	struct attribute_group	ndev;
 +	struct attribute_group	type;
 +};
 +struct ib_port {
 +	struct kobject         kobj;
 +	struct ib_device      *ibdev;
 +	struct gid_attr_group *gid_attr_group;
 +	struct attribute_group gid_group;
 +	struct attribute_group *pkey_group;
 +	const struct attribute_group *pma_table;
 +	struct attribute_group *hw_stats_ag;
 +	struct rdma_hw_stats   *hw_stats;
 +	u8                     port_num;
 +};
 +
 +struct port_attribute {
 +	struct attribute attr;
 +	ssize_t (*show)(struct ib_port *, struct port_attribute *, char *buf);
 +	ssize_t (*store)(struct ib_port *, struct port_attribute *,
 +			 const char *buf, size_t count);
 +};
 +
 +#define PORT_ATTR(_name, _mode, _show, _store) \
 +struct port_attribute port_attr_##_name = __ATTR(_name, _mode, _show, _store)
 +
 +#define PORT_ATTR_RO(_name) \
 +struct port_attribute port_attr_##_name = __ATTR_RO(_name)
++=======
+ #include <rdma/ib_sysfs.h>
++>>>>>>> 054239f45c63 (RDMA/core: Expose the ib port sysfs attribute machinery)
  
  struct port_table_attribute {
- 	struct port_attribute	attr;
+ 	struct ib_port_attribute attr;
  	char			name[8];
  	int			index;
  	__be16			attr_id;
  };
  
++<<<<<<< HEAD
 +struct hw_stats_attribute {
 +	struct attribute	attr;
 +	ssize_t			(*show)(struct kobject *kobj,
 +					struct attribute *attr, char *buf);
 +	ssize_t			(*store)(struct kobject *kobj,
 +					 struct attribute *attr,
 +					 const char *buf,
 +					 size_t count);
 +	int			index;
 +	u8			port_num;
++=======
+ struct gid_attr_group {
+ 	struct ib_port *port;
+ 	struct kobject kobj;
+ 	struct attribute_group groups[2];
+ 	const struct attribute_group *groups_list[3];
+ 	struct port_table_attribute attrs_list[];
+ };
+ 
+ struct ib_port {
+ 	struct kobject kobj;
+ 	struct ib_device *ibdev;
+ 	struct gid_attr_group *gid_attr_group;
+ 	struct hw_stats_port_data *hw_stats_data;
+ 
+ 	struct attribute_group groups[3];
+ 	const struct attribute_group *groups_list[5];
+ 	u32 port_num;
+ 	struct port_table_attribute attrs_list[];
+ };
+ 
+ struct hw_stats_device_attribute {
+ 	struct device_attribute attr;
+ 	ssize_t (*show)(struct ib_device *ibdev, struct rdma_hw_stats *stats,
+ 			unsigned int index, unsigned int port_num, char *buf);
+ 	ssize_t (*store)(struct ib_device *ibdev, struct rdma_hw_stats *stats,
+ 			 unsigned int index, unsigned int port_num,
+ 			 const char *buf, size_t count);
+ };
+ 
+ struct hw_stats_port_attribute {
+ 	struct ib_port_attribute attr;
+ 	ssize_t (*show)(struct ib_device *ibdev, struct rdma_hw_stats *stats,
+ 			unsigned int index, unsigned int port_num, char *buf);
+ 	ssize_t (*store)(struct ib_device *ibdev, struct rdma_hw_stats *stats,
+ 			 unsigned int index, unsigned int port_num,
+ 			 const char *buf, size_t count);
+ };
+ 
+ struct hw_stats_device_data {
+ 	struct attribute_group group;
+ 	struct rdma_hw_stats *stats;
+ 	struct hw_stats_device_attribute attrs[];
+ };
+ 
+ struct hw_stats_port_data {
+ 	struct rdma_hw_stats *stats;
+ 	struct hw_stats_port_attribute attrs[];
++>>>>>>> 054239f45c63 (RDMA/core: Expose the ib port sysfs attribute machinery)
  };
  
  static ssize_t port_attr_show(struct kobject *kobj,
@@@ -128,6 -159,55 +208,58 @@@ static const struct sysfs_ops port_sysf
  	.store	= port_attr_store
  };
  
++<<<<<<< HEAD
++=======
+ static ssize_t hw_stat_device_show(struct device *dev,
+ 				   struct device_attribute *attr, char *buf)
+ {
+ 	struct hw_stats_device_attribute *stat_attr =
+ 		container_of(attr, struct hw_stats_device_attribute, attr);
+ 	struct ib_device *ibdev = container_of(dev, struct ib_device, dev);
+ 
+ 	return stat_attr->show(ibdev, ibdev->hw_stats_data->stats,
+ 			       stat_attr - ibdev->hw_stats_data->attrs, 0, buf);
+ }
+ 
+ static ssize_t hw_stat_device_store(struct device *dev,
+ 				    struct device_attribute *attr,
+ 				    const char *buf, size_t count)
+ {
+ 	struct hw_stats_device_attribute *stat_attr =
+ 		container_of(attr, struct hw_stats_device_attribute, attr);
+ 	struct ib_device *ibdev = container_of(dev, struct ib_device, dev);
+ 
+ 	return stat_attr->store(ibdev, ibdev->hw_stats_data->stats,
+ 				stat_attr - ibdev->hw_stats_data->attrs, 0, buf,
+ 				count);
+ }
+ 
+ static ssize_t hw_stat_port_show(struct ib_device *ibdev, u32 port_num,
+ 				 struct ib_port_attribute *attr, char *buf)
+ {
+ 	struct hw_stats_port_attribute *stat_attr =
+ 		container_of(attr, struct hw_stats_port_attribute, attr);
+ 	struct ib_port *port = ibdev->port_data[port_num].sysfs;
+ 
+ 	return stat_attr->show(ibdev, port->hw_stats_data->stats,
+ 			       stat_attr - port->hw_stats_data->attrs,
+ 			       port->port_num, buf);
+ }
+ 
+ static ssize_t hw_stat_port_store(struct ib_device *ibdev, u32 port_num,
+ 				  struct ib_port_attribute *attr,
+ 				  const char *buf, size_t count)
+ {
+ 	struct hw_stats_port_attribute *stat_attr =
+ 		container_of(attr, struct hw_stats_port_attribute, attr);
+ 	struct ib_port *port = ibdev->port_data[port_num].sysfs;
+ 
+ 	return stat_attr->store(ibdev, port->hw_stats_data->stats,
+ 				stat_attr - port->hw_stats_data->attrs,
+ 				port->port_num, buf, count);
+ }
+ 
++>>>>>>> 054239f45c63 (RDMA/core: Expose the ib port sysfs attribute machinery)
  static ssize_t gid_attr_show(struct kobject *kobj,
  			     struct attribute *attr, char *buf)
  {
@@@ -165,13 -245,15 +297,13 @@@ static ssize_t state_show(struct ib_dev
  	if (ret)
  		return ret;
  
 -	return sysfs_emit(buf, "%d: %s\n", attr.state,
 -			  attr.state >= 0 &&
 -					  attr.state < ARRAY_SIZE(state_name) ?
 -				  state_name[attr.state] :
 -				  "UNKNOWN");
 +	return sprintf(buf, "%d: %s\n", attr.state,
 +		       attr.state >= 0 && attr.state < ARRAY_SIZE(state_name) ?
 +		       state_name[attr.state] : "UNKNOWN");
  }
  
- static ssize_t lid_show(struct ib_port *p, struct port_attribute *unused,
- 			char *buf)
+ static ssize_t lid_show(struct ib_device *ibdev, u32 port_num,
+ 			struct ib_port_attribute *unused, char *buf)
  {
  	struct ib_port_attr attr;
  	ssize_t ret;
@@@ -180,12 -262,11 +312,11 @@@
  	if (ret)
  		return ret;
  
 -	return sysfs_emit(buf, "0x%x\n", attr.lid);
 +	return sprintf(buf, "0x%x\n", attr.lid);
  }
  
- static ssize_t lid_mask_count_show(struct ib_port *p,
- 				   struct port_attribute *unused,
- 				   char *buf)
+ static ssize_t lid_mask_count_show(struct ib_device *ibdev, u32 port_num,
+ 				   struct ib_port_attribute *unused, char *buf)
  {
  	struct ib_port_attr attr;
  	ssize_t ret;
@@@ -194,11 -275,11 +325,11 @@@
  	if (ret)
  		return ret;
  
 -	return sysfs_emit(buf, "%d\n", attr.lmc);
 +	return sprintf(buf, "%d\n", attr.lmc);
  }
  
- static ssize_t sm_lid_show(struct ib_port *p, struct port_attribute *unused,
- 			   char *buf)
+ static ssize_t sm_lid_show(struct ib_device *ibdev, u32 port_num,
+ 			   struct ib_port_attribute *unused, char *buf)
  {
  	struct ib_port_attr attr;
  	ssize_t ret;
@@@ -207,11 -288,11 +338,11 @@@
  	if (ret)
  		return ret;
  
 -	return sysfs_emit(buf, "0x%x\n", attr.sm_lid);
 +	return sprintf(buf, "0x%x\n", attr.sm_lid);
  }
  
- static ssize_t sm_sl_show(struct ib_port *p, struct port_attribute *unused,
- 			  char *buf)
+ static ssize_t sm_sl_show(struct ib_device *ibdev, u32 port_num,
+ 			  struct ib_port_attribute *unused, char *buf)
  {
  	struct ib_port_attr attr;
  	ssize_t ret;
@@@ -220,11 -301,11 +351,11 @@@
  	if (ret)
  		return ret;
  
 -	return sysfs_emit(buf, "%d\n", attr.sm_sl);
 +	return sprintf(buf, "%d\n", attr.sm_sl);
  }
  
- static ssize_t cap_mask_show(struct ib_port *p, struct port_attribute *unused,
- 			     char *buf)
+ static ssize_t cap_mask_show(struct ib_device *ibdev, u32 port_num,
+ 			     struct ib_port_attribute *unused, char *buf)
  {
  	struct ib_port_attr attr;
  	ssize_t ret;
@@@ -233,11 -314,11 +364,11 @@@
  	if (ret)
  		return ret;
  
 -	return sysfs_emit(buf, "0x%08x\n", attr.port_cap_flags);
 +	return sprintf(buf, "0x%08x\n", attr.port_cap_flags);
  }
  
- static ssize_t rate_show(struct ib_port *p, struct port_attribute *unused,
- 			 char *buf)
+ static ssize_t rate_show(struct ib_device *ibdev, u32 port_num,
+ 			 struct ib_port_attribute *unused, char *buf)
  {
  	struct ib_port_attr attr;
  	char *speed = "";
@@@ -322,43 -403,50 +453,49 @@@ static ssize_t phys_state_show(struct i
  	if (ret)
  		return ret;
  
 -	return sysfs_emit(buf, "%d: %s\n", attr.phys_state,
 -			  phys_state_to_str(attr.phys_state));
 +	return sprintf(buf, "%d: %s\n", attr.phys_state,
 +		       phys_state_to_str(attr.phys_state));
  }
  
- static ssize_t link_layer_show(struct ib_port *p, struct port_attribute *unused,
- 			       char *buf)
+ static ssize_t link_layer_show(struct ib_device *ibdev, u32 port_num,
+ 			       struct ib_port_attribute *unused, char *buf)
  {
++<<<<<<< HEAD
 +	switch (rdma_port_get_link_layer(p->ibdev, p->port_num)) {
++=======
+ 	const char *output;
+ 
+ 	switch (rdma_port_get_link_layer(ibdev, port_num)) {
++>>>>>>> 054239f45c63 (RDMA/core: Expose the ib port sysfs attribute machinery)
  	case IB_LINK_LAYER_INFINIBAND:
 -		output = "InfiniBand";
 -		break;
 +		return sprintf(buf, "%s\n", "InfiniBand");
  	case IB_LINK_LAYER_ETHERNET:
 -		output = "Ethernet";
 -		break;
 +		return sprintf(buf, "%s\n", "Ethernet");
  	default:
 -		output = "Unknown";
 -		break;
 +		return sprintf(buf, "%s\n", "Unknown");
  	}
 -
 -	return sysfs_emit(buf, "%s\n", output);
  }
  
- static PORT_ATTR_RO(state);
- static PORT_ATTR_RO(lid);
- static PORT_ATTR_RO(lid_mask_count);
- static PORT_ATTR_RO(sm_lid);
- static PORT_ATTR_RO(sm_sl);
- static PORT_ATTR_RO(cap_mask);
- static PORT_ATTR_RO(rate);
- static PORT_ATTR_RO(phys_state);
- static PORT_ATTR_RO(link_layer);
+ static IB_PORT_ATTR_RO(state);
+ static IB_PORT_ATTR_RO(lid);
+ static IB_PORT_ATTR_RO(lid_mask_count);
+ static IB_PORT_ATTR_RO(sm_lid);
+ static IB_PORT_ATTR_RO(sm_sl);
+ static IB_PORT_ATTR_RO(cap_mask);
+ static IB_PORT_ATTR_RO(rate);
+ static IB_PORT_ATTR_RO(phys_state);
+ static IB_PORT_ATTR_RO(link_layer);
  
  static struct attribute *port_default_attrs[] = {
- 	&port_attr_state.attr,
- 	&port_attr_lid.attr,
- 	&port_attr_lid_mask_count.attr,
- 	&port_attr_sm_lid.attr,
- 	&port_attr_sm_sl.attr,
- 	&port_attr_cap_mask.attr,
- 	&port_attr_rate.attr,
- 	&port_attr_phys_state.attr,
- 	&port_attr_link_layer.attr,
+ 	&ib_port_attr_state.attr,
+ 	&ib_port_attr_lid.attr,
+ 	&ib_port_attr_lid_mask_count.attr,
+ 	&ib_port_attr_sm_lid.attr,
+ 	&ib_port_attr_sm_sl.attr,
+ 	&ib_port_attr_cap_mask.attr,
+ 	&ib_port_attr_rate.attr,
+ 	&ib_port_attr_phys_state.attr,
+ 	&ib_port_attr_link_layer.attr,
  	NULL
  };
  
@@@ -381,8 -470,9 +518,14 @@@ static size_t print_gid_type(const stru
  }
  
  static ssize_t _show_port_gid_attr(
++<<<<<<< HEAD
 +	struct ib_port *p, struct port_attribute *attr, char *buf,
 +	size_t (*print)(const struct ib_gid_attr *gid_attr, char *buf))
++=======
+ 	struct ib_device *ibdev, u32 port_num, struct ib_port_attribute *attr,
+ 	char *buf,
+ 	ssize_t (*print)(const struct ib_gid_attr *gid_attr, char *buf))
++>>>>>>> 054239f45c63 (RDMA/core: Expose the ib port sysfs attribute machinery)
  {
  	struct port_table_attribute *tab_attr =
  		container_of(attr, struct port_table_attribute, attr);
@@@ -405,9 -495,9 +548,9 @@@ static ssize_t show_port_gid(struct ib_
  	struct port_table_attribute *tab_attr =
  		container_of(attr, struct port_table_attribute, attr);
  	const struct ib_gid_attr *gid_attr;
 -	int len;
 +	ssize_t ret;
  
- 	gid_attr = rdma_get_gid_attr(p->ibdev, p->port_num, tab_attr->index);
+ 	gid_attr = rdma_get_gid_attr(ibdev, port_num, tab_attr->index);
  	if (IS_ERR(gid_attr)) {
  		const union ib_gid zgid = {};
  
@@@ -420,36 -510,38 +563,38 @@@
  		 * space throwing such error on fail to read gid, return zero
  		 * GID as before. This maintains backward compatibility.
  		 */
 -		return sysfs_emit(buf, "%pI6\n", zgid.raw);
 +		return sprintf(buf, "%pI6\n", zgid.raw);
  	}
  
 -	len = sysfs_emit(buf, "%pI6\n", gid_attr->gid.raw);
 +	ret = sprintf(buf, "%pI6\n", gid_attr->gid.raw);
  	rdma_put_gid_attr(gid_attr);
 -	return len;
 +	return ret;
  }
  
- static ssize_t show_port_gid_attr_ndev(struct ib_port *p,
- 				       struct port_attribute *attr, char *buf)
+ static ssize_t show_port_gid_attr_ndev(struct ib_device *ibdev, u32 port_num,
+ 				       struct ib_port_attribute *attr,
+ 				       char *buf)
  {
- 	return _show_port_gid_attr(p, attr, buf, print_ndev);
+ 	return _show_port_gid_attr(ibdev, port_num, attr, buf, print_ndev);
  }
  
- static ssize_t show_port_gid_attr_gid_type(struct ib_port *p,
- 					   struct port_attribute *attr,
+ static ssize_t show_port_gid_attr_gid_type(struct ib_device *ibdev,
+ 					   u32 port_num,
+ 					   struct ib_port_attribute *attr,
  					   char *buf)
  {
- 	return _show_port_gid_attr(p, attr, buf, print_gid_type);
+ 	return _show_port_gid_attr(ibdev, port_num, attr, buf, print_gid_type);
  }
  
- static ssize_t show_port_pkey(struct ib_port *p, struct port_attribute *attr,
- 			      char *buf)
+ static ssize_t show_port_pkey(struct ib_device *ibdev, u32 port_num,
+ 			      struct ib_port_attribute *attr, char *buf)
  {
  	struct port_table_attribute *tab_attr =
  		container_of(attr, struct port_table_attribute, attr);
  	u16 pkey;
 -	int ret;
 +	ssize_t ret;
  
- 	ret = ib_query_pkey(p->ibdev, p->port_num, tab_attr->index, &pkey);
+ 	ret = ib_query_pkey(ibdev, port_num, tab_attr->index, &pkey);
  	if (ret)
  		return ret;
  
@@@ -525,10 -617,11 +670,10 @@@ static ssize_t show_pma_counter(struct 
  		container_of(attr, struct port_table_attribute, attr);
  	int offset = tab_attr->index & 0xffff;
  	int width  = (tab_attr->index >> 16) & 0xff;
 -	int ret;
 +	ssize_t ret;
  	u8 data[8];
 -	int len;
  
- 	ret = get_perf_mad(p->ibdev, p->port_num, tab_attr->attr_id, &data,
+ 	ret = get_perf_mad(ibdev, port_num, tab_attr->attr_id, &data,
  			40 + offset / 8, sizeof(data));
  	if (ret < 0)
  		return ret;
@@@ -1044,12 -1087,117 +1189,120 @@@ err_free_stats
  struct rdma_hw_stats *ib_get_hw_stats_port(struct ib_device *ibdev,
  					   u32 port_num)
  {
 -	if (!ibdev->port_data || !rdma_is_port_valid(ibdev, port_num) ||
 -	    !ibdev->port_data[port_num].sysfs->hw_stats_data)
 +	if (!ibdev->port_data || !rdma_is_port_valid(ibdev, port_num))
  		return NULL;
 -	return ibdev->port_data[port_num].sysfs->hw_stats_data->stats;
 +	return ibdev->port_data[port_num].sysfs->hw_stats;
  }
  
++<<<<<<< HEAD
 +static int add_port(struct ib_core_device *coredev, int port_num)
++=======
+ static int
+ alloc_port_table_group(const char *name, struct attribute_group *group,
+ 		       struct port_table_attribute *attrs, size_t num,
+ 		       ssize_t (*show)(struct ib_device *ibdev, u32 port_num,
+ 				       struct ib_port_attribute *, char *buf))
+ {
+ 	struct attribute **attr_list;
+ 	int i;
+ 
+ 	attr_list = kcalloc(num + 1, sizeof(*attr_list), GFP_KERNEL);
+ 	if (!attr_list)
+ 		return -ENOMEM;
+ 
+ 	for (i = 0; i < num; i++) {
+ 		struct port_table_attribute *element = &attrs[i];
+ 
+ 		if (snprintf(element->name, sizeof(element->name), "%d", i) >=
+ 		    sizeof(element->name))
+ 			goto err;
+ 
+ 		sysfs_attr_init(&element->attr.attr);
+ 		element->attr.attr.name = element->name;
+ 		element->attr.attr.mode = 0444;
+ 		element->attr.show = show;
+ 		element->index = i;
+ 
+ 		attr_list[i] = &element->attr.attr;
+ 	}
+ 	group->name = name;
+ 	group->attrs = attr_list;
+ 	return 0;
+ err:
+ 	kfree(attr_list);
+ 	return -EINVAL;
+ }
+ 
+ /*
+  * Create the sysfs:
+  *  ibp0s9/ports/XX/gid_attrs/{ndevs,types}/YYY
+  * YYY is the gid table index in decimal
+  */
+ static int setup_gid_attrs(struct ib_port *port,
+ 			   const struct ib_port_attr *attr)
+ {
+ 	struct gid_attr_group *gid_attr_group;
+ 	int ret;
+ 
+ 	gid_attr_group = kzalloc(struct_size(gid_attr_group, attrs_list,
+ 					     attr->gid_tbl_len * 2),
+ 				 GFP_KERNEL);
+ 	if (!gid_attr_group)
+ 		return -ENOMEM;
+ 	gid_attr_group->port = port;
+ 	kobject_init(&gid_attr_group->kobj, &gid_attr_type);
+ 
+ 	ret = alloc_port_table_group("ndevs", &gid_attr_group->groups[0],
+ 				     gid_attr_group->attrs_list,
+ 				     attr->gid_tbl_len,
+ 				     show_port_gid_attr_ndev);
+ 	if (ret)
+ 		goto err_put;
+ 	gid_attr_group->groups_list[0] = &gid_attr_group->groups[0];
+ 
+ 	ret = alloc_port_table_group(
+ 		"types", &gid_attr_group->groups[1],
+ 		gid_attr_group->attrs_list + attr->gid_tbl_len,
+ 		attr->gid_tbl_len, show_port_gid_attr_gid_type);
+ 	if (ret)
+ 		goto err_put;
+ 	gid_attr_group->groups_list[1] = &gid_attr_group->groups[1];
+ 
+ 	ret = kobject_add(&gid_attr_group->kobj, &port->kobj, "gid_attrs");
+ 	if (ret)
+ 		goto err_put;
+ 	ret = sysfs_create_groups(&gid_attr_group->kobj,
+ 				  gid_attr_group->groups_list);
+ 	if (ret)
+ 		goto err_del;
+ 	port->gid_attr_group = gid_attr_group;
+ 	return 0;
+ 
+ err_del:
+ 	kobject_del(&gid_attr_group->kobj);
+ err_put:
+ 	kobject_put(&gid_attr_group->kobj);
+ 	return ret;
+ }
+ 
+ static void destroy_gid_attrs(struct ib_port *port)
+ {
+ 	struct gid_attr_group *gid_attr_group = port->gid_attr_group;
+ 
+ 	if (!gid_attr_group)
+ 		return;
+ 	sysfs_remove_groups(&gid_attr_group->kobj, gid_attr_group->groups_list);
+ 	kobject_del(&gid_attr_group->kobj);
+ 	kobject_put(&gid_attr_group->kobj);
+ }
+ 
+ /*
+  * Create the sysfs:
+  *  ibp0s9/ports/XX/{gids,pkeys,counters}/YYY
+  */
+ static struct ib_port *setup_port(struct ib_core_device *coredev, int port_num,
+ 				  const struct ib_port_attr *attr)
++>>>>>>> 054239f45c63 (RDMA/core: Expose the ib port sysfs attribute machinery)
  {
  	struct ib_device *device = rdma_device_to_ibdev(&coredev->dev);
  	bool is_full_dev = &device->coredev == coredev;
* Unmerged path drivers/infiniband/core/sysfs.c
diff --git a/include/rdma/ib_sysfs.h b/include/rdma/ib_sysfs.h
new file mode 100644
index 000000000000..f869d0e4fd30
--- /dev/null
+++ b/include/rdma/ib_sysfs.h
@@ -0,0 +1,41 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause */
+/*
+ * Copyright (c) 2021 Mellanox Technologies Ltd.  All rights reserved.
+ */
+#ifndef DEF_RDMA_IB_SYSFS_H
+#define DEF_RDMA_IB_SYSFS_H
+
+#include <linux/sysfs.h>
+
+struct ib_device;
+
+struct ib_port_attribute {
+	struct attribute attr;
+	ssize_t (*show)(struct ib_device *ibdev, u32 port_num,
+			struct ib_port_attribute *attr, char *buf);
+	ssize_t (*store)(struct ib_device *ibdev, u32 port_num,
+			 struct ib_port_attribute *attr, const char *buf,
+			 size_t count);
+};
+
+#define IB_PORT_ATTR_RW(_name)                                                 \
+	struct ib_port_attribute ib_port_attr_##_name = __ATTR_RW(_name)
+
+#define IB_PORT_ATTR_ADMIN_RW(_name)                                           \
+	struct ib_port_attribute ib_port_attr_##_name =                        \
+		__ATTR_RW_MODE(_name, 0600)
+
+#define IB_PORT_ATTR_RO(_name)                                                 \
+	struct ib_port_attribute ib_port_attr_##_name = __ATTR_RO(_name)
+
+#define IB_PORT_ATTR_WO(_name)                                                 \
+	struct ib_port_attribute ib_port_attr_##_name = __ATTR_WO(_name)
+
+int ib_port_sysfs_create_groups(struct ib_device *ibdev, u32 port_num,
+				const struct attribute_group **groups);
+void ib_port_sysfs_remove_groups(struct ib_device *ibdev, u32 port_num,
+				 const struct attribute_group **groups);
+struct ib_device *ib_port_sysfs_get_ibdev_kobj(struct kobject *kobj,
+					       u32 *port_num);
+
+#endif
