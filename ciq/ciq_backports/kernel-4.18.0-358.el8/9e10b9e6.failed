net: bridge: multicast: rename src_size to addr_size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Nikolay Aleksandrov <nikolay@nvidia.com>
commit 9e10b9e65699394bae44429dc2958132738736a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/9e10b9e6.failed

Rename src_size argument to addr_size in preparation for passing host
address as an argument to IGMPv3/MLDv2 functions.
No functional change.

	Signed-off-by: Nikolay Aleksandrov <nikolay@nvidia.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 9e10b9e65699394bae44429dc2958132738736a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_multicast.c
diff --cc net/bridge/br_multicast.c
index 6cf87c6c3626,3ae2cef6f7ec..000000000000
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@@ -1393,9 -1800,9 +1393,9 @@@ static void __grp_send_query_and_rexmit
   * EXCLUDE (X,Y)  ALLOW (A)     EXCLUDE (X+A,Y-A)        (A)=GMI
   */
  static bool br_multicast_isinc_allow(struct net_bridge_port_group *pg,
- 				     void *srcs, u32 nsrcs, size_t src_size)
+ 				     void *srcs, u32 nsrcs, size_t addr_size)
  {
 -	struct net_bridge *br = pg->key.port->br;
 +	struct net_bridge *br = pg->port->br;
  	struct net_bridge_group_src *ent;
  	unsigned long now = jiffies;
  	bool changed = false;
@@@ -1403,9 -1810,9 +1403,9 @@@
  	u32 src_idx;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (!ent) {
  			ent = br_multicast_new_group_src(pg, &src_ip);
@@@ -1414,8 -1821,8 +1414,13 @@@
  		}
  
  		if (ent)
++<<<<<<< HEAD
 +			mod_timer(&ent->timer, now + br_multicast_gmi(br));
 +		srcs += src_size;
++=======
+ 			__grp_src_mod_timer(ent, now + br_multicast_gmi(br));
+ 		srcs += addr_size;
++>>>>>>> 9e10b9e65699 (net: bridge: multicast: rename src_size to addr_size)
  	}
  
  	return changed;
@@@ -1437,15 -1844,17 +1442,22 @@@ static void __grp_src_isexc_incl(struc
  		ent->flags |= BR_SGRP_F_DELETE;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (ent)
  			ent->flags &= ~BR_SGRP_F_DELETE;
  		else
++<<<<<<< HEAD
 +			br_multicast_new_group_src(pg, &src_ip);
 +		srcs += src_size;
++=======
+ 			ent = br_multicast_new_group_src(pg, &src_ip);
+ 		if (ent)
+ 			br_multicast_fwd_src_handle(ent);
+ 		srcs += addr_size;
++>>>>>>> 9e10b9e65699 (net: bridge: multicast: rename src_size to addr_size)
  	}
  
  	__grp_src_delete_marked(pg);
@@@ -1458,9 -1867,9 +1470,9 @@@
   *                                                       Group Timer=GMI
   */
  static bool __grp_src_isexc_excl(struct net_bridge_port_group *pg,
- 				 void *srcs, u32 nsrcs, size_t src_size)
+ 				 void *srcs, u32 nsrcs, size_t addr_size)
  {
 -	struct net_bridge *br = pg->key.port->br;
 +	struct net_bridge *br = pg->port->br;
  	struct net_bridge_group_src *ent;
  	unsigned long now = jiffies;
  	bool changed = false;
@@@ -1471,9 -1880,9 +1483,9 @@@
  		ent->flags |= BR_SGRP_F_DELETE;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (ent) {
  			ent->flags &= ~BR_SGRP_F_DELETE;
@@@ -1495,14 -1904,15 +1507,19 @@@
  }
  
  static bool br_multicast_isexc(struct net_bridge_port_group *pg,
- 			       void *srcs, u32 nsrcs, size_t src_size)
+ 			       void *srcs, u32 nsrcs, size_t addr_size)
  {
 -	struct net_bridge *br = pg->key.port->br;
 +	struct net_bridge *br = pg->port->br;
  	bool changed = false;
  
  	switch (pg->filter_mode) {
  	case MCAST_INCLUDE:
++<<<<<<< HEAD
 +		__grp_src_isexc_incl(pg, srcs, nsrcs, src_size);
++=======
+ 		__grp_src_isexc_incl(pg, srcs, nsrcs, addr_size);
+ 		br_multicast_star_g_handle_mode(pg, MCAST_EXCLUDE);
++>>>>>>> 9e10b9e65699 (net: bridge: multicast: rename src_size to addr_size)
  		changed = true;
  		break;
  	case MCAST_EXCLUDE:
@@@ -1521,9 -1931,9 +1538,9 @@@
   *                                                       Send Q(G,A-B)
   */
  static bool __grp_src_toin_incl(struct net_bridge_port_group *pg,
- 				void *srcs, u32 nsrcs, size_t src_size)
+ 				void *srcs, u32 nsrcs, size_t addr_size)
  {
 -	struct net_bridge *br = pg->key.port->br;
 +	struct net_bridge *br = pg->port->br;
  	u32 src_idx, to_send = pg->src_ents;
  	struct net_bridge_group_src *ent;
  	unsigned long now = jiffies;
@@@ -1534,9 -1944,9 +1551,9 @@@
  		ent->flags |= BR_SGRP_F_SEND;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (ent) {
  			ent->flags &= ~BR_SGRP_F_SEND;
@@@ -1547,8 -1957,8 +1564,13 @@@
  				changed = true;
  		}
  		if (ent)
++<<<<<<< HEAD
 +			mod_timer(&ent->timer, now + br_multicast_gmi(br));
 +		srcs += src_size;
++=======
+ 			__grp_src_mod_timer(ent, now + br_multicast_gmi(br));
+ 		srcs += addr_size;
++>>>>>>> 9e10b9e65699 (net: bridge: multicast: rename src_size to addr_size)
  	}
  
  	if (to_send)
@@@ -1563,9 -1973,9 +1585,9 @@@
   *                                                       Send Q(G)
   */
  static bool __grp_src_toin_excl(struct net_bridge_port_group *pg,
- 				void *srcs, u32 nsrcs, size_t src_size)
+ 				void *srcs, u32 nsrcs, size_t addr_size)
  {
 -	struct net_bridge *br = pg->key.port->br;
 +	struct net_bridge *br = pg->port->br;
  	u32 src_idx, to_send = pg->src_ents;
  	struct net_bridge_group_src *ent;
  	unsigned long now = jiffies;
@@@ -1577,9 -1987,9 +1599,9 @@@
  			ent->flags |= BR_SGRP_F_SEND;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (ent) {
  			if (timer_pending(&ent->timer)) {
@@@ -1592,8 -2002,8 +1614,13 @@@
  				changed = true;
  		}
  		if (ent)
++<<<<<<< HEAD
 +			mod_timer(&ent->timer, now + br_multicast_gmi(br));
 +		srcs += src_size;
++=======
+ 			__grp_src_mod_timer(ent, now + br_multicast_gmi(br));
+ 		srcs += addr_size;
++>>>>>>> 9e10b9e65699 (net: bridge: multicast: rename src_size to addr_size)
  	}
  
  	if (to_send)
@@@ -1638,18 -2048,20 +1665,24 @@@ static void __grp_src_toex_incl(struct 
  		ent->flags = (ent->flags & ~BR_SGRP_F_SEND) | BR_SGRP_F_DELETE;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (ent) {
  			ent->flags = (ent->flags & ~BR_SGRP_F_DELETE) |
  				     BR_SGRP_F_SEND;
  			to_send++;
  		} else {
 -			ent = br_multicast_new_group_src(pg, &src_ip);
 +			br_multicast_new_group_src(pg, &src_ip);
  		}
++<<<<<<< HEAD
 +		srcs += src_size;
++=======
+ 		if (ent)
+ 			br_multicast_fwd_src_handle(ent);
+ 		srcs += addr_size;
++>>>>>>> 9e10b9e65699 (net: bridge: multicast: rename src_size to addr_size)
  	}
  
  	__grp_src_delete_marked(pg);
@@@ -1676,9 -2088,9 +1709,9 @@@ static bool __grp_src_toex_excl(struct 
  		ent->flags = (ent->flags & ~BR_SGRP_F_SEND) | BR_SGRP_F_DELETE;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (ent) {
  			ent->flags &= ~BR_SGRP_F_DELETE;
@@@ -1705,14 -2117,15 +1738,19 @@@
  }
  
  static bool br_multicast_toex(struct net_bridge_port_group *pg,
- 			      void *srcs, u32 nsrcs, size_t src_size)
+ 			      void *srcs, u32 nsrcs, size_t addr_size)
  {
 -	struct net_bridge *br = pg->key.port->br;
 +	struct net_bridge *br = pg->port->br;
  	bool changed = false;
  
  	switch (pg->filter_mode) {
  	case MCAST_INCLUDE:
++<<<<<<< HEAD
 +		__grp_src_toex_incl(pg, srcs, nsrcs, src_size);
++=======
+ 		__grp_src_toex_incl(pg, srcs, nsrcs, addr_size);
+ 		br_multicast_star_g_handle_mode(pg, MCAST_EXCLUDE);
++>>>>>>> 9e10b9e65699 (net: bridge: multicast: rename src_size to addr_size)
  		changed = true;
  		break;
  	case MCAST_EXCLUDE:
@@@ -1740,9 -2153,9 +1778,9 @@@ static void __grp_src_block_incl(struc
  		ent->flags &= ~BR_SGRP_F_SEND;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (ent) {
  			ent->flags |= BR_SGRP_F_SEND;
@@@ -1774,9 -2187,9 +1812,9 @@@ static bool __grp_src_block_excl(struc
  		ent->flags &= ~BR_SGRP_F_SEND;
  
  	memset(&src_ip, 0, sizeof(src_ip));
 -	src_ip.proto = pg->key.addr.proto;
 +	src_ip.proto = pg->addr.proto;
  	for (src_idx = 0; src_idx < nsrcs; src_idx++) {
- 		memcpy(&src_ip.src, srcs, src_size);
+ 		memcpy(&src_ip.src, srcs, addr_size);
  		ent = br_multicast_find_group_src(pg, &src_ip);
  		if (!ent) {
  			ent = br_multicast_new_group_src(pg, &src_ip);
* Unmerged path net/bridge/br_multicast.c
