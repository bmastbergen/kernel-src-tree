x86: ACPI: cstate: Optimize C3 entry on AMD CPUs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Deepak Sharma <deepak.sharma@amd.com>
commit a8fb40966f19ff81520d9ccf8f7e2b95201368b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a8fb4096.failed

All Zen or newer CPU which support C3 shares cache. Its not necessary to
flush the caches in software before entering C3. This will cause drop in
performance for the cores which share some caches. ARB_DIS is not used
with current AMD C state implementation. So set related flags correctly.

	Signed-off-by: Deepak Sharma <deepak.sharma@amd.com>
	Acked-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit a8fb40966f19ff81520d9ccf8f7e2b95201368b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/acpi/cstate.c
diff --cc arch/x86/kernel/acpi/cstate.c
index 596e7640d895,7945eae5b315..000000000000
--- a/arch/x86/kernel/acpi/cstate.c
+++ b/arch/x86/kernel/acpi/cstate.c
@@@ -51,6 -52,48 +51,51 @@@ void acpi_processor_power_init_bm_check
  	if (c->x86_vendor == X86_VENDOR_INTEL &&
  	    (c->x86 > 0xf || (c->x86 == 6 && c->x86_model >= 0x0f)))
  			flags->bm_control = 0;
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * For all recent Centaur CPUs, the ucode will make sure that each
+ 	 * core can keep cache coherence with each other while entering C3
+ 	 * type state. So, set bm_check to 1 to indicate that the kernel
+ 	 * doesn't need to execute a cache flush operation (WBINVD) when
+ 	 * entering C3 type state.
+ 	 */
+ 	if (c->x86_vendor == X86_VENDOR_CENTAUR) {
+ 		if (c->x86 > 6 || (c->x86 == 6 && c->x86_model == 0x0f &&
+ 		    c->x86_stepping >= 0x0e))
+ 			flags->bm_check = 1;
+ 	}
+ 
+ 	if (c->x86_vendor == X86_VENDOR_ZHAOXIN) {
+ 		/*
+ 		 * All Zhaoxin CPUs that support C3 share cache.
+ 		 * And caches should not be flushed by software while
+ 		 * entering C3 type state.
+ 		 */
+ 		flags->bm_check = 1;
+ 		/*
+ 		 * On all recent Zhaoxin platforms, ARB_DISABLE is a nop.
+ 		 * So, set bm_control to zero to indicate that ARB_DISABLE
+ 		 * is not required while entering C3 type state.
+ 		 */
+ 		flags->bm_control = 0;
+ 	}
+ 	if (c->x86_vendor == X86_VENDOR_AMD && c->x86 >= 0x17) {
+ 		/*
+ 		 * For all AMD Zen or newer CPUs that support C3, caches
+ 		 * should not be flushed by software while entering C3
+ 		 * type state. Set bm->check to 1 so that kernel doesn't
+ 		 * need to execute cache flush operation.
+ 		 */
+ 		flags->bm_check = 1;
+ 		/*
+ 		 * In current AMD C state implementation ARB_DIS is no longer
+ 		 * used. So set bm_control to zero to indicate ARB_DIS is not
+ 		 * required while entering C3 type state.
+ 		 */
+ 		flags->bm_control = 0;
+ 	}
++>>>>>>> a8fb40966f19 (x86: ACPI: cstate: Optimize C3 entry on AMD CPUs)
  }
  EXPORT_SYMBOL(acpi_processor_power_init_bm_check);
  
* Unmerged path arch/x86/kernel/acpi/cstate.c
