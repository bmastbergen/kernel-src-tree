arm64: kaslr: Use standard early random function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Guenter Roeck <linux@roeck-us.net>
commit 9bceb80b3cc483e6763c39a4928402fa82815d3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/9bceb80b.failed

Commit 585524081ecd ("random: random.h should include archrandom.h, not
the other way around") tries to fix a problem with recursive inclusion
of linux/random.h and arch/archrandom.h for arm64.  Unfortunately, this
results in the following compile error if ARCH_RANDOM is disabled.

  arch/arm64/kernel/kaslr.c: In function 'kaslr_early_init':
  arch/arm64/kernel/kaslr.c:128:6: error: implicit declaration of function '__early_cpu_has_rndr'; did you mean '__early_pfn_to_nid'? [-Werror=implicit-function-declaration]
    if (__early_cpu_has_rndr()) {
        ^~~~~~~~~~~~~~~~~~~~
        __early_pfn_to_nid
  arch/arm64/kernel/kaslr.c:131:7: error: implicit declaration of function '__arm64_rndr' [-Werror=implicit-function-declaration]
     if (__arm64_rndr(&raw))
         ^~~~~~~~~~~~

The problem is that arch/archrandom.h is only included from
linux/random.h if ARCH_RANDOM is enabled.  If not, __arm64_rndr() and
__early_cpu_has_rndr() are undeclared, causing the problem.

Use arch_get_random_seed_long_early() instead of arm64 specific
functions to solve the problem.

	Reported-by: Qian Cai <cai@lca.pw>
Fixes: 585524081ecd ("random: random.h should include archrandom.h, not the other way around")
	Cc: Qian Cai <cai@lca.pw>
	Cc: Mark Brown <broonie@kernel.org>
	Reviewed-by: Mark Rutland <mark.rutland@arm.com>
	Reviewed-by: Mark Brown <broonie@kernel.org>
	Tested-by: Mark Brown <broonie@kernel.org>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9bceb80b3cc483e6763c39a4928402fa82815d3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/kaslr.c
diff --cc arch/arm64/kernel/kaslr.c
index a3b053f0f5b8,b181e0544b79..000000000000
--- a/arch/arm64/kernel/kaslr.c
+++ b/arch/arm64/kernel/kaslr.c
@@@ -114,8 -117,23 +115,25 @@@ u64 __init kaslr_early_init(u64 dt_phys
  	 */
  	cmdline = kaslr_get_cmdline(fdt);
  	str = strstr(cmdline, "nokaslr");
 -	if (str == cmdline || (str > cmdline && *(str - 1) == ' ')) {
 -		kaslr_status = KASLR_DISABLED_CMDLINE;
 +	if (str == cmdline || (str > cmdline && *(str - 1) == ' '))
  		return 0;
++<<<<<<< HEAD
++=======
+ 	}
+ 
+ 	/*
+ 	 * Mix in any entropy obtainable architecturally if enabled
+ 	 * and supported.
+ 	 */
+ 
+ 	if (arch_get_random_seed_long_early(&raw))
+ 		seed ^= raw;
+ 
+ 	if (!seed) {
+ 		kaslr_status = KASLR_DISABLED_NO_SEED;
+ 		return 0;
+ 	}
++>>>>>>> 9bceb80b3cc4 (arm64: kaslr: Use standard early random function)
  
  	/*
  	 * OK, so we are proceeding with KASLR enabled. Calculate a suitable
* Unmerged path arch/arm64/kernel/kaslr.c
