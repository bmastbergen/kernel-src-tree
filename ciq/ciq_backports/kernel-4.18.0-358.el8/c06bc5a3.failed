block/mq-deadline: Remove a WARN_ON_ONCE() call

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit c06bc5a3fb42304d815a2dc41e324b5a97c9f7da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/c06bc5a3.failed

The purpose of the WARN_ON_ONCE() statement in dd_insert_request() is to
verify that dd_prepare_request() cleared rq->elv.priv[0]. Since
dd_prepare_request() is called during request initialization but not if a
request is requeued, a warning is triggered if a request is requeued. Fix
this by removing the WARN_ON_ONCE() statement. This patch suppresses the
following kernel warning:

WARNING: CPU: 28 PID: 432 at block/mq-deadline-main.c:740 dd_insert_request+0x4d4/0x5b0
Workqueue: kblockd blk_mq_requeue_work
Call Trace:
 dd_insert_requests+0xfa/0x130
 blk_mq_sched_insert_request+0x22c/0x240
 blk_mq_requeue_work+0x21c/0x2d0
 process_one_work+0x4c2/0xa70
 worker_thread+0x2e5/0x6d0
 kthread+0x21c/0x250
 ret_from_fork+0x1f/0x30

	Reported-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
Fixes: 08a9ad8bf607 ("block/mq-deadline: Add cgroup support")
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
Link: https://lore.kernel.org/r/20210627211112.12720-1-bvanassche@acm.org
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit c06bc5a3fb42304d815a2dc41e324b5a97c9f7da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/mq-deadline.c
diff --cc block/mq-deadline.c
index 19fd637b8c25,6f612e6dc82b..000000000000
--- a/block/mq-deadline.c
+++ b/block/mq-deadline.c
@@@ -694,13 -729,25 +694,19 @@@ static void dd_insert_request(struct bl
  	 */
  	blk_req_zone_write_unlock(rq);
  
 -	/*
 -	 * If a block cgroup has been associated with the submitter and if an
 -	 * I/O priority has been set in the associated block cgroup, use the
 -	 * lowest of the cgroup priority and the request priority for the
 -	 * request. If no priority has been set in the request, use the cgroup
 -	 * priority.
 -	 */
  	prio = ioprio_class_to_prio[ioprio_class];
  	dd_count(dd, inserted, prio);
++<<<<<<< HEAD:block/mq-deadline.c
++=======
+ 	blkcg = dd_blkcg_from_bio(rq->bio);
+ 	ddcg_count(blkcg, inserted, ioprio_class);
+ 	rq->elv.priv[0] = blkcg;
++>>>>>>> c06bc5a3fb42 (block/mq-deadline: Remove a WARN_ON_ONCE() call):block/mq-deadline-main.c
  
 -	if (blk_mq_sched_try_insert_merge(q, rq, &free)) {
 -		blk_mq_free_requests(&free);
 +	if (blk_mq_sched_try_insert_merge(q, rq))
  		return;
 -	}
  
 -	trace_block_rq_insert(rq);
 +	blk_mq_sched_request_inserted(rq);
  
  	per_prio = &dd->per_prio[prio];
  	if (at_head) {
* Unmerged path block/mq-deadline.c
