iommu/amd: Tidy up DMA ops init

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Robin Murphy <robin.murphy@arm.com>
commit be227f8e99a663d097536e9f9bc935fb26bdbc41
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/be227f8e.failed

Now that DMA ops are part of the core API via iommu-dma, fold the
vestigial remains of the IOMMU_DMA_OPS init state into the IOMMU API
phase, and clean up a few other leftovers. This should also close the
race window wherein bus_set_iommu() effectively makes the DMA ops state
visible before its nominal initialisation - it seems this was previously
fairly benign, but since commit a250c23f15c2 ("iommu: remove
DOMAIN_ATTR_DMA_USE_FLUSH_QUEUE") it can now lead to the strict flush
queue policy inadvertently being picked for default domains allocated
during that window, with a corresponding unexpected perfomance impact.

	Reported-by: Jussi Maki <joamaki@gmail.com>
	Tested-by: Jussi Maki <joamaki@gmail.com>
	Signed-off-by: Robin Murphy <robin.murphy@arm.com>
Fixes: a250c23f15c2 ("iommu: remove DOMAIN_ATTR_DMA_USE_FLUSH_QUEUE")
Link: https://lore.kernel.org/r/665db61e23ff8d54ac5eb391bef520b3a803fcb9.1622727974.git.robin.murphy@arm.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit be227f8e99a663d097536e9f9bc935fb26bdbc41)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd/iommu.c
diff --cc drivers/iommu/amd/iommu.c
index 0377ee5135b7,c46dde88a132..000000000000
--- a/drivers/iommu/amd/iommu.c
+++ b/drivers/iommu/amd/iommu.c
@@@ -40,10 -28,8 +40,9 @@@
  #include <linux/export.h>
  #include <linux/irq.h>
  #include <linux/msi.h>
 +#include <linux/dma-contiguous.h>
  #include <linux/irqdomain.h>
  #include <linux/percpu.h>
- #include <linux/iova.h>
  #include <linux/io-pgtable.h>
  #include <asm/irq_remapping.h>
  #include <asm/io_apic.h>
@@@ -1814,19 -1804,6 +1822,22 @@@ int __init amd_iommu_init_api(void
  	return 0;
  }
  
++<<<<<<< HEAD
 +int __init amd_iommu_init_dma_ops(void)
 +{
 +	swiotlb        = (iommu_default_passthrough() || sme_me_mask) ? 1 : 0;
 +
 +	if (amd_iommu_unmap_flush)
 +		pr_info("IO/TLB flush on unmap enabled\n");
 +	else
 +		pr_info("Lazy IO/TLB flushing enabled\n");
 +
 +	return 0;
 +
 +}
 +
++=======
++>>>>>>> be227f8e99a6 (iommu/amd: Tidy up DMA ops init)
  /*****************************************************************************
   *
   * The following functions belong to the exported interface of AMD IOMMU
diff --git a/drivers/iommu/amd/amd_iommu.h b/drivers/iommu/amd/amd_iommu.h
index 55dd38d814d9..416815a525d6 100644
--- a/drivers/iommu/amd/amd_iommu.h
+++ b/drivers/iommu/amd/amd_iommu.h
@@ -11,8 +11,6 @@
 
 #include "amd_iommu_types.h"
 
-extern int amd_iommu_init_dma_ops(void);
-extern int amd_iommu_init_passthrough(void);
 extern irqreturn_t amd_iommu_int_thread(int irq, void *data);
 extern irqreturn_t amd_iommu_int_handler(int irq, void *data);
 extern void amd_iommu_apply_erratum_63(u16 devid);
diff --git a/drivers/iommu/amd/init.c b/drivers/iommu/amd/init.c
index 987dc258b436..41f9884413e5 100644
--- a/drivers/iommu/amd/init.c
+++ b/drivers/iommu/amd/init.c
@@ -243,7 +243,6 @@ enum iommu_init_state {
 	IOMMU_ENABLED,
 	IOMMU_PCI_INIT,
 	IOMMU_INTERRUPTS_EN,
-	IOMMU_DMA_OPS,
 	IOMMU_INITIALIZED,
 	IOMMU_NOT_FOUND,
 	IOMMU_INIT_ERROR,
@@ -2914,10 +2913,6 @@ static int __init state_next(void)
 		init_state = ret ? IOMMU_INIT_ERROR : IOMMU_INTERRUPTS_EN;
 		break;
 	case IOMMU_INTERRUPTS_EN:
-		ret = amd_iommu_init_dma_ops();
-		init_state = ret ? IOMMU_INIT_ERROR : IOMMU_DMA_OPS;
-		break;
-	case IOMMU_DMA_OPS:
 		init_state = IOMMU_INITIALIZED;
 		break;
 	case IOMMU_INITIALIZED:
* Unmerged path drivers/iommu/amd/iommu.c
