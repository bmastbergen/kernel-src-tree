Bluetooth: Remove unneeded commands for suspend

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
commit e5b0ad69c97a04f42834b24a6a0323ab15ccc9bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/e5b0ad69.failed

During suspend, there are a few scan enable and set event filter
commands that don't need to be sent unless there are actual BR/EDR
devices capable of waking the system. Check the HCI_PSCAN bit before
writing scan enable and use a new dev flag, HCI_EVENT_FILTER_CONFIGURED
to control whether to clear the event filter.

	Signed-off-by: Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
	Reviewed-by: Archie Pusaka <apusaka@chromium.org>
	Reviewed-by: Alain Michaud <alainm@chromium.org>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit e5b0ad69c97a04f42834b24a6a0323ab15ccc9bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/hci_request.c
diff --cc net/bluetooth/hci_request.c
index f57b8ee4ec12,75a42178c82d..000000000000
--- a/net/bluetooth/hci_request.c
+++ b/net/bluetooth/hci_request.c
@@@ -1230,8 -1335,8 +1240,13 @@@ void hci_req_prepare_suspend(struct hci
  			hci_req_add_le_scan_disable(&req, false);
  		}
  
++<<<<<<< HEAD
 +		/* Mark task needing completion */
 +		set_bit(SUSPEND_SCAN_DISABLE, hdev->suspend_tasks);
++=======
+ 		/* Disable advertisement filters */
+ 		hci_req_add_set_adv_filter_enable(&req, false);
++>>>>>>> e5b0ad69c97a (Bluetooth: Remove unneeded commands for suspend)
  
  		/* Prevent disconnects from causing scanning to be re-enabled */
  		hdev->scanning_paused = true;
@@@ -1266,9 -1371,14 +1281,12 @@@
  		hdev->suspended = false;
  		hdev->scanning_paused = false;
  
+ 		/* Clear any event filters and restore scan state */
  		hci_req_clear_event_filter(&req);
+ 		__hci_req_update_scan(&req);
+ 
  		/* Reset passive/background scanning to normal */
  		__hci_update_background_scan(&req);
 -		/* Enable all of the advertisement filters */
 -		hci_req_add_set_adv_filter_enable(&req, true);
  
  		/* Unpause directed advertising */
  		hdev->advertising_paused = false;
diff --git a/include/net/bluetooth/hci.h b/include/net/bluetooth/hci.h
index 913fb80909cd..a5dc8cb3c72a 100644
--- a/include/net/bluetooth/hci.h
+++ b/include/net/bluetooth/hci.h
@@ -318,6 +318,7 @@ enum {
 	HCI_BREDR_ENABLED,
 	HCI_LE_SCAN_INTERRUPTED,
 	HCI_WIDEBAND_SPEECH_ENABLED,
+	HCI_EVENT_FILTER_CONFIGURED,
 
 	HCI_DUT_MODE,
 	HCI_VENDOR_DIAG,
diff --git a/net/bluetooth/hci_event.c b/net/bluetooth/hci_event.c
index 4c50fa2de0a1..23b1f6689c4c 100644
--- a/net/bluetooth/hci_event.c
+++ b/net/bluetooth/hci_event.c
@@ -395,6 +395,29 @@ static void hci_cc_write_scan_enable(struct hci_dev *hdev, struct sk_buff *skb)
 	hci_dev_unlock(hdev);
 }
 
+static void hci_cc_set_event_filter(struct hci_dev *hdev, struct sk_buff *skb)
+{
+	__u8 status = *((__u8 *)skb->data);
+	struct hci_cp_set_event_filter *cp;
+	void *sent;
+
+	BT_DBG("%s status 0x%2.2x", hdev->name, status);
+
+	if (status)
+		return;
+
+	sent = hci_sent_cmd_data(hdev, HCI_OP_SET_EVENT_FLT);
+	if (!sent)
+		return;
+
+	cp = (struct hci_cp_set_event_filter *)sent;
+
+	if (cp->flt_type == HCI_FLT_CLEAR_ALL)
+		hci_dev_clear_flag(hdev, HCI_EVENT_FILTER_CONFIGURED);
+	else
+		hci_dev_set_flag(hdev, HCI_EVENT_FILTER_CONFIGURED);
+}
+
 static void hci_cc_read_class_of_dev(struct hci_dev *hdev, struct sk_buff *skb)
 {
 	struct hci_rp_read_class_of_dev *rp = (void *) skb->data;
@@ -3317,6 +3340,10 @@ static void hci_cmd_complete_evt(struct hci_dev *hdev, struct sk_buff *skb,
 		hci_cc_write_scan_enable(hdev, skb);
 		break;
 
+	case HCI_OP_SET_EVENT_FLT:
+		hci_cc_set_event_filter(hdev, skb);
+		break;
+
 	case HCI_OP_READ_CLASS_OF_DEV:
 		hci_cc_read_class_of_dev(hdev, skb);
 		break;
* Unmerged path net/bluetooth/hci_request.c
