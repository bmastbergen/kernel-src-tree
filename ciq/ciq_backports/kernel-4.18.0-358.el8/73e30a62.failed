ice: Avoid crash from unnecessary IDA free

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Dave Ertman <david.m.ertman@intel.com>
commit 73e30a62b19b9fbb4e6a3465c59da186630d5f2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/73e30a62.failed

In the remove path, there is an attempt to free the aux_idx IDA whether
it was allocated or not.  This can potentially cause a crash when
unloading the driver on systems that do not initialize support for RDMA.
But, this free cannot be gated by the status bit for RDMA, since it is
allocated if the driver detects support for RDMA at probe time, but the
driver can enter into a state where RDMA is not supported after the IDA
has been allocated at probe time and this would lead to a memory leak.

Initialize aux_idx to an invalid value and check for a valid value when
unloading to determine if an IDA free is necessary.

Fixes: d25a0fc41c1f9 ("ice: Initialize RDMA support")
	Reported-by: Jun Miao <jun.miao@windriver.com>
	Signed-off-by: Dave Ertman <david.m.ertman@intel.com>
	Tested-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 73e30a62b19b9fbb4e6a3465c59da186630d5f2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_main.c
diff --cc drivers/net/ethernet/intel/ice/ice_main.c
index a070a38045ef,94037881bfd8..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@@ -4492,8 -4617,13 +4495,15 @@@ static void ice_remove(struct pci_dev *
  	ice_service_task_stop(pf);
  
  	ice_aq_cancel_waiting_tasks(pf);
++<<<<<<< HEAD
++=======
+ 	ice_unplug_aux_dev(pf);
+ 	if (pf->aux_idx >= 0)
+ 		ida_free(&ice_aux_ida, pf->aux_idx);
+ 	set_bit(ICE_DOWN, pf->state);
++>>>>>>> 73e30a62b19b (ice: Avoid crash from unnecessary IDA free)
  
  	mutex_destroy(&(&pf->hw)->fdir_fltr_lock);
 -	ice_deinit_lag(pf);
  	if (test_bit(ICE_FLAG_PTP_SUPPORTED, pf->flags))
  		ice_ptp_release(pf);
  	if (!ice_is_safe_mode(pf))
* Unmerged path drivers/net/ethernet/intel/ice/ice_main.c
