printk: fix kmsg_dump_get_buffer length calulations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author John Ogness <john.ogness@linutronix.de>
commit 89ccf18f032f26946e2ea6258120472eec6aa745
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/89ccf18f.failed

kmsg_dump_get_buffer() uses @syslog to determine if the syslog
prefix should be written to the buffer. However, when calculating
the maximum number of records that can fit into the buffer, it
always counts the bytes from the syslog prefix.

Use @syslog when calculating the maximum number of records that can
fit into the buffer.

Fixes: e2ae715d66bf ("kmsg - kmsg_dump() use iterator to receive log buffer content")
	Signed-off-by: John Ogness <john.ogness@linutronix.de>
	Reviewed-by: Petr Mladek <pmladek@suse.com>
	Acked-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
	Signed-off-by: Petr Mladek <pmladek@suse.com>
Link: https://lore.kernel.org/r/20210113164413.1599-1-john.ogness@linutronix.de
(cherry picked from commit 89ccf18f032f26946e2ea6258120472eec6aa745)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/printk/printk.c
diff --cc kernel/printk/printk.c
index 9c33249065a6,96e24074c962..000000000000
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@@ -3340,24 -3420,21 +3340,41 @@@ bool kmsg_dump_get_buffer(struct kmsg_d
  
  	/* calculate length of entire buffer */
  	seq = dumper->cur_seq;
++<<<<<<< HEAD
 +	idx = dumper->cur_idx;
 +	while (seq < dumper->next_seq) {
 +		struct printk_log *msg = log_from_idx(idx);
 +
 +		l += msg_print_text(msg, true, time, NULL, 0);
 +		idx = log_next(idx);
 +		seq++;
++=======
+ 	while (prb_read_valid_info(prb, seq, &info, &line_count)) {
+ 		if (r.info->seq >= dumper->next_seq)
+ 			break;
+ 		l += get_record_print_text_size(&info, line_count, syslog, time);
+ 		seq = r.info->seq + 1;
++>>>>>>> 89ccf18f032f (printk: fix kmsg_dump_get_buffer length calulations)
  	}
  
  	/* move first record forward until length fits into the buffer */
  	seq = dumper->cur_seq;
++<<<<<<< HEAD
 +	idx = dumper->cur_idx;
 +	while (l >= size && seq < dumper->next_seq) {
 +		struct printk_log *msg = log_from_idx(idx);
 +
 +		l -= msg_print_text(msg, true, time, NULL, 0);
 +		idx = log_next(idx);
 +		seq++;
++=======
+ 	while (l >= size && prb_read_valid_info(prb, seq,
+ 						&info, &line_count)) {
+ 		if (r.info->seq >= dumper->next_seq)
+ 			break;
+ 		l -= get_record_print_text_size(&info, line_count, syslog, time);
+ 		seq = r.info->seq + 1;
++>>>>>>> 89ccf18f032f (printk: fix kmsg_dump_get_buffer length calulations)
  	}
  
  	/* last message in next interation */
* Unmerged path kernel/printk/printk.c
