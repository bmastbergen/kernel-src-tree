iommu: Improve iommu_iotlb_gather helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Robin Murphy <robin.murphy@arm.com>
commit 3136895cc5b665c1ab406d78f90c0700a3551e74
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/3136895c.failed

The Mediatek driver is not the only one which might want a basic
address-based gathering behaviour, so although it's arguably simple
enough to open-code, let's factor it out for the sake of cleanliness.
Let's also take this opportunity to document the intent of these
helpers for clarity.

	Cc: Joerg Roedel <joro@8bytes.org>
	Cc: Will Deacon <will@kernel.org>
	Cc: Jiajun Cao <caojiajun@vmware.com>
	Cc: Robin Murphy <robin.murphy@arm.com>
	Cc: Lu Baolu <baolu.lu@linux.intel.com>
	Cc: iommu@lists.linux-foundation.org
	Cc: linux-kernel@vger.kernel.org
	Signed-off-by: Robin Murphy <robin.murphy@arm.com>
	Signed-off-by: Nadav Amit <namit@vmware.com>
Link: https://lore.kernel.org/r/20210723093209.714328-4-namit@vmware.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 3136895cc5b665c1ab406d78f90c0700a3551e74)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/mtk_iommu.c
diff --cc drivers/iommu/mtk_iommu.c
index 3b13f8a4f57a,d9939e4af35c..000000000000
--- a/drivers/iommu/mtk_iommu.c
+++ b/drivers/iommu/mtk_iommu.c
@@@ -404,14 -520,9 +404,20 @@@ static size_t mtk_iommu_unmap(struct io
  			      struct iommu_iotlb_gather *gather)
  {
  	struct mtk_iommu_domain *dom = to_mtk_domain(domain);
++<<<<<<< HEAD
 +	unsigned long flags;
 +	size_t unmapsz;
 +
 +	spin_lock_irqsave(&dom->pgtlock, flags);
 +	unmapsz = dom->iop->unmap(dom->iop, iova, size, gather);
 +	spin_unlock_irqrestore(&dom->pgtlock, flags);
 +
 +	return unmapsz;
++=======
+ 
+ 	iommu_iotlb_gather_add_range(gather, iova, size);
+ 	return dom->iop->unmap(dom->iop, iova, size, gather);
++>>>>>>> 3136895cc5b6 (iommu: Improve iommu_iotlb_gather helpers)
  }
  
  static void mtk_iommu_flush_iotlb_all(struct iommu_domain *domain)
* Unmerged path drivers/iommu/mtk_iommu.c
diff --git a/include/linux/iommu.h b/include/linux/iommu.h
index 486407c90575..6a0db5af7b43 100644
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@ -582,6 +582,38 @@ static inline void iommu_iotlb_sync(struct iommu_domain *domain,
 	iommu_iotlb_gather_init(iotlb_gather);
 }
 
+/**
+ * iommu_iotlb_gather_add_range - Gather for address-based TLB invalidation
+ * @gather: TLB gather data
+ * @iova: start of page to invalidate
+ * @size: size of page to invalidate
+ *
+ * Helper for IOMMU drivers to build arbitrarily-sized invalidation commands
+ * where only the address range matters, and simply minimising intermediate
+ * syncs is preferred.
+ */
+static inline void iommu_iotlb_gather_add_range(struct iommu_iotlb_gather *gather,
+						unsigned long iova, size_t size)
+{
+	unsigned long end = iova + size - 1;
+
+	if (gather->start > iova)
+		gather->start = iova;
+	if (gather->end < end)
+		gather->end = end;
+}
+
+/**
+ * iommu_iotlb_gather_add_page - Gather for page-based TLB invalidation
+ * @domain: IOMMU domain to be invalidated
+ * @gather: TLB gather data
+ * @iova: start of page to invalidate
+ * @size: size of page to invalidate
+ *
+ * Helper for IOMMU drivers to build invalidation commands based on individual
+ * pages, or with page size/table level hints which cannot be gathered if they
+ * differ.
+ */
 static inline void iommu_iotlb_gather_add_page(struct iommu_domain *domain,
 					       struct iommu_iotlb_gather *gather,
 					       unsigned long iova, size_t size)
@@ -600,11 +632,7 @@ static inline void iommu_iotlb_gather_add_page(struct iommu_domain *domain,
 		gather->pgsize = size;
 	}
 
-	if (gather->end < end)
-		gather->end = end;
-
-	if (gather->start > start)
-		gather->start = start;
+	iommu_iotlb_gather_add_range(gather, iova, size);
 }
 
 /* PCI device grouping function */
