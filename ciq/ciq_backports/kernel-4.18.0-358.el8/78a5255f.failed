Stop the ad-hoc games with -Wno-maybe-initialized

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Linus Torvalds <torvalds@linux-foundation.org>
commit 78a5255ffb6a1af189a83e493d916ba1c54d8c75
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/78a5255f.failed

We have some rather random rules about when we accept the
"maybe-initialized" warnings, and when we don't.

For example, we consider it unreliable for gcc versions < 4.9, but also
if -O3 is enabled, or if optimizing for size.  And then various kernel
config options disabled it, because they know that they trigger that
warning by confusing gcc sufficiently (ie PROFILE_ALL_BRANCHES).

And now gcc-10 seems to be introducing a lot of those warnings too, so
it falls under the same heading as 4.9 did.

At the same time, we have a very straightforward way to _enable_ that
warning when wanted: use "W=2" to enable more warnings.

So stop playing these ad-hoc games, and just disable that warning by
default, with the known and straight-forward "if you want to work on the
extra compiler warnings, use W=123".

Would it be great to have code that is always so obvious that it never
confuses the compiler whether a variable is used initialized or not?
Yes, it would.  In a perfect world, the compilers would be smarter, and
our source code would be simpler.

That's currently not the world we live in, though.

	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 78a5255ffb6a1af189a83e493d916ba1c54d8c75)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Makefile
#	init/Kconfig
diff --cc Makefile
index 95a5c487dd35,1e94f4f15d92..000000000000
--- a/Makefile
+++ b/Makefile
@@@ -656,46 -719,19 +656,49 @@@ KBUILD_CFLAGS	+= $(call cc-option,-fno-
  KBUILD_CFLAGS	+= $(call cc-disable-warning,frame-address,)
  KBUILD_CFLAGS	+= $(call cc-disable-warning, format-truncation)
  KBUILD_CFLAGS	+= $(call cc-disable-warning, format-overflow)
 -KBUILD_CFLAGS	+= $(call cc-disable-warning, address-of-packed-member)
 +KBUILD_CFLAGS	+= $(call cc-disable-warning, int-in-bool-context)
 +
 +ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE
 +KBUILD_CFLAGS	+= $(call cc-option,-Oz,-Os)
 +KBUILD_CFLAGS	+= $(call cc-disable-warning,maybe-uninitialized,)
 +else
 +# powerpc is compiled with -O3, via specfile rpmbuild -- see rhbz1051067.
 +# we need to keep consistency here, however, for out of tree kmod builds --
 +# see rhbz1431029 for reference
 +ifeq ($(SRCARCH), powerpc)
 +KBUILD_CFLAGS	+= -O3
 +else
 +KBUILD_CFLAGS	+= -O2
 +endif
 +ifdef CONFIG_PROFILE_ALL_BRANCHES
 +KBUILD_CFLAGS	+= $(call cc-disable-warning,maybe-uninitialized,)
 +endif
 +endif
  
 -ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
 -KBUILD_CFLAGS += -O2
 -else ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
 -KBUILD_CFLAGS += -O3
 -else ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE
 -KBUILD_CFLAGS += -Os
++<<<<<<< HEAD
 +ifneq ($(DISABLE_WERROR),1)
 +ifneq ($(WITH_GCOV),1)
 +ifeq ($(KBUILD_EXTMOD),)
 +ifneq (,$(filter $(ARCH), x86 x86_64 powerpc s390))
 +KBUILD_CFLAGS   += -Werror
 +endif
 +# powerpc is compiled with -O3. Starting with gcc 4.8, there have been some
 +# known problems with compiler warnings so disable them on all compilers
 +# greater than that version
 +ifneq (,$(filter $(ARCH), powerpc))
 +KBUILD_CFLAGS += $(call cc-ifversion, -gt, 0408, -Wno-uninitialized -Wno-maybe-uninitialized -Wno-error=array-bounds)
 +endif
 +endif
 +endif
  endif
  
 +KBUILD_CFLAGS += $(call cc-ifversion, -lt, 0409, \
 +			$(call cc-disable-warning,maybe-uninitialized,))
 +
++=======
++>>>>>>> 78a5255ffb6a (Stop the ad-hoc games with -Wno-maybe-initialized)
  # Tell gcc to never replace conditional load with a non-conditional one
  KBUILD_CFLAGS	+= $(call cc-option,--param=allow-store-data-races=0)
 -KBUILD_CFLAGS	+= $(call cc-option,-fno-allow-store-data-races)
  
  include scripts/Makefile.kcov
  include scripts/Makefile.gcc-plugins
diff --cc init/Kconfig
index 7609c6684f41,9278a603d399..000000000000
--- a/init/Kconfig
+++ b/init/Kconfig
@@@ -24,14 -28,16 +24,27 @@@ config CLANG_VERSIO
  	default $(shell,$(srctree)/scripts/clang-version.sh $(CC))
  
  config CC_CAN_LINK
++<<<<<<< HEAD
 +	bool
 +	default $(success,$(srctree)/scripts/cc-can-link.sh $(CC) $(m64-flag)) if 64BIT
 +	default $(success,$(srctree)/scripts/cc-can-link.sh $(CC) $(m32-flag))
 +
 +config CC_CAN_LINK_STATIC
 +	bool
 +	default $(success,$(srctree)/scripts/cc-can-link.sh $(CC) -static $(m64-flag)) if 64BIT
 +	default $(success,$(srctree)/scripts/cc-can-link.sh $(CC) -static $(m32-flag))
++=======
+ 	def_bool $(success,$(srctree)/scripts/cc-can-link.sh $(CC))
+ 
+ config CC_HAS_ASM_GOTO
+ 	def_bool $(success,$(srctree)/scripts/gcc-goto.sh $(CC))
+ 
+ config TOOLS_SUPPORT_RELR
+ 	def_bool $(success,env "CC=$(CC)" "LD=$(LD)" "NM=$(NM)" "OBJCOPY=$(OBJCOPY)" $(srctree)/scripts/tools-support-relr.sh)
+ 
+ config CC_HAS_ASM_INLINE
+ 	def_bool $(success,echo 'void foo(void) { asm inline (""); }' | $(CC) -x c - -c -o /dev/null)
++>>>>>>> 78a5255ffb6a (Stop the ad-hoc games with -Wno-maybe-initialized)
  
  config CONSTRUCTORS
  	bool
@@@ -1111,13 -1238,18 +1124,25 @@@ config CC_OPTIMIZE_FOR_PERFORMANC
  	  with the "-O2" compiler flag for best performance and most
  	  helpful compile-time warnings.
  
++<<<<<<< HEAD
 +config CC_OPTIMIZE_FOR_SIZE
 +	bool "Optimize for size"
++=======
+ config CC_OPTIMIZE_FOR_PERFORMANCE_O3
+ 	bool "Optimize more for performance (-O3)"
+ 	depends on ARC
+ 	help
+ 	  Choosing this option will pass "-O3" to your compiler to optimize
+ 	  the kernel yet more for performance.
+ 
+ config CC_OPTIMIZE_FOR_SIZE
+ 	bool "Optimize for size (-Os)"
++>>>>>>> 78a5255ffb6a (Stop the ad-hoc games with -Wno-maybe-initialized)
  	help
 -	  Choosing this option will pass "-Os" to your compiler resulting
 -	  in a smaller kernel.
 +	  Enabling this option will pass "-Os" instead of "-O2" to
 +	  your compiler resulting in a smaller kernel.
 +
 +	  If unsure, say N.
  
  endchoice
  
* Unmerged path Makefile
* Unmerged path init/Kconfig
