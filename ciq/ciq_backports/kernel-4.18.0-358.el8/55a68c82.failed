memcg: replace in_interrupt() by !in_task() in active_memcg()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Vasily Averin <vvs@virtuozzo.com>
commit 55a68c823951855f3ec313fdb85100db84284505
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/55a68c82.failed

set_active_memcg() uses in_interrupt() check to select proper storage for
cgroup: pointer on task struct or per-cpu pointer.

It isn't fully correct: obsoleted in_interrupt() includes tasks with
disabled BH.  It's better to use '!in_task()' instead.

Link: https://lkml.org/lkml/2021/7/26/487
Link: https://lkml.kernel.org/r/ed4448b0-4970-616f-7368-ef9dd3cb628d@virtuozzo.com
Fixes: 37d5985c003d ("mm: kmem: prepare remote memcg charging infra for interrupt contexts")
	Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Roman Gushchin <guro@fb.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 55a68c823951855f3ec313fdb85100db84284505)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/memcontrol.c
diff --cc mm/memcontrol.c
index 08485f696ea8,b09f2639f28b..000000000000
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@@ -942,6 -876,14 +942,17 @@@ struct mem_cgroup *mem_cgroup_from_task
  }
  EXPORT_SYMBOL(mem_cgroup_from_task);
  
++<<<<<<< HEAD
++=======
+ static __always_inline struct mem_cgroup *active_memcg(void)
+ {
+ 	if (!in_task())
+ 		return this_cpu_read(int_active_memcg);
+ 	else
+ 		return current->active_memcg;
+ }
+ 
++>>>>>>> 55a68c823951 (memcg: replace in_interrupt() by !in_task() in active_memcg())
  /**
   * get_mem_cgroup_from_mm: Obtain a reference on given mm_struct's memcg.
   * @mm: mm from which memcg should be extracted. It can be NULL.
diff --git a/include/linux/sched/mm.h b/include/linux/sched/mm.h
index 96e0862580ce..90a82a903c06 100644
--- a/include/linux/sched/mm.h
+++ b/include/linux/sched/mm.h
@@ -341,7 +341,7 @@ set_active_memcg(struct mem_cgroup *memcg)
 {
 	struct mem_cgroup *old;
 
-	if (in_interrupt()) {
+	if (!in_task()) {
 		old = this_cpu_read(int_active_memcg);
 		this_cpu_write(int_active_memcg, memcg);
 	} else {
* Unmerged path mm/memcontrol.c
