nfsd: simplify nfsd4_check_open_reclaim

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author J. Bruce Fields <bfields@redhat.com>
commit 1722b04624806ced51693f546edb83e8b2297a77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/1722b046.failed

The set_client() was already taken care of by process_open1().

The comments here are mostly redundant with the code.

	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 1722b04624806ced51693f546edb83e8b2297a77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs4state.c
diff --cc fs/nfsd/nfs4state.c
index 1988369d20ec,e55c779dee5f..000000000000
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@@ -7048,25 -7222,13 +7048,24 @@@ nfsd4_find_reclaim_client(struct xdr_ne
  	return NULL;
  }
  
- /*
- * Called from OPEN. Look for clientid in reclaim list.
- */
  __be32
- nfs4_check_open_reclaim(clientid_t *clid,
- 		struct nfsd4_compound_state *cstate,
- 		struct nfsd_net *nn)
+ nfs4_check_open_reclaim(struct nfs4_client *clp)
  {
++<<<<<<< HEAD
 +	__be32 status;
 +
 +	/* find clientid in conf_id_hashtbl */
 +	status = lookup_clientid(clid, cstate, nn);
 +	if (status)
 +		return nfserr_reclaim_bad;
 +
 +	if (test_bit(NFSD4_CLIENT_RECLAIM_COMPLETE, &cstate->clp->cl_flags))
++=======
+ 	if (test_bit(NFSD4_CLIENT_RECLAIM_COMPLETE, &clp->cl_flags))
++>>>>>>> 1722b0462480 (nfsd: simplify nfsd4_check_open_reclaim)
  		return nfserr_no_grace;
  
- 	if (nfsd4_client_record_check(cstate->clp))
+ 	if (nfsd4_client_record_check(clp))
  		return nfserr_reclaim_bad;
  
  	return nfs_ok;
diff --git a/fs/nfsd/nfs4proc.c b/fs/nfsd/nfs4proc.c
index 08fe2c9ae415..876e3b4987ae 100644
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@ -421,8 +421,7 @@ nfsd4_open(struct svc_rqst *rqstp, struct nfsd4_compound_state *cstate,
 				goto out;
 			break;
 		case NFS4_OPEN_CLAIM_PREVIOUS:
-			status = nfs4_check_open_reclaim(&open->op_clientid,
-							 cstate, nn);
+			status = nfs4_check_open_reclaim(cstate->clp);
 			if (status)
 				goto out;
 			open->op_openowner->oo_flags |= NFS4_OO_CONFIRMED;
* Unmerged path fs/nfsd/nfs4state.c
diff --git a/fs/nfsd/state.h b/fs/nfsd/state.h
index ce3105d5468f..227393777dbc 100644
--- a/fs/nfsd/state.h
+++ b/fs/nfsd/state.h
@@ -630,8 +630,7 @@ void nfs4_remove_reclaim_record(struct nfs4_client_reclaim *, struct nfsd_net *)
 extern void nfs4_release_reclaim(struct nfsd_net *);
 extern struct nfs4_client_reclaim *nfsd4_find_reclaim_client(struct xdr_netobj name,
 							struct nfsd_net *nn);
-extern __be32 nfs4_check_open_reclaim(clientid_t *clid,
-		struct nfsd4_compound_state *cstate, struct nfsd_net *nn);
+extern __be32 nfs4_check_open_reclaim(struct nfs4_client *);
 extern void nfsd4_probe_callback(struct nfs4_client *clp);
 extern void nfsd4_probe_callback_sync(struct nfs4_client *clp);
 extern void nfsd4_change_callback(struct nfs4_client *clp, struct nfs4_cb_conn *);
