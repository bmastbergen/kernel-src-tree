virtio_net: move tx vq operation under tx queue lock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 5a2f966d0f3fa0ef6dada7ab9eda74cacee96b8a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/5a2f966d.failed

It's unsafe to operate a vq from multiple threads.
Unfortunately this is exactly what we do when invoking
clean tx poll from rx napi.
Same happens with napi-tx even without the
opportunistic cleaning from the receive interrupt: that races
with processing the vq in start_xmit.

As a fix move everything that deals with the vq to under tx lock.

Fixes: b92f1e6751a6 ("virtio-net: transmit napi")
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit 5a2f966d0f3fa0ef6dada7ab9eda74cacee96b8a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/virtio_net.c
diff --cc drivers/net/virtio_net.c
index 20814dd573ad,9573f7622ef6..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -1502,10 -1603,28 +1504,32 @@@ static int virtnet_poll_tx(struct napi_
  
  	txq = netdev_get_tx_queue(vi->dev, index);
  	__netif_tx_lock(txq, raw_smp_processor_id());
++<<<<<<< HEAD
 +	free_old_xmit_skbs(sq);
++=======
+ 	virtqueue_disable_cb(sq->vq);
+ 	free_old_xmit_skbs(sq, true);
+ 
+ 	opaque = virtqueue_enable_cb_prepare(sq->vq);
+ 
+ 	done = napi_complete_done(napi, 0);
+ 
+ 	if (!done)
+ 		virtqueue_disable_cb(sq->vq);
+ 
++>>>>>>> 5a2f966d0f3f (virtio_net: move tx vq operation under tx queue lock)
  	__netif_tx_unlock(txq);
  
- 	virtqueue_napi_complete(napi, sq->vq, 0);
+ 	if (done) {
+ 		if (unlikely(virtqueue_poll(sq->vq, opaque))) {
+ 			if (napi_schedule_prep(napi)) {
+ 				__netif_tx_lock(txq, raw_smp_processor_id());
+ 				virtqueue_disable_cb(sq->vq);
+ 				__netif_tx_unlock(txq);
+ 				__napi_schedule(napi);
+ 			}
+ 		}
+ 	}
  
  	if (sq->vq->num_free >= 2 + MAX_SKB_FRAGS)
  		netif_tx_wake_queue(txq);
* Unmerged path drivers/net/virtio_net.c
