copy_regset_to_user(): do all copyout at once.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit dc12d7968f9c9540494deb1285854b18ca4465ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/dc12d796.failed

Turn copy_regset_to_user() into regset_get_alloc() + copy_to_user().
Now all ->get() calls have a kernel buffer as destination.

Note that we'd already eliminated the callers of copy_regset_to_user()
with non-zero offset; now that argument is simply unused.

Uninlined, while we are at it.

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit dc12d7968f9c9540494deb1285854b18ca4465ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/regset.h
#	kernel/regset.c
diff --cc include/linux/regset.h
index 148d174ef250,af57c1db1924..000000000000
--- a/include/linux/regset.h
+++ b/include/linux/regset.h
@@@ -356,31 -353,19 +356,47 @@@ static inline int user_regset_copyin_ig
  	return 0;
  }
  
++<<<<<<< HEAD
 +/**
 + * copy_regset_to_user - fetch a thread's user_regset data into user memory
 + * @target:	thread to be examined
 + * @view:	&struct user_regset_view describing user thread machine state
 + * @setno:	index in @view->regsets
 + * @offset:	offset into the regset data, in bytes
 + * @size:	amount of data to copy, in bytes
 + * @data:	user-mode pointer to copy into
 + */
 +static inline int copy_regset_to_user(struct task_struct *target,
 +				      const struct user_regset_view *view,
 +				      unsigned int setno,
 +				      unsigned int offset, unsigned int size,
 +				      void __user *data)
 +{
 +	const struct user_regset *regset = &view->regsets[setno];
 +
 +	if (!regset->get)
 +		return -EOPNOTSUPP;
 +
 +	if (!access_ok(data, size))
 +		return -EFAULT;
 +
 +	return regset->get(target, regset, offset, size, NULL, data);
 +}
++=======
+ extern int regset_get(struct task_struct *target,
+ 		      const struct user_regset *regset,
+ 		      unsigned int size, void *data);
+ 
+ extern int regset_get_alloc(struct task_struct *target,
+ 			    const struct user_regset *regset,
+ 			    unsigned int size,
+ 			    void **data);
+ 
+ extern int copy_regset_to_user(struct task_struct *target,
+ 			       const struct user_regset_view *view,
+ 			       unsigned int setno, unsigned int offset,
+ 			       unsigned int size, void __user *data);
++>>>>>>> dc12d7968f9c (copy_regset_to_user(): do all copyout at once.)
  
  /**
   * copy_regset_from_user - store into thread's user_regset data from user memory
* Unmerged path kernel/regset.c
* Unmerged path include/linux/regset.h
* Unmerged path kernel/regset.c
