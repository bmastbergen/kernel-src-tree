nvme-tcp: fix H2CData PDU send accounting (again)

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Sagi Grimberg <sagi@grimberg.me>
commit 25e1f67eda4a19c91dc05c84d6d413c53efb447b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/25e1f67e.failed

We should not access request members after the last send, even to
determine if indeed it was the last data payload send. The reason is
that a completion could have arrived and trigger a new execution of the
request which overridden these members. This was fixed by commit
825619b09ad3 ("nvme-tcp: fix possible use-after-completion").

Commit e371af033c56 broke that assumption again to address cases where
multiple r2t pdus are sent per request. To fix it, we need to record the
request data_sent and data_len and after the payload network send we
reference these counters to determine weather we should advance the
request iterator.

Fixes: e371af033c56 ("nvme-tcp: fix incorrect h2cdata pdu offset accounting")
	Reported-by: Keith Busch <kbusch@kernel.org>
	Cc: stable@vger.kernel.org # 5.10+
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 25e1f67eda4a19c91dc05c84d6d413c53efb447b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/tcp.c
diff --cc drivers/nvme/host/tcp.c
index fbf9e3819786,0626d14e6d4c..000000000000
--- a/drivers/nvme/host/tcp.c
+++ b/drivers/nvme/host/tcp.c
@@@ -933,7 -955,15 +935,19 @@@ static int nvme_tcp_try_send_data(struc
  			nvme_tcp_ddgst_update(queue->snd_hash, page,
  					offset, ret);
  
++<<<<<<< HEAD
 +		/* fully successful last write*/
++=======
+ 		/*
+ 		 * update the request iterator except for the last payload send
+ 		 * in the request where we don't want to modify it as we may
+ 		 * compete with the RX path completing the request.
+ 		 */
+ 		if (req_data_sent + ret < req_data_len)
+ 			nvme_tcp_advance_req(req, ret);
+ 
+ 		/* fully successful last send in current PDU */
++>>>>>>> 25e1f67eda4a (nvme-tcp: fix H2CData PDU send accounting (again))
  		if (last && ret == len) {
  			if (queue->data_digest) {
  				nvme_tcp_ddgst_final(queue->snd_hash,
* Unmerged path drivers/nvme/host/tcp.c
