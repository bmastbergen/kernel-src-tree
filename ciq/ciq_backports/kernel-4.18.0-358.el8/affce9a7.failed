net: bridge: mcast: toggle also host vlan state in br_multicast_toggle_vlan

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Nikolay Aleksandrov <nikolay@nvidia.com>
commit affce9a774ca2514aaa5638fde92c57a476dfd79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/affce9a7.failed

When changing vlan mcast state by br_multicast_toggle_vlan it iterates
over all ports and enables/disables the port mcast ctx based on the new
state, but I forgot to update the host vlan (bridge master vlan entry)
with the new state so it will be left out. Also that function is not
used outside of br_multicast.c, so make it static.

Fixes: f4b7002a7076 ("net: bridge: add vlan mcast snooping knob")
	Signed-off-by: Nikolay Aleksandrov <nikolay@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit affce9a774ca2514aaa5638fde92c57a476dfd79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_multicast.c
#	net/bridge/br_private.h
diff --cc net/bridge/br_multicast.c
index def6f1840985,16e686f5b9e9..000000000000
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@@ -2919,15 -4029,148 +2919,138 @@@ void br_multicast_open(struct net_bridg
  #endif
  }
  
++<<<<<<< HEAD
++=======
+ void br_multicast_toggle_one_vlan(struct net_bridge_vlan *vlan, bool on)
+ {
+ 	struct net_bridge *br;
+ 
+ 	/* it's okay to check for the flag without the multicast lock because it
+ 	 * can only change under RTNL -> multicast_lock, we need the latter to
+ 	 * sync with timers and packets
+ 	 */
+ 	if (on == !!(vlan->priv_flags & BR_VLFLAG_MCAST_ENABLED))
+ 		return;
+ 
+ 	if (br_vlan_is_master(vlan)) {
+ 		br = vlan->br;
+ 
+ 		if (!br_vlan_is_brentry(vlan) ||
+ 		    (on &&
+ 		     br_multicast_ctx_vlan_global_disabled(&vlan->br_mcast_ctx)))
+ 			return;
+ 
+ 		spin_lock_bh(&br->multicast_lock);
+ 		vlan->priv_flags ^= BR_VLFLAG_MCAST_ENABLED;
+ 		spin_unlock_bh(&br->multicast_lock);
+ 
+ 		if (on)
+ 			__br_multicast_open(&vlan->br_mcast_ctx);
+ 		else
+ 			__br_multicast_stop(&vlan->br_mcast_ctx);
+ 	} else {
+ 		struct net_bridge_mcast *brmctx;
+ 
+ 		brmctx = br_multicast_port_ctx_get_global(&vlan->port_mcast_ctx);
+ 		if (on && br_multicast_ctx_vlan_global_disabled(brmctx))
+ 			return;
+ 
+ 		br = vlan->port->br;
+ 		spin_lock_bh(&br->multicast_lock);
+ 		vlan->priv_flags ^= BR_VLFLAG_MCAST_ENABLED;
+ 		if (on)
+ 			__br_multicast_enable_port_ctx(&vlan->port_mcast_ctx);
+ 		else
+ 			__br_multicast_disable_port_ctx(&vlan->port_mcast_ctx);
+ 		spin_unlock_bh(&br->multicast_lock);
+ 	}
+ }
+ 
+ static void br_multicast_toggle_vlan(struct net_bridge_vlan *vlan, bool on)
+ {
+ 	struct net_bridge_port *p;
+ 
+ 	if (WARN_ON_ONCE(!br_vlan_is_master(vlan)))
+ 		return;
+ 
+ 	list_for_each_entry(p, &vlan->br->port_list, list) {
+ 		struct net_bridge_vlan *vport;
+ 
+ 		vport = br_vlan_find(nbp_vlan_group(p), vlan->vid);
+ 		if (!vport)
+ 			continue;
+ 		br_multicast_toggle_one_vlan(vport, on);
+ 	}
+ 
+ 	if (br_vlan_is_brentry(vlan))
+ 		br_multicast_toggle_one_vlan(vlan, on);
+ }
+ 
+ int br_multicast_toggle_vlan_snooping(struct net_bridge *br, bool on,
+ 				      struct netlink_ext_ack *extack)
+ {
+ 	struct net_bridge_vlan_group *vg;
+ 	struct net_bridge_vlan *vlan;
+ 	struct net_bridge_port *p;
+ 
+ 	if (br_opt_get(br, BROPT_MCAST_VLAN_SNOOPING_ENABLED) == on)
+ 		return 0;
+ 
+ 	if (on && !br_opt_get(br, BROPT_VLAN_ENABLED)) {
+ 		NL_SET_ERR_MSG_MOD(extack, "Cannot enable multicast vlan snooping with vlan filtering disabled");
+ 		return -EINVAL;
+ 	}
+ 
+ 	vg = br_vlan_group(br);
+ 	if (!vg)
+ 		return 0;
+ 
+ 	br_opt_toggle(br, BROPT_MCAST_VLAN_SNOOPING_ENABLED, on);
+ 
+ 	/* disable/enable non-vlan mcast contexts based on vlan snooping */
+ 	if (on)
+ 		__br_multicast_stop(&br->multicast_ctx);
+ 	else
+ 		__br_multicast_open(&br->multicast_ctx);
+ 	list_for_each_entry(p, &br->port_list, list) {
+ 		if (on)
+ 			br_multicast_disable_port(p);
+ 		else
+ 			br_multicast_enable_port(p);
+ 	}
+ 
+ 	list_for_each_entry(vlan, &vg->vlan_list, vlist)
+ 		br_multicast_toggle_vlan(vlan, on);
+ 
+ 	return 0;
+ }
+ 
+ bool br_multicast_toggle_global_vlan(struct net_bridge_vlan *vlan, bool on)
+ {
+ 	ASSERT_RTNL();
+ 
+ 	/* BR_VLFLAG_GLOBAL_MCAST_ENABLED relies on eventual consistency and
+ 	 * requires only RTNL to change
+ 	 */
+ 	if (on == !!(vlan->priv_flags & BR_VLFLAG_GLOBAL_MCAST_ENABLED))
+ 		return false;
+ 
+ 	vlan->priv_flags ^= BR_VLFLAG_GLOBAL_MCAST_ENABLED;
+ 	br_multicast_toggle_vlan(vlan, on);
+ 
+ 	return true;
+ }
+ 
++>>>>>>> affce9a774ca (net: bridge: mcast: toggle also host vlan state in br_multicast_toggle_vlan)
  void br_multicast_stop(struct net_bridge *br)
  {
 -	ASSERT_RTNL();
 -
 -	if (br_opt_get(br, BROPT_MCAST_VLAN_SNOOPING_ENABLED)) {
 -		struct net_bridge_vlan_group *vg;
 -		struct net_bridge_vlan *vlan;
 -
 -		vg = br_vlan_group(br);
 -		if (vg) {
 -			list_for_each_entry(vlan, &vg->vlan_list, vlist) {
 -				struct net_bridge_mcast *brmctx;
 -
 -				brmctx = &vlan->br_mcast_ctx;
 -				if (br_vlan_is_brentry(vlan) &&
 -				    !br_multicast_ctx_vlan_disabled(brmctx))
 -					__br_multicast_stop(&vlan->br_mcast_ctx);
 -			}
 -		}
 -	} else {
 -		__br_multicast_stop(&br->multicast_ctx);
 -	}
 +	del_timer_sync(&br->multicast_router_timer);
 +	del_timer_sync(&br->ip4_other_query.timer);
 +	del_timer_sync(&br->ip4_own_query.timer);
 +#if IS_ENABLED(CONFIG_IPV6)
 +	del_timer_sync(&br->ip6_other_query.timer);
 +	del_timer_sync(&br->ip6_own_query.timer);
 +#endif
  }
  
  void br_multicast_dev_del(struct net_bridge *br)
diff --cc net/bridge/br_private.h
index 30e07225bc94,21b292eb2b3e..000000000000
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@@ -767,8 -918,45 +767,47 @@@ void br_multicast_get_stats(const struc
  			    struct br_mcast_stats *dest);
  void br_mdb_init(void);
  void br_mdb_uninit(void);
 -void br_multicast_host_join(const struct net_bridge_mcast *brmctx,
 -			    struct net_bridge_mdb_entry *mp, bool notify);
 +void br_multicast_host_join(struct net_bridge_mdb_entry *mp, bool notify);
  void br_multicast_host_leave(struct net_bridge_mdb_entry *mp, bool notify);
++<<<<<<< HEAD
++=======
+ void br_multicast_star_g_handle_mode(struct net_bridge_port_group *pg,
+ 				     u8 filter_mode);
+ void br_multicast_sg_add_exclude_ports(struct net_bridge_mdb_entry *star_mp,
+ 				       struct net_bridge_port_group *sg);
+ struct net_bridge_group_src *
+ br_multicast_find_group_src(struct net_bridge_port_group *pg, struct br_ip *ip);
+ void br_multicast_del_group_src(struct net_bridge_group_src *src,
+ 				bool fastleave);
+ void br_multicast_ctx_init(struct net_bridge *br,
+ 			   struct net_bridge_vlan *vlan,
+ 			   struct net_bridge_mcast *brmctx);
+ void br_multicast_ctx_deinit(struct net_bridge_mcast *brmctx);
+ void br_multicast_port_ctx_init(struct net_bridge_port *port,
+ 				struct net_bridge_vlan *vlan,
+ 				struct net_bridge_mcast_port *pmctx);
+ void br_multicast_port_ctx_deinit(struct net_bridge_mcast_port *pmctx);
+ void br_multicast_toggle_one_vlan(struct net_bridge_vlan *vlan, bool on);
+ int br_multicast_toggle_vlan_snooping(struct net_bridge *br, bool on,
+ 				      struct netlink_ext_ack *extack);
+ bool br_multicast_toggle_global_vlan(struct net_bridge_vlan *vlan, bool on);
+ 
+ int br_mdb_replay(struct net_device *br_dev, struct net_device *dev,
+ 		  const void *ctx, bool adding, struct notifier_block *nb,
+ 		  struct netlink_ext_ack *extack);
+ int br_rports_fill_info(struct sk_buff *skb,
+ 			const struct net_bridge_mcast *brmctx);
+ int br_multicast_dump_querier_state(struct sk_buff *skb,
+ 				    const struct net_bridge_mcast *brmctx,
+ 				    int nest_attr);
+ size_t br_multicast_querier_state_size(void);
+ size_t br_rports_size(const struct net_bridge_mcast *brmctx);
+ 
+ static inline bool br_group_is_l2(const struct br_ip *group)
+ {
+ 	return group->proto == 0;
+ }
++>>>>>>> affce9a774ca (net: bridge: mcast: toggle also host vlan state in br_multicast_toggle_vlan)
  
  #define mlock_dereference(X, br) \
  	rcu_dereference_protected(X, lockdep_is_held(&br->multicast_lock))
@@@ -946,6 -1343,59 +985,62 @@@ static inline int br_multicast_igmp_typ
  {
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ static inline void br_multicast_ctx_init(struct net_bridge *br,
+ 					 struct net_bridge_vlan *vlan,
+ 					 struct net_bridge_mcast *brmctx)
+ {
+ }
+ 
+ static inline void br_multicast_ctx_deinit(struct net_bridge_mcast *brmctx)
+ {
+ }
+ 
+ static inline void br_multicast_port_ctx_init(struct net_bridge_port *port,
+ 					      struct net_bridge_vlan *vlan,
+ 					      struct net_bridge_mcast_port *pmctx)
+ {
+ }
+ 
+ static inline void br_multicast_port_ctx_deinit(struct net_bridge_mcast_port *pmctx)
+ {
+ }
+ 
+ static inline void br_multicast_toggle_one_vlan(struct net_bridge_vlan *vlan,
+ 						bool on)
+ {
+ }
+ 
+ static inline int br_multicast_toggle_vlan_snooping(struct net_bridge *br,
+ 						    bool on,
+ 						    struct netlink_ext_ack *extack)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ 
+ static inline bool br_multicast_toggle_global_vlan(struct net_bridge_vlan *vlan,
+ 						   bool on)
+ {
+ 	return false;
+ }
+ 
+ static inline int br_mdb_replay(struct net_device *br_dev,
+ 				struct net_device *dev, const void *ctx,
+ 				bool adding, struct notifier_block *nb,
+ 				struct netlink_ext_ack *extack)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ 
+ static inline bool
+ br_multicast_ctx_options_equal(const struct net_bridge_mcast *brmctx1,
+ 			       const struct net_bridge_mcast *brmctx2)
+ {
+ 	return true;
+ }
++>>>>>>> affce9a774ca (net: bridge: mcast: toggle also host vlan state in br_multicast_toggle_vlan)
  #endif
  
  /* br_vlan.c */
* Unmerged path net/bridge/br_multicast.c
* Unmerged path net/bridge/br_private.h
