ethtool: Use kernel data types for internal EEPROM struct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Ido Schimmel <idosch@nvidia.com>
commit b8c48be23c2d03834fe01c3ea757d9df8b97013d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/b8c48be2.failed

The struct is not visible to user space and therefore should not use the
user visible data types.

Instead, use internal data types like other structures in the file.

	Signed-off-by: Ido Schimmel <idosch@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b8c48be23c2d03834fe01c3ea757d9df8b97013d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ethtool.h
diff --cc include/linux/ethtool.h
index 98bda0684804,29dbb603bc91..000000000000
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@@ -289,7 -313,100 +289,104 @@@ struct ethtool_pause_stats 
  	u64 rx_pause_frames;
  };
  
++<<<<<<< HEAD
 +struct ethtool_ops_extended_rh {
++=======
+ #define ETHTOOL_MAX_LANES	8
+ 
+ /**
+  * struct ethtool_fec_stats - statistics for IEEE 802.3 FEC
+  * @corrected_blocks: number of received blocks corrected by FEC
+  *	Reported to user space as %ETHTOOL_A_FEC_STAT_CORRECTED.
+  *
+  *	Equivalent to `30.5.1.1.17 aFECCorrectedBlocks` from the standard.
+  *
+  * @uncorrectable_blocks: number of received blocks FEC was not able to correct
+  *	Reported to user space as %ETHTOOL_A_FEC_STAT_UNCORR.
+  *
+  *	Equivalent to `30.5.1.1.18 aFECUncorrectableBlocks` from the standard.
+  *
+  * @corrected_bits: number of bits corrected by FEC
+  *	Similar to @corrected_blocks but counts individual bit changes,
+  *	not entire FEC data blocks. This is a non-standard statistic.
+  *	Reported to user space as %ETHTOOL_A_FEC_STAT_CORR_BITS.
+  *
+  * @lane: per-lane/PCS-instance counts as defined by the standard
+  * @total: error counts for the entire port, for drivers incapable of reporting
+  *	per-lane stats
+  *
+  * Drivers should fill in either only total or per-lane statistics, core
+  * will take care of adding lane values up to produce the total.
+  */
+ struct ethtool_fec_stats {
+ 	struct ethtool_fec_stat {
+ 		u64 total;
+ 		u64 lanes[ETHTOOL_MAX_LANES];
+ 	} corrected_blocks, uncorrectable_blocks, corrected_bits;
+ };
+ 
+ /**
+  * struct ethtool_rmon_hist_range - byte range for histogram statistics
+  * @low: low bound of the bucket (inclusive)
+  * @high: high bound of the bucket (inclusive)
+  */
+ struct ethtool_rmon_hist_range {
+ 	u16 low;
+ 	u16 high;
+ };
+ 
+ #define ETHTOOL_RMON_HIST_MAX	10
+ 
+ /**
+  * struct ethtool_rmon_stats - selected RMON (RFC 2819) statistics
+  * @undersize_pkts: Equivalent to `etherStatsUndersizePkts` from the RFC.
+  * @oversize_pkts: Equivalent to `etherStatsOversizePkts` from the RFC.
+  * @fragments: Equivalent to `etherStatsFragments` from the RFC.
+  * @jabbers: Equivalent to `etherStatsJabbers` from the RFC.
+  * @hist: Packet counter for packet length buckets (e.g.
+  *	`etherStatsPkts128to255Octets` from the RFC).
+  * @hist_tx: Tx counters in similar form to @hist, not defined in the RFC.
+  *
+  * Selection of RMON (RFC 2819) statistics which are not exposed via different
+  * APIs, primarily the packet-length-based counters.
+  * Unfortunately different designs choose different buckets beyond
+  * the 1024B mark (jumbo frame teritory), so the definition of the bucket
+  * ranges is left to the driver.
+  */
+ struct ethtool_rmon_stats {
+ 	u64 undersize_pkts;
+ 	u64 oversize_pkts;
+ 	u64 fragments;
+ 	u64 jabbers;
+ 
+ 	u64 hist[ETHTOOL_RMON_HIST_MAX];
+ 	u64 hist_tx[ETHTOOL_RMON_HIST_MAX];
+ };
+ 
+ #define ETH_MODULE_EEPROM_PAGE_LEN	128
+ #define ETH_MODULE_MAX_I2C_ADDRESS	0x7f
+ 
+ /**
+  * struct ethtool_module_eeprom - EEPROM dump from specified page
+  * @offset: Offset within the specified EEPROM page to begin read, in bytes.
+  * @length: Number of bytes to read.
+  * @page: Page number to read from.
+  * @bank: Page bank number to read from, if applicable by EEPROM spec.
+  * @i2c_address: I2C address of a page. Value less than 0x7f expected. Most
+  *	EEPROMs use 0x50 or 0x51.
+  * @data: Pointer to buffer with EEPROM data of @length size.
+  *
+  * This can be used to manage pages during EEPROM dump in ethtool and pass
+  * required information to the driver.
+  */
+ struct ethtool_module_eeprom {
+ 	u32	offset;
+ 	u32	length;
+ 	u8	page;
+ 	u8	bank;
+ 	u8	i2c_address;
+ 	u8	*data;
++>>>>>>> b8c48be23c2d (ethtool: Use kernel data types for internal EEPROM struct)
  };
  
  /**
* Unmerged path include/linux/ethtool.h
