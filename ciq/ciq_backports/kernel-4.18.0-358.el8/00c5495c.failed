zram: replace fsync_bdev with sync_blockdev

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 00c5495c54f785beb0f6a34f7a3674d3ea0997d5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/00c5495c.failed

When calling fsync_bdev(), zram driver guarantees that the bdev won't be
opened by anyone, then there can't be one active fs/superblock over the
zram bdev, so replace fsync_bdev with sync_blockdev.

	Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Acked-by: Minchan Kim <minchan@kernel.org>
Link: https://lore.kernel.org/r/20211025025426.2815424-5-ming.lei@redhat.com
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 00c5495c54f785beb0f6a34f7a3674d3ea0997d5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/zram/zram_drv.c
diff --cc drivers/block/zram/zram_drv.c
index 55c88306734b,edc6bd640559..000000000000
--- a/drivers/block/zram/zram_drv.c
+++ b/drivers/block/zram/zram_drv.c
@@@ -1553,17 -1787,15 +1553,17 @@@ static ssize_t reset_store(struct devic
  
  	/* From now on, anyone can't open /dev/zram[0-9] */
  	zram->claim = true;
 -	mutex_unlock(&bdev->bd_disk->open_mutex);
 +	mutex_unlock(&bdev->bd_mutex);
  
  	/* Make sure all the pending I/O are finished */
- 	fsync_bdev(bdev);
+ 	sync_blockdev(bdev);
  	zram_reset_device(zram);
 +	revalidate_disk_size(zram->disk, true);
 +	bdput(bdev);
  
 -	mutex_lock(&bdev->bd_disk->open_mutex);
 +	mutex_lock(&bdev->bd_mutex);
  	zram->claim = false;
 -	mutex_unlock(&bdev->bd_disk->open_mutex);
 +	mutex_unlock(&bdev->bd_mutex);
  
  	return len;
  }
@@@ -1744,10 -1987,17 +1744,24 @@@ static int zram_remove(struct zram *zra
  
  	zram_debugfs_unregister(zram);
  
++<<<<<<< HEAD
 +	/* Make sure all the pending I/O are finished */
 +	fsync_bdev(bdev);
 +	zram_reset_device(zram);
 +	bdput(bdev);
++=======
+ 	if (claimed) {
+ 		/*
+ 		 * If we were claimed by reset_store(), del_gendisk() will
+ 		 * wait until reset_store() is done, so nothing need to do.
+ 		 */
+ 		;
+ 	} else {
+ 		/* Make sure all the pending I/O are finished */
+ 		sync_blockdev(bdev);
+ 		zram_reset_device(zram);
+ 	}
++>>>>>>> 00c5495c54f7 (zram: replace fsync_bdev with sync_blockdev)
  
  	pr_info("Removed device: %s\n", zram->disk->disk_name);
  
* Unmerged path drivers/block/zram/zram_drv.c
