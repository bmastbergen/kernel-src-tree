bpf: Add a ARG_PTR_TO_CONST_STR argument type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Florent Revest <revest@chromium.org>
commit fff13c4bb646ef849fd74ced87eef54340d28c21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/fff13c4b.failed

This type provides the guarantee that an argument is going to be a const
pointer to somewhere in a read-only map value. It also checks that this
pointer is followed by a zero character before the end of the map value.

	Signed-off-by: Florent Revest <revest@chromium.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20210419155243.1632274-3-revest@chromium.org
(cherry picked from commit fff13c4bb646ef849fd74ced87eef54340d28c21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
#	kernel/bpf/verifier.c
diff --cc include/linux/bpf.h
index 95b950412549,c160526fc8bf..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -308,6 -307,9 +308,12 @@@ enum bpf_arg_type 
  	ARG_CONST_ALLOC_SIZE_OR_ZERO,	/* number of allocated bytes requested */
  	ARG_PTR_TO_BTF_ID_SOCK_COMMON,	/* pointer to in-kernel sock_common or bpf-mirrored bpf_sock */
  	ARG_PTR_TO_PERCPU_BTF_ID,	/* pointer to in-kernel percpu type */
++<<<<<<< HEAD
++=======
+ 	ARG_PTR_TO_FUNC,	/* pointer to a bpf program function */
+ 	ARG_PTR_TO_STACK_OR_NULL,	/* pointer to stack or NULL */
+ 	ARG_PTR_TO_CONST_STR,	/* pointer to a null terminated read-only string */
++>>>>>>> fff13c4bb646 (bpf: Add a ARG_PTR_TO_CONST_STR argument type)
  	__BPF_ARG_TYPE_MAX,
  };
  
diff --cc kernel/bpf/verifier.c
index b1498684b49b,5f46dd6f3383..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -4531,6 -4785,9 +4531,12 @@@ static const struct bpf_reg_types const
  static const struct bpf_reg_types btf_ptr_types = { .types = { PTR_TO_BTF_ID } };
  static const struct bpf_reg_types spin_lock_types = { .types = { PTR_TO_MAP_VALUE } };
  static const struct bpf_reg_types percpu_btf_ptr_types = { .types = { PTR_TO_PERCPU_BTF_ID } };
++<<<<<<< HEAD
++=======
+ static const struct bpf_reg_types func_ptr_types = { .types = { PTR_TO_FUNC } };
+ static const struct bpf_reg_types stack_ptr_types = { .types = { PTR_TO_STACK } };
+ static const struct bpf_reg_types const_str_ptr_types = { .types = { PTR_TO_MAP_VALUE } };
++>>>>>>> fff13c4bb646 (bpf: Add a ARG_PTR_TO_CONST_STR argument type)
  
  static const struct bpf_reg_types *compatible_reg_types[__BPF_ARG_TYPE_MAX] = {
  	[ARG_PTR_TO_MAP_KEY]		= &map_key_value_types,
@@@ -4559,6 -4816,9 +4565,12 @@@
  	[ARG_PTR_TO_INT]		= &int_ptr_types,
  	[ARG_PTR_TO_LONG]		= &int_ptr_types,
  	[ARG_PTR_TO_PERCPU_BTF_ID]	= &percpu_btf_ptr_types,
++<<<<<<< HEAD
++=======
+ 	[ARG_PTR_TO_FUNC]		= &func_ptr_types,
+ 	[ARG_PTR_TO_STACK_OR_NULL]	= &stack_ptr_types,
+ 	[ARG_PTR_TO_CONST_STR]		= &const_str_ptr_types,
++>>>>>>> fff13c4bb646 (bpf: Add a ARG_PTR_TO_CONST_STR argument type)
  };
  
  static int check_reg_type(struct bpf_verifier_env *env, u32 regno,
* Unmerged path include/linux/bpf.h
* Unmerged path kernel/bpf/verifier.c
