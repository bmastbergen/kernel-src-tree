trace/hwlat: Remove printk from sampling loop

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Daniel Bristot de Oliveira <bristot@redhat.com>
commit aa892f8c887dd4331458d04de9425cde6664c694
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/aa892f8c.failed

hwlat has some time operation checks on the sample loop, and it is
currently using pr_err (printk) to report them. The problem is that
this can lead the system to an unresponsible state due to an overflow of
printk messages. This problem can be mitigated by writing the error
message to the trace buffer.

Remove the printk messages from the sampling loop, switching the to
messages in the trace buffer.

No functional change.

Link: https://lkml.kernel.org/r/9d77c34869748aa105e965c769d24642914eea3a.1624372313.git.bristot@redhat.com

	Cc: Phil Auld <pauld@redhat.com>
	Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Cc: Kate Carcia <kcarcia@redhat.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Alexandre Chartre <alexandre.chartre@oracle.com>
	Cc: Clark Willaims <williams@redhat.com>
	Cc: John Kacur <jkacur@redhat.com>
	Cc: Juri Lelli <juri.lelli@redhat.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: x86@kernel.org
	Cc: linux-doc@vger.kernel.org
	Cc: linux-kernel@vger.kernel.org
	Signed-off-by: Daniel Bristot de Oliveira <bristot@redhat.com>
	Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
(cherry picked from commit aa892f8c887dd4331458d04de9425cde6664c694)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace_hwlat.c
diff --cc kernel/trace/trace_hwlat.c
index 86a0e47cf098,a625bfdb844e..000000000000
--- a/kernel/trace/trace_hwlat.c
+++ b/kernel/trace/trace_hwlat.c
@@@ -156,9 -179,18 +156,18 @@@ void trace_hwlat_callback(bool enter
  	}
  
  	if (enter)
 -		kdata->nmi_count++;
 +		nmi_count++;
  }
  
+ /*
+  * hwlat_err - report a hwlat error.
+  */
+ #define hwlat_err(msg) ({							\
+ 	struct trace_array *tr = hwlat_trace;					\
+ 										\
+ 	trace_array_printk_buf(tr->array_buffer.buffer, _THIS_IP_, msg);	\
+ })
+ 
  /**
   * get_sample - sample the CPU TSC and look for likely hardware latencies
   *
@@@ -196,14 -231,14 +205,19 @@@ static int get_sample(void
  
  		if (time_u64(last_t2)) {
  			/* Check the delta from outer loop (t2 to next t1) */
 -			outer_diff = time_to_us(time_sub(t1, last_t2));
 +			diff = time_to_us(time_sub(t1, last_t2));
  			/* This shouldn't happen */
++<<<<<<< HEAD
 +			if (diff < 0) {
 +				pr_err(BANNER "time running backwards\n");
++=======
+ 			if (outer_diff < 0) {
+ 				hwlat_err(BANNER "time running backwards\n");
++>>>>>>> aa892f8c887d (trace/hwlat: Remove printk from sampling loop)
  				goto out;
  			}
 -			if (outer_diff > outer_sample)
 -				outer_sample = outer_diff;
 +			if (diff > outer_sample)
 +				outer_sample = diff;
  		}
  		last_t2 = t2;
  
@@@ -219,9 -254,15 +233,9 @@@
  		/* This checks the inner loop (t1 to t2) */
  		diff = time_to_us(time_sub(t2, t1));     /* current diff */
  
 -		if (diff > thresh || outer_diff > thresh) {
 -			if (!count)
 -				ktime_get_real_ts64(&s.timestamp);
 -			count++;
 -		}
 -
  		/* This shouldn't happen */
  		if (diff < 0) {
- 			pr_err(BANNER "time running backwards\n");
+ 			hwlat_err(BANNER "time running backwards\n");
  			goto out;
  		}
  
* Unmerged path kernel/trace/trace_hwlat.c
