Bluetooth: btusb: Consolidate code for waiting firmware to boot

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
commit 604b3cf87fd217ac7d7aeaa94b0bebdf139a8c88
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/604b3cf8.failed

This moves duplicated code for waiting firmware download completion to
a function that can be reused.

	Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
	Tested-by: Tedd Ho-Jeong An <tedd.an@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 604b3cf87fd217ac7d7aeaa94b0bebdf139a8c88)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btusb.c
diff --cc drivers/bluetooth/btusb.c
index c42f0b5d801a,eb250f533265..000000000000
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@@ -2807,52 -2842,9 +2867,26 @@@ static int btusb_setup_intel_new(struc
  	if (ver.fw_variant == 0x23)
  		goto finish;
  
++<<<<<<< HEAD
 +	rettime = ktime_get();
 +	delta = ktime_sub(rettime, calltime);
 +	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
 +
 +	bt_dev_info(hdev, "Firmware loaded in %llu usecs", duration);
 +
 +	calltime = ktime_get();
 +
 +	set_bit(BTUSB_BOOTING, &data->flags);
 +
 +	err = btintel_send_intel_reset(hdev, boot_param);
 +	if (err) {
 +		bt_dev_err(hdev, "Intel Soft Reset failed (%d)", err);
 +		btintel_reset_to_bootloader(hdev);
++=======
+ 	err = btusb_intel_boot(hdev, boot_param);
+ 	if (err)
++>>>>>>> 604b3cf87fd2 (Bluetooth: btusb: Consolidate code for waiting firmware to boot)
  		return err;
- 	}
- 
- 	/* The bootloader will not indicate when the device is ready. This
- 	 * is done by the operational firmware sending bootup notification.
- 	 *
- 	 * Booting into operational firmware should not take longer than
- 	 * 1 second. However if that happens, then just fail the setup
- 	 * since something went wrong.
- 	 */
- 	bt_dev_info(hdev, "Waiting for device to boot");
- 
- 	err = wait_on_bit_timeout(&data->flags, BTUSB_BOOTING,
- 				  TASK_INTERRUPTIBLE,
- 				  msecs_to_jiffies(1000));
- 
- 	if (err == -EINTR) {
- 		bt_dev_err(hdev, "Device boot interrupted");
- 		return -EINTR;
- 	}
- 
- 	if (err) {
- 		bt_dev_err(hdev, "Device boot timeout");
- 		btintel_reset_to_bootloader(hdev);
- 		return -ETIMEDOUT;
- 	}
- 
- 	rettime = ktime_get();
- 	delta = ktime_sub(rettime, calltime);
- 	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
- 
- 	bt_dev_info(hdev, "Device booted in %llu usecs", duration);
  
  	clear_bit(BTUSB_BOOTLOADER, &data->flags);
  
@@@ -2943,52 -2943,9 +2975,26 @@@ static int btusb_setup_intel_newgen(str
  	if (version.img_type == 0x03)
  		goto finish;
  
++<<<<<<< HEAD
 +	rettime = ktime_get();
 +	delta = ktime_sub(rettime, calltime);
 +	duration = (unsigned long long)ktime_to_ns(delta) >> 10;
 +
 +	bt_dev_info(hdev, "Firmware loaded in %llu usecs", duration);
 +
 +	calltime = ktime_get();
 +
 +	set_bit(BTUSB_BOOTING, &data->flags);
 +
 +	err = btintel_send_intel_reset(hdev, boot_param);
 +	if (err) {
 +		bt_dev_err(hdev, "Intel Soft Reset failed (%d)", err);
 +		btintel_reset_to_bootloader(hdev);
++=======
+ 	err = btusb_intel_boot(hdev, boot_param);
+ 	if (err)
++>>>>>>> 604b3cf87fd2 (Bluetooth: btusb: Consolidate code for waiting firmware to boot)
  		return err;
- 	}
- 
- 	/* The bootloader will not indicate when the device is ready. This
- 	 * is done by the operational firmware sending bootup notification.
- 	 *
- 	 * Booting into operational firmware should not take longer than
- 	 * 1 second. However if that happens, then just fail the setup
- 	 * since something went wrong.
- 	 */
- 	bt_dev_info(hdev, "Waiting for device to boot");
- 
- 	err = wait_on_bit_timeout(&data->flags, BTUSB_BOOTING,
- 				  TASK_INTERRUPTIBLE,
- 				  msecs_to_jiffies(1000));
- 
- 	if (err == -EINTR) {
- 		bt_dev_err(hdev, "Device boot interrupted");
- 		return -EINTR;
- 	}
- 
- 	if (err) {
- 		bt_dev_err(hdev, "Device boot timeout");
- 		btintel_reset_to_bootloader(hdev);
- 		return -ETIMEDOUT;
- 	}
- 
- 	rettime = ktime_get();
- 	delta = ktime_sub(rettime, calltime);
- 	duration = (unsigned long long)ktime_to_ns(delta) >> 10;
- 
- 	bt_dev_info(hdev, "Device booted in %llu usecs", duration);
  
  	clear_bit(BTUSB_BOOTLOADER, &data->flags);
  
* Unmerged path drivers/bluetooth/btusb.c
