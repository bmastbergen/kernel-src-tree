ima: Set correct casting types

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Roberto Sassu <roberto.sassu@huawei.com>
commit 24c9ae23bdfa0642228e747849dd052fd4295c6c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/24c9ae23.failed

The code expects that the values being parsed from a buffer when the
ima_canonical_fmt global variable is true are in little endian. Thus, this
patch sets the casting types accordingly.

	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
	Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
(cherry picked from commit 24c9ae23bdfa0642228e747849dd052fd4295c6c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/integrity/ima/ima_template.c
#	security/integrity/ima/ima_template_lib.c
diff --cc security/integrity/ima/ima_template.c
index e0a5324af51f,694560396be0..000000000000
--- a/security/integrity/ima/ima_template.c
+++ b/security/integrity/ima/ima_template.c
@@@ -451,10 -503,19 +451,26 @@@ int ima_restore_measurement_list(loff_
  		if (ret < 0)
  			break;
  
++<<<<<<< HEAD
 +		memcpy(entry->digest, hdr[HDR_DIGEST].data,
 +		       hdr[HDR_DIGEST].len);
 +		entry->pcr = !ima_canonical_fmt ? *(hdr[HDR_PCR].data) :
 +			     le32_to_cpu(*(hdr[HDR_PCR].data));
++=======
+ 		if (memcmp(hdr[HDR_DIGEST].data, zero, sizeof(zero))) {
+ 			ret = ima_calc_field_array_hash(
+ 						&entry->template_data[0],
+ 						entry);
+ 			if (ret < 0) {
+ 				pr_err("cannot calculate template digest\n");
+ 				ret = -EINVAL;
+ 				break;
+ 			}
+ 		}
+ 
+ 		entry->pcr = !ima_canonical_fmt ? *(u32 *)(hdr[HDR_PCR].data) :
+ 			     le32_to_cpu(*(__le32 *)(hdr[HDR_PCR].data));
++>>>>>>> 24c9ae23bdfa (ima: Set correct casting types)
  		ret = ima_restore_measurement_entry(entry);
  		if (ret < 0)
  			break;
diff --cc security/integrity/ima/ima_template_lib.c
index f931ea41fd97,3f8d53a03612..000000000000
--- a/security/integrity/ima/ima_template_lib.c
+++ b/security/integrity/ima/ima_template_lib.c
@@@ -92,6 -90,35 +92,38 @@@ static void ima_show_template_data_asci
  	case DATA_FMT_STRING:
  		seq_printf(m, "%s", buf_ptr);
  		break;
++<<<<<<< HEAD
++=======
+ 	case DATA_FMT_UINT:
+ 		switch (field_data->len) {
+ 		case sizeof(u8):
+ 			seq_printf(m, "%u", *(u8 *)buf_ptr);
+ 			break;
+ 		case sizeof(u16):
+ 			if (ima_canonical_fmt)
+ 				seq_printf(m, "%u",
+ 					   le16_to_cpu(*(__le16 *)buf_ptr));
+ 			else
+ 				seq_printf(m, "%u", *(u16 *)buf_ptr);
+ 			break;
+ 		case sizeof(u32):
+ 			if (ima_canonical_fmt)
+ 				seq_printf(m, "%u",
+ 					   le32_to_cpu(*(__le32 *)buf_ptr));
+ 			else
+ 				seq_printf(m, "%u", *(u32 *)buf_ptr);
+ 			break;
+ 		case sizeof(u64):
+ 			if (ima_canonical_fmt)
+ 				seq_printf(m, "%llu",
+ 					   le64_to_cpu(*(__le64 *)buf_ptr));
+ 			else
+ 				seq_printf(m, "%llu", *(u64 *)buf_ptr);
+ 			break;
+ 		default:
+ 			break;
+ 		}
++>>>>>>> 24c9ae23bdfa (ima: Set correct casting types)
  	default:
  		break;
  	}
* Unmerged path security/integrity/ima/ima_template.c
* Unmerged path security/integrity/ima/ima_template_lib.c
