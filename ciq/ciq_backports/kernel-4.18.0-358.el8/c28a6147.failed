block: export blk_next_bio()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
commit c28a61471c5898e832c6e8634b2659249761b833
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/c28a6147.failed

The block layer provides emulation of zone management operations
targeting all zones of a zoned block device only for the zone reset
operation (REQ_OP_ZONE_RESET). In order to correctly implement
exporting of zoned block devices with NVMeOF, emulating zone management
operations targeting all zones of a device is also necessary for the
open, close and finish zone operations (REQ_OP_ZONE_OPEN,
REQ_OP_ZONE_CLOSE and REQ_OP_ZONE_FINISH).

Instead of duplicating the code, export the existing helper from block
layer so we can use a bio chaining pattern that is present in the block
layer for REQ_OP_ZONE RESET all emulation in the NVMeOF zoned block
device backend.

	Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit c28a61471c5898e832c6e8634b2659249761b833)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bio.h
diff --cc include/linux/bio.h
index 7179bf0d2290,b2491ead22a0..000000000000
--- a/include/linux/bio.h
+++ b/include/linux/bio.h
@@@ -814,5 -822,6 +814,10 @@@ static inline void bio_set_polled(struc
  		bio->bi_opf |= REQ_NOWAIT;
  }
  
++<<<<<<< HEAD
 +#endif /* CONFIG_BLOCK */
++=======
+ struct bio *blk_next_bio(struct bio *bio, unsigned int nr_pages, gfp_t gfp);
+ 
++>>>>>>> c28a61471c58 (block: export blk_next_bio())
  #endif /* __LINUX_BIO_H */
diff --git a/block/blk-lib.c b/block/blk-lib.c
index e90614fd8d6a..a8a0d134a1d0 100644
--- a/block/blk-lib.c
+++ b/block/blk-lib.c
@@ -21,6 +21,7 @@ struct bio *blk_next_bio(struct bio *bio, unsigned int nr_pages, gfp_t gfp)
 
 	return new;
 }
+EXPORT_SYMBOL_GPL(blk_next_bio);
 
 int __blkdev_issue_discard(struct block_device *bdev, sector_t sector,
 		sector_t nr_sects, gfp_t gfp_mask, int flags,
* Unmerged path include/linux/bio.h
