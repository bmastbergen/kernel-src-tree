lib/vsprintf: Add %pfw conversion specifier for printing fwnode names

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
Rebuild_CHGLOG: - lib/vsprintf: Add pfw conversion specifier for printing fwnode names (Chris von Recklinghausen) [1985062]
Rebuild_FUZZ: 99.27%
commit-author Sakari Ailus <sakari.ailus@linux.intel.com>
commit 3bd32d6a2ee62db3c5b06caf7b163b6a4d459ea1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/3bd32d6a.failed

Add support for %pfw conversion specifier (with "f" and "P" modifiers) to
support printing full path of the node, including its name ("f") and only
the node's name ("P") in the printk family of functions. The two flags
have equivalent functionality to existing %pOF with the same two modifiers
("f" and "P") on OF based systems. The ability to do the same on ACPI
based systems is added by this patch.

On ACPI based systems the resulting strings look like

	\_SB.PCI0.CIO2.port@1.endpoint@0

where the nodes are separated by a dot (".") and the first three are
ACPI device nodes and the latter two ACPI data nodes.

	Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Reviewed-by: Petr Mladek <pmladek@suse.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 3bd32d6a2ee62db3c5b06caf7b163b6a4d459ea1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/vsprintf.c
#	scripts/checkpatch.pl
diff --cc lib/vsprintf.c
index e8da51228e1c,65dd5804a93b..000000000000
--- a/lib/vsprintf.c
+++ b/lib/vsprintf.c
@@@ -2007,15 -1991,34 +2007,46 @@@ char *device_node_string(char *buf, cha
  	return widen_string(buf, buf - buf_start, end, spec);
  }
  
++<<<<<<< HEAD
 +static char *kobject_string(char *buf, char *end, void *ptr,
 +			    struct printf_spec spec, const char *fmt)
 +{
 +	switch (fmt[1]) {
 +	case 'F':
 +		return device_node_string(buf, end, ptr, spec, fmt + 1);
 +	}
 +
 +	return error_string(buf, end, "(%pO?)", spec);
++=======
+ static noinline_for_stack
+ char *fwnode_string(char *buf, char *end, struct fwnode_handle *fwnode,
+ 		    struct printf_spec spec, const char *fmt)
+ {
+ 	struct printf_spec str_spec = spec;
+ 	char *buf_start = buf;
+ 
+ 	str_spec.field_width = -1;
+ 
+ 	if (*fmt != 'w')
+ 		return error_string(buf, end, "(%pf?)", spec);
+ 
+ 	if (check_pointer(&buf, end, fwnode, spec))
+ 		return buf;
+ 
+ 	fmt++;
+ 
+ 	switch (*fmt) {
+ 	case 'P':	/* name */
+ 		buf = string(buf, end, fwnode_get_name(fwnode), str_spec);
+ 		break;
+ 	case 'f':	/* full_name */
+ 	default:
+ 		buf = fwnode_full_name_string(fwnode, buf, end);
+ 		break;
+ 	}
+ 
+ 	return widen_string(buf, buf - buf_start, end, spec);
++>>>>>>> 3bd32d6a2ee6 (lib/vsprintf: Add %pfw conversion specifier for printing fwnode names)
  }
  
  /*
@@@ -2120,11 -2125,11 +2151,15 @@@
   *                  F device node flags
   *                  c major compatible string
   *                  C full compatible string
+  * - 'fw[fP]'	For a firmware node (struct fwnode_handle) pointer
+  *		Without an option prints the full name of the node
+  *		f full name
+  *		P node name, including a possible unit address
   * - 'x' For printing the address. Equivalent to "%lx".
 + * - '[ku]s' For a BPF/tracing related format specifier, e.g. used out of
 + *           bpf_trace_printk() where [ku] prefix specifies either kernel (k)
 + *           or user (u) memory to probe, and:
 + *              s a string, equivalent to "%s" on direct vsnprintf() use
   *
   * ** When making changes please also update:
   *	Documentation/core-api/printk-formats.rst
@@@ -2198,22 -2203,11 +2233,28 @@@ char *pointer(const char *fmt, char *bu
  	case 'G':
  		return flags_string(buf, end, ptr, spec, fmt);
  	case 'O':
++<<<<<<< HEAD
 +		return kobject_string(buf, end, ptr, spec, fmt);
++=======
+ 		return device_node_string(buf, end, ptr, spec, fmt + 1);
+ 	case 'f':
+ 		return fwnode_string(buf, end, ptr, spec, fmt + 1);
++>>>>>>> 3bd32d6a2ee6 (lib/vsprintf: Add %pfw conversion specifier for printing fwnode names)
  	case 'x':
  		return pointer_string(buf, end, ptr, spec);
 +	case 'e':
 +		/* %pe with a non-ERR_PTR gets treated as plain %p */
 +		if (!IS_ERR(ptr))
 +			break;
 +		return err_ptr(buf, end, ptr, spec);
 +	case 'u':
 +	case 'k':
 +		switch (fmt[1]) {
 +		case 's':
 +			return string(buf, end, ptr, spec);
 +		default:
 +			return error_string(buf, end, "(einval)", spec);
 +		}
  	}
  
  	/* default is to _not_ leak addresses, hash before printing */
diff --cc scripts/checkpatch.pl
index d4a082e72116,3d1f08fa091c..000000000000
--- a/scripts/checkpatch.pl
+++ b/scripts/checkpatch.pl
@@@ -5845,10 -6020,13 +5846,17 @@@ sub process 
  				my $fmt = get_quoted_string($lines[$count - 1], raw_line($count, 0));
  				$fmt =~ s/%%//g;
  
- 				while ($fmt =~ /(\%[\*\d\.]*p(\w))/g) {
+ 				while ($fmt =~ /(\%[\*\d\.]*p(\w)(\w*))/g) {
  					$specifier = $1;
  					$extension = $2;
++<<<<<<< HEAD
 +					if ($extension !~ /[SsBKRraEehMmIiUDdgVCbGNOxt]/) {
++=======
+ 					$qualifier = $3;
+ 					if ($extension !~ /[SsBKRraEhMmIiUDdgVCbGNOxtf]/ ||
+ 					    ($extension eq "f" &&
+ 					     defined $qualifier && $qualifier !~ /^w/)) {
++>>>>>>> 3bd32d6a2ee6 (lib/vsprintf: Add %pfw conversion specifier for printing fwnode names)
  						$bad_specifier = $specifier;
  						last;
  					}
diff --git a/Documentation/core-api/printk-formats.rst b/Documentation/core-api/printk-formats.rst
index 4f8b975efce3..90e255e5577e 100644
--- a/Documentation/core-api/printk-formats.rst
+++ b/Documentation/core-api/printk-formats.rst
@@ -444,6 +444,30 @@ Examples::
 
 Passed by reference.
 
+Fwnode handles
+--------------
+
+::
+
+	%pfw[fP]
+
+For printing information on fwnode handles. The default is to print the full
+node name, including the path. The modifiers are functionally equivalent to
+%pOF above.
+
+	- f - full name of the node, including the path
+	- P - the name of the node including an address (if there is one)
+
+Examples (ACPI)::
+
+	%pfwf	\_SB.PCI0.CIO2.port@1.endpoint@0	- Full node name
+	%pfwP	endpoint@0				- Node name
+
+Examples (OF)::
+
+	%pfwf	/ocp@68000000/i2c@48072000/camera@10/port/endpoint - Full name
+	%pfwP	endpoint				- Node name
+
 Time and date (struct rtc_time)
 -------------------------------
 
* Unmerged path lib/vsprintf.c
* Unmerged path scripts/checkpatch.pl
