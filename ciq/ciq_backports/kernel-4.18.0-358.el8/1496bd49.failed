nvme: move nvme_ns_head_ops to multipath.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 1496bd4936d215fed40b008e9486c38e6acf01db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/1496bd49.failed

Move the multipath block_device_operations to multipath.c, where they
belong.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Reviewed-by: Javier Gonz√°lez <javier.gonz@samsung.com>
	Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
(cherry picked from commit 1496bd4936d215fed40b008e9486c38e6acf01db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
#	drivers/nvme/host/multipath.c
#	drivers/nvme/host/nvme.h
diff --cc drivers/nvme/host/core.c
index c7006e7b918f,b1f8d94bbe09..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -2440,28 -1978,25 +2440,50 @@@ static const struct block_device_operat
  };
  
  #ifdef CONFIG_NVME_MULTIPATH
++<<<<<<< HEAD
 +static int nvme_ns_head_open(struct block_device *bdev, fmode_t mode)
 +{
 +	if (!nvme_tryget_ns_head(bdev->bd_disk->private_data))
 +		return -ENXIO;
 +	return 0;
 +}
 +
 +static void nvme_ns_head_release(struct gendisk *disk, fmode_t mode)
 +{
 +	nvme_put_ns_head(disk->private_data);
 +}
 +
 +const struct block_device_operations nvme_ns_head_ops = {
 +	.owner		= THIS_MODULE,
 +	.open		= nvme_ns_head_open,
 +	.release	= nvme_ns_head_release,
 +	.ioctl		= nvme_ioctl,
 +	.compat_ioctl	= nvme_compat_ioctl,
 +	.getgeo		= nvme_getgeo,
 +	.report_zones	= nvme_report_zones,
 +	.pr_ops		= &nvme_pr_ops,
 +};
++=======
+ struct nvme_ctrl *nvme_find_get_live_ctrl(struct nvme_subsystem *subsys)
+ {
+ 	struct nvme_ctrl *ctrl;
+ 	int ret;
+ 
+ 	ret = mutex_lock_killable(&nvme_subsystems_lock);
+ 	if (ret)
+ 		return ERR_PTR(ret);
+ 	list_for_each_entry(ctrl, &subsys->ctrls, subsys_entry) {
+ 		if (ctrl->state == NVME_CTRL_LIVE)
+ 			goto found;
+ 	}
+ 	mutex_unlock(&nvme_subsystems_lock);
+ 	return ERR_PTR(-EWOULDBLOCK);
+ found:
+ 	nvme_get_ctrl(ctrl);
+ 	mutex_unlock(&nvme_subsystems_lock);
+ 	return ctrl;
+ }
++>>>>>>> 1496bd4936d2 (nvme: move nvme_ns_head_ops to multipath.c)
  #endif /* CONFIG_NVME_MULTIPATH */
  
  static int nvme_wait_ready(struct nvme_ctrl *ctrl, u64 cap, bool enabled)
diff --cc drivers/nvme/host/multipath.c
index c4c5d694fcd4,68918ea1d3d0..000000000000
--- a/drivers/nvme/host/multipath.c
+++ b/drivers/nvme/host/multipath.c
@@@ -307,10 -294,9 +307,14 @@@ static bool nvme_available_path(struct 
  	return false;
  }
  
++<<<<<<< HEAD
 +static blk_qc_t nvme_ns_head_make_request(struct request_queue *q,
 +		struct bio *bio)
++=======
+ static blk_qc_t nvme_ns_head_submit_bio(struct bio *bio)
++>>>>>>> 1496bd4936d2 (nvme: move nvme_ns_head_ops to multipath.c)
  {
 -	struct nvme_ns_head *head = bio->bi_bdev->bd_disk->private_data;
 +	struct nvme_ns_head *head = bio->bi_disk->private_data;
  	struct device *dev = disk_to_dev(head->disk);
  	struct nvme_ns *ns;
  	blk_qc_t ret = BLK_QC_T_NONE;
diff --cc drivers/nvme/host/nvme.h
index d12eb5696033,c6102ce83bb4..000000000000
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@@ -650,8 -656,19 +650,22 @@@ int nvme_get_log(struct nvme_ctrl *ctrl
  struct nvme_ns *nvme_get_ns_from_disk(struct gendisk *disk,
  		struct nvme_ns_head **head, int *srcu_idx);
  void nvme_put_ns_from_disk(struct nvme_ns_head *head, int idx);
++<<<<<<< HEAD
++=======
+ bool nvme_tryget_ns_head(struct nvme_ns_head *head);
+ void nvme_put_ns_head(struct nvme_ns_head *head);
+ struct nvme_ctrl *nvme_find_get_live_ctrl(struct nvme_subsystem *subsys);
+ int nvme_ioctl(struct block_device *bdev, fmode_t mode,
+ 		unsigned int cmd, unsigned long arg);
+ int nvme_ns_head_ioctl(struct block_device *bdev, fmode_t mode,
+ 		unsigned int cmd, unsigned long arg);
+ long nvme_dev_ioctl(struct file *file, unsigned int cmd,
+ 		unsigned long arg);
+ int nvme_getgeo(struct block_device *bdev, struct hd_geometry *geo);
++>>>>>>> 1496bd4936d2 (nvme: move nvme_ns_head_ops to multipath.c)
  
  extern const struct attribute_group *nvme_ns_id_attr_groups[];
+ extern const struct pr_ops nvme_pr_ops;
  extern const struct block_device_operations nvme_ns_head_ops;
  
  #ifdef CONFIG_NVME_MULTIPATH
* Unmerged path drivers/nvme/host/core.c
* Unmerged path drivers/nvme/host/multipath.c
* Unmerged path drivers/nvme/host/nvme.h
