i2c: designware: Cleanup bus lock handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit 8afb46804dfa88bb86d65e13f3209372f3d912e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/8afb4680.failed

Now that most of the special Bay- / Cherry-Trail bus lock handling has
been moved to the iosf_mbi code we can simplify the remaining code a bit.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Tested-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Acked-by: Wolfram Sang <wsa@the-dreams.de>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8afb46804dfa88bb86d65e13f3209372f3d912e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-baytrail.c
#	drivers/i2c/busses/i2c-designware-core.h
diff --cc drivers/i2c/busses/i2c-designware-baytrail.c
index 8c84fa0b0384,971b5cde7a93..000000000000
--- a/drivers/i2c/busses/i2c-designware-baytrail.c
+++ b/drivers/i2c/busses/i2c-designware-baytrail.c
@@@ -46,9 -36,9 +36,15 @@@ int i2c_dw_probe_lock_support(struct dw
  		return -EPROBE_DEFER;
  
  	dev_info(dev->dev, "I2C bus managed by PUNIT\n");
++<<<<<<< HEAD
 +	dev->acquire_lock = baytrail_i2c_acquire;
 +	dev->release_lock = baytrail_i2c_release;
 +	dev->shared_with_punit = true;
++=======
+ 	dev->acquire_lock = iosf_mbi_block_punit_i2c_access;
+ 	dev->release_lock = iosf_mbi_unblock_punit_i2c_access;
+ 	dev->pm_disabled = true;
++>>>>>>> 8afb46804dfa (i2c: designware: Cleanup bus lock handling)
  
  	return 0;
  }
diff --cc drivers/i2c/busses/i2c-designware-core.h
index 9ec8394f4787,152bf56d8404..000000000000
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@@ -209,10 -208,9 +208,9 @@@
   * @fp_lcnt: fast plus LCNT value
   * @hs_hcnt: high speed HCNT value
   * @hs_lcnt: high speed LCNT value
-  * @pm_qos: pm_qos_request used while holding a hardware lock on the bus
   * @acquire_lock: function to acquire a hardware lock on the bus
   * @release_lock: function to release a hardware lock on the bus
 - * @pm_disabled: true if power-management should be disabled for this i2c-bus
 + * @shared_with_punit: true if this bus is shared with the SoCs PUNIT
   * @disable: function to disable the controller
   * @disable_int: function to disable all interrupts
   * @init: function to initialize the I2C hardware
@@@ -263,10 -260,9 +261,16 @@@ struct dw_i2c_dev 
  	u16			fp_lcnt;
  	u16			hs_hcnt;
  	u16			hs_lcnt;
++<<<<<<< HEAD
 +	struct pm_qos_request	pm_qos;
 +	int			(*acquire_lock)(struct dw_i2c_dev *dev);
 +	void			(*release_lock)(struct dw_i2c_dev *dev);
 +	bool			shared_with_punit;
++=======
+ 	int			(*acquire_lock)(void);
+ 	void			(*release_lock)(void);
+ 	bool			pm_disabled;
++>>>>>>> 8afb46804dfa (i2c: designware: Cleanup bus lock handling)
  	void			(*disable)(struct dw_i2c_dev *dev);
  	void			(*disable_int)(struct dw_i2c_dev *dev);
  	int			(*init)(struct dw_i2c_dev *dev);
* Unmerged path drivers/i2c/busses/i2c-designware-baytrail.c
diff --git a/drivers/i2c/busses/i2c-designware-common.c b/drivers/i2c/busses/i2c-designware-common.c
index 36271cd75342..a4730111d290 100644
--- a/drivers/i2c/busses/i2c-designware-common.c
+++ b/drivers/i2c/busses/i2c-designware-common.c
@@ -269,7 +269,7 @@ int i2c_dw_acquire_lock(struct dw_i2c_dev *dev)
 	if (!dev->acquire_lock)
 		return 0;
 
-	ret = dev->acquire_lock(dev);
+	ret = dev->acquire_lock();
 	if (!ret)
 		return 0;
 
@@ -281,7 +281,7 @@ int i2c_dw_acquire_lock(struct dw_i2c_dev *dev)
 void i2c_dw_release_lock(struct dw_i2c_dev *dev)
 {
 	if (dev->release_lock)
-		dev->release_lock(dev);
+		dev->release_lock();
 }
 
 /*
* Unmerged path drivers/i2c/busses/i2c-designware-core.h
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 9d1dcb6bff24..27355eba19cb 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -419,8 +419,6 @@ static int dw_i2c_plat_remove(struct platform_device *pdev)
 	if (!IS_ERR_OR_NULL(dev->rst))
 		reset_control_assert(dev->rst);
 
-	i2c_dw_remove_lock_support(dev);
-
 	return 0;
 }
 
