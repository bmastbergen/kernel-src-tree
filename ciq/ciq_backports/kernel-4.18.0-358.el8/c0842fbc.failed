random32: move the pseudo-random 32-bit definitions to prandom.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Linus Torvalds <torvalds@linux-foundation.org>
commit c0842fbc1b18c7a044e6ff3e8fa78bfa822c7d1a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/c0842fbc.failed

The addition of percpu.h to the list of includes in random.h revealed
some circular dependencies on arm64 and possibly other platforms.  This
include was added solely for the pseudo-random definitions, which have
nothing to do with the rest of the definitions in this file but are
still there for legacy reasons.

This patch moves the pseudo-random parts to linux/prandom.h and the
percpu.h include with it, which is now guarded by _LINUX_PRANDOM_H and
protected against recursive inclusion.

A further cleanup step would be to remove this from <linux/random.h>
entirely, and make people who use the prandom infrastructure include
just the new header file.  That's a bit of a churn patch, but grepping
for "prandom_" and "next_pseudo_random32" "struct rnd_state" should
catch most users.

But it turns out that that nice cleanup step is fairly painful, because
a _lot_ of code currently seems to depend on the implicit include of
<linux/random.h>, which can currently come in a lot of ways, including
such fairly core headfers as <linux/net.h>.

So the "nice cleanup" part may or may never happen.

Fixes: 1c9df907da83 ("random: fix circular include dependency on arm64 after addition of percpu.h")
	Tested-by: Guenter Roeck <linux@roeck-us.net>
	Acked-by: Willy Tarreau <w@1wt.eu>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c0842fbc1b18c7a044e6ff3e8fa78bfa822c7d1a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/random.h
diff --cc include/linux/random.h
index 1b67b1efd0b3,f45b8be3e3c4..000000000000
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@@ -7,9 -7,10 +7,12 @@@
  #ifndef _LINUX_RANDOM_H
  #define _LINUX_RANDOM_H
  
 -#include <linux/bug.h>
 -#include <linux/kernel.h>
  #include <linux/list.h>
  #include <linux/once.h>
++<<<<<<< HEAD
 +#include <linux/percpu.h>
++=======
++>>>>>>> c0842fbc1b18 (random32: move the pseudo-random 32-bit definitions to prandom.h)
  
  #include <uapi/linux/random.h>
  
@@@ -115,63 -110,12 +118,50 @@@ declare_get_random_var_wait(long
  
  unsigned long randomize_page(unsigned long start, unsigned long range);
  
++<<<<<<< HEAD
 +u32 prandom_u32(void);
 +void prandom_bytes(void *buf, size_t nbytes);
 +void prandom_seed(u32 seed);
 +void prandom_reseed_late(void);
 +
 +struct rnd_state {
 +	__u32 s1, s2, s3, s4;
 +};
 +
 +DECLARE_PER_CPU(struct rnd_state, net_rand_state) __latent_entropy;
 +
 +u32 prandom_u32_state(struct rnd_state *state);
 +void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
 +void prandom_seed_full_state(struct rnd_state __percpu *pcpu_state);
 +
 +#define prandom_init_once(pcpu_state)			\
 +	DO_ONCE(prandom_seed_full_state, (pcpu_state))
 +
 +/**
 + * prandom_u32_max - returns a pseudo-random number in interval [0, ep_ro)
 + * @ep_ro: right open interval endpoint
 + *
 + * Returns a pseudo-random number that is in interval [0, ep_ro). Note
 + * that the result depends on PRNG being well distributed in [0, ~0U]
 + * u32 space. Here we use maximally equidistributed combined Tausworthe
 + * generator, that is, prandom_u32(). This is useful when requesting a
 + * random index of an array containing ep_ro elements, for example.
 + *
 + * Returns: pseudo-random number in interval [0, ep_ro)
 + */
 +static inline u32 prandom_u32_max(u32 ep_ro)
 +{
 +	return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
 +}
 +
++=======
++>>>>>>> c0842fbc1b18 (random32: move the pseudo-random 32-bit definitions to prandom.h)
  /*
-  * Handle minimum values for seeds
+  * This is designed to be standalone for just prandom
+  * users, but for now we include it from <linux/random.h>
+  * for legacy reasons.
   */
- static inline u32 __seed(u32 x, u32 m)
- {
- 	return (x < m) ? x + m : x;
- }
- 
- /**
-  * prandom_seed_state - set seed for prandom_u32_state().
-  * @state: pointer to state structure to receive the seed.
-  * @seed: arbitrary 64-bit value to use as a seed.
-  */
- static inline void prandom_seed_state(struct rnd_state *state, u64 seed)
- {
- 	u32 i = (seed >> 32) ^ (seed << 10) ^ seed;
- 
- 	state->s1 = __seed(i,   2U);
- 	state->s2 = __seed(i,   8U);
- 	state->s3 = __seed(i,  16U);
- 	state->s4 = __seed(i, 128U);
- }
+ #include <linux/prandom.h>
  
  #ifdef CONFIG_ARCH_RANDOM
  # include <asm/archrandom.h>
diff --git a/include/linux/prandom.h b/include/linux/prandom.h
new file mode 100644
index 000000000000..aa16e6468f91
--- /dev/null
+++ b/include/linux/prandom.h
@@ -0,0 +1,78 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * include/linux/prandom.h
+ *
+ * Include file for the fast pseudo-random 32-bit
+ * generation.
+ */
+#ifndef _LINUX_PRANDOM_H
+#define _LINUX_PRANDOM_H
+
+#include <linux/types.h>
+#include <linux/percpu.h>
+
+u32 prandom_u32(void);
+void prandom_bytes(void *buf, size_t nbytes);
+void prandom_seed(u32 seed);
+void prandom_reseed_late(void);
+
+struct rnd_state {
+	__u32 s1, s2, s3, s4;
+};
+
+DECLARE_PER_CPU(struct rnd_state, net_rand_state);
+
+u32 prandom_u32_state(struct rnd_state *state);
+void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
+void prandom_seed_full_state(struct rnd_state __percpu *pcpu_state);
+
+#define prandom_init_once(pcpu_state)			\
+	DO_ONCE(prandom_seed_full_state, (pcpu_state))
+
+/**
+ * prandom_u32_max - returns a pseudo-random number in interval [0, ep_ro)
+ * @ep_ro: right open interval endpoint
+ *
+ * Returns a pseudo-random number that is in interval [0, ep_ro). Note
+ * that the result depends on PRNG being well distributed in [0, ~0U]
+ * u32 space. Here we use maximally equidistributed combined Tausworthe
+ * generator, that is, prandom_u32(). This is useful when requesting a
+ * random index of an array containing ep_ro elements, for example.
+ *
+ * Returns: pseudo-random number in interval [0, ep_ro)
+ */
+static inline u32 prandom_u32_max(u32 ep_ro)
+{
+	return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
+}
+
+/*
+ * Handle minimum values for seeds
+ */
+static inline u32 __seed(u32 x, u32 m)
+{
+	return (x < m) ? x + m : x;
+}
+
+/**
+ * prandom_seed_state - set seed for prandom_u32_state().
+ * @state: pointer to state structure to receive the seed.
+ * @seed: arbitrary 64-bit value to use as a seed.
+ */
+static inline void prandom_seed_state(struct rnd_state *state, u64 seed)
+{
+	u32 i = (seed >> 32) ^ (seed << 10) ^ seed;
+
+	state->s1 = __seed(i,   2U);
+	state->s2 = __seed(i,   8U);
+	state->s3 = __seed(i,  16U);
+	state->s4 = __seed(i, 128U);
+}
+
+/* Pseudo random number generator from numerical recipes. */
+static inline u32 next_pseudo_random32(u32 seed)
+{
+	return seed * 1664525 + 1013904223;
+}
+
+#endif
* Unmerged path include/linux/random.h
