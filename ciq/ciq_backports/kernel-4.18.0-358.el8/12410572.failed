Bluetooth: Break add adv into two mgmt commands

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Daniel Winkler <danielwinkler@google.com>
commit 12410572833a283ce92fcf9679ca8a2f372097ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/12410572.failed

This patch adds support for the new advertising add interface, with the
first command setting advertising parameters and the second to set
advertising data. The set parameters command allows the caller to leave
some fields "unset", with a params bitfield defining which params were
purposefully set. Unset parameters will be given defaults when calling
hci_add_adv_instance. The data passed to the param mgmt command is
allowed to be flexible, so in the future if bluetoothd passes a larger
structure with new params, the mgmt command will ignore the unknown
members at the end.

This change has been validated on both hatch (extended advertising) and
kukui (no extended advertising) chromebooks running bluetoothd that
support this new interface. I ran the following manual tests:
- Set several (3) advertisements using modified test_advertisement.py
- For each, validate correct data and parameters in btmon trace
- Verified both for software rotation and extended adv

Automatic test suite also run, testing many (25) scenarios of single and
multi-advertising for data/parameter correctness.

	Reviewed-by: Sonny Sasaka <sonnysasaka@chromium.org>
	Signed-off-by: Daniel Winkler <danielwinkler@google.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
	Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
(cherry picked from commit 12410572833a283ce92fcf9679ca8a2f372097ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/bluetooth/hci_core.h
#	include/net/bluetooth/mgmt.h
#	net/bluetooth/mgmt.c
diff --cc include/net/bluetooth/hci_core.h
index 87a79e4f1ac5,3c2e205f226a..000000000000
--- a/include/net/bluetooth/hci_core.h
+++ b/include/net/bluetooth/hci_core.h
@@@ -237,6 -238,26 +237,29 @@@ struct adv_info 
  #define HCI_MAX_ADV_INSTANCES		5
  #define HCI_DEFAULT_ADV_DURATION	2
  
++<<<<<<< HEAD
++=======
+ #define HCI_ADV_TX_POWER_NO_PREFERENCE 0x7F
+ 
+ struct adv_pattern {
+ 	struct list_head list;
+ 	__u8 ad_type;
+ 	__u8 offset;
+ 	__u8 length;
+ 	__u8 value[HCI_MAX_AD_LENGTH];
+ };
+ 
+ struct adv_monitor {
+ 	struct list_head patterns;
+ 	bool		active;
+ 	__u16		handle;
+ };
+ 
+ #define HCI_MIN_ADV_MONITOR_HANDLE		1
+ #define HCI_MAX_ADV_MONITOR_NUM_HANDLES	32
+ #define HCI_MAX_ADV_MONITOR_NUM_PATTERNS	16
+ 
++>>>>>>> 12410572833a (Bluetooth: Break add adv into two mgmt commands)
  #define HCI_MAX_SHORT_NAME_LENGTH	10
  
  /* Min encryption key size to match with SMP */
diff --cc include/net/bluetooth/mgmt.h
index 5b34e2732311,2e18e4173e2f..000000000000
--- a/include/net/bluetooth/mgmt.h
+++ b/include/net/bluetooth/mgmt.h
@@@ -676,6 -684,138 +680,141 @@@ struct mgmt_cp_set_blocked_keys 
  } __packed;
  #define MGMT_OP_SET_BLOCKED_KEYS_SIZE 2
  
++<<<<<<< HEAD
++=======
+ #define MGMT_OP_SET_WIDEBAND_SPEECH	0x0047
+ 
+ #define MGMT_OP_READ_SECURITY_INFO	0x0048
+ #define MGMT_READ_SECURITY_INFO_SIZE	0
+ struct mgmt_rp_read_security_info {
+ 	__le16   sec_len;
+ 	__u8     sec[];
+ } __packed;
+ 
+ #define MGMT_OP_READ_EXP_FEATURES_INFO	0x0049
+ #define MGMT_READ_EXP_FEATURES_INFO_SIZE 0
+ struct mgmt_rp_read_exp_features_info {
+ 	__le16 feature_count;
+ 	struct {
+ 		__u8   uuid[16];
+ 		__le32 flags;
+ 	} features[];
+ } __packed;
+ 
+ #define MGMT_OP_SET_EXP_FEATURE		0x004a
+ struct mgmt_cp_set_exp_feature {
+ 	__u8   uuid[16];
+ 	__u8   param[];
+ } __packed;
+ #define MGMT_SET_EXP_FEATURE_SIZE	16
+ struct mgmt_rp_set_exp_feature {
+ 	__u8   uuid[16];
+ 	__le32 flags;
+ } __packed;
+ 
+ #define MGMT_OP_READ_DEF_SYSTEM_CONFIG	0x004b
+ #define MGMT_READ_DEF_SYSTEM_CONFIG_SIZE	0
+ 
+ #define MGMT_OP_SET_DEF_SYSTEM_CONFIG	0x004c
+ #define MGMT_SET_DEF_SYSTEM_CONFIG_SIZE		0
+ 
+ #define MGMT_OP_READ_DEF_RUNTIME_CONFIG	0x004d
+ #define MGMT_READ_DEF_RUNTIME_CONFIG_SIZE	0
+ 
+ #define MGMT_OP_SET_DEF_RUNTIME_CONFIG	0x004e
+ #define MGMT_SET_DEF_RUNTIME_CONFIG_SIZE	0
+ 
+ #define MGMT_OP_GET_DEVICE_FLAGS	0x004F
+ #define MGMT_GET_DEVICE_FLAGS_SIZE	7
+ struct mgmt_cp_get_device_flags {
+ 	struct mgmt_addr_info addr;
+ } __packed;
+ struct mgmt_rp_get_device_flags {
+ 	struct mgmt_addr_info addr;
+ 	__le32 supported_flags;
+ 	__le32 current_flags;
+ } __packed;
+ 
+ #define MGMT_OP_SET_DEVICE_FLAGS	0x0050
+ #define MGMT_SET_DEVICE_FLAGS_SIZE	11
+ struct mgmt_cp_set_device_flags {
+ 	struct mgmt_addr_info addr;
+ 	__le32 current_flags;
+ } __packed;
+ struct mgmt_rp_set_device_flags {
+ 	struct mgmt_addr_info addr;
+ } __packed;
+ 
+ #define MGMT_ADV_MONITOR_FEATURE_MASK_OR_PATTERNS    BIT(0)
+ 
+ #define MGMT_OP_READ_ADV_MONITOR_FEATURES	0x0051
+ #define MGMT_READ_ADV_MONITOR_FEATURES_SIZE	0
+ struct mgmt_rp_read_adv_monitor_features {
+ 	__le32 supported_features;
+ 	__le32 enabled_features;
+ 	__le16 max_num_handles;
+ 	__u8 max_num_patterns;
+ 	__le16 num_handles;
+ 	__le16 handles[];
+ }  __packed;
+ 
+ struct mgmt_adv_pattern {
+ 	__u8 ad_type;
+ 	__u8 offset;
+ 	__u8 length;
+ 	__u8 value[31];
+ } __packed;
+ 
+ #define MGMT_OP_ADD_ADV_PATTERNS_MONITOR	0x0052
+ struct mgmt_cp_add_adv_patterns_monitor {
+ 	__u8 pattern_count;
+ 	struct mgmt_adv_pattern patterns[];
+ } __packed;
+ #define MGMT_ADD_ADV_PATTERNS_MONITOR_SIZE	1
+ struct mgmt_rp_add_adv_patterns_monitor {
+ 	__le16 monitor_handle;
+ } __packed;
+ 
+ #define MGMT_OP_REMOVE_ADV_MONITOR		0x0053
+ struct mgmt_cp_remove_adv_monitor {
+ 	__le16 monitor_handle;
+ } __packed;
+ #define MGMT_REMOVE_ADV_MONITOR_SIZE		2
+ struct mgmt_rp_remove_adv_monitor {
+ 	__le16 monitor_handle;
+ } __packed;
+ 
+ #define MGMT_OP_ADD_EXT_ADV_PARAMS		0x0054
+ struct mgmt_cp_add_ext_adv_params {
+ 	__u8	instance;
+ 	__le32	flags;
+ 	__le16	duration;
+ 	__le16	timeout;
+ 	__le32	min_interval;
+ 	__le32	max_interval;
+ 	__s8	tx_power;
+ } __packed;
+ #define MGMT_ADD_EXT_ADV_PARAMS_MIN_SIZE	18
+ struct mgmt_rp_add_ext_adv_params {
+ 	__u8	instance;
+ 	__s8	tx_power;
+ 	__u8	max_adv_data_len;
+ 	__u8	max_scan_rsp_len;
+ } __packed;
+ 
+ #define MGMT_OP_ADD_EXT_ADV_DATA		0x0055
+ struct mgmt_cp_add_ext_adv_data {
+ 	__u8	instance;
+ 	__u8	adv_data_len;
+ 	__u8	scan_rsp_len;
+ 	__u8	data[];
+ } __packed;
+ #define MGMT_ADD_EXT_ADV_DATA_SIZE	3
+ struct mgmt_rp_add_ext_adv_data {
+ 	__u8	instance;
+ } __packed;
+ 
++>>>>>>> 12410572833a (Bluetooth: Break add adv into two mgmt commands)
  #define MGMT_EV_CMD_COMPLETE		0x0001
  struct mgmt_ev_cmd_complete {
  	__le16	opcode;
diff --cc net/bluetooth/mgmt.c
index bd9aa408640d,ec6b520be368..000000000000
--- a/net/bluetooth/mgmt.c
+++ b/net/bluetooth/mgmt.c
@@@ -108,6 -110,20 +108,23 @@@ static const u16 mgmt_commands[] = 
  	MGMT_OP_SET_APPEARANCE,
  	MGMT_OP_SET_BLOCKED_KEYS,
  	MGMT_OP_SET_WIDEBAND_SPEECH,
++<<<<<<< HEAD
++=======
+ 	MGMT_OP_READ_SECURITY_INFO,
+ 	MGMT_OP_READ_EXP_FEATURES_INFO,
+ 	MGMT_OP_SET_EXP_FEATURE,
+ 	MGMT_OP_READ_DEF_SYSTEM_CONFIG,
+ 	MGMT_OP_SET_DEF_SYSTEM_CONFIG,
+ 	MGMT_OP_READ_DEF_RUNTIME_CONFIG,
+ 	MGMT_OP_SET_DEF_RUNTIME_CONFIG,
+ 	MGMT_OP_GET_DEVICE_FLAGS,
+ 	MGMT_OP_SET_DEVICE_FLAGS,
+ 	MGMT_OP_READ_ADV_MONITOR_FEATURES,
+ 	MGMT_OP_ADD_ADV_PATTERNS_MONITOR,
+ 	MGMT_OP_REMOVE_ADV_MONITOR,
+ 	MGMT_OP_ADD_EXT_ADV_PARAMS,
+ 	MGMT_OP_ADD_EXT_ADV_DATA,
++>>>>>>> 12410572833a (Bluetooth: Break add adv into two mgmt commands)
  };
  
  static const u16 mgmt_events[] = {
@@@ -7128,6 -8189,32 +7498,35 @@@ static const struct hci_mgmt_handler mg
  	{ set_blocked_keys,	   MGMT_OP_SET_BLOCKED_KEYS_SIZE,
  						HCI_MGMT_VAR_LEN },
  	{ set_wideband_speech,	   MGMT_SETTING_SIZE },
++<<<<<<< HEAD
++=======
+ 	{ read_security_info,      MGMT_READ_SECURITY_INFO_SIZE,
+ 						HCI_MGMT_UNTRUSTED },
+ 	{ read_exp_features_info,  MGMT_READ_EXP_FEATURES_INFO_SIZE,
+ 						HCI_MGMT_UNTRUSTED |
+ 						HCI_MGMT_HDEV_OPTIONAL },
+ 	{ set_exp_feature,         MGMT_SET_EXP_FEATURE_SIZE,
+ 						HCI_MGMT_VAR_LEN |
+ 						HCI_MGMT_HDEV_OPTIONAL },
+ 	{ read_def_system_config,  MGMT_READ_DEF_SYSTEM_CONFIG_SIZE,
+ 						HCI_MGMT_UNTRUSTED },
+ 	{ set_def_system_config,   MGMT_SET_DEF_SYSTEM_CONFIG_SIZE,
+ 						HCI_MGMT_VAR_LEN },
+ 	{ read_def_runtime_config, MGMT_READ_DEF_RUNTIME_CONFIG_SIZE,
+ 						HCI_MGMT_UNTRUSTED },
+ 	{ set_def_runtime_config,  MGMT_SET_DEF_RUNTIME_CONFIG_SIZE,
+ 						HCI_MGMT_VAR_LEN },
+ 	{ get_device_flags,        MGMT_GET_DEVICE_FLAGS_SIZE },
+ 	{ set_device_flags,        MGMT_SET_DEVICE_FLAGS_SIZE },
+ 	{ read_adv_mon_features,   MGMT_READ_ADV_MONITOR_FEATURES_SIZE },
+ 	{ add_adv_patterns_monitor,MGMT_ADD_ADV_PATTERNS_MONITOR_SIZE,
+ 						HCI_MGMT_VAR_LEN },
+ 	{ remove_adv_monitor,      MGMT_REMOVE_ADV_MONITOR_SIZE },
+ 	{ add_ext_adv_params,      MGMT_ADD_EXT_ADV_PARAMS_MIN_SIZE,
+ 						HCI_MGMT_VAR_LEN },
+ 	{ add_ext_adv_data,        MGMT_ADD_EXT_ADV_DATA_SIZE,
+ 						HCI_MGMT_VAR_LEN },
++>>>>>>> 12410572833a (Bluetooth: Break add adv into two mgmt commands)
  };
  
  void mgmt_index_added(struct hci_dev *hdev)
* Unmerged path include/net/bluetooth/hci_core.h
* Unmerged path include/net/bluetooth/mgmt.h
diff --git a/net/bluetooth/hci_event.c b/net/bluetooth/hci_event.c
index 4c50fa2de0a1..70d9faf49b27 100644
--- a/net/bluetooth/hci_event.c
+++ b/net/bluetooth/hci_event.c
@@ -1752,6 +1752,7 @@ static void hci_cc_set_ext_adv_param(struct hci_dev *hdev, struct sk_buff *skb)
 	}
 	/* Update adv data as tx power is known now */
 	hci_req_update_adv_data(hdev, hdev->cur_adv_instance);
+
 	hci_dev_unlock(hdev);
 }
 
* Unmerged path net/bluetooth/mgmt.c
