ima: Fail rule parsing when the KEXEC_CMDLINE hook is combined with an invalid cond

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Tyler Hicks <tyhicks@linux.microsoft.com>
commit db2045f5892a9db7354442bf77f9b03b50ff9ee1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/db2045f5.failed

The KEXEC_CMDLINE hook function only supports the pcr conditional. Make
this clear at policy load so that IMA policy authors don't assume that
other conditionals are supported.

Since KEXEC_CMDLINE's inception, ima_match_rules() has always returned
true on any loaded KEXEC_CMDLINE rule without any consideration for
other conditionals present in the rule. Make it clear that pcr is the
only supported KEXEC_CMDLINE conditional by returning an error during
policy load.

An example of why this is a problem can be explained with the following
rule:

 dont_measure func=KEXEC_CMDLINE obj_type=foo_t

An IMA policy author would have assumed that rule is valid because the
parser accepted it but the result was that measurements for all
KEXEC_CMDLINE operations would be disabled.

Fixes: b0935123a183 ("IMA: Define a new hook to measure the kexec boot command line arguments")
	Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
	Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
	Reviewed-by: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
	Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
(cherry picked from commit db2045f5892a9db7354442bf77f9b03b50ff9ee1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/integrity/ima/ima_policy.c
diff --cc security/integrity/ima/ima_policy.c
index 77c1e3c92616,1c64bd6f1728..000000000000
--- a/security/integrity/ima/ima_policy.c
+++ b/security/integrity/ima/ima_policy.c
@@@ -253,6 -253,107 +253,110 @@@ static int __init default_appraise_poli
  }
  __setup("ima_appraise_tcb", default_appraise_policy_setup);
  
++<<<<<<< HEAD
++=======
+ static void ima_lsm_free_rule(struct ima_rule_entry *entry)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < MAX_LSM_RULES; i++) {
+ 		security_filter_rule_free(entry->lsm[i].rule);
+ 		kfree(entry->lsm[i].args_p);
+ 	}
+ }
+ 
+ static void ima_free_rule(struct ima_rule_entry *entry)
+ {
+ 	if (!entry)
+ 		return;
+ 
+ 	/*
+ 	 * entry->template->fields may be allocated in ima_parse_rule() but that
+ 	 * reference is owned by the corresponding ima_template_desc element in
+ 	 * the defined_templates list and cannot be freed here
+ 	 */
+ 	kfree(entry->fsname);
+ 	kfree(entry->keyrings);
+ 	ima_lsm_free_rule(entry);
+ 	kfree(entry);
+ }
+ 
+ static struct ima_rule_entry *ima_lsm_copy_rule(struct ima_rule_entry *entry)
+ {
+ 	struct ima_rule_entry *nentry;
+ 	int i;
+ 
+ 	nentry = kmalloc(sizeof(*nentry), GFP_KERNEL);
+ 	if (!nentry)
+ 		return NULL;
+ 
+ 	/*
+ 	 * Immutable elements are copied over as pointers and data; only
+ 	 * lsm rules can change
+ 	 */
+ 	memcpy(nentry, entry, sizeof(*nentry));
+ 	memset(nentry->lsm, 0, sizeof_field(struct ima_rule_entry, lsm));
+ 
+ 	for (i = 0; i < MAX_LSM_RULES; i++) {
+ 		if (!entry->lsm[i].args_p)
+ 			continue;
+ 
+ 		nentry->lsm[i].type = entry->lsm[i].type;
+ 		nentry->lsm[i].args_p = kstrdup(entry->lsm[i].args_p,
+ 						GFP_KERNEL);
+ 		if (!nentry->lsm[i].args_p)
+ 			goto out_err;
+ 
+ 		security_filter_rule_init(nentry->lsm[i].type,
+ 					  Audit_equal,
+ 					  nentry->lsm[i].args_p,
+ 					  &nentry->lsm[i].rule);
+ 		if (!nentry->lsm[i].rule)
+ 			pr_warn("rule for LSM \'%s\' is undefined\n",
+ 				(char *)entry->lsm[i].args_p);
+ 	}
+ 	return nentry;
+ 
+ out_err:
+ 	ima_lsm_free_rule(nentry);
+ 	kfree(nentry);
+ 	return NULL;
+ }
+ 
+ static int ima_lsm_update_rule(struct ima_rule_entry *entry)
+ {
+ 	struct ima_rule_entry *nentry;
+ 
+ 	nentry = ima_lsm_copy_rule(entry);
+ 	if (!nentry)
+ 		return -ENOMEM;
+ 
+ 	list_replace_rcu(&entry->list, &nentry->list);
+ 	synchronize_rcu();
+ 	/*
+ 	 * ima_lsm_copy_rule() shallow copied all references, except for the
+ 	 * LSM references, from entry to nentry so we only want to free the LSM
+ 	 * references and the entry itself. All other memory refrences will now
+ 	 * be owned by nentry.
+ 	 */
+ 	ima_lsm_free_rule(entry);
+ 	kfree(entry);
+ 
+ 	return 0;
+ }
+ 
+ static bool ima_rule_contains_lsm_cond(struct ima_rule_entry *entry)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < MAX_LSM_RULES; i++)
+ 		if (entry->lsm[i].args_p)
+ 			return true;
+ 
+ 	return false;
+ }
+ 
++>>>>>>> db2045f5892a (ima: Fail rule parsing when the KEXEC_CMDLINE hook is combined with an invalid cond)
  /*
   * The LSM policy can be reloaded, leaving the IMA LSM based rules referring
   * to the old, stale LSM policy.  Update the IMA LSM based rules to reflect
@@@ -811,6 -984,53 +915,56 @@@ static void check_template_modsig(cons
  #undef MSG
  }
  
++<<<<<<< HEAD
++=======
+ static bool ima_validate_rule(struct ima_rule_entry *entry)
+ {
+ 	/* Ensure that the action is set */
+ 	if (entry->action == UNKNOWN)
+ 		return false;
+ 
+ 	/*
+ 	 * Ensure that the hook function is compatible with the other
+ 	 * components of the rule
+ 	 */
+ 	switch (entry->func) {
+ 	case NONE:
+ 	case FILE_CHECK:
+ 	case MMAP_CHECK:
+ 	case BPRM_CHECK:
+ 	case CREDS_CHECK:
+ 	case POST_SETATTR:
+ 	case MODULE_CHECK:
+ 	case FIRMWARE_CHECK:
+ 	case KEXEC_KERNEL_CHECK:
+ 	case KEXEC_INITRAMFS_CHECK:
+ 	case POLICY_CHECK:
+ 		/* Validation of these hook functions is in ima_parse_rule() */
+ 		break;
+ 	case KEXEC_CMDLINE:
+ 		if (entry->action & ~(MEASURE | DONT_MEASURE))
+ 			return false;
+ 
+ 		if (entry->flags & ~(IMA_FUNC | IMA_PCR))
+ 			return false;
+ 
+ 		if (ima_rule_contains_lsm_cond(entry))
+ 			return false;
+ 
+ 		break;
+ 	case KEY_CHECK:
+ 		if (entry->action & ~(MEASURE | DONT_MEASURE))
+ 			return false;
+ 
+ 		break;
+ 	default:
+ 		return false;
+ 	}
+ 
+ 	return true;
+ }
+ 
++>>>>>>> db2045f5892a (ima: Fail rule parsing when the KEXEC_CMDLINE hook is combined with an invalid cond)
  static int ima_parse_rule(char *rule, struct ima_rule_entry *entry)
  {
  	struct audit_buffer *ab;
* Unmerged path security/integrity/ima/ima_policy.c
