exec: Move the call of prepare_binprm into search_binary_handler

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 8b72ca9004ed35104deb80b07990da5503bc5252
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/8b72ca90.failed

The code in prepare_binary_handler needs to be run every time
search_binary_handler is called so move the call into search_binary_handler
itself to make the code simpler and easier to understand.

Link: https://lkml.kernel.org/r/87d070zrvx.fsf_-_@x220.int.ebiederm.org
	Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: James Morris <jamorris@linux.microsoft.com>
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit 8b72ca9004ed35104deb80b07990da5503bc5252)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/binfmt_misc.c
diff --cc fs/binfmt_misc.c
index 46a3d149bb7f,50a73afdf9b7..000000000000
--- a/fs/binfmt_misc.c
+++ b/fs/binfmt_misc.c
@@@ -217,22 -218,9 +217,25 @@@ static int load_misc_binary(struct linu
  		goto error;
  
  	bprm->file = interp_file;
 -	if (fmt->flags & MISC_FMT_CREDENTIALS)
 -		bprm->preserve_creds = 1;
 +	if (fmt->flags & MISC_FMT_CREDENTIALS) {
 +		loff_t pos = 0;
  
 +		/*
 +		 * No need to call prepare_binprm(), it's already been
 +		 * done.  bprm->buf is stale, update from interp_file.
 +		 */
 +		memset(bprm->buf, 0, BINPRM_BUF_SIZE);
 +		retval = kernel_read(bprm->file, bprm->buf, BINPRM_BUF_SIZE,
 +				&pos);
 +	} else
 +		retval = prepare_binprm(bprm);
 +
++<<<<<<< HEAD
 +	if (retval < 0)
 +		goto error;
 +
++=======
++>>>>>>> 8b72ca9004ed (exec: Move the call of prepare_binprm into search_binary_handler)
  	retval = search_binary_handler(bprm);
  	if (retval < 0)
  		goto error;
diff --git a/arch/alpha/kernel/binfmt_loader.c b/arch/alpha/kernel/binfmt_loader.c
index a8d0d6e06526..d712ba51d15a 100644
--- a/arch/alpha/kernel/binfmt_loader.c
+++ b/arch/alpha/kernel/binfmt_loader.c
@@ -35,9 +35,6 @@ static int load_binary(struct linux_binprm *bprm)
 
 	bprm->file = file;
 	bprm->loader = loader;
-	retval = prepare_binprm(bprm);
-	if (retval < 0)
-		return retval;
 	return search_binary_handler(bprm);
 }
 
diff --git a/fs/binfmt_em86.c b/fs/binfmt_em86.c
index dd2d3f0cd55d..e14db7996eac 100644
--- a/fs/binfmt_em86.c
+++ b/fs/binfmt_em86.c
@@ -90,10 +90,6 @@ static int load_em86(struct linux_binprm *bprm)
 
 	bprm->file = file;
 
-	retval = prepare_binprm(bprm);
-	if (retval < 0)
-		return retval;
-
 	return search_binary_handler(bprm);
 }
 
* Unmerged path fs/binfmt_misc.c
diff --git a/fs/binfmt_script.c b/fs/binfmt_script.c
index 7cde3f46ad26..010c67c06e13 100644
--- a/fs/binfmt_script.c
+++ b/fs/binfmt_script.c
@@ -103,9 +103,6 @@ static int load_script(struct linux_binprm *bprm)
 		return PTR_ERR(file);
 
 	bprm->file = file;
-	retval = prepare_binprm(bprm);
-	if (retval < 0)
-		return retval;
 	return search_binary_handler(bprm);
 }
 
diff --git a/fs/exec.c b/fs/exec.c
index 267f61b63004..6e431b3a88a9 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1594,7 +1594,7 @@ static void bprm_fill_uid(struct linux_binprm *bprm)
  *
  * This may be called multiple times for binary chains (scripts for example).
  */
-int prepare_binprm(struct linux_binprm *bprm)
+static int prepare_binprm(struct linux_binprm *bprm)
 {
 	int retval;
 	loff_t pos = 0;
@@ -1611,8 +1611,6 @@ int prepare_binprm(struct linux_binprm *bprm)
 	return kernel_read(bprm->file, bprm->buf, BINPRM_BUF_SIZE, &pos);
 }
 
-EXPORT_SYMBOL(prepare_binprm);
-
 /*
  * Arguments are '\0' separated strings found at the location bprm->p
  * points to; chop off the first by relocating brpm->p to right after
@@ -1668,6 +1666,10 @@ int search_binary_handler(struct linux_binprm *bprm)
 	if (bprm->recursion_depth > 5)
 		return -ELOOP;
 
+	retval = prepare_binprm(bprm);
+	if (retval < 0)
+		return retval;
+
 	retval = security_bprm_check(bprm);
 	if (retval)
 		return retval;
@@ -1827,10 +1829,6 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if ((retval = bprm->envc) < 0)
 		goto out;
 
-	retval = prepare_binprm(bprm);
-	if (retval < 0)
-		goto out;
-
 	retval = copy_strings_kernel(1, &bprm->filename, bprm);
 	if (retval < 0)
 		goto out;
diff --git a/include/linux/binfmts.h b/include/linux/binfmts.h
index 8c12228326b0..30b36680d774 100644
--- a/include/linux/binfmts.h
+++ b/include/linux/binfmts.h
@@ -116,7 +116,6 @@ static inline void insert_binfmt(struct linux_binfmt *fmt)
 
 extern void unregister_binfmt(struct linux_binfmt *);
 
-extern int prepare_binprm(struct linux_binprm *);
 extern int __must_check remove_arg_zero(struct linux_binprm *);
 extern int search_binary_handler(struct linux_binprm *);
 extern int flush_old_exec(struct linux_binprm * bprm);
