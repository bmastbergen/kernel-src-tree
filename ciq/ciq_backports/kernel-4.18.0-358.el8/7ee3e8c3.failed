KVM: Export kvm_make_all_cpus_request() for use in marking VMs as bugged

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 7ee3e8c39d3aed6ff4cc618d86ba9128f0c80087
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/7ee3e8c3.failed

Export kvm_make_all_cpus_request() and hoist the request helper
declarations of request up to the KVM_REQ_* definitions in preparation
for adding a "VM bugged" framework.  The framework will add KVM_BUG()
and KVM_BUG_ON() as alternatives to full BUG()/BUG_ON() for cases where
KVM has definitely hit a bug (in itself or in silicon) and the VM is all
but guaranteed to be hosed.  Marking a VM bugged will trigger a request
to all vCPUs to allow arch code to forcefully evict each vCPU from its
run loop.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Isaku Yamahata <isaku.yamahata@intel.com>
Message-Id: <1d8cbbc8065d831343e70b5dcaea92268145eef1.1625186503.git.isaku.yamahata@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 7ee3e8c39d3aed6ff4cc618d86ba9128f0c80087)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kvm_host.h
diff --cc include/linux/kvm_host.h
index 78113d686126,b7bf9d6a7780..000000000000
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@@ -574,6 -640,30 +583,33 @@@ struct kvm 
  #define vcpu_err(vcpu, fmt, ...)					\
  	kvm_err("vcpu%i " fmt, (vcpu)->vcpu_id, ## __VA_ARGS__)
  
++<<<<<<< HEAD
++=======
+ static inline void kvm_vm_bugged(struct kvm *kvm)
+ {
+ 	kvm->vm_bugged = true;
+ 	kvm_make_all_cpus_request(kvm, KVM_REQ_VM_BUGGED);
+ }
+ 
+ #define KVM_BUG(cond, kvm, fmt...)				\
+ ({								\
+ 	int __ret = (cond);					\
+ 								\
+ 	if (WARN_ONCE(__ret && !(kvm)->vm_bugged, fmt))		\
+ 		kvm_vm_bugged(kvm);				\
+ 	unlikely(__ret);					\
+ })
+ 
+ #define KVM_BUG_ON(cond, kvm)					\
+ ({								\
+ 	int __ret = (cond);					\
+ 								\
+ 	if (WARN_ON_ONCE(__ret && !(kvm)->vm_bugged))		\
+ 		kvm_vm_bugged(kvm);				\
+ 	unlikely(__ret);					\
+ })
+ 
++>>>>>>> 7ee3e8c39d3a (KVM: Export kvm_make_all_cpus_request() for use in marking VMs as bugged)
  static inline bool kvm_dirty_log_manual_protect_and_init_set(struct kvm *kvm)
  {
  	return !!(kvm->manual_dirty_log_protect & KVM_DIRTY_LOG_INITIALLY_SET);
@@@ -887,15 -978,6 +923,18 @@@ void kvm_mmu_free_memory_cache(struct k
  void *kvm_mmu_memory_cache_alloc(struct kvm_mmu_memory_cache *mc);
  #endif
  
++<<<<<<< HEAD
 +bool kvm_make_vcpus_request_mask(struct kvm *kvm, unsigned int req,
 +				 struct kvm_vcpu *except,
 +				 unsigned long *vcpu_bitmap, cpumask_var_t tmp);
 +bool kvm_make_all_cpus_request(struct kvm *kvm, unsigned int req);
 +bool kvm_make_all_cpus_request_except(struct kvm *kvm, unsigned int req,
 +				      struct kvm_vcpu *except);
 +bool kvm_make_cpus_request_mask(struct kvm *kvm, unsigned int req,
 +				unsigned long *vcpu_bitmap);
 +
++=======
++>>>>>>> 7ee3e8c39d3a (KVM: Export kvm_make_all_cpus_request() for use in marking VMs as bugged)
  long kvm_arch_dev_ioctl(struct file *filp,
  			unsigned int ioctl, unsigned long arg);
  long kvm_arch_vcpu_ioctl(struct file *filp,
* Unmerged path include/linux/kvm_host.h
