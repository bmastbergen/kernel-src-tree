i2c: designware: Rename i2c_dw_probe() to i2c_dw_probe_master()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit bed20c84021eb6dfc9df1590d8e231895b0392aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/bed20c84.failed

As a preparatory patch to support slave mode for PCI enumerated devices rename
i2c_dw_probe() to i2c_dw_probe_master() and split common i2c_dw_probe() as
inline helper.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@kernel.org>
(cherry picked from commit bed20c84021eb6dfc9df1590d8e231895b0392aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-core.h
diff --cc drivers/i2c/busses/i2c-designware-core.h
index b5419b48db39,1674caf27745..000000000000
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@@ -317,17 -314,40 +317,47 @@@ static inline void __i2c_dw_disable_now
  
  void __i2c_dw_disable(struct dw_i2c_dev *dev);
  
++<<<<<<< HEAD
 +extern int i2c_dw_probe(struct dw_i2c_dev *dev);
++=======
+ extern void i2c_dw_configure_master(struct dw_i2c_dev *dev);
+ extern int i2c_dw_probe_master(struct dw_i2c_dev *dev);
+ 
++>>>>>>> bed20c84021e (i2c: designware: Rename i2c_dw_probe() to i2c_dw_probe_master())
  #if IS_ENABLED(CONFIG_I2C_DESIGNWARE_SLAVE)
 -extern void i2c_dw_configure_slave(struct dw_i2c_dev *dev);
  extern int i2c_dw_probe_slave(struct dw_i2c_dev *dev);
  #else
 -static inline void i2c_dw_configure_slave(struct dw_i2c_dev *dev) { }
  static inline int i2c_dw_probe_slave(struct dw_i2c_dev *dev) { return -EINVAL; }
  #endif
  
++<<<<<<< HEAD
++=======
+ static inline int i2c_dw_probe(struct dw_i2c_dev *dev)
+ {
+ 	switch (dev->mode) {
+ 	case DW_IC_SLAVE:
+ 		return i2c_dw_probe_slave(dev);
+ 	case DW_IC_MASTER:
+ 		return i2c_dw_probe_master(dev);
+ 	default:
+ 		dev_err(dev->dev, "Wrong operation mode: %d\n", dev->mode);
+ 		return -EINVAL;
+ 	}
+ }
+ 
+ static inline void i2c_dw_configure(struct dw_i2c_dev *dev)
+ {
+ 	if (i2c_detect_slave_mode(dev->dev))
+ 		i2c_dw_configure_slave(dev);
+ 	else
+ 		i2c_dw_configure_master(dev);
+ }
+ 
++>>>>>>> bed20c84021e (i2c: designware: Rename i2c_dw_probe() to i2c_dw_probe_master())
  #if IS_ENABLED(CONFIG_I2C_DESIGNWARE_BAYTRAIL)
  extern int i2c_dw_probe_lock_support(struct dw_i2c_dev *dev);
 +extern void i2c_dw_remove_lock_support(struct dw_i2c_dev *dev);
  #else
  static inline int i2c_dw_probe_lock_support(struct dw_i2c_dev *dev) { return 0; }
 +static inline void i2c_dw_remove_lock_support(struct dw_i2c_dev *dev) {}
  #endif
diff --git a/drivers/i2c/busses/Makefile b/drivers/i2c/busses/Makefile
index 1b6844f632a2..c154bf05c3fc 100644
--- a/drivers/i2c/busses/Makefile
+++ b/drivers/i2c/busses/Makefile
@@ -44,7 +44,8 @@ obj-$(CONFIG_I2C_CBUS_GPIO)	+= i2c-cbus-gpio.o
 obj-$(CONFIG_I2C_CPM)		+= i2c-cpm.o
 obj-$(CONFIG_I2C_DAVINCI)	+= i2c-davinci.o
 obj-$(CONFIG_I2C_DESIGNWARE_CORE)	+= i2c-designware-core.o
-i2c-designware-core-objs := i2c-designware-common.o i2c-designware-master.o
+i2c-designware-core-objs := i2c-designware-common.o
+i2c-designware-core-objs += i2c-designware-master.o
 ifeq ($(CONFIG_I2C_DESIGNWARE_SLAVE),y)
 i2c-designware-core-objs += i2c-designware-slave.o
 endif
* Unmerged path drivers/i2c/busses/i2c-designware-core.h
diff --git a/drivers/i2c/busses/i2c-designware-master.c b/drivers/i2c/busses/i2c-designware-master.c
index b6c17b550d31..d1e05b924d55 100644
--- a/drivers/i2c/busses/i2c-designware-master.c
+++ b/drivers/i2c/busses/i2c-designware-master.c
@@ -703,7 +703,7 @@ static int i2c_dw_init_recovery_info(struct dw_i2c_dev *dev)
 	return 0;
 }
 
-int i2c_dw_probe(struct dw_i2c_dev *dev)
+int i2c_dw_probe_master(struct dw_i2c_dev *dev)
 {
 	struct i2c_adapter *adap = &dev->adapter;
 	unsigned long irq_flags;
@@ -770,7 +770,7 @@ int i2c_dw_probe(struct dw_i2c_dev *dev)
 
 	return ret;
 }
-EXPORT_SYMBOL_GPL(i2c_dw_probe);
+EXPORT_SYMBOL_GPL(i2c_dw_probe_master);
 
 MODULE_DESCRIPTION("Synopsys DesignWare I2C bus master adapter");
 MODULE_LICENSE("GPL");
diff --git a/drivers/i2c/busses/i2c-designware-pcidrv.c b/drivers/i2c/busses/i2c-designware-pcidrv.c
index d5e5abc03683..7e994f366a5e 100644
--- a/drivers/i2c/busses/i2c-designware-pcidrv.c
+++ b/drivers/i2c/busses/i2c-designware-pcidrv.c
@@ -271,7 +271,7 @@ static int i2c_dw_pci_probe(struct pci_dev *pdev,
 	ACPI_COMPANION_SET(&adap->dev, ACPI_COMPANION(&pdev->dev));
 	adap->nr = controller->bus_num;
 
-	r = i2c_dw_probe(dev);
+	r = i2c_dw_probe_master(dev);
 	if (r) {
 		pci_free_irq_vectors(pdev);
 		return r;
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 3d5c410d94af..6d5536443f1d 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -360,11 +360,7 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 
 	pm_runtime_enable(&pdev->dev);
 
-	if (dev->mode == DW_IC_SLAVE)
-		ret = i2c_dw_probe_slave(dev);
-	else
-		ret = i2c_dw_probe(dev);
-
+	ret = i2c_dw_probe(dev);
 	if (ret)
 		goto exit_probe;
 
