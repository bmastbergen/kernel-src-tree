net: check untrusted gso_size at kernel entry

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Willem de Bruijn <willemb@google.com>
commit 6dd912f82680761d8fb6b1bb274a69d4c7010988
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/6dd912f8.failed

Syzkaller again found a path to a kernel crash through bad gso input:
a packet with gso size exceeding len.

These packets are dropped in tcp_gso_segment and udp[46]_ufo_fragment.
But they may affect gso size calculations earlier in the path.

Now that we have thlen as of commit 9274124f023b ("net: stricter
validation of untrusted gso packets"), check gso_size at entry too.

Fixes: bfd5f4a3d605 ("packet: Add GSO/csum offload support.")
	Reported-by: syzbot <syzkaller@googlegroups.com>
	Signed-off-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6dd912f82680761d8fb6b1bb274a69d4c7010988)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/virtio_net.h
diff --cc include/linux/virtio_net.h
index acf273692515,88997022a4b5..000000000000
--- a/include/linux/virtio_net.h
+++ b/include/linux/virtio_net.h
@@@ -28,6 -30,9 +28,12 @@@ static inline int virtio_net_hdr_to_skb
  					bool little_endian)
  {
  	unsigned int gso_type = 0;
++<<<<<<< HEAD
++=======
+ 	unsigned int thlen = 0;
+ 	unsigned int p_off = 0;
+ 	unsigned int ip_proto;
++>>>>>>> 6dd912f82680 (net: check untrusted gso_size at kernel entry)
  
  	if (hdr->gso_type != VIRTIO_NET_HDR_GSO_NONE) {
  		switch (hdr->gso_type & ~VIRTIO_NET_HDR_GSO_ECN) {
@@@ -59,6 -68,10 +65,13 @@@
  
  		if (!skb_partial_csum_set(skb, start, off))
  			return -EINVAL;
++<<<<<<< HEAD
++=======
+ 
+ 		p_off = skb_transport_offset(skb) + thlen;
+ 		if (p_off > skb_headlen(skb))
+ 			return -EINVAL;
++>>>>>>> 6dd912f82680 (net: check untrusted gso_size at kernel entry)
  	} else {
  		/* gso packets without NEEDS_CSUM do not set transport_offset.
  		 * probe and drop if does not match one of the above types.
@@@ -82,6 -93,17 +95,20 @@@ retry
  				}
  				return -EINVAL;
  			}
++<<<<<<< HEAD
++=======
+ 
+ 			p_off = keys.control.thoff + thlen;
+ 			if (p_off > skb_headlen(skb) ||
+ 			    keys.basic.ip_proto != ip_proto)
+ 				return -EINVAL;
+ 
+ 			skb_set_transport_header(skb, keys.control.thoff);
+ 		} else if (gso_type) {
+ 			p_off = thlen;
+ 			if (p_off > skb_headlen(skb))
+ 				return -EINVAL;
++>>>>>>> 6dd912f82680 (net: check untrusted gso_size at kernel entry)
  		}
  	}
  
* Unmerged path include/linux/virtio_net.h
