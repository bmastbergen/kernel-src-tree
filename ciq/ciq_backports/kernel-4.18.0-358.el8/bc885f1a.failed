doc:kmsg: explicitly state the return value in case of SEEK_CUR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Bruno Meneguele <bmeneg@redhat.com>
commit bc885f1ab6de0d38c6956a71b0126543b64875b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/bc885f1a.failed

The commit 625d3449788f ("Revert "kernel/printk: add kmsg SEEK_CUR
handling"") reverted a change done to the return value in case a SEEK_CUR
operation was performed for kmsg buffer based on the fact that different
userspace apps were handling the new return value (-ESPIPE) in different
ways, breaking them.

At the same time -ESPIPE was the wrong decision because kmsg /does support/
seek() but doesn't follow the "normal" behavior userspace is used to.
Because of that and also considering the time -EINVAL has been used, it was
decided to keep this way to avoid more userspace breakage.

This patch adds an official statement to the kmsg documentation pointing to
the current return value for SEEK_CUR, -EINVAL, thus userspace libraries
and apps can refer to it for a definitive guide on what to expect.

	Signed-off-by: Bruno Meneguele <bmeneg@redhat.com>
	Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
	Signed-off-by: Petr Mladek <pmladek@suse.com>
Link: https://lore.kernel.org/r/20200710174423.10480-1-bmeneg@redhat.com
(cherry picked from commit bc885f1ab6de0d38c6956a71b0126543b64875b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/dev-kmsg
diff --cc Documentation/ABI/testing/dev-kmsg
index f307506eb54c,a917efc289a2..000000000000
--- a/Documentation/ABI/testing/dev-kmsg
+++ b/Documentation/ABI/testing/dev-kmsg
@@@ -56,6 -56,22 +56,25 @@@ Description:	The /dev/kmsg character de
  		  seek after the last record available at the time
  		  the last SYSLOG_ACTION_CLEAR was issued.
  
++<<<<<<< HEAD
++=======
+ 		Due to the record nature of this interface with a "read all"
+ 		behavior and the specific positions each seek operation sets,
+ 		SEEK_CUR is not supported, returning -ESPIPE (invalid seek) to
+ 		errno whenever requested.
+ 
+ 		Other seek operations or offsets are not supported because of
+ 		the special behavior this device has. The device allows to read
+ 		or write only whole variable length messages (records) that are
+ 		stored in a ring buffer.
+ 
+ 		Because of the non-standard behavior also the error values are
+ 		non-standard. -ESPIPE is returned for non-zero offset. -EINVAL
+ 		is returned for other operations, e.g. SEEK_CUR. This behavior
+ 		and values are historical and could not be modified without the
+ 		risk of breaking userspace.
+ 
++>>>>>>> bc885f1ab6de (doc:kmsg: explicitly state the return value in case of SEEK_CUR)
  		The output format consists of a prefix carrying the syslog
  		prefix including priority and facility, the 64 bit message
  		sequence number and the monotonic timestamp in microseconds,
* Unmerged path Documentation/ABI/testing/dev-kmsg
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 950a06617fcd..9130d7aee2fc 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -943,6 +943,14 @@ static ssize_t devkmsg_read(struct file *file, char __user *buf,
 	return ret;
 }
 
+/*
+ * Be careful when modifying this function!!!
+ *
+ * Only few operations are supported because the device works only with the
+ * entire variable length messages (records). Non-standard values are
+ * returned in the other cases and has been this way for quite some time.
+ * User space applications might depend on this behavior.
+ */
 static loff_t devkmsg_llseek(struct file *file, loff_t offset, int whence)
 {
 	struct devkmsg_user *user = file->private_data;
