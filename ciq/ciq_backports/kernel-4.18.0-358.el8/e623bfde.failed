selftests: xsk: Remove struct ifaceconfigobj

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit e623bfdef713ddda1b9f57d1759df3a1cd97255a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/e623bfde.failed

ifaceconfigobj is not really useful, it is possible to keep the
functionality and simplify the code.

	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20210329224316.17793-3-maciej.fijalkowski@intel.com
(cherry picked from commit e623bfdef713ddda1b9f57d1759df3a1cd97255a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/xdpxceiver.c
diff --cc tools/testing/selftests/bpf/xdpxceiver.c
index 623e279aecc3,e2ff3cd48ccf..000000000000
--- a/tools/testing/selftests/bpf/xdpxceiver.c
+++ b/tools/testing/selftests/bpf/xdpxceiver.c
@@@ -96,11 -93,23 +96,18 @@@ typedef __u16 __sum16
  #include "xdpxceiver.h"
  #include "../kselftest.h"
  
+ static const char *MAC1 = "\x00\x0A\x56\x9E\xEE\x62";
+ static const char *MAC2 = "\x00\x0A\x56\x9E\xEE\x61";
+ static const char *IP1 = "192.168.100.162";
+ static const char *IP2 = "192.168.100.161";
+ static const u16 UDP_PORT1 = 2020;
+ static const u16 UDP_PORT2 = 2121;
+ 
  static void __exit_with_error(int error, const char *file, const char *func, int line)
  {
 -	if (configured_mode == TEST_MODE_UNCONFIGURED) {
 -		ksft_exit_fail_msg
 -		("[%s:%s:%i]: ERROR: %d/\"%s\"\n", file, func, line, error, strerror(error));
 -	} else {
 -		ksft_test_result_fail
 -		("[%s:%s:%i]: ERROR: %d/\"%s\"\n", file, func, line, error, strerror(error));
 -		ksft_exit_xfail();
 -	}
 +	ksft_test_result_fail
 +	    ("[%s:%s:%i]: ERROR: %d/\"%s\"\n", file, func, line, error, strerror(error));
 +	ksft_exit_xfail();
  }
  
  #define exit_with_error(error) __exit_with_error(error, __FILE__, __func__, __LINE__)
@@@ -987,27 -1060,124 +994,26 @@@ static void testapp_sockets(void
  	print_ksft_result();
  }
  
- static void init_iface_config(struct ifaceconfigobj *ifaceconfig)
+ static void init_iface(struct ifobject *ifobj, const char *dst_mac,
+ 		       const char *src_mac, const char *dst_ip,
+ 		       const char *src_ip, const u16 dst_port,
+ 		       const u16 src_port)
  {
- 	/*Init interface0 */
- 	ifdict[0]->fv.vector = tx;
- 	memcpy(ifdict[0]->dst_mac, ifaceconfig->dst_mac, ETH_ALEN);
- 	memcpy(ifdict[0]->src_mac, ifaceconfig->src_mac, ETH_ALEN);
- 	ifdict[0]->dst_ip = ifaceconfig->dst_ip.s_addr;
- 	ifdict[0]->src_ip = ifaceconfig->src_ip.s_addr;
- 	ifdict[0]->dst_port = ifaceconfig->dst_port;
- 	ifdict[0]->src_port = ifaceconfig->src_port;
- 
- 	/*Init interface1 */
- 	ifdict[1]->fv.vector = rx;
- 	memcpy(ifdict[1]->dst_mac, ifaceconfig->src_mac, ETH_ALEN);
- 	memcpy(ifdict[1]->src_mac, ifaceconfig->dst_mac, ETH_ALEN);
- 	ifdict[1]->dst_ip = ifaceconfig->src_ip.s_addr;
- 	ifdict[1]->src_ip = ifaceconfig->dst_ip.s_addr;
- 	ifdict[1]->dst_port = ifaceconfig->src_port;
- 	ifdict[1]->src_port = ifaceconfig->dst_port;
+ 	struct in_addr ip;
+ 
+ 	memcpy(ifobj->dst_mac, dst_mac, ETH_ALEN);
+ 	memcpy(ifobj->src_mac, src_mac, ETH_ALEN);
+ 
+ 	inet_aton(dst_ip, &ip);
+ 	ifobj->dst_ip = ip.s_addr;
+ 
+ 	inet_aton(src_ip, &ip);
+ 	ifobj->src_ip = ip.s_addr;
+ 
+ 	ifobj->dst_port = dst_port;
+ 	ifobj->src_port = src_port;
  }
  
 -static void *nsdisablemodethread(void *args)
 -{
 -	struct targs *targs = args;
 -
 -	targs->retptr = false;
 -
 -	if (switch_namespace(targs->idx)) {
 -		targs->retptr = bpf_set_link_xdp_fd(ifdict[targs->idx]->ifindex, -1, targs->flags);
 -	} else {
 -		targs->retptr = errno;
 -		print_verbose("Failed to switch namespace to %s\n", ifdict[targs->idx]->nsname);
 -	}
 -
 -	pthread_exit(NULL);
 -}
 -
 -static void disable_xdp_mode(int mode)
 -{
 -	int err = 0;
 -	__u32 flags = XDP_FLAGS_UPDATE_IF_NOEXIST | mode;
 -	char *mode_str = mode & XDP_FLAGS_SKB_MODE ? "skb" : "drv";
 -
 -	for (int i = 0; i < MAX_INTERFACES; i++) {
 -		if (strcmp(ifdict[i]->nsname, "")) {
 -			struct targs *targs;
 -
 -			targs = malloc(sizeof(*targs));
 -			memset(targs, 0, sizeof(*targs));
 -			if (!targs)
 -				exit_with_error(errno);
 -
 -			targs->idx = i;
 -			targs->flags = flags;
 -			if (pthread_create(&ns_thread, NULL, nsdisablemodethread, targs))
 -				exit_with_error(errno);
 -
 -			pthread_join(ns_thread, NULL);
 -			err = targs->retptr;
 -			free(targs);
 -		} else {
 -			err = bpf_set_link_xdp_fd(ifdict[i]->ifindex, -1, flags);
 -		}
 -
 -		if (err) {
 -			print_verbose("Failed to disable %s mode on interface %s\n",
 -						mode_str, ifdict[i]->ifname);
 -			exit_with_error(err);
 -		}
 -
 -		print_verbose("Disabled %s mode for interface: %s\n", mode_str, ifdict[i]->ifname);
 -		configured_mode = mode & XDP_FLAGS_SKB_MODE ? TEST_MODE_DRV : TEST_MODE_SKB;
 -	}
 -}
 -
 -static void run_pkt_test(int mode, int type)
 -{
 -	test_type = type;
 -
 -	/* reset defaults after potential previous test */
 -	xdp_flags = XDP_FLAGS_UPDATE_IF_NOEXIST;
 -	pkt_counter = 0;
 -	switching_notify = 0;
 -	bidi_pass = 0;
 -	prev_pkt = -1;
 -	ifdict[0]->fv.vector = tx;
 -	ifdict[1]->fv.vector = rx;
 -	sigvar = 0;
 -	stat_test_type = -1;
 -	rxqsize = XSK_RING_CONS__DEFAULT_NUM_DESCS;
 -	frame_headroom = XSK_UMEM__DEFAULT_FRAME_HEADROOM;
 -
 -	switch (mode) {
 -	case (TEST_MODE_SKB):
 -		if (configured_mode == TEST_MODE_DRV)
 -			disable_xdp_mode(XDP_FLAGS_DRV_MODE);
 -		xdp_flags |= XDP_FLAGS_SKB_MODE;
 -		break;
 -	case (TEST_MODE_DRV):
 -		if (configured_mode == TEST_MODE_SKB)
 -			disable_xdp_mode(XDP_FLAGS_SKB_MODE);
 -		xdp_flags |= XDP_FLAGS_DRV_MODE;
 -		break;
 -	default:
 -		break;
 -	}
 -
 -	pthread_init_mutex();
 -
 -	if (test_type == TEST_TYPE_STATS)
 -		testapp_stats();
 -	else if ((test_type != TEST_TYPE_TEARDOWN) && (test_type != TEST_TYPE_BIDI))
 -		testapp_validate();
 -	else
 -		testapp_sockets();
 -
 -	pthread_destroy_mutex();
 -}
 -
  int main(int argc, char **argv)
  {
  	struct rlimit _rlim = { RLIM_INFINITY, RLIM_INFINITY };
@@@ -1015,21 -1186,6 +1022,24 @@@
  	if (setrlimit(RLIMIT_MEMLOCK, &_rlim))
  		exit_with_error(errno);
  
++<<<<<<< HEAD
 +	const char *MAC1 = "\x00\x0A\x56\x9E\xEE\x62";
 +	const char *MAC2 = "\x00\x0A\x56\x9E\xEE\x61";
 +	const char *IP1 = "192.168.100.162";
 +	const char *IP2 = "192.168.100.161";
 +	u16 UDP_DST_PORT = 2020;
 +	u16 UDP_SRC_PORT = 2121;
 +
 +	ifaceconfig = malloc(sizeof(struct ifaceconfigobj));
 +	memcpy(ifaceconfig->dst_mac, MAC1, ETH_ALEN);
 +	memcpy(ifaceconfig->src_mac, MAC2, ETH_ALEN);
 +	inet_aton(IP1, &ifaceconfig->dst_ip);
 +	inet_aton(IP2, &ifaceconfig->src_ip);
 +	ifaceconfig->dst_port = UDP_DST_PORT;
 +	ifaceconfig->src_port = UDP_SRC_PORT;
 +
++=======
++>>>>>>> e623bfdef713 (selftests: xsk: Remove struct ifaceconfigobj)
  	for (int i = 0; i < MAX_INTERFACES; i++) {
  		ifdict[i] = malloc(sizeof(struct ifobject));
  		if (!ifdict[i])
@@@ -1044,19 -1200,19 +1054,23 @@@
  
  	num_frames = ++opt_pkt_count;
  
- 	init_iface_config(ifaceconfig);
+ 	ifdict[0]->fv.vector = tx;
+ 	init_iface(ifdict[0], MAC1, MAC2, IP1, IP2, UDP_PORT1, UDP_PORT2);
+ 
+ 	ifdict[1]->fv.vector = rx;
+ 	init_iface(ifdict[1], MAC2, MAC1, IP2, IP1, UDP_PORT2, UDP_PORT1);
  
 -	disable_xdp_mode(XDP_FLAGS_DRV_MODE);
 +	pthread_init_mutex();
  
 -	ksft_set_plan(TEST_MODE_MAX * TEST_TYPE_MAX);
 +	ksft_set_plan(1);
  
 -	for (i = 0; i < TEST_MODE_MAX; i++) {
 -		for (j = 0; j < TEST_TYPE_MAX; j++)
 -			run_pkt_test(i, j);
 +	if (!opt_teardown && !opt_bidi) {
 +		testapp_validate();
 +	} else if (opt_teardown && opt_bidi) {
 +		ksft_test_result_fail("ERROR: parameters -T and -B cannot be used together\n");
 +		ksft_exit_xfail();
 +	} else {
 +		testapp_sockets();
  	}
  
  	for (int i = 0; i < MAX_INTERFACES; i++)
* Unmerged path tools/testing/selftests/bpf/xdpxceiver.c
diff --git a/tools/testing/selftests/bpf/xdpxceiver.h b/tools/testing/selftests/bpf/xdpxceiver.h
index f66f399dfb2d..f4225d389417 100644
--- a/tools/testing/selftests/bpf/xdpxceiver.h
+++ b/tools/testing/selftests/bpf/xdpxceiver.h
@@ -102,15 +102,6 @@ struct generic_data {
 	u32 seqnum;
 };
 
-struct ifaceconfigobj {
-	u8 dst_mac[ETH_ALEN];
-	u8 src_mac[ETH_ALEN];
-	struct in_addr dst_ip;
-	struct in_addr src_ip;
-	u16 src_port;
-	u16 dst_port;
-} *ifaceconfig;
-
 struct ifobject {
 	int ifindex;
 	int ifdict_index;
