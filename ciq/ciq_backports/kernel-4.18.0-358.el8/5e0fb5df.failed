x86/mm: Add TLB purge to free pmd/pte page interfaces

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Toshi Kani <toshi.kani@hpe.com>
commit 5e0fb5df2ee871b841f96f9cb6a7f2784e96aa4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/5e0fb5df.failed

ioremap() calls pud_free_pmd_page() / pmd_free_pte_page() when it creates
a pud / pmd map.  The following preconditions are met at their entry.
 - All pte entries for a target pud/pmd address range have been cleared.
 - System-wide TLB purges have been peformed for a target pud/pmd address
   range.

The preconditions assure that there is no stale TLB entry for the range.
Speculation may not cache TLB entries since it requires all levels of page
entries, including ptes, to have P & A-bits set for an associated address.
However, speculation may cache pud/pmd entries (paging-structure caches)
when they have P-bit set.

Add a system-wide TLB purge (INVLPG) to a single page after clearing
pud/pmd entry's P-bit.

SDM 4.10.4.1, Operation that Invalidate TLBs and Paging-Structure Caches,
states that:
  INVLPG invalidates all paging-structure caches associated with the
  current PCID regardless of the liner addresses to which they correspond.

Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
	Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: mhocko@suse.com
	Cc: akpm@linux-foundation.org
	Cc: hpa@zytor.com
	Cc: cpandya@codeaurora.org
	Cc: linux-mm@kvack.org
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: Joerg Roedel <joro@8bytes.org>
	Cc: stable@vger.kernel.org
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: <stable@vger.kernel.org>
Link: https://lkml.kernel.org/r/20180627141348.21777-4-toshi.kani@hpe.com

(cherry picked from commit 5e0fb5df2ee871b841f96f9cb6a7f2784e96aa4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/pgtable.c
diff --cc arch/x86/mm/pgtable.c
index e527d2867a1f,e3deefb891da..000000000000
--- a/arch/x86/mm/pgtable.c
+++ b/arch/x86/mm/pgtable.c
@@@ -752,7 -752,17 +760,21 @@@ int pud_free_pmd_page(pud_t *pud, unsig
  
  	pud_clear(pud);
  
++<<<<<<< HEAD
 +	pgtable_pmd_page_dtor(virt_to_page(pmd));
++=======
+ 	/* INVLPG to clear all paging-structure caches */
+ 	flush_tlb_kernel_range(addr, addr + PAGE_SIZE-1);
+ 
+ 	for (i = 0; i < PTRS_PER_PMD; i++) {
+ 		if (!pmd_none(pmd_sv[i])) {
+ 			pte = (pte_t *)pmd_page_vaddr(pmd_sv[i]);
+ 			free_page((unsigned long)pte);
+ 		}
+ 	}
+ 
+ 	free_page((unsigned long)pmd_sv);
++>>>>>>> 5e0fb5df2ee8 (x86/mm: Add TLB purge to free pmd/pte page interfaces)
  	free_page((unsigned long)pmd);
  
  	return 1;
* Unmerged path arch/x86/mm/pgtable.c
