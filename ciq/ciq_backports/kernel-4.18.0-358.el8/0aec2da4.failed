driver core: platform: Introduce platform_get_mem_or_io()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 0aec2da436623abe19b80b21dd9fc5ec9300a152
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/0aec2da4.failed

There are at least few existing users of the proposed API which
retrieves either MEM or IO resource from platform device.

Make it common to utilize in the existing and new users.

	Cc: Eric Auger <eric.auger@redhat.com>
	Cc: Alex Williamson <alex.williamson@redhat.com>
	Cc: kvm@vger.kernel.org
	Cc: linux-usb@vger.kernel.org
	Cc: Peng Hao <peng.hao2@zte.com.cn>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Reviewed-by: Cornelia Huck <cohuck@redhat.com>
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Link: https://lore.kernel.org/r/20201209203642.27648-1-andriy.shevchenko@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 0aec2da436623abe19b80b21dd9fc5ec9300a152)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/platform_device.h
diff --cc include/linux/platform_device.h
index 9ed1ebbb9554,ee6a9f10c2c7..000000000000
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@@ -49,9 -50,14 +49,18 @@@ extern void platform_device_unregister(
  extern struct bus_type platform_bus_type;
  extern struct device platform_bus;
  
 +extern void arch_setup_pdev_archdata(struct platform_device *);
  extern struct resource *platform_get_resource(struct platform_device *,
  					      unsigned int, unsigned int);
++<<<<<<< HEAD
++=======
+ extern struct resource *platform_get_mem_or_io(struct platform_device *,
+ 					       unsigned int);
+ 
+ extern struct device *
+ platform_find_device_by_driver(struct device *start,
+ 			       const struct device_driver *drv);
++>>>>>>> 0aec2da43662 (driver core: platform: Introduce platform_get_mem_or_io())
  extern void __iomem *
  devm_platform_get_and_ioremap_resource(struct platform_device *pdev,
  				unsigned int index, struct resource **res);
diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index 12b5b6af6e01..7c2b7d354232 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -78,6 +78,21 @@ struct resource *platform_get_resource(struct platform_device *dev,
 }
 EXPORT_SYMBOL_GPL(platform_get_resource);
 
+struct resource *platform_get_mem_or_io(struct platform_device *dev,
+					unsigned int num)
+{
+	u32 i;
+
+	for (i = 0; i < dev->num_resources; i++) {
+		struct resource *r = &dev->resource[i];
+
+		if ((resource_type(r) & (IORESOURCE_MEM|IORESOURCE_IO)) && num-- == 0)
+			return r;
+	}
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(platform_get_mem_or_io);
+
 #ifdef CONFIG_HAS_IOMEM
 /**
  * devm_platform_get_and_ioremap_resource - call devm_ioremap_resource() for a
* Unmerged path include/linux/platform_device.h
