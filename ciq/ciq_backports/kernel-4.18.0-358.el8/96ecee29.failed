exec: Merge install_exec_creds into setup_new_exec

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 96ecee29b0b560662ec082ee9b6f2049f2a79090
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/96ecee29.failed

The two functions are now always called one right after the
other so merge them together to make future maintenance easier.

	Reviewed-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Greg Ungerer <gerg@linux-m68k.org>
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit 96ecee29b0b560662ec082ee9b6f2049f2a79090)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/exec.c
#	kernel/events/core.c
diff --cc fs/exec.c
index 671dee5c3348,93e40f865523..000000000000
--- a/fs/exec.c
+++ b/fs/exec.c
@@@ -1405,9 -1441,33 +1405,34 @@@ void setup_new_exec(struct linux_binpr
  
  	/* An exec changes our domain. We are no longer part of the thread
  	   group */
 -	WRITE_ONCE(current->self_exec_id, current->self_exec_id + 1);
 +	WRITE_ONCE(current->task_struct_rh->self_exec_id,
 +		current->task_struct_rh->self_exec_id + 1);
  	flush_signal_handlers(current, 0);
+ 
+ 	/*
+ 	 * install the new credentials for this executable
+ 	 */
+ 	security_bprm_committing_creds(bprm);
+ 
+ 	commit_creds(bprm->cred);
+ 	bprm->cred = NULL;
+ 
+ 	/*
+ 	 * Disable monitoring for regular users
+ 	 * when executing setuid binaries. Must
+ 	 * wait until new credentials are committed
+ 	 * by commit_creds() above
+ 	 */
+ 	if (get_dumpable(current->mm) != SUID_DUMP_USER)
+ 		perf_event_exit_task(current);
+ 	/*
+ 	 * cred_guard_mutex must be held at least to this point to prevent
+ 	 * ptrace_attach() from altering our determination of the task's
+ 	 * credentials; any time after this it may be unlocked.
+ 	 */
+ 	security_bprm_committed_creds(bprm);
+ 	mutex_unlock(&current->signal->exec_update_mutex);
+ 	mutex_unlock(&current->signal->cred_guard_mutex);
  }
  EXPORT_SYMBOL(setup_new_exec);
  
@@@ -1470,34 -1530,6 +1495,37 @@@ int bprm_change_interp(const char *inte
  EXPORT_SYMBOL(bprm_change_interp);
  
  /*
++<<<<<<< HEAD
 + * install the new credentials for this executable
 + */
 +void install_exec_creds(struct linux_binprm *bprm)
 +{
 +	security_bprm_committing_creds(bprm);
 +
 +	commit_creds(bprm->cred);
 +	bprm->cred = NULL;
 +
 +	/*
 +	 * Disable monitoring for regular users
 +	 * when executing setuid binaries. Must
 +	 * wait until new credentials are committed
 +	 * by commit_creds() above
 +	 */
 +	if (get_dumpable(current->mm) != SUID_DUMP_USER)
 +		perf_event_exit_task(current);
 +	/*
 +	 * cred_guard_mutex must be held at least to this point to prevent
 +	 * ptrace_attach() from altering our determination of the task's
 +	 * credentials; any time after this it may be unlocked.
 +	 */
 +	security_bprm_committed_creds(bprm);
 +	mutex_unlock(&current->signal->cred_guard_mutex);
 +}
 +EXPORT_SYMBOL(install_exec_creds);
 +
 +/*
++=======
++>>>>>>> 96ecee29b0b5 (exec: Merge install_exec_creds into setup_new_exec)
   * determine how safe it is to execute the proposed program
   * - the caller must hold ->cred_guard_mutex to protect against
   *   PTRACE_ATTACH or seccomp thread-sync
diff --cc kernel/events/core.c
index 9ae222f3c9bc,169449b5e56b..000000000000
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@@ -12555,8 -12216,8 +12555,13 @@@ static void perf_event_exit_task_contex
  /*
   * When a child task exits, feed back event values to parent events.
   *
++<<<<<<< HEAD
 + * Can be called with cred_guard_mutex held when called from
 + * install_exec_creds().
++=======
+  * Can be called with exec_update_mutex held when called from
+  * setup_new_exec().
++>>>>>>> 96ecee29b0b5 (exec: Merge install_exec_creds into setup_new_exec)
   */
  void perf_event_exit_task(struct task_struct *child)
  {
diff --git a/arch/x86/ia32/ia32_aout.c b/arch/x86/ia32/ia32_aout.c
index 3a18b3d03784..6da4d0cc2091 100644
--- a/arch/x86/ia32/ia32_aout.c
+++ b/arch/x86/ia32/ia32_aout.c
@@ -296,7 +296,6 @@ static int load_aout_binary(struct linux_binprm *bprm)
 	set_personality_ia32(false);
 
 	setup_new_exec(bprm);
-	install_exec_creds(bprm);
 
 	regs->cs = __USER32_CS;
 	regs->r8 = regs->r9 = regs->r10 = regs->r11 = regs->r12 =
diff --git a/fs/binfmt_aout.c b/fs/binfmt_aout.c
index af09b55d5ac5..95d5d79b4d55 100644
--- a/fs/binfmt_aout.c
+++ b/fs/binfmt_aout.c
@@ -244,7 +244,6 @@ static int load_aout_binary(struct linux_binprm * bprm)
 	set_personality(PER_LINUX);
 #endif
 	setup_new_exec(bprm);
-	install_exec_creds(bprm);
 
 	current->mm->end_code = ex.a_text +
 		(current->mm->start_code = N_TXTADDR(ex));
diff --git a/fs/binfmt_elf.c b/fs/binfmt_elf.c
index c9fdad31fb37..c928440022b5 100644
--- a/fs/binfmt_elf.c
+++ b/fs/binfmt_elf.c
@@ -880,7 +880,6 @@ static int load_elf_binary(struct linux_binprm *bprm)
 		current->flags |= PF_RANDOMIZE;
 
 	setup_new_exec(bprm);
-	install_exec_creds(bprm);
 
 	/* Do this so that we can load the interpreter, if need be.  We will
 	   change some of these later */
diff --git a/fs/binfmt_elf_fdpic.c b/fs/binfmt_elf_fdpic.c
index 60896c16f103..2beeed8171f7 100644
--- a/fs/binfmt_elf_fdpic.c
+++ b/fs/binfmt_elf_fdpic.c
@@ -357,7 +357,6 @@ static int load_elf_fdpic_binary(struct linux_binprm *bprm)
 		current->personality |= READ_IMPLIES_EXEC;
 
 	setup_new_exec(bprm);
-	install_exec_creds(bprm);
 
 	set_binfmt(&elf_fdpic_format);
 
diff --git a/fs/binfmt_flat.c b/fs/binfmt_flat.c
index 16954cc1b2d2..1f3fe367c204 100644
--- a/fs/binfmt_flat.c
+++ b/fs/binfmt_flat.c
@@ -517,7 +517,6 @@ static int load_flat_file(struct linux_binprm *bprm,
 		/* OK, This is the point of no return */
 		set_personality(PER_LINUX_32BIT);
 		setup_new_exec(bprm);
-		install_exec_creds(bprm);
 	}
 
 	/*
* Unmerged path fs/exec.c
diff --git a/include/linux/binfmts.h b/include/linux/binfmts.h
index 8c12228326b0..f5e545a20b85 100644
--- a/include/linux/binfmts.h
+++ b/include/linux/binfmts.h
@@ -139,7 +139,6 @@ extern int transfer_args_to_stack(struct linux_binprm *bprm,
 extern int bprm_change_interp(const char *interp, struct linux_binprm *bprm);
 extern int copy_strings_kernel(int argc, const char *const *argv,
 			       struct linux_binprm *bprm);
-extern void install_exec_creds(struct linux_binprm *bprm);
 extern void set_binfmt(struct linux_binfmt *new);
 extern ssize_t read_code(struct file *, unsigned long, loff_t, size_t);
 
* Unmerged path kernel/events/core.c
