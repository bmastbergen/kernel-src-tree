powerpc/bpf: Remove classical BPF support for PPC32

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Christophe Leroy <christophe.leroy@csgroup.eu>
commit 6944caad78fc4de4ecd0364bbc9715b62b020965
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/6944caad.failed

At the time being, PPC32 has Classical BPF support.

The test_bpf module exhibits some failure:

	test_bpf: #298 LD_IND byte frag jited:1 ret 202 != 66 FAIL (1 times)
	test_bpf: #299 LD_IND halfword frag jited:1 ret 51958 != 17220 FAIL (1 times)
	test_bpf: #301 LD_IND halfword mixed head/frag jited:1 ret 51958 != 1305 FAIL (1 times)
	test_bpf: #303 LD_ABS byte frag jited:1 ret 202 != 66 FAIL (1 times)
	test_bpf: #304 LD_ABS halfword frag jited:1 ret 51958 != 17220 FAIL (1 times)
	test_bpf: #306 LD_ABS halfword mixed head/frag jited:1 ret 51958 != 1305 FAIL (1 times)

	test_bpf: Summary: 371 PASSED, 7 FAILED, [119/366 JIT'ed]

Fixing this is not worth the effort. Instead, remove support for
classical BPF and prepare for adding Extended BPF support instead.

	Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/fbc3e4fcc9c8f6131d6c705212530b2aa50149ee.1616430991.git.christophe.leroy@csgroup.eu
(cherry picked from commit 6944caad78fc4de4ecd0364bbc9715b62b020965)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/Kconfig
#	arch/powerpc/net/bpf_jit32.h
#	arch/powerpc/net/bpf_jit_asm.S
#	arch/powerpc/net/bpf_jit_comp.c
diff --cc arch/powerpc/Kconfig
index bdca42482d27,29217437b8ac..000000000000
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@@ -171,14 -180,21 +171,19 @@@ config PP
  	select GENERIC_STRNCPY_FROM_USER
  	select GENERIC_STRNLEN_USER
  	select GENERIC_TIME_VSYSCALL
 -	select GENERIC_GETTIMEOFDAY
  	select HAVE_ARCH_AUDITSYSCALL
 -	select HAVE_ARCH_HUGE_VMAP		if PPC_BOOK3S_64 && PPC_RADIX_MMU
  	select HAVE_ARCH_JUMP_LABEL
 -	select HAVE_ARCH_KASAN			if PPC32 && PPC_PAGE_SHIFT <= 14
 -	select HAVE_ARCH_KASAN_VMALLOC		if PPC32 && PPC_PAGE_SHIFT <= 14
  	select HAVE_ARCH_KGDB
 -	select HAVE_ARCH_KFENCE			if PPC32
  	select HAVE_ARCH_MMAP_RND_BITS
  	select HAVE_ARCH_MMAP_RND_COMPAT_BITS	if COMPAT
 -	select HAVE_ARCH_NVRAM_OPS
  	select HAVE_ARCH_SECCOMP_FILTER
  	select HAVE_ARCH_TRACEHOOK
++<<<<<<< HEAD
 +	select HAVE_CBPF_JIT			if !PPC64
++=======
+ 	select HAVE_ASM_MODVERSIONS
+ 	select HAVE_C_RECORDMCOUNT
++>>>>>>> 6944caad78fc (powerpc/bpf: Remove classical BPF support for PPC32)
  	select HAVE_STACKPROTECTOR		if PPC64 && $(cc-option,-mstack-protector-guard=tls -mstack-protector-guard-reg=r13)
  	select HAVE_STACKPROTECTOR		if PPC32 && $(cc-option,-mstack-protector-guard=tls -mstack-protector-guard-reg=r2)
  	select HAVE_CONTEXT_TRACKING		if PPC64
* Unmerged path arch/powerpc/net/bpf_jit32.h
* Unmerged path arch/powerpc/net/bpf_jit_asm.S
* Unmerged path arch/powerpc/net/bpf_jit_comp.c
* Unmerged path arch/powerpc/Kconfig
diff --git a/arch/powerpc/net/Makefile b/arch/powerpc/net/Makefile
index c2dec3a68d4c..52c939cef5b2 100644
--- a/arch/powerpc/net/Makefile
+++ b/arch/powerpc/net/Makefile
@@ -2,8 +2,4 @@
 #
 # Arch-specific network modules
 #
-ifdef CONFIG_PPC64
 obj-$(CONFIG_BPF_JIT) += bpf_jit_comp64.o
-else
-obj-$(CONFIG_BPF_JIT) += bpf_jit_asm.o bpf_jit_comp.o
-endif
* Unmerged path arch/powerpc/net/bpf_jit32.h
* Unmerged path arch/powerpc/net/bpf_jit_asm.S
* Unmerged path arch/powerpc/net/bpf_jit_comp.c
