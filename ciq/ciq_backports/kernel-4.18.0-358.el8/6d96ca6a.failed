KVM: selftests: Rename x86's page table "address" to "pfn"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Sean Christopherson <seanjc@google.com>
commit 6d96ca6a602b24013c8be1160d40c667e133ddb9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/6d96ca6a.failed

Rename the "address" field to "pfn" in x86's page table structs to match
reality.

No functional change intended.

	Signed-off-by: Sean Christopherson <seanjc@google.com>
Message-Id: <20210622200529.3650424-16-seanjc@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 6d96ca6a602b24013c8be1160d40c667e133ddb9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/lib/x86_64/processor.c
diff --cc tools/testing/selftests/kvm/lib/x86_64/processor.c
index 4e80df28f873,fa4ad136b34d..000000000000
--- a/tools/testing/selftests/kvm/lib/x86_64/processor.c
+++ b/tools/testing/selftests/kvm/lib/x86_64/processor.c
@@@ -255,31 -249,25 +255,43 @@@ void virt_pg_map(struct kvm_vm *vm, uin
  	/* Allocate page directory pointer table if not present. */
  	pml4e = addr_gpa2hva(vm, vm->pgd);
  	if (!pml4e[index[3]].present) {
++<<<<<<< HEAD
 +		pml4e[index[3]].address = vm_phy_page_alloc(vm,
 +			KVM_GUEST_PAGE_TABLE_MIN_PADDR, pgd_memslot)
 +			>> vm->page_shift;
++=======
+ 		pml4e[index[3]].pfn = vm_alloc_page_table(vm) >> vm->page_shift;
++>>>>>>> 6d96ca6a602b (KVM: selftests: Rename x86's page table "address" to "pfn")
  		pml4e[index[3]].writable = true;
  		pml4e[index[3]].present = true;
  	}
  
  	/* Allocate page directory table if not present. */
  	struct pageDirectoryPointerEntry *pdpe;
- 	pdpe = addr_gpa2hva(vm, pml4e[index[3]].address * vm->page_size);
+ 	pdpe = addr_gpa2hva(vm, pml4e[index[3]].pfn * vm->page_size);
  	if (!pdpe[index[2]].present) {
++<<<<<<< HEAD
 +		pdpe[index[2]].address = vm_phy_page_alloc(vm,
 +			KVM_GUEST_PAGE_TABLE_MIN_PADDR, pgd_memslot)
 +			>> vm->page_shift;
++=======
+ 		pdpe[index[2]].pfn = vm_alloc_page_table(vm) >> vm->page_shift;
++>>>>>>> 6d96ca6a602b (KVM: selftests: Rename x86's page table "address" to "pfn")
  		pdpe[index[2]].writable = true;
  		pdpe[index[2]].present = true;
  	}
  
  	/* Allocate page table if not present. */
  	struct pageDirectoryEntry *pde;
- 	pde = addr_gpa2hva(vm, pdpe[index[2]].address * vm->page_size);
+ 	pde = addr_gpa2hva(vm, pdpe[index[2]].pfn * vm->page_size);
  	if (!pde[index[1]].present) {
++<<<<<<< HEAD
 +		pde[index[1]].address = vm_phy_page_alloc(vm,
 +			KVM_GUEST_PAGE_TABLE_MIN_PADDR, pgd_memslot)
 +			>> vm->page_shift;
++=======
+ 		pde[index[1]].pfn = vm_alloc_page_table(vm) >> vm->page_shift;
++>>>>>>> 6d96ca6a602b (KVM: selftests: Rename x86's page table "address" to "pfn")
  		pde[index[1]].writable = true;
  		pde[index[1]].present = true;
  	}
* Unmerged path tools/testing/selftests/kvm/lib/x86_64/processor.c
