nfsd: rename lookup_clientid->set_client

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author J. Bruce Fields <bfields@redhat.com>
commit 460d27091ae2c23e7ac959a61cd481c58832db58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/460d2709.failed

I think this is a better name, and I'm going to reuse elsewhere the code
that does the lookup itself.

	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 460d27091ae2c23e7ac959a61cd481c58832db58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs4state.c
diff --cc fs/nfsd/nfs4state.c
index 1988369d20ec,4bdd90074e24..000000000000
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@@ -4580,9 -4633,10 +4580,9 @@@ static __be32 nfsd4_check_seqid(struct 
  	return nfserr_bad_seqid;
  }
  
- static __be32 lookup_clientid(clientid_t *clid,
+ static __be32 set_client(clientid_t *clid,
  		struct nfsd4_compound_state *cstate,
 -		struct nfsd_net *nn,
 -		bool sessions)
 +		struct nfsd_net *nn)
  {
  	struct nfs4_client *found;
  
@@@ -4634,7 -4688,7 +4634,11 @@@ nfsd4_process_open1(struct nfsd4_compou
  	if (open->op_file == NULL)
  		return nfserr_jukebox;
  
++<<<<<<< HEAD
 +	status = lookup_clientid(clientid, cstate, nn);
++=======
+ 	status = set_client(clientid, cstate, nn, false);
++>>>>>>> 460d27091ae2 (nfsd: rename lookup_clientid->set_client)
  	if (status)
  		return status;
  	clp = cstate->clp;
@@@ -5219,7 -5298,7 +5223,11 @@@ nfsd4_renew(struct svc_rqst *rqstp, str
  	struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
  
  	trace_nfsd_clid_renew(clid);
++<<<<<<< HEAD
 +	status = lookup_clientid(clid, cstate, nn);
++=======
+ 	status = set_client(clid, cstate, nn, false);
++>>>>>>> 460d27091ae2 (nfsd: rename lookup_clientid->set_client)
  	if (status)
  		return status;
  	clp = cstate->clp;
@@@ -5590,7 -5681,7 +5598,11 @@@ nfsd4_lookup_stateid(struct nfsd4_compo
  	if (ZERO_STATEID(stateid) || ONE_STATEID(stateid) ||
  		CLOSE_STATEID(stateid))
  		return nfserr_bad_stateid;
++<<<<<<< HEAD
 +	status = lookup_clientid(&stateid->si_opaque.so_clid, cstate, nn);
++=======
+ 	status = set_client(&stateid->si_opaque.so_clid, cstate, nn, false);
++>>>>>>> 460d27091ae2 (nfsd: rename lookup_clientid->set_client)
  	if (status == nfserr_stale_clientid) {
  		if (cstate->session)
  			return nfserr_bad_stateid;
@@@ -5673,6 -5807,38 +5685,41 @@@ nfs4_check_file(struct svc_rqst *rqstp
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static __be32 find_cpntf_state(struct nfsd_net *nn, stateid_t *st,
+ 			       struct nfs4_stid **stid)
+ {
+ 	__be32 status;
+ 	struct nfs4_cpntf_state *cps = NULL;
+ 	struct nfsd4_compound_state cstate;
+ 
+ 	status = manage_cpntf_state(nn, st, NULL, &cps);
+ 	if (status)
+ 		return status;
+ 
+ 	cps->cpntf_time = ktime_get_boottime_seconds();
+ 	memset(&cstate, 0, sizeof(cstate));
+ 	status = set_client(&cps->cp_p_clid, &cstate, nn, true);
+ 	if (status)
+ 		goto out;
+ 	status = nfsd4_lookup_stateid(&cstate, &cps->cp_p_stateid,
+ 				NFS4_DELEG_STID|NFS4_OPEN_STID|NFS4_LOCK_STID,
+ 				stid, nn);
+ 	put_client_renew(cstate.clp);
+ out:
+ 	nfs4_put_cpntf_state(nn, cps);
+ 	return status;
+ }
+ 
+ void nfs4_put_cpntf_state(struct nfsd_net *nn, struct nfs4_cpntf_state *cps)
+ {
+ 	spin_lock(&nn->s2s_cp_lock);
+ 	_free_cpntf_state_locked(nn, cps);
+ 	spin_unlock(&nn->s2s_cp_lock);
+ }
+ 
++>>>>>>> 460d27091ae2 (nfsd: rename lookup_clientid->set_client)
  /*
   * Checks for stateid operations
   */
@@@ -6728,7 -6899,7 +6775,11 @@@ nfsd4_lockt(struct svc_rqst *rqstp, str
  		 return nfserr_inval;
  
  	if (!nfsd4_has_session(cstate)) {
++<<<<<<< HEAD
 +		status = lookup_clientid(&lockt->lt_clientid, cstate, nn);
++=======
+ 		status = set_client(&lockt->lt_clientid, cstate, nn, false);
++>>>>>>> 460d27091ae2 (nfsd: rename lookup_clientid->set_client)
  		if (status)
  			goto out;
  	}
@@@ -6912,7 -7083,7 +6963,11 @@@ nfsd4_release_lockowner(struct svc_rqs
  	dprintk("nfsd4_release_lockowner clientid: (%08x/%08x):\n",
  		clid->cl_boot, clid->cl_id);
  
++<<<<<<< HEAD
 +	status = lookup_clientid(clid, cstate, nn);
++=======
+ 	status = set_client(clid, cstate, nn, false);
++>>>>>>> 460d27091ae2 (nfsd: rename lookup_clientid->set_client)
  	if (status)
  		return status;
  
@@@ -7059,7 -7230,7 +7114,11 @@@ nfs4_check_open_reclaim(clientid_t *cli
  	__be32 status;
  
  	/* find clientid in conf_id_hashtbl */
++<<<<<<< HEAD
 +	status = lookup_clientid(clid, cstate, nn);
++=======
+ 	status = set_client(clid, cstate, nn, false);
++>>>>>>> 460d27091ae2 (nfsd: rename lookup_clientid->set_client)
  	if (status)
  		return nfserr_reclaim_bad;
  
* Unmerged path fs/nfsd/nfs4state.c
