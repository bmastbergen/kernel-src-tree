libbpf: Constify few bpf_program getters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Andrii Nakryiko <andrii@kernel.org>
commit a46410d5e4975d701d526397156fa0815747dc2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a46410d5.failed

bpf_program__get_type() and bpf_program__get_expected_attach_type() shouldn't
modify given bpf_program, so mark input parameter as const struct bpf_program.
This eliminates unnecessary compilation warnings or explicit casts in user
programs.

	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20210324172941.2609884-1-andrii@kernel.org
(cherry picked from commit a46410d5e4975d701d526397156fa0815747dc2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
diff --cc tools/lib/bpf/libbpf.c
index d4b9894024ab,10a0a67699f1..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -8461,7 -8458,7 +8461,11 @@@ int bpf_program__nth_fd(const struct bp
  	return fd;
  }
  
++<<<<<<< HEAD
 +enum bpf_prog_type bpf_program__get_type_v0_0_4(struct bpf_program *prog)
++=======
+ enum bpf_prog_type bpf_program__get_type(const struct bpf_program *prog)
++>>>>>>> a46410d5e497 (libbpf: Constify few bpf_program getters)
  {
  	return prog->type;
  }
@@@ -8506,7 -8503,7 +8510,11 @@@ BPF_PROG_TYPE_FNS(extension, BPF_PROG_T
  BPF_PROG_TYPE_FNS(sk_lookup, BPF_PROG_TYPE_SK_LOOKUP);
  
  enum bpf_attach_type
++<<<<<<< HEAD
 +bpf_program__get_expected_attach_type_v0_0_4(struct bpf_program *prog)
++=======
+ bpf_program__get_expected_attach_type(const struct bpf_program *prog)
++>>>>>>> a46410d5e497 (libbpf: Constify few bpf_program getters)
  {
  	return prog->expected_attach_type;
  }
diff --cc tools/lib/bpf/libbpf.h
index 823c46e827c1,89ade7d7b31c..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -375,20 -361,12 +375,28 @@@ LIBBPF_API int bpf_program__set_struct_
  LIBBPF_API int bpf_program__set_extension(struct bpf_program *prog);
  LIBBPF_API int bpf_program__set_sk_lookup(struct bpf_program *prog);
  
++<<<<<<< HEAD
 +LIBBPF_API enum bpf_prog_type bpf_program__get_type(struct bpf_program *prog);
 +LIBBPF_API enum bpf_prog_type
 +bpf_program__get_type_v0_0_4(struct bpf_program *prog);
 +LIBBPF_API enum bpf_prog_type
 +bpf_program__get_type_v0_0_6(struct bpf_program *prog);
++=======
+ LIBBPF_API enum bpf_prog_type bpf_program__get_type(const struct bpf_program *prog);
++>>>>>>> a46410d5e497 (libbpf: Constify few bpf_program getters)
  LIBBPF_API void bpf_program__set_type(struct bpf_program *prog,
  				      enum bpf_prog_type type);
  
  LIBBPF_API enum bpf_attach_type
++<<<<<<< HEAD
 +bpf_program__get_expected_attach_type(struct bpf_program *prog);
 +LIBBPF_API enum bpf_attach_type
 +bpf_program__get_expected_attach_type_v0_0_4(struct bpf_program *prog);
 +LIBBPF_API enum bpf_attach_type
 +bpf_program__get_expected_attach_type_v0_0_6(struct bpf_program *prog);
++=======
+ bpf_program__get_expected_attach_type(const struct bpf_program *prog);
++>>>>>>> a46410d5e497 (libbpf: Constify few bpf_program getters)
  LIBBPF_API void
  bpf_program__set_expected_attach_type(struct bpf_program *prog,
  				      enum bpf_attach_type type);
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
