mm/slub: Fix backtrace of objects to handle redzone adjustment

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Maninder Singh <maninder1.s@samsung.com>
commit 0cbc124bce8c527eb14c87f634683c5bcf4299c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/0cbc124b.failed

This commit fixes commit 8e7f37f2aaa5 ("mm: Add mem_dump_obj() to print
source of memory block").

With current code, the backtrace of allocated object is incorrect:
/ # cat /proc/meminfo
[   14.969843]  slab kmalloc-64 start c8ab0140 data offset 64 pointer offset 0 size 64 allocated at 0x6b6b6b6b
[   14.970635]     0x6b6b6b6b
[   14.970794]     0x6b6b6b6b
[   14.970932]     0x6b6b6b6b
[   14.971077]     0x6b6b6b6b
[   14.971202]     0x6b6b6b6b
[   14.971317]     0x6b6b6b6b
[   14.971423]     0x6b6b6b6b
[   14.971635]     0x6b6b6b6b
[   14.971740]     0x6b6b6b6b
[   14.971871]     0x6b6b6b6b
[   14.972229]     0x6b6b6b6b
[   14.972363]     0x6b6b6b6b
[   14.972505]     0xa56b6b6b
[   14.972631]     0xbbbbbbbb
[   14.972734]     0xc8ab0400
[   14.972891]     meminfo_proc_show+0x40/0x4fc

The reason is that the object address was not adjusted for the red zone.
With this fix, the backtrace is correct:
/ # cat /proc/meminfo
[   14.870782]  slab kmalloc-64 start c8ab0140 data offset 64 pointer offset 128 size 64 allocated at meminfo_proc_show+0x40/0x4f4
[   14.871817]     meminfo_proc_show+0x40/0x4f4
[   14.872035]     seq_read_iter+0x18c/0x4c4
[   14.872229]     proc_reg_read_iter+0x84/0xac
[   14.872433]     generic_file_splice_read+0xe8/0x17c
[   14.872621]     splice_direct_to_actor+0xb8/0x290
[   14.872747]     do_splice_direct+0xa0/0xe0
[   14.872896]     do_sendfile+0x2d0/0x438
[   14.873044]     sys_sendfile64+0x12c/0x140
[   14.873229]     ret_fast_syscall+0x0/0x58
[   14.873372]     0xbe861de4

	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Signed-off-by: Vaneet Narang <v.narang@samsung.com>
	Signed-off-by: Maninder Singh <maninder1.s@samsung.com>
	Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
(cherry picked from commit 0cbc124bce8c527eb14c87f634683c5bcf4299c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/slub.c
diff --cc mm/slub.c
index 1ecd959b48cb,8f2d13508ec9..000000000000
--- a/mm/slub.c
+++ b/mm/slub.c
@@@ -3936,6 -3973,49 +3936,52 @@@ int __kmem_cache_shutdown(struct kmem_c
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_PRINTK
+ void kmem_obj_info(struct kmem_obj_info *kpp, void *object, struct page *page)
+ {
+ 	void *base;
+ 	int __maybe_unused i;
+ 	unsigned int objnr;
+ 	void *objp;
+ 	void *objp0;
+ 	struct kmem_cache *s = page->slab_cache;
+ 	struct track __maybe_unused *trackp;
+ 
+ 	kpp->kp_ptr = object;
+ 	kpp->kp_page = page;
+ 	kpp->kp_slab_cache = s;
+ 	base = page_address(page);
+ 	objp0 = kasan_reset_tag(object);
+ #ifdef CONFIG_SLUB_DEBUG
+ 	objp = restore_red_left(s, objp0);
+ #else
+ 	objp = objp0;
+ #endif
+ 	objnr = obj_to_index(s, page, objp);
+ 	kpp->kp_data_offset = (unsigned long)((char *)objp0 - (char *)objp);
+ 	objp = base + s->size * objnr;
+ 	kpp->kp_objp = objp;
+ 	if (WARN_ON_ONCE(objp < base || objp >= base + page->objects * s->size || (objp - base) % s->size) ||
+ 	    !(s->flags & SLAB_STORE_USER))
+ 		return;
+ #ifdef CONFIG_SLUB_DEBUG
+ 	objp = fixup_red_left(s, objp);
+ 	trackp = get_track(s, objp, TRACK_ALLOC);
+ 	kpp->kp_ret = (void *)trackp->addr;
+ #ifdef CONFIG_STACKTRACE
+ 	for (i = 0; i < KS_ADDRS_COUNT && i < TRACK_ADDRS_COUNT; i++) {
+ 		kpp->kp_stack[i] = (void *)trackp->addrs[i];
+ 		if (!kpp->kp_stack[i])
+ 			break;
+ 	}
+ #endif
+ #endif
+ }
+ #endif
+ 
++>>>>>>> 0cbc124bce8c (mm/slub: Fix backtrace of objects to handle redzone adjustment)
  /********************************************************************
   *		Kmalloc subsystem
   *******************************************************************/
* Unmerged path mm/slub.c
