ethtool: add interface to read standard MAC Ctrl stats

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Jakub Kicinski <kuba@kernel.org>
commit bfad2b979ddcc330c08bb071eb3c3f7b3411a681
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/bfad2b97.failed

Number of devices maintains the standard-based MAC control
counters for control frames. Add a API for those.

	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bfad2b979ddcc330c08bb071eb3c3f7b3411a681)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ethtool.h
#	include/uapi/linux/ethtool.h
#	include/uapi/linux/ethtool_netlink.h
#	net/ethtool/netlink.h
#	net/ethtool/stats.c
#	net/ethtool/strset.c
diff --cc include/linux/ethtool.h
index 98bda0684804,1ca6b836f9fe..000000000000
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@@ -270,6 -250,50 +270,53 @@@ static inline void ethtool_stats_init(u
  		stats[n] = ETHTOOL_STAT_NOT_SET;
  }
  
++<<<<<<< HEAD
++=======
+ /* Basic IEEE 802.3 MAC statistics (30.3.1.1.*), not otherwise exposed
+  * via a more targeted API.
+  */
+ struct ethtool_eth_mac_stats {
+ 	u64 FramesTransmittedOK;
+ 	u64 SingleCollisionFrames;
+ 	u64 MultipleCollisionFrames;
+ 	u64 FramesReceivedOK;
+ 	u64 FrameCheckSequenceErrors;
+ 	u64 AlignmentErrors;
+ 	u64 OctetsTransmittedOK;
+ 	u64 FramesWithDeferredXmissions;
+ 	u64 LateCollisions;
+ 	u64 FramesAbortedDueToXSColls;
+ 	u64 FramesLostDueToIntMACXmitError;
+ 	u64 CarrierSenseErrors;
+ 	u64 OctetsReceivedOK;
+ 	u64 FramesLostDueToIntMACRcvError;
+ 	u64 MulticastFramesXmittedOK;
+ 	u64 BroadcastFramesXmittedOK;
+ 	u64 FramesWithExcessiveDeferral;
+ 	u64 MulticastFramesReceivedOK;
+ 	u64 BroadcastFramesReceivedOK;
+ 	u64 InRangeLengthErrors;
+ 	u64 OutOfRangeLengthField;
+ 	u64 FrameTooLongErrors;
+ };
+ 
+ /* Basic IEEE 802.3 PHY statistics (30.3.2.1.*), not otherwise exposed
+  * via a more targeted API.
+  */
+ struct ethtool_eth_phy_stats {
+ 	u64 SymbolErrorDuringCarrier;
+ };
+ 
+ /* Basic IEEE 802.3 MAC Ctrl statistics (30.3.3.*), not otherwise exposed
+  * via a more targeted API.
+  */
+ struct ethtool_eth_ctrl_stats {
+ 	u64 MACControlFramesTransmitted;
+ 	u64 MACControlFramesReceived;
+ 	u64 UnsupportedOpcodesReceived;
+ };
+ 
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
  /**
   * struct ethtool_pause_stats - statistics for IEEE 802.3x pause frames
   * @tx_pause_frames: transmitted pause frame count. Reported to user space
@@@ -455,6 -528,12 +502,15 @@@ struct ethtool_ops_extended_rh 
   *	cannot use the standard PHY library helpers.
   * @get_phy_tunable: Read the value of a PHY tunable.
   * @set_phy_tunable: Set the value of a PHY tunable.
++<<<<<<< HEAD
++=======
+  * @get_module_eeprom_by_page: Get a region of plug-in module EEPROM data from
+  *	specified page. Returns a negative error code or the amount of bytes
+  *	read.
+  * @get_eth_phy_stats: Query some of the IEEE 802.3 PHY statistics.
+  * @get_eth_mac_stats: Query some of the IEEE 802.3 MAC statistics.
+  * @get_eth_ctrl_stats: Query some of the IEEE 802.3 MAC Ctrl statistics.
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
   *
   * All operations are optional (i.e. the function pointer may be set
   * to %NULL) and callers must take this into account.  Callers must
@@@ -558,47 -637,22 +614,64 @@@ struct ethtool_ops 
  				      struct ethtool_fecparam *);
  	void	(*get_ethtool_phy_stats)(struct net_device *,
  					 struct ethtool_stats *, u64 *);
++<<<<<<< HEAD
++=======
+ 	int	(*get_phy_tunable)(struct net_device *,
+ 				   const struct ethtool_tunable *, void *);
+ 	int	(*set_phy_tunable)(struct net_device *,
+ 				   const struct ethtool_tunable *, const void *);
+ 	int	(*get_module_eeprom_by_page)(struct net_device *dev,
+ 					     const struct ethtool_module_eeprom *page,
+ 					     struct netlink_ext_ack *extack);
+ 	void	(*get_eth_phy_stats)(struct net_device *dev,
+ 				     struct ethtool_eth_phy_stats *phy_stats);
+ 	void	(*get_eth_mac_stats)(struct net_device *dev,
+ 				     struct ethtool_eth_mac_stats *mac_stats);
+ 	void	(*get_eth_ctrl_stats)(struct net_device *dev,
+ 				      struct ethtool_eth_ctrl_stats *ctrl_stats);
+ };
 -
 -int ethtool_check_ops(const struct ethtool_ops *ops);
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
 +
 +	RH_KABI_USE(1, int	(*get_link_ksettings)(struct net_device *,
 +				      struct ethtool_link_ksettings *))
 +	RH_KABI_USE(2, int	(*set_link_ksettings)(struct net_device *,
 +				      const struct ethtool_link_ksettings *))
 +	RH_KABI_USE_SPLIT(3,	u32	supported_coalesce_params,
 +				u32     cap_link_lanes_supported:1)
 +	RH_KABI_USE(4, int	(*get_link_ext_state)(struct net_device *,
 +				      struct ethtool_link_ext_state_info *))
 +	RH_KABI_USE(5, void	(*get_pause_stats)(struct net_device *dev,
 +				   struct ethtool_pause_stats *pause_stats))
 +	RH_KABI_USE(6, int	(*get_phy_tunable)(struct net_device *,
 +				   const struct ethtool_tunable *, void *))
 +	RH_KABI_USE(7, int	(*set_phy_tunable)(struct net_device *,
 +				   const struct ethtool_tunable *, const void *))
 +	RH_KABI_RESERVE(8)
 +	RH_KABI_RESERVE(9)
 +	RH_KABI_RESERVE(10)
 +	RH_KABI_RESERVE(11)
 +	RH_KABI_RESERVE(12)
 +	RH_KABI_RESERVE(13)
 +	RH_KABI_RESERVE(14)
 +	RH_KABI_RESERVE(15)
 +	RH_KABI_RESERVE(16)
 +	RH_KABI_RESERVE(17)
 +	RH_KABI_RESERVE(18)
 +	RH_KABI_RESERVE(19)
 +	RH_KABI_RESERVE(20)
 +	RH_KABI_RESERVE(21)
 +	RH_KABI_RESERVE(22)
 +	RH_KABI_RESERVE(23)
 +	RH_KABI_RESERVE(24)
 +	RH_KABI_RESERVE(25)
 +	RH_KABI_RESERVE(26)
 +	RH_KABI_RESERVE(27)
 +	RH_KABI_RESERVE(28)
 +	RH_KABI_RESERVE(29)
 +	RH_KABI_RESERVE(30)
 +	RH_KABI_RESERVE(31)
 +	RH_KABI_AUX_EMBED(ethtool_ops_extended)
 +};
  
  struct ethtool_rx_flow_rule {
  	struct flow_rule	*rule;
diff --cc include/uapi/linux/ethtool.h
index a60adc2dff9f,9cb8df89d4f2..000000000000
--- a/include/uapi/linux/ethtool.h
+++ b/include/uapi/linux/ethtool.h
@@@ -673,6 -669,10 +673,13 @@@ enum ethtool_link_ext_substate_cable_is
   * @ETH_SS_TS_TX_TYPES: timestamping Tx types
   * @ETH_SS_TS_RX_FILTERS: timestamping Rx filters
   * @ETH_SS_UDP_TUNNEL_TYPES: UDP tunnel types
++<<<<<<< HEAD
++=======
+  * @ETH_SS_STATS_STD: standardized stats
+  * @ETH_SS_STATS_ETH_PHY: names of IEEE 802.3 PHY statistics
+  * @ETH_SS_STATS_ETH_MAC: names of IEEE 802.3 MAC statistics
+  * @ETH_SS_STATS_ETH_CTRL: names of IEEE 802.3 MAC Control statistics
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
   *
   * @ETH_SS_COUNT: number of defined string sets
   */
@@@ -693,6 -693,10 +700,13 @@@ enum ethtool_stringset 
  	ETH_SS_TS_TX_TYPES,
  	ETH_SS_TS_RX_FILTERS,
  	ETH_SS_UDP_TUNNEL_TYPES,
++<<<<<<< HEAD
++=======
+ 	ETH_SS_STATS_STD,
+ 	ETH_SS_STATS_ETH_PHY,
+ 	ETH_SS_STATS_ETH_MAC,
+ 	ETH_SS_STATS_ETH_CTRL,
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
  
  	/* add new constants above here */
  	ETH_SS_COUNT
diff --cc include/uapi/linux/ethtool_netlink.h
index df13d637e99a,2ea5f049df6a..000000000000
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@@ -648,6 -651,148 +648,151 @@@ enum 
  	ETHTOOL_A_FEC_MAX = (__ETHTOOL_A_FEC_CNT - 1)
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	ETHTOOL_A_FEC_STAT_UNSPEC,
+ 	ETHTOOL_A_FEC_STAT_PAD,
+ 
+ 	ETHTOOL_A_FEC_STAT_CORRECTED,			/* array, u64 */
+ 	ETHTOOL_A_FEC_STAT_UNCORR,			/* array, u64 */
+ 	ETHTOOL_A_FEC_STAT_CORR_BITS,			/* array, u64 */
+ 
+ 	/* add new constants above here */
+ 	__ETHTOOL_A_FEC_STAT_CNT,
+ 	ETHTOOL_A_FEC_STAT_MAX = (__ETHTOOL_A_FEC_STAT_CNT - 1)
+ };
+ 
+ /* MODULE EEPROM */
+ 
+ enum {
+ 	ETHTOOL_A_MODULE_EEPROM_UNSPEC,
+ 	ETHTOOL_A_MODULE_EEPROM_HEADER,			/* nest - _A_HEADER_* */
+ 
+ 	ETHTOOL_A_MODULE_EEPROM_OFFSET,			/* u32 */
+ 	ETHTOOL_A_MODULE_EEPROM_LENGTH,			/* u32 */
+ 	ETHTOOL_A_MODULE_EEPROM_PAGE,			/* u8 */
+ 	ETHTOOL_A_MODULE_EEPROM_BANK,			/* u8 */
+ 	ETHTOOL_A_MODULE_EEPROM_I2C_ADDRESS,		/* u8 */
+ 	ETHTOOL_A_MODULE_EEPROM_DATA,			/* nested */
+ 
+ 	__ETHTOOL_A_MODULE_EEPROM_CNT,
+ 	ETHTOOL_A_MODULE_EEPROM_MAX = (__ETHTOOL_A_MODULE_EEPROM_CNT - 1)
+ };
+ 
+ /* STATS */
+ 
+ enum {
+ 	ETHTOOL_A_STATS_UNSPEC,
+ 	ETHTOOL_A_STATS_PAD,
+ 	ETHTOOL_A_STATS_HEADER,			/* nest - _A_HEADER_* */
+ 	ETHTOOL_A_STATS_GROUPS,			/* bitset */
+ 
+ 	ETHTOOL_A_STATS_GRP,			/* nest - _A_STATS_GRP_* */
+ 
+ 	/* add new constants above here */
+ 	__ETHTOOL_A_STATS_CNT,
+ 	ETHTOOL_A_STATS_MAX = (__ETHTOOL_A_STATS_CNT - 1)
+ };
+ 
+ enum {
+ 	ETHTOOL_STATS_ETH_PHY,
+ 	ETHTOOL_STATS_ETH_MAC,
+ 	ETHTOOL_STATS_ETH_CTRL,
+ 
+ 	/* add new constants above here */
+ 	__ETHTOOL_STATS_CNT
+ };
+ 
+ enum {
+ 	ETHTOOL_A_STATS_GRP_UNSPEC,
+ 	ETHTOOL_A_STATS_GRP_PAD,
+ 
+ 	ETHTOOL_A_STATS_GRP_ID,			/* u32 */
+ 	ETHTOOL_A_STATS_GRP_SS_ID,		/* u32 */
+ 
+ 	ETHTOOL_A_STATS_GRP_STAT,		/* nest */
+ 
+ 	/* add new constants above here */
+ 	__ETHTOOL_A_STATS_GRP_CNT,
+ 	ETHTOOL_A_STATS_GRP_MAX = (__ETHTOOL_A_STATS_CNT - 1)
+ };
+ 
+ enum {
+ 	/* 30.3.2.1.5 aSymbolErrorDuringCarrier */
+ 	ETHTOOL_A_STATS_ETH_PHY_5_SYM_ERR,
+ 
+ 	/* add new constants above here */
+ 	__ETHTOOL_A_STATS_ETH_PHY_CNT,
+ 	ETHTOOL_A_STATS_ETH_PHY_MAX = (__ETHTOOL_A_STATS_ETH_PHY_CNT - 1)
+ };
+ 
+ enum {
+ 	/* 30.3.1.1.2 aFramesTransmittedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_2_TX_PKT,
+ 	/* 30.3.1.1.3 aSingleCollisionFrames */
+ 	ETHTOOL_A_STATS_ETH_MAC_3_SINGLE_COL,
+ 	/* 30.3.1.1.4 aMultipleCollisionFrames */
+ 	ETHTOOL_A_STATS_ETH_MAC_4_MULTI_COL,
+ 	/* 30.3.1.1.5 aFramesReceivedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_5_RX_PKT,
+ 	/* 30.3.1.1.6 aFrameCheckSequenceErrors */
+ 	ETHTOOL_A_STATS_ETH_MAC_6_FCS_ERR,
+ 	/* 30.3.1.1.7 aAlignmentErrors */
+ 	ETHTOOL_A_STATS_ETH_MAC_7_ALIGN_ERR,
+ 	/* 30.3.1.1.8 aOctetsTransmittedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_8_TX_BYTES,
+ 	/* 30.3.1.1.9 aFramesWithDeferredXmissions */
+ 	ETHTOOL_A_STATS_ETH_MAC_9_TX_DEFER,
+ 	/* 30.3.1.1.10 aLateCollisions */
+ 	ETHTOOL_A_STATS_ETH_MAC_10_LATE_COL,
+ 	/* 30.3.1.1.11 aFramesAbortedDueToXSColls */
+ 	ETHTOOL_A_STATS_ETH_MAC_11_XS_COL,
+ 	/* 30.3.1.1.12 aFramesLostDueToIntMACXmitError */
+ 	ETHTOOL_A_STATS_ETH_MAC_12_TX_INT_ERR,
+ 	/* 30.3.1.1.13 aCarrierSenseErrors */
+ 	ETHTOOL_A_STATS_ETH_MAC_13_CS_ERR,
+ 	/* 30.3.1.1.14 aOctetsReceivedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_14_RX_BYTES,
+ 	/* 30.3.1.1.15 aFramesLostDueToIntMACRcvError */
+ 	ETHTOOL_A_STATS_ETH_MAC_15_RX_INT_ERR,
+ 
+ 	/* 30.3.1.1.18 aMulticastFramesXmittedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_18_TX_MCAST,
+ 	/* 30.3.1.1.19 aBroadcastFramesXmittedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_19_TX_BCAST,
+ 	/* 30.3.1.1.20 aFramesWithExcessiveDeferral */
+ 	ETHTOOL_A_STATS_ETH_MAC_20_XS_DEFER,
+ 	/* 30.3.1.1.21 aMulticastFramesReceivedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_21_RX_MCAST,
+ 	/* 30.3.1.1.22 aBroadcastFramesReceivedOK */
+ 	ETHTOOL_A_STATS_ETH_MAC_22_RX_BCAST,
+ 	/* 30.3.1.1.23 aInRangeLengthErrors */
+ 	ETHTOOL_A_STATS_ETH_MAC_23_IR_LEN_ERR,
+ 	/* 30.3.1.1.24 aOutOfRangeLengthField */
+ 	ETHTOOL_A_STATS_ETH_MAC_24_OOR_LEN,
+ 	/* 30.3.1.1.25 aFrameTooLongErrors */
+ 	ETHTOOL_A_STATS_ETH_MAC_25_TOO_LONG_ERR,
+ 
+ 	/* add new constants above here */
+ 	__ETHTOOL_A_STATS_ETH_MAC_CNT,
+ 	ETHTOOL_A_STATS_ETH_MAC_MAX = (__ETHTOOL_A_STATS_ETH_MAC_CNT - 1)
+ };
+ 
+ enum {
+ 	/* 30.3.3.3 aMACControlFramesTransmitted */
+ 	ETHTOOL_A_STATS_ETH_CTRL_3_TX,
+ 	/* 30.3.3.4 aMACControlFramesReceived */
+ 	ETHTOOL_A_STATS_ETH_CTRL_4_RX,
+ 	/* 30.3.3.5 aUnsupportedOpcodesReceived */
+ 	ETHTOOL_A_STATS_ETH_CTRL_5_RX_UNSUP,
+ 
+ 	/* add new constants above here */
+ 	__ETHTOOL_A_STATS_ETH_CTRL_CNT,
+ 	ETHTOOL_A_STATS_ETH_CTRL_MAX = (__ETHTOOL_A_STATS_ETH_CTRL_CNT - 1)
+ };
+ 
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
  /* generic netlink info */
  #define ETHTOOL_GENL_NAME "ethtool"
  #define ETHTOOL_GENL_VERSION 1
diff --cc net/ethtool/netlink.h
index adf85e250953,febfa61e52e2..000000000000
--- a/net/ethtool/netlink.h
+++ b/net/ethtool/netlink.h
@@@ -397,4 -401,9 +397,12 @@@ int ethnl_tunnel_info_start(struct netl
  int ethnl_tunnel_info_dumpit(struct sk_buff *skb, struct netlink_callback *cb);
  int ethnl_set_fec(struct sk_buff *skb, struct genl_info *info);
  
++<<<<<<< HEAD
++=======
+ extern const char stats_std_names[__ETHTOOL_STATS_CNT][ETH_GSTRING_LEN];
+ extern const char stats_eth_phy_names[__ETHTOOL_A_STATS_ETH_PHY_CNT][ETH_GSTRING_LEN];
+ extern const char stats_eth_mac_names[__ETHTOOL_A_STATS_ETH_MAC_CNT][ETH_GSTRING_LEN];
+ extern const char stats_eth_ctrl_names[__ETHTOOL_A_STATS_ETH_CTRL_CNT][ETH_GSTRING_LEN];
+ 
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
  #endif /* _NET_ETHTOOL_NETLINK_H */
diff --cc net/ethtool/strset.c
index 9908b922cce8,a33c603a7a02..000000000000
--- a/net/ethtool/strset.c
+++ b/net/ethtool/strset.c
@@@ -80,6 -80,26 +80,29 @@@ static const struct strset_info info_te
  		.count		= __ETHTOOL_UDP_TUNNEL_TYPE_CNT,
  		.strings	= udp_tunnel_type_names,
  	},
++<<<<<<< HEAD
++=======
+ 	[ETH_SS_STATS_STD] = {
+ 		.per_dev	= false,
+ 		.count		= __ETHTOOL_STATS_CNT,
+ 		.strings	= stats_std_names,
+ 	},
+ 	[ETH_SS_STATS_ETH_PHY] = {
+ 		.per_dev	= false,
+ 		.count		= __ETHTOOL_A_STATS_ETH_PHY_CNT,
+ 		.strings	= stats_eth_phy_names,
+ 	},
+ 	[ETH_SS_STATS_ETH_MAC] = {
+ 		.per_dev	= false,
+ 		.count		= __ETHTOOL_A_STATS_ETH_MAC_CNT,
+ 		.strings	= stats_eth_mac_names,
+ 	},
+ 	[ETH_SS_STATS_ETH_CTRL] = {
+ 		.per_dev	= false,
+ 		.count		= __ETHTOOL_A_STATS_ETH_CTRL_CNT,
+ 		.strings	= stats_eth_ctrl_names,
+ 	},
++>>>>>>> bfad2b979ddc (ethtool: add interface to read standard MAC Ctrl stats)
  };
  
  struct strset_req_info {
* Unmerged path net/ethtool/stats.c
* Unmerged path include/linux/ethtool.h
* Unmerged path include/uapi/linux/ethtool.h
* Unmerged path include/uapi/linux/ethtool_netlink.h
* Unmerged path net/ethtool/netlink.h
* Unmerged path net/ethtool/stats.c
* Unmerged path net/ethtool/strset.c
