arm64: kaslr: Check command line before looking for a seed

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Mark Brown <broonie@kernel.org>
commit 2203e1adb936a92ab2fd8f705e888af322462736
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/2203e1ad.failed

Now that we print diagnostics at boot the reason why we do not initialise
KASLR matters. Currently we check for a seed before we check if the user
has explicitly disabled KASLR on the command line which will result in
misleading diagnostics so reverse the order of those checks. We still
parse the seed from the DT early so that if the user has both provided a
seed and disabled KASLR on the command line we still mask the seed on
the command line.

	Signed-off-by: Mark Brown <broonie@kernel.org>
	Acked-by: Mark Rutland <mark.rutland@arm.com>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 2203e1adb936a92ab2fd8f705e888af322462736)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/kaslr.c
diff --cc arch/arm64/kernel/kaslr.c
index a3b053f0f5b8,2a11a962e571..000000000000
--- a/arch/arm64/kernel/kaslr.c
+++ b/arch/arm64/kernel/kaslr.c
@@@ -23,6 -19,14 +23,17 @@@
  #include <asm/pgtable.h>
  #include <asm/sections.h>
  
++<<<<<<< HEAD
++=======
+ enum kaslr_status {
+ 	KASLR_ENABLED,
+ 	KASLR_DISABLED_CMDLINE,
+ 	KASLR_DISABLED_NO_SEED,
+ 	KASLR_DISABLED_FDT_REMAP,
+ };
+ 
+ static enum kaslr_status __initdata kaslr_status;
++>>>>>>> 2203e1adb936 (arm64: kaslr: Check command line before looking for a seed)
  u64 __ro_after_init module_alloc_base;
  u16 __initdata memstart_offset_seed;
  
@@@ -105,8 -108,6 +116,11 @@@ u64 __init kaslr_early_init(u64 dt_phys
  	 * Retrieve (and wipe) the seed from the FDT
  	 */
  	seed = get_kaslr_seed(fdt);
++<<<<<<< HEAD
 +	if (!seed)
 +		return 0;
++=======
++>>>>>>> 2203e1adb936 (arm64: kaslr: Check command line before looking for a seed)
  
  	/*
  	 * Check if 'nokaslr' appears on the command line, and
@@@ -114,9 -115,16 +128,14 @@@
  	 */
  	cmdline = kaslr_get_cmdline(fdt);
  	str = strstr(cmdline, "nokaslr");
 -	if (str == cmdline || (str > cmdline && *(str - 1) == ' ')) {
 -		kaslr_status = KASLR_DISABLED_CMDLINE;
 +	if (str == cmdline || (str > cmdline && *(str - 1) == ' '))
  		return 0;
 -	}
  
+ 	if (!seed) {
+ 		kaslr_status = KASLR_DISABLED_NO_SEED;
+ 		return 0;
+ 	}
+ 
  	/*
  	 * OK, so we are proceeding with KASLR enabled. Calculate a suitable
  	 * kernel image offset from the seed. Let's place the kernel in the
* Unmerged path arch/arm64/kernel/kaslr.c
