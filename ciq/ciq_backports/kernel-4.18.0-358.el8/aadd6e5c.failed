time/sched_clock: Use raw_read_seqcount_latch()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Ahmed S. Darwish <a.darwish@linutronix.de>
commit aadd6e5caaacd6feca9691ba30536e7de5a7d152
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/aadd6e5c.failed

sched_clock uses seqcount_t latching to switch between two storage
places protected by the sequence counter. This allows it to have
interruptible, NMI-safe, seqcount_t write side critical sections.

Since 7fc26327b756 ("seqlock: Introduce raw_read_seqcount_latch()"),
raw_read_seqcount_latch() became the standardized way for seqcount_t
latch read paths. Due to the dependent load, it also has one read
memory barrier less than the currently used raw_read_seqcount() API.

Use raw_read_seqcount_latch() for the seqcount_t latch read path.

	Signed-off-by: Ahmed S. Darwish <a.darwish@linutronix.de>
	Signed-off-by: Leo Yan <leo.yan@linaro.org>
Link: https://lkml.kernel.org/r/20200625085745.GD117543@hirez.programming.kicks-ass.net
Link: https://lkml.kernel.org/r/20200715092345.GA231464@debian-buster-darwi.lab.linutronix.de
Link: https://lore.kernel.org/r/20200716051130.4359-3-leo.yan@linaro.org
References: 1809bfa44e10 ("timers, sched/clock: Avoid deadlock during read from NMI")
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit aadd6e5caaacd6feca9691ba30536e7de5a7d152)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/time/sched_clock.c
diff --cc kernel/time/sched_clock.c
index c4bb7d840723,0deaf4b79fb4..000000000000
--- a/kernel/time/sched_clock.c
+++ b/kernel/time/sched_clock.c
@@@ -96,6 -68,17 +96,20 @@@ static inline u64 notrace cyc_to_ns(u6
  	return (cyc * mult) >> shift;
  }
  
++<<<<<<< HEAD
++=======
+ struct clock_read_data *sched_clock_read_begin(unsigned int *seq)
+ {
+ 	*seq = raw_read_seqcount_latch(&cd.seq);
+ 	return cd.read_data + (*seq & 1);
+ }
+ 
+ int sched_clock_read_retry(unsigned int seq)
+ {
+ 	return read_seqcount_retry(&cd.seq, seq);
+ }
+ 
++>>>>>>> aadd6e5caaac (time/sched_clock: Use raw_read_seqcount_latch())
  unsigned long long notrace sched_clock(void)
  {
  	u64 cyc, res;
* Unmerged path kernel/time/sched_clock.c
