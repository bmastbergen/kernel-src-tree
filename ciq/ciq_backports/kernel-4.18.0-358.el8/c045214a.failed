i2c: designware: Use DIV_ROUND_CLOSEST() macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit c045214a0f31dd5d6be716ed2f119b57b6c5d3a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/c045214a.failed

Instead of open-coding DIV_ROUND_CLOSEST() and similar use the macros directly.
While at it, replace numbers with predefined SI metric prefixes.

No functional change intended.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@kernel.org>
(cherry picked from commit c045214a0f31dd5d6be716ed2f119b57b6c5d3a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-common.c
diff --cc drivers/i2c/busses/i2c-designware-common.c
index 37ca1ea69f2b,bf2a4920638a..000000000000
--- a/drivers/i2c/busses/i2c-designware-common.c
+++ b/drivers/i2c/busses/i2c-designware-common.c
@@@ -16,9 -18,13 +16,14 @@@
  #include <linux/i2c.h>
  #include <linux/interrupt.h>
  #include <linux/io.h>
 -#include <linux/kernel.h>
  #include <linux/module.h>
  #include <linux/pm_runtime.h>
 -#include <linux/regmap.h>
  #include <linux/swab.h>
++<<<<<<< HEAD
++=======
+ #include <linux/types.h>
+ #include <linux/units.h>
++>>>>>>> c045214a0f31 (i2c: designware: Use DIV_ROUND_CLOSEST() macro)
  
  #include "i2c-designware-core.h"
  
* Unmerged path drivers/i2c/busses/i2c-designware-common.c
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index ec8970bab1a3..280f73fa3243 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -30,12 +30,13 @@
 #include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/suspend.h>
+#include <linux/units.h>
 
 #include "i2c-designware-core.h"
 
 static u32 i2c_dw_get_clk_rate_khz(struct dw_i2c_dev *dev)
 {
-	return clk_get_rate(dev->clk)/1000;
+	return clk_get_rate(dev->clk) / KILO;
 }
 
 #ifdef CONFIG_ACPI
@@ -352,7 +353,7 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 
 		if (!dev->sda_hold_time && t->sda_hold_ns)
 			dev->sda_hold_time =
-				div_u64(clk_khz * t->sda_hold_ns + 500000, 1000000);
+				DIV_S64_ROUND_CLOSEST(clk_khz * t->sda_hold_ns, MICRO);
 	}
 
 	adap = &dev->adapter;
