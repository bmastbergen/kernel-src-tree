loop: split loop_control_ioctl

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Christoph Hellwig <hch@lst.de>
commit f9d107644aa4943b383986a8aa36125379eeaa81
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/f9d10764.failed

Split loop_control_ioctl into a helper for each command.  This keeps the
code nicely separated for the upcoming locking changes.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Link: https://lore.kernel.org/r/20210623145908.92973-6-hch@lst.de
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f9d107644aa4943b383986a8aa36125379eeaa81)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/loop.c
diff --cc drivers/block/loop.c
index c2f478450eaa,c3c6cfdcaf34..000000000000
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@@ -2261,45 -2449,9 +2304,51 @@@ static int loop_control_get_free(int id
  	ret = mutex_lock_killable(&loop_ctl_mutex);
  	if (ret)
  		return ret;
++<<<<<<< HEAD
 +
 +	ret = -ENOSYS;
 +	switch (cmd) {
 +	case LOOP_CTL_ADD:
 +		ret = loop_lookup(&lo, parm);
 +		if (ret >= 0) {
 +			ret = -EEXIST;
 +			break;
 +		}
 +		ret = loop_add(&lo, parm);
 +		break;
 +	case LOOP_CTL_REMOVE:
 +		ret = loop_lookup(&lo, parm);
 +		if (ret < 0)
 +			break;
 +		ret = mutex_lock_killable(&lo->lo_mutex);
 +		if (ret)
 +			break;
 +		if (lo->lo_state != Lo_unbound) {
 +			ret = -EBUSY;
 +			mutex_unlock(&lo->lo_mutex);
 +			break;
 +		}
 +		if (atomic_read(&lo->lo_refcnt) > 0) {
 +			ret = -EBUSY;
 +			mutex_unlock(&lo->lo_mutex);
 +			break;
 +		}
 +		lo->lo_state = Lo_deleting;
 +		mutex_unlock(&lo->lo_mutex);
 +		idr_remove(&loop_index_idr, lo->lo_number);
 +		loop_remove(lo);
 +		break;
 +	case LOOP_CTL_GET_FREE:
 +		ret = loop_lookup(&lo, -1);
 +		if (ret >= 0)
 +			break;
 +		ret = loop_add(&lo, -1);
 +	}
++=======
+ 	ret = loop_lookup(&lo, -1);
+ 	if (ret < 0)
+ 		ret = loop_add(-1);
++>>>>>>> f9d107644aa4 (loop: split loop_control_ioctl)
  	mutex_unlock(&loop_ctl_mutex);
  
  	return ret;
* Unmerged path drivers/block/loop.c
