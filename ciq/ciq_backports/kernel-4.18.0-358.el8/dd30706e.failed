scsi: qla2xxx: edif: Add key update

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Quinn Tran <qutran@marvell.com>
commit dd30706e73b70d67e88fdaca688db7a3374fd5de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/dd30706e.failed

Some FC adapters from Marvell offer the ability to encrypt data in flight
(EDIF). This feature requires an application to act as an authenticator.

As part of the authentication process, the authentication application will
generate a SADB entry (Security Association/SA, key, SPI value, etc). This
SADB is then passed to driver to be programmed into hardware. There will be
a pair of SADB's (Tx and Rx) for each connection.

After some period, the application can choose to change the key. At that
time, a new set of SADB pair is given to driver. The old set of SADB will
be deleted.

Add a new bsg call (QL_VND_SC_SA_UPDATE) to allow application to allow
adding or deleting SADB entries.  Driver will not keep the key in
memory. It will pass it to HW.

It is assumed that application will assign a unique SPI value to this SADB
(SA + key). Driver + hardware will assign a handle to track this unique
SPI/SADB.

Link: https://lore.kernel.org/r/20210624052606.21613-6-njavali@marvell.com
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
Co-developed-by: Larry Wisneski <Larry.Wisneski@marvell.com>
	Signed-off-by: Larry Wisneski <Larry.Wisneski@marvell.com>
Co-developed-by: Duane Grigsby <duane.grigsby@marvell.com>
	Signed-off-by: Duane Grigsby <duane.grigsby@marvell.com>
Co-developed-by: Rick Hicksted Jr <rhicksted@marvell.com>
	Signed-off-by: Rick Hicksted Jr <rhicksted@marvell.com>
	Signed-off-by: Quinn Tran <qutran@marvell.com>
	Signed-off-by: Nilesh Javali <njavali@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit dd30706e73b70d67e88fdaca688db7a3374fd5de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_def.h
#	drivers/scsi/qla2xxx/qla_edif.c
#	drivers/scsi/qla2xxx/qla_edif.h
#	drivers/scsi/qla2xxx/qla_gbl.h
diff --cc drivers/scsi/qla2xxx/qla_def.h
index 3f8adf82ab1b,3e4c4cfbf7d4..000000000000
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@@ -4632,8 -4704,24 +4655,25 @@@ struct qla_hw_data 
  
  	struct qla_hw_data_stat stat;
  	pci_error_state_t pci_error_state;
++<<<<<<< HEAD
++=======
+ 	u64 prev_cmd_cnt;
+ 	struct dma_pool *purex_dma_pool;
+ 	struct btree_head32 host_map;
+ 
+ #define EDIF_NUM_SA_INDEX	512
+ #define EDIF_TX_SA_INDEX_BASE	EDIF_NUM_SA_INDEX
+ 	void *edif_rx_sa_id_map;
+ 	void *edif_tx_sa_id_map;
+ 	spinlock_t sadb_fp_lock;
+ 
+ 	struct list_head sadb_tx_index_list;
+ 	struct list_head sadb_rx_index_list;
+ 	spinlock_t sadb_lock;	/* protects list */
+ 	struct els_reject elsrej;
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  };
  
 -#define RX_ELS_SIZE (roundup(sizeof(struct enode) + ELS_MAX_PAYLOAD, SMP_CACHE_BYTES))
 -
  struct active_regions {
  	uint8_t global;
  	struct {
@@@ -5104,6 -5193,43 +5144,46 @@@ enum nexus_wait_type 
  	WAIT_LUN,
  };
  
++<<<<<<< HEAD
++=======
+ #define INVALID_EDIF_SA_INDEX	0xffff
+ #define RX_DELETE_NO_EDIF_SA_INDEX	0xfffe
+ 
+ #define QLA_SKIP_HANDLE QLA_TGT_SKIP_HANDLE
+ 
+ /* edif hash element */
+ struct edif_list_entry {
+ 	uint16_t handle;			/* nport_handle */
+ 	uint32_t update_sa_index;
+ 	uint32_t delete_sa_index;
+ 	uint32_t count;				/* counter for filtering sa_index */
+ #define EDIF_ENTRY_FLAGS_CLEANUP	0x01	/* this index is being cleaned up */
+ 	uint32_t flags;				/* used by sadb cleanup code */
+ 	fc_port_t *fcport;			/* needed by rx delay timer function */
+ 	struct timer_list timer;		/* rx delay timer */
+ 	struct list_head next;
+ };
+ 
+ #define EDIF_TX_INDX_BASE 512
+ #define EDIF_RX_INDX_BASE 0
+ #define EDIF_RX_DELETE_FILTER_COUNT 3	/* delay queuing rx delete until this many */
+ 
+ /* entry in the sa_index free pool */
+ 
+ struct sa_index_pair {
+ 	uint16_t sa_index;
+ 	uint32_t spi;
+ };
+ 
+ /* edif sa_index data structure */
+ struct edif_sa_index_entry {
+ 	struct sa_index_pair sa_pair[2];
+ 	fc_port_t *fcport;
+ 	uint16_t handle;
+ 	struct list_head next;
+ };
+ 
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  /* Refer to SNIA SFF 8247 */
  struct sff_8247_a0 {
  	u8 txid;	/* transceiver id */
diff --cc drivers/scsi/qla2xxx/qla_edif.c
index 165c910c1b81,15f9e10ac257..000000000000
--- a/drivers/scsi/qla2xxx/qla_edif.c
+++ b/drivers/scsi/qla2xxx/qla_edif.c
@@@ -11,6 -11,175 +11,178 @@@
  #include <linux/delay.h>
  #include <scsi/scsi_tcq.h>
  
++<<<<<<< HEAD
++=======
+ static struct edif_sa_index_entry *qla_edif_sadb_find_sa_index_entry(uint16_t nport_handle,
+ 		struct list_head *sa_list);
+ static uint16_t qla_edif_sadb_get_sa_index(fc_port_t *fcport,
+ 		struct qla_sa_update_frame *sa_frame);
+ static int qla_edif_sadb_delete_sa_index(fc_port_t *fcport, uint16_t nport_handle,
+ 		uint16_t sa_index);
+ static int qla_pur_get_pending(scsi_qla_host_t *, fc_port_t *, struct bsg_job *);
+ 
+ static struct els_sub_cmd {
+ 	uint16_t cmd;
+ 	const char *str;
+ } sc_str[] = {
+ 	{SEND_ELS, "send ELS"},
+ 	{SEND_ELS_REPLY, "send ELS Reply"},
+ 	{PULL_ELS, "retrieve ELS"},
+ };
+ 
+ const char *sc_to_str(uint16_t cmd)
+ {
+ 	int i;
+ 	struct els_sub_cmd *e;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(sc_str); i++) {
+ 		e = sc_str + i;
+ 		if (cmd == e->cmd)
+ 			return e->str;
+ 	}
+ 	return "unknown";
+ }
+ 
+ static struct edif_list_entry *qla_edif_list_find_sa_index(fc_port_t *fcport,
+ 		uint16_t handle)
+ {
+ 	struct edif_list_entry *entry;
+ 	struct edif_list_entry *tentry;
+ 	struct list_head *indx_list = &fcport->edif.edif_indx_list;
+ 
+ 	list_for_each_entry_safe(entry, tentry, indx_list, next) {
+ 		if (entry->handle == handle)
+ 			return entry;
+ 	}
+ 	return NULL;
+ }
+ 
+ /* timeout called when no traffic and delayed rx sa_index delete */
+ static void qla2x00_sa_replace_iocb_timeout(struct timer_list *t)
+ {
+ 	struct edif_list_entry *edif_entry = from_timer(edif_entry, t, timer);
+ 	fc_port_t *fcport = edif_entry->fcport;
+ 	struct scsi_qla_host *vha = fcport->vha;
+ 	struct  edif_sa_ctl *sa_ctl;
+ 	uint16_t nport_handle;
+ 	unsigned long flags = 0;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x3069,
+ 	    "%s:  nport_handle 0x%x,  SA REPL Delay Timeout, %8phC portid=%06x\n",
+ 	    __func__, edif_entry->handle, fcport->port_name, fcport->d_id.b24);
+ 
+ 	/*
+ 	 * if delete_sa_index is valid then no one has serviced this
+ 	 * delayed delete
+ 	 */
+ 	spin_lock_irqsave(&fcport->edif.indx_list_lock, flags);
+ 
+ 	/*
+ 	 * delete_sa_index is invalidated when we find the new sa_index in
+ 	 * the incoming data stream.  If it is not invalidated then we are
+ 	 * still looking for the new sa_index because there is no I/O and we
+ 	 * need to just force the rx delete and move on.  Otherwise
+ 	 * we could get another rekey which will result in an error 66.
+ 	 */
+ 	if (edif_entry->delete_sa_index != INVALID_EDIF_SA_INDEX) {
+ 		uint16_t delete_sa_index = edif_entry->delete_sa_index;
+ 
+ 		edif_entry->delete_sa_index = INVALID_EDIF_SA_INDEX;
+ 		nport_handle = edif_entry->handle;
+ 		spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ 
+ 		sa_ctl = qla_edif_find_sa_ctl_by_index(fcport,
+ 		    delete_sa_index, 0);
+ 
+ 		if (sa_ctl) {
+ 			ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 			    "%s: sa_ctl: %p, delete index %d, update index: %d, lid: 0x%x\n",
+ 			    __func__, sa_ctl, delete_sa_index, edif_entry->update_sa_index,
+ 			    nport_handle);
+ 
+ 			sa_ctl->flags = EDIF_SA_CTL_FLG_DEL;
+ 			set_bit(EDIF_SA_CTL_REPL, &sa_ctl->state);
+ 			qla_post_sa_replace_work(fcport->vha, fcport,
+ 			    nport_handle, sa_ctl);
+ 
+ 		} else {
+ 			ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 			    "%s: sa_ctl not found for delete_sa_index: %d\n",
+ 			    __func__, edif_entry->delete_sa_index);
+ 		}
+ 	} else {
+ 		spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ 	}
+ }
+ 
+ /*
+  * create a new list entry for this nport handle and
+  * add an sa_update index to the list - called for sa_update
+  */
+ static int qla_edif_list_add_sa_update_index(fc_port_t *fcport,
+ 		uint16_t sa_index, uint16_t handle)
+ {
+ 	struct edif_list_entry *entry;
+ 	unsigned long flags = 0;
+ 
+ 	/* if the entry exists, then just update the sa_index */
+ 	entry = qla_edif_list_find_sa_index(fcport, handle);
+ 	if (entry) {
+ 		entry->update_sa_index = sa_index;
+ 		entry->count = 0;
+ 		return 0;
+ 	}
+ 
+ 	/*
+ 	 * This is the normal path - there should be no existing entry
+ 	 * when update is called.  The exception is at startup
+ 	 * when update is called for the first two sa_indexes
+ 	 * followed by a delete of the first sa_index
+ 	 */
+ 	entry = kzalloc((sizeof(struct edif_list_entry)), GFP_ATOMIC);
+ 	if (!entry)
+ 		return -ENOMEM;
+ 
+ 	INIT_LIST_HEAD(&entry->next);
+ 	entry->handle = handle;
+ 	entry->update_sa_index = sa_index;
+ 	entry->delete_sa_index = INVALID_EDIF_SA_INDEX;
+ 	entry->count = 0;
+ 	entry->flags = 0;
+ 	timer_setup(&entry->timer, qla2x00_sa_replace_iocb_timeout, 0);
+ 	spin_lock_irqsave(&fcport->edif.indx_list_lock, flags);
+ 	list_add_tail(&entry->next, &fcport->edif.edif_indx_list);
+ 	spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ 	return 0;
+ }
+ 
+ /* remove an entry from the list */
+ static void qla_edif_list_delete_sa_index(fc_port_t *fcport, struct edif_list_entry *entry)
+ {
+ 	unsigned long flags = 0;
+ 
+ 	spin_lock_irqsave(&fcport->edif.indx_list_lock, flags);
+ 	list_del(&entry->next);
+ 	spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ }
+ 
+ int qla_post_sa_replace_work(struct scsi_qla_host *vha,
+ 	 fc_port_t *fcport, uint16_t nport_handle, struct edif_sa_ctl *sa_ctl)
+ {
+ 	struct qla_work_evt *e;
+ 
+ 	e = qla2x00_alloc_work(vha, QLA_EVT_SA_REPLACE);
+ 	if (!e)
+ 		return QLA_FUNCTION_FAILED;
+ 
+ 	e->u.sa_update.fcport = fcport;
+ 	e->u.sa_update.sa_ctl = sa_ctl;
+ 	e->u.sa_update.nport_handle = nport_handle;
+ 	fcport->flags |= FCF_ASYNC_ACTIVE;
+ 	return qla2x00_post_work(vha, e);
+ }
+ 
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  static void
  qla_edif_sa_ctl_init(scsi_qla_host_t *vha, struct fc_port  *fcport)
  {
@@@ -27,6 -194,70 +197,73 @@@
  	fcport->edif.rx_bytes = 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int qla_bsg_check(scsi_qla_host_t *vha, struct bsg_job *bsg_job,
+ fc_port_t *fcport)
+ {
+ 	struct extra_auth_els *p;
+ 	struct fc_bsg_reply *bsg_reply = bsg_job->reply;
+ 	struct qla_bsg_auth_els_request *req =
+ 	    (struct qla_bsg_auth_els_request *)bsg_job->request;
+ 
+ 	if (!vha->hw->flags.edif_enabled) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x9105,
+ 		    "%s edif not enabled\n", __func__);
+ 		goto done;
+ 	}
+ 	if (vha->e_dbell.db_flags != EDB_ACTIVE) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x09102,
+ 		    "%s doorbell not enabled\n", __func__);
+ 		goto done;
+ 	}
+ 
+ 	p = &req->e;
+ 
+ 	/* Get response */
+ 	if (p->sub_cmd == PULL_ELS) {
+ 		struct qla_bsg_auth_els_reply *rpl =
+ 			(struct qla_bsg_auth_els_reply *)bsg_job->reply;
+ 
+ 		qla_pur_get_pending(vha, fcport, bsg_job);
+ 
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 			"%s %s %8phN sid=%x. xchg %x, nb=%xh bsg ptr %p\n",
+ 			__func__, sc_to_str(p->sub_cmd), fcport->port_name,
+ 			fcport->d_id.b24, rpl->rx_xchg_address,
+ 			rpl->r.reply_payload_rcv_len, bsg_job);
+ 
+ 		goto done;
+ 	}
+ 	return 0;
+ 
+ done:
+ 
+ 	bsg_job_done(bsg_job, bsg_reply->result,
+ 			bsg_reply->reply_payload_rcv_len);
+ 	return -EIO;
+ }
+ 
+ fc_port_t *
+ qla2x00_find_fcport_by_pid(scsi_qla_host_t *vha, port_id_t *id)
+ {
+ 	fc_port_t *f, *tf;
+ 
+ 	f = NULL;
+ 	list_for_each_entry_safe(f, tf, &vha->vp_fcports, list) {
+ 		if ((f->flags & FCF_FCSP_DEVICE)) {
+ 			ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x2058,
+ 			    "Found secure fcport - nn %8phN pn %8phN portid=0x%x, 0x%x.\n",
+ 			    f->node_name, f->port_name,
+ 			    f->d_id.b24, id->b24);
+ 			if (f->d_id.b24 == id->b24)
+ 				return f;
+ 		}
+ 	}
+ 	return NULL;
+ }
+ 
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  /**
   * qla_edif_app_check(): check for valid application id.
   * @vha: host adapter pointer
@@@ -519,6 -915,478 +921,481 @@@ done
  	return rval;
  }
  
++<<<<<<< HEAD
++=======
+ static struct edif_sa_ctl *
+ qla_edif_add_sa_ctl(fc_port_t *fcport, struct qla_sa_update_frame *sa_frame,
+ 	int dir)
+ {
+ 	struct	edif_sa_ctl *sa_ctl;
+ 	struct qla_sa_update_frame *sap;
+ 	int	index = sa_frame->fast_sa_index;
+ 	unsigned long flags = 0;
+ 
+ 	sa_ctl = kzalloc(sizeof(*sa_ctl), GFP_KERNEL);
+ 	if (!sa_ctl) {
+ 		/* couldn't get space */
+ 		ql_dbg(ql_dbg_edif, fcport->vha, 0x9100,
+ 		    "unable to allocate SA CTL\n");
+ 		return NULL;
+ 	}
+ 
+ 	/*
+ 	 * need to allocate sa_index here and save it
+ 	 * in both sa_ctl->index and sa_frame->fast_sa_index;
+ 	 * If alloc fails then delete sa_ctl and return NULL
+ 	 */
+ 	INIT_LIST_HEAD(&sa_ctl->next);
+ 	sap = &sa_ctl->sa_frame;
+ 	*sap = *sa_frame;
+ 	sa_ctl->index = index;
+ 	sa_ctl->fcport = fcport;
+ 	sa_ctl->flags = 0;
+ 	sa_ctl->state = 0L;
+ 	ql_dbg(ql_dbg_edif, fcport->vha, 0x9100,
+ 	    "%s: Added sa_ctl %p, index %d, state 0x%lx\n",
+ 	    __func__, sa_ctl, sa_ctl->index, sa_ctl->state);
+ 	spin_lock_irqsave(&fcport->edif.sa_list_lock, flags);
+ 	if (dir == SAU_FLG_TX)
+ 		list_add_tail(&sa_ctl->next, &fcport->edif.tx_sa_list);
+ 	else
+ 		list_add_tail(&sa_ctl->next, &fcport->edif.rx_sa_list);
+ 	spin_unlock_irqrestore(&fcport->edif.sa_list_lock, flags);
+ 
+ 	return sa_ctl;
+ }
+ 
+ void
+ qla_edif_flush_sa_ctl_lists(fc_port_t *fcport)
+ {
+ 	struct edif_sa_ctl *sa_ctl, *tsa_ctl;
+ 	unsigned long flags = 0;
+ 
+ 	spin_lock_irqsave(&fcport->edif.sa_list_lock, flags);
+ 
+ 	list_for_each_entry_safe(sa_ctl, tsa_ctl, &fcport->edif.tx_sa_list,
+ 	    next) {
+ 		list_del(&sa_ctl->next);
+ 		kfree(sa_ctl);
+ 	}
+ 
+ 	list_for_each_entry_safe(sa_ctl, tsa_ctl, &fcport->edif.rx_sa_list,
+ 	    next) {
+ 		list_del(&sa_ctl->next);
+ 		kfree(sa_ctl);
+ 	}
+ 
+ 	spin_unlock_irqrestore(&fcport->edif.sa_list_lock, flags);
+ }
+ 
+ struct edif_sa_ctl *
+ qla_edif_find_sa_ctl_by_index(fc_port_t *fcport, int index, int dir)
+ {
+ 	struct edif_sa_ctl *sa_ctl, *tsa_ctl;
+ 	struct list_head *sa_list;
+ 
+ 	if (dir == SAU_FLG_TX)
+ 		sa_list = &fcport->edif.tx_sa_list;
+ 	else
+ 		sa_list = &fcport->edif.rx_sa_list;
+ 
+ 	list_for_each_entry_safe(sa_ctl, tsa_ctl, sa_list, next) {
+ 		if (test_bit(EDIF_SA_CTL_USED, &sa_ctl->state) &&
+ 		    sa_ctl->index == index)
+ 			return sa_ctl;
+ 	}
+ 	return NULL;
+ }
+ 
+ /* add the sa to the correct list */
+ static int
+ qla24xx_check_sadb_avail_slot(struct bsg_job *bsg_job, fc_port_t *fcport,
+ 	struct qla_sa_update_frame *sa_frame)
+ {
+ 	struct edif_sa_ctl *sa_ctl = NULL;
+ 	int dir;
+ 	uint16_t sa_index;
+ 
+ 	dir = (sa_frame->flags & SAU_FLG_TX);
+ 
+ 	/* map the spi to an sa_index */
+ 	sa_index = qla_edif_sadb_get_sa_index(fcport, sa_frame);
+ 	if (sa_index == RX_DELETE_NO_EDIF_SA_INDEX) {
+ 		/* process rx delete */
+ 		ql_dbg(ql_dbg_edif, fcport->vha, 0x3063,
+ 		    "%s: rx delete for lid 0x%x, spi 0x%x, no entry found\n",
+ 		    __func__, fcport->loop_id, sa_frame->spi);
+ 
+ 		/* build and send the aen */
+ 		fcport->edif.rx_sa_set = 1;
+ 		fcport->edif.rx_sa_pending = 0;
+ 
+ 		/* force a return of good bsg status; */
+ 		return RX_DELETE_NO_EDIF_SA_INDEX;
+ 	} else if (sa_index == INVALID_EDIF_SA_INDEX) {
+ 		ql_dbg(ql_dbg_edif, fcport->vha, 0x9100,
+ 		    "%s: Failed to get sa_index for spi 0x%x, dir: %d\n",
+ 		    __func__, sa_frame->spi, dir);
+ 		return INVALID_EDIF_SA_INDEX;
+ 	}
+ 
+ 	ql_dbg(ql_dbg_edif, fcport->vha, 0x9100,
+ 	    "%s: index %d allocated to spi 0x%x, dir: %d, nport_handle: 0x%x\n",
+ 	    __func__, sa_index, sa_frame->spi, dir, fcport->loop_id);
+ 
+ 	/* This is a local copy of sa_frame. */
+ 	sa_frame->fast_sa_index = sa_index;
+ 	/* create the sa_ctl */
+ 	sa_ctl = qla_edif_add_sa_ctl(fcport, sa_frame, dir);
+ 	if (!sa_ctl) {
+ 		ql_dbg(ql_dbg_edif, fcport->vha, 0x9100,
+ 		    "%s: Failed to add sa_ctl for spi 0x%x, dir: %d, sa_index: %d\n",
+ 		    __func__, sa_frame->spi, dir, sa_index);
+ 		return -1;
+ 	}
+ 
+ 	set_bit(EDIF_SA_CTL_USED, &sa_ctl->state);
+ 
+ 	if (dir == SAU_FLG_TX)
+ 		fcport->edif.tx_rekey_cnt++;
+ 	else
+ 		fcport->edif.rx_rekey_cnt++;
+ 
+ 	ql_dbg(ql_dbg_edif, fcport->vha, 0x9100,
+ 	    "%s: Found sa_ctl %p, index %d, state 0x%lx, tx_cnt %d, rx_cnt %d, nport_handle: 0x%x\n",
+ 	    __func__, sa_ctl, sa_ctl->index, sa_ctl->state,
+ 	    fcport->edif.tx_rekey_cnt,
+ 	    fcport->edif.rx_rekey_cnt, fcport->loop_id);
+ 
+ 	return 0;
+ }
+ 
+ #define QLA_SA_UPDATE_FLAGS_RX_KEY      0x0
+ #define QLA_SA_UPDATE_FLAGS_TX_KEY      0x2
+ 
+ int
+ qla24xx_sadb_update(struct bsg_job *bsg_job)
+ {
+ 	struct	fc_bsg_reply	*bsg_reply = bsg_job->reply;
+ 	struct Scsi_Host *host = fc_bsg_to_shost(bsg_job);
+ 	scsi_qla_host_t *vha = shost_priv(host);
+ 	fc_port_t		*fcport = NULL;
+ 	srb_t			*sp = NULL;
+ 	struct edif_list_entry *edif_entry = NULL;
+ 	int			found = 0;
+ 	int			rval = 0;
+ 	int result = 0;
+ 	struct qla_sa_update_frame sa_frame;
+ 	struct srb_iocb *iocb_cmd;
+ 
+ 	ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x911d,
+ 	    "%s entered, vha: 0x%p\n", __func__, vha);
+ 
+ 	sg_copy_to_buffer(bsg_job->request_payload.sg_list,
+ 	    bsg_job->request_payload.sg_cnt, &sa_frame,
+ 	    sizeof(struct qla_sa_update_frame));
+ 
+ 	/* Check if host is online */
+ 	if (!vha->flags.online) {
+ 		ql_log(ql_log_warn, vha, 0x70a1, "Host is not online\n");
+ 		rval = -EIO;
+ 		SET_DID_STATUS(bsg_reply->result, DID_ERROR);
+ 		goto done;
+ 	}
+ 
+ 	if (vha->e_dbell.db_flags != EDB_ACTIVE) {
+ 		ql_log(ql_log_warn, vha, 0x70a1, "App not started\n");
+ 		rval = -EIO;
+ 		SET_DID_STATUS(bsg_reply->result, DID_ERROR);
+ 		goto done;
+ 	}
+ 
+ 	fcport = qla2x00_find_fcport_by_pid(vha, &sa_frame.port_id);
+ 	if (fcport) {
+ 		found = 1;
+ 		if (sa_frame.flags == QLA_SA_UPDATE_FLAGS_TX_KEY)
+ 			fcport->edif.tx_bytes = 0;
+ 		if (sa_frame.flags == QLA_SA_UPDATE_FLAGS_RX_KEY)
+ 			fcport->edif.rx_bytes = 0;
+ 	}
+ 
+ 	if (!found) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x70a3, "Failed to find port= %06x\n",
+ 		    sa_frame.port_id.b24);
+ 		rval = -EINVAL;
+ 		SET_DID_STATUS(bsg_reply->result, DID_TARGET_FAILURE);
+ 		goto done;
+ 	}
+ 
+ 	/* make sure the nport_handle is valid */
+ 	if (fcport->loop_id == FC_NO_LOOP_ID) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x70e1,
+ 		    "%s: %8phN lid=FC_NO_LOOP_ID, spi: 0x%x, DS %d, returning NO_CONNECT\n",
+ 		    __func__, fcport->port_name, sa_frame.spi,
+ 		    fcport->disc_state);
+ 		rval = -EINVAL;
+ 		SET_DID_STATUS(bsg_reply->result, DID_NO_CONNECT);
+ 		goto done;
+ 	}
+ 
+ 	/* allocate and queue an sa_ctl */
+ 	result = qla24xx_check_sadb_avail_slot(bsg_job, fcport, &sa_frame);
+ 
+ 	/* failure of bsg */
+ 	if (result == INVALID_EDIF_SA_INDEX) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x70e1,
+ 		    "%s: %8phN, skipping update.\n",
+ 		    __func__, fcport->port_name);
+ 		rval = -EINVAL;
+ 		SET_DID_STATUS(bsg_reply->result, DID_ERROR);
+ 		goto done;
+ 
+ 	/* rx delete failure */
+ 	} else if (result == RX_DELETE_NO_EDIF_SA_INDEX) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x70e1,
+ 		    "%s: %8phN, skipping rx delete.\n",
+ 		    __func__, fcport->port_name);
+ 		SET_DID_STATUS(bsg_reply->result, DID_OK);
+ 		goto done;
+ 	}
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x70e1,
+ 	    "%s: %8phN, sa_index in sa_frame: %d flags %xh\n",
+ 	    __func__, fcport->port_name, sa_frame.fast_sa_index,
+ 	    sa_frame.flags);
+ 
+ 	/* looking for rx index and delete */
+ 	if (((sa_frame.flags & SAU_FLG_TX) == 0) &&
+ 	    (sa_frame.flags & SAU_FLG_INV)) {
+ 		uint16_t nport_handle = fcport->loop_id;
+ 		uint16_t sa_index = sa_frame.fast_sa_index;
+ 
+ 		/*
+ 		 * make sure we have an existing rx key, otherwise just process
+ 		 * this as a straight delete just like TX
+ 		 * This is NOT a normal case, it indicates an error recovery or key cleanup
+ 		 * by the ipsec code above us.
+ 		 */
+ 		edif_entry = qla_edif_list_find_sa_index(fcport, fcport->loop_id);
+ 		if (!edif_entry) {
+ 			ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 			    "%s: WARNING: no active sa_index for nport_handle 0x%x, forcing delete for sa_index 0x%x\n",
+ 			    __func__, fcport->loop_id, sa_index);
+ 			goto force_rx_delete;
+ 		}
+ 
+ 		/*
+ 		 * if we have a forced delete for rx, remove the sa_index from the edif list
+ 		 * and proceed with normal delete.  The rx delay timer should not be running
+ 		 */
+ 		if ((sa_frame.flags & SAU_FLG_FORCE_DELETE) == SAU_FLG_FORCE_DELETE) {
+ 			qla_edif_list_delete_sa_index(fcport, edif_entry);
+ 			ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 			    "%s: FORCE DELETE flag found for nport_handle 0x%x, sa_index 0x%x, forcing DELETE\n",
+ 			    __func__, fcport->loop_id, sa_index);
+ 			kfree(edif_entry);
+ 			goto force_rx_delete;
+ 		}
+ 
+ 		/*
+ 		 * delayed rx delete
+ 		 *
+ 		 * if delete_sa_index is not invalid then there is already
+ 		 * a delayed index in progress, return bsg bad status
+ 		 */
+ 		if (edif_entry->delete_sa_index != INVALID_EDIF_SA_INDEX) {
+ 			struct edif_sa_ctl *sa_ctl;
+ 
+ 			ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 			    "%s: delete for lid 0x%x, delete_sa_index %d is pending\n",
+ 			    __func__, edif_entry->handle, edif_entry->delete_sa_index);
+ 
+ 			/* free up the sa_ctl that was allocated with the sa_index */
+ 			sa_ctl = qla_edif_find_sa_ctl_by_index(fcport, sa_index,
+ 			    (sa_frame.flags & SAU_FLG_TX));
+ 			if (sa_ctl) {
+ 				ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 				    "%s: freeing sa_ctl for index %d\n",
+ 				    __func__, sa_ctl->index);
+ 				qla_edif_free_sa_ctl(fcport, sa_ctl, sa_ctl->index);
+ 			}
+ 
+ 			/* release the sa_index */
+ 			ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 			    "%s: freeing sa_index %d, nph: 0x%x\n",
+ 			    __func__, sa_index, nport_handle);
+ 			qla_edif_sadb_delete_sa_index(fcport, nport_handle, sa_index);
+ 
+ 			rval = -EINVAL;
+ 			SET_DID_STATUS(bsg_reply->result, DID_ERROR);
+ 			goto done;
+ 		}
+ 
+ 		fcport->edif.rekey_cnt++;
+ 
+ 		/* configure and start the rx delay timer */
+ 		edif_entry->fcport = fcport;
+ 		edif_entry->timer.expires = jiffies + RX_DELAY_DELETE_TIMEOUT * HZ;
+ 
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 		    "%s: adding timer, entry: %p, delete sa_index %d, lid 0x%x to edif_list\n",
+ 		    __func__, edif_entry, sa_index, nport_handle);
+ 
+ 		/*
+ 		 * Start the timer when we queue the delayed rx delete.
+ 		 * This is an activity timer that goes off if we have not
+ 		 * received packets with the new sa_index
+ 		 */
+ 		add_timer(&edif_entry->timer);
+ 
+ 		/*
+ 		 * sa_delete for rx key with an active rx key including this one
+ 		 * add the delete rx sa index to the hash so we can look for it
+ 		 * in the rsp queue.  Do this after making any changes to the
+ 		 * edif_entry as part of the rx delete.
+ 		 */
+ 
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 		    "%s: delete sa_index %d, lid 0x%x to edif_list. bsg done ptr %p\n",
+ 		    __func__, sa_index, nport_handle, bsg_job);
+ 
+ 		edif_entry->delete_sa_index = sa_index;
+ 
+ 		bsg_job->reply_len = sizeof(struct fc_bsg_reply);
+ 		bsg_reply->result = DID_OK << 16;
+ 
+ 		goto done;
+ 
+ 	/*
+ 	 * rx index and update
+ 	 * add the index to the list and continue with normal update
+ 	 */
+ 	} else if (((sa_frame.flags & SAU_FLG_TX) == 0) &&
+ 	    ((sa_frame.flags & SAU_FLG_INV) == 0)) {
+ 		/* sa_update for rx key */
+ 		uint32_t nport_handle = fcport->loop_id;
+ 		uint16_t sa_index = sa_frame.fast_sa_index;
+ 		int result;
+ 
+ 		/*
+ 		 * add the update rx sa index to the hash so we can look for it
+ 		 * in the rsp queue and continue normally
+ 		 */
+ 
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 		    "%s:  adding update sa_index %d, lid 0x%x to edif_list\n",
+ 		    __func__, sa_index, nport_handle);
+ 
+ 		result = qla_edif_list_add_sa_update_index(fcport, sa_index,
+ 		    nport_handle);
+ 		if (result) {
+ 			ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 			    "%s: SA_UPDATE failed to add new sa index %d to list for lid 0x%x\n",
+ 			    __func__, sa_index, nport_handle);
+ 		}
+ 	}
+ 	if (sa_frame.flags & SAU_FLG_GMAC_MODE)
+ 		fcport->edif.aes_gmac = 1;
+ 	else
+ 		fcport->edif.aes_gmac = 0;
+ 
+ force_rx_delete:
+ 	/*
+ 	 * sa_update for both rx and tx keys, sa_delete for tx key
+ 	 * immediately process the request
+ 	 */
+ 	sp = qla2x00_get_sp(vha, fcport, GFP_KERNEL);
+ 	if (!sp) {
+ 		rval = -ENOMEM;
+ 		SET_DID_STATUS(bsg_reply->result, DID_IMM_RETRY);
+ 		goto done;
+ 	}
+ 
+ 	sp->type = SRB_SA_UPDATE;
+ 	sp->name = "bsg_sa_update";
+ 	sp->u.bsg_job = bsg_job;
+ 	/* sp->free = qla2x00_bsg_sp_free; */
+ 	sp->free = qla2x00_rel_sp;
+ 	sp->done = qla2x00_bsg_job_done;
+ 	iocb_cmd = &sp->u.iocb_cmd;
+ 	iocb_cmd->u.sa_update.sa_frame  = sa_frame;
+ 
+ 	rval = qla2x00_start_sp(sp);
+ 	if (rval != QLA_SUCCESS) {
+ 		ql_log(ql_dbg_edif, vha, 0x70e3,
+ 		    "qla2x00_start_sp failed=%d.\n", rval);
+ 
+ 		qla2x00_rel_sp(sp);
+ 		rval = -EIO;
+ 		SET_DID_STATUS(bsg_reply->result, DID_IMM_RETRY);
+ 		goto done;
+ 	}
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 	    "%s:  %s sent, hdl=%x, portid=%06x.\n",
+ 	    __func__, sp->name, sp->handle, fcport->d_id.b24);
+ 
+ 	fcport->edif.rekey_cnt++;
+ 	bsg_job->reply_len = sizeof(struct fc_bsg_reply);
+ 	SET_DID_STATUS(bsg_reply->result, DID_OK);
+ 
+ 	return 0;
+ 
+ /*
+  * send back error status
+  */
+ done:
+ 	bsg_job->reply_len = sizeof(struct fc_bsg_reply);
+ 	ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 	    "%s:status: FAIL, result: 0x%x, bsg ptr done %p\n",
+ 	    __func__, bsg_reply->result, bsg_job);
+ 	bsg_job_done(bsg_job, bsg_reply->result,
+ 	    bsg_reply->reply_payload_rcv_len);
+ 
+ 	return 0;
+ }
+ 
+ static void
+ qla_enode_free(scsi_qla_host_t *vha, struct enode *node)
+ {
+ 	node->ntype = N_UNDEF;
+ 	kfree(node);
+ }
+ 
+ /**
+  * qla_enode_init - initialize enode structs & lock
+  * @vha: host adapter pointer
+  *
+  * should only be called when driver attaching
+  */
+ void
+ qla_enode_init(scsi_qla_host_t *vha)
+ {
+ 	struct	qla_hw_data *ha = vha->hw;
+ 	char	name[32];
+ 
+ 	if (vha->pur_cinfo.enode_flags == ENODE_ACTIVE) {
+ 		/* list still active - error */
+ 		ql_dbg(ql_dbg_edif, vha, 0x09102, "%s enode still active\n",
+ 		    __func__);
+ 		return;
+ 	}
+ 
+ 	/* initialize lock which protects pur_core & init list */
+ 	spin_lock_init(&vha->pur_cinfo.pur_lock);
+ 	INIT_LIST_HEAD(&vha->pur_cinfo.head);
+ 
+ 	snprintf(name, sizeof(name), "%s_%d_purex", QLA2XXX_DRIVER_NAME,
+ 	    ha->pdev->device);
+ }
+ 
+ /**
+  * qla_enode_stop - stop and clear and enode data
+  * @vha: host adapter pointer
+  *
+  * called when app notified it is exiting
+  */
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  void
  qla_enode_stop(scsi_qla_host_t *vha)
  {
@@@ -542,3 -1587,1006 +1419,1009 @@@ qla_edb_stop(scsi_qla_host_t *vha
  		return;
  	}
  }
++<<<<<<< HEAD
++=======
+ 
+ static void qla_noop_sp_done(srb_t *sp, int res)
+ {
+ 	sp->free(sp);
+ }
+ 
+ /*
+  * Called from work queue
+  * build and send the sa_update iocb to delete an rx sa_index
+  */
+ int
+ qla24xx_issue_sa_replace_iocb(scsi_qla_host_t *vha, struct qla_work_evt *e)
+ {
+ 	srb_t *sp;
+ 	fc_port_t	*fcport = NULL;
+ 	struct srb_iocb *iocb_cmd = NULL;
+ 	int rval = QLA_SUCCESS;
+ 	struct	edif_sa_ctl *sa_ctl = e->u.sa_update.sa_ctl;
+ 	uint16_t nport_handle = e->u.sa_update.nport_handle;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x70e6,
+ 	    "%s: starting,  sa_ctl: %p\n", __func__, sa_ctl);
+ 
+ 	if (!sa_ctl) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x70e6,
+ 		    "sa_ctl allocation failed\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	fcport = sa_ctl->fcport;
+ 
+ 	/* Alloc SRB structure */
+ 	sp = qla2x00_get_sp(vha, fcport, GFP_KERNEL);
+ 	if (!sp) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x70e6,
+ 		 "SRB allocation failed\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	fcport->flags |= FCF_ASYNC_SENT;
+ 	iocb_cmd = &sp->u.iocb_cmd;
+ 	iocb_cmd->u.sa_update.sa_ctl = sa_ctl;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x3073,
+ 	    "Enter: SA REPL portid=%06x, sa_ctl %p, index %x, nport_handle: 0x%x\n",
+ 	    fcport->d_id.b24, sa_ctl, sa_ctl->index, nport_handle);
+ 	/*
+ 	 * if this is a sadb cleanup delete, mark it so the isr can
+ 	 * take the correct action
+ 	 */
+ 	if (sa_ctl->flags & EDIF_SA_CTL_FLG_CLEANUP_DEL) {
+ 		/* mark this srb as a cleanup delete */
+ 		sp->flags |= SRB_EDIF_CLEANUP_DELETE;
+ 		ql_dbg(ql_dbg_edif, vha, 0x70e6,
+ 		    "%s: sp 0x%p flagged as cleanup delete\n", __func__, sp);
+ 	}
+ 
+ 	sp->type = SRB_SA_REPLACE;
+ 	sp->name = "SA_REPLACE";
+ 	sp->fcport = fcport;
+ 	sp->free = qla2x00_rel_sp;
+ 	sp->done = qla_noop_sp_done;
+ 
+ 	rval = qla2x00_start_sp(sp);
+ 
+ 	if (rval != QLA_SUCCESS)
+ 		rval = QLA_FUNCTION_FAILED;
+ 
+ 	return rval;
+ }
+ 
+ void qla24xx_sa_update_iocb(srb_t *sp, struct sa_update_28xx *sa_update_iocb)
+ {
+ 	int	itr = 0;
+ 	struct	scsi_qla_host		*vha = sp->vha;
+ 	struct	qla_sa_update_frame	*sa_frame =
+ 		&sp->u.iocb_cmd.u.sa_update.sa_frame;
+ 	u8 flags = 0;
+ 
+ 	switch (sa_frame->flags & (SAU_FLG_INV | SAU_FLG_TX)) {
+ 	case 0:
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 		    "%s: EDIF SA UPDATE RX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, sa_frame->fast_sa_index);
+ 		break;
+ 	case 1:
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 		    "%s: EDIF SA DELETE RX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, sa_frame->fast_sa_index);
+ 		flags |= SA_FLAG_INVALIDATE;
+ 		break;
+ 	case 2:
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 		    "%s: EDIF SA UPDATE TX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, sa_frame->fast_sa_index);
+ 		flags |= SA_FLAG_TX;
+ 		break;
+ 	case 3:
+ 		ql_dbg(ql_dbg_edif, vha, 0x911d,
+ 		    "%s: EDIF SA DELETE TX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, sa_frame->fast_sa_index);
+ 		flags |= SA_FLAG_TX | SA_FLAG_INVALIDATE;
+ 		break;
+ 	}
+ 
+ 	sa_update_iocb->entry_type = SA_UPDATE_IOCB_TYPE;
+ 	sa_update_iocb->entry_count = 1;
+ 	sa_update_iocb->sys_define = 0;
+ 	sa_update_iocb->entry_status = 0;
+ 	sa_update_iocb->handle = sp->handle;
+ 	sa_update_iocb->u.nport_handle = cpu_to_le16(sp->fcport->loop_id);
+ 	sa_update_iocb->vp_index = sp->fcport->vha->vp_idx;
+ 	sa_update_iocb->port_id[0] = sp->fcport->d_id.b.al_pa;
+ 	sa_update_iocb->port_id[1] = sp->fcport->d_id.b.area;
+ 	sa_update_iocb->port_id[2] = sp->fcport->d_id.b.domain;
+ 
+ 	sa_update_iocb->flags = flags;
+ 	sa_update_iocb->salt = cpu_to_le32(sa_frame->salt);
+ 	sa_update_iocb->spi = cpu_to_le32(sa_frame->spi);
+ 	sa_update_iocb->sa_index = cpu_to_le16(sa_frame->fast_sa_index);
+ 
+ 	sa_update_iocb->sa_control |= SA_CNTL_ENC_FCSP;
+ 	if (sp->fcport->edif.aes_gmac)
+ 		sa_update_iocb->sa_control |= SA_CNTL_AES_GMAC;
+ 
+ 	if (sa_frame->flags & SAU_FLG_KEY256) {
+ 		sa_update_iocb->sa_control |= SA_CNTL_KEY256;
+ 		for (itr = 0; itr < 32; itr++)
+ 			sa_update_iocb->sa_key[itr] = sa_frame->sa_key[itr];
+ 
+ 		ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x921f, "%s 256 sa key=%32phN\n",
+ 		    __func__, sa_update_iocb->sa_key);
+ 	} else {
+ 		sa_update_iocb->sa_control |= SA_CNTL_KEY128;
+ 		for (itr = 0; itr < 16; itr++)
+ 			sa_update_iocb->sa_key[itr] = sa_frame->sa_key[itr];
+ 
+ 		ql_dbg(ql_dbg_edif +  ql_dbg_verbose, vha, 0x921f, "%s 128 sa key=%16phN\n",
+ 		    __func__, sa_update_iocb->sa_key);
+ 	}
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x921d,
+ 	    "%s SAU Port ID = %02x%02x%02x, flags=%xh, index=%u, ctl=%xh, SPI 0x%x flags 0x%x hdl=%x gmac %d\n",
+ 	    __func__, sa_update_iocb->port_id[2], sa_update_iocb->port_id[1],
+ 	    sa_update_iocb->port_id[0], sa_update_iocb->flags, sa_update_iocb->sa_index,
+ 	    sa_update_iocb->sa_control, sa_update_iocb->spi, sa_frame->flags, sp->handle,
+ 	    sp->fcport->edif.aes_gmac);
+ 
+ 	if (sa_frame->flags & SAU_FLG_TX)
+ 		sp->fcport->edif.tx_sa_pending = 1;
+ 	else
+ 		sp->fcport->edif.rx_sa_pending = 1;
+ 
+ 	sp->fcport->vha->qla_stats.control_requests++;
+ }
+ 
+ void
+ qla24xx_sa_replace_iocb(srb_t *sp, struct sa_update_28xx *sa_update_iocb)
+ {
+ 	struct	scsi_qla_host		*vha = sp->vha;
+ 	struct srb_iocb *srb_iocb = &sp->u.iocb_cmd;
+ 	struct	edif_sa_ctl		*sa_ctl = srb_iocb->u.sa_update.sa_ctl;
+ 	uint16_t nport_handle = sp->fcport->loop_id;
+ 
+ 	sa_update_iocb->entry_type = SA_UPDATE_IOCB_TYPE;
+ 	sa_update_iocb->entry_count = 1;
+ 	sa_update_iocb->sys_define = 0;
+ 	sa_update_iocb->entry_status = 0;
+ 	sa_update_iocb->handle = sp->handle;
+ 
+ 	sa_update_iocb->u.nport_handle = cpu_to_le16(nport_handle);
+ 
+ 	sa_update_iocb->vp_index = sp->fcport->vha->vp_idx;
+ 	sa_update_iocb->port_id[0] = sp->fcport->d_id.b.al_pa;
+ 	sa_update_iocb->port_id[1] = sp->fcport->d_id.b.area;
+ 	sa_update_iocb->port_id[2] = sp->fcport->d_id.b.domain;
+ 
+ 	/* Invalidate the index. salt, spi, control & key are ignore */
+ 	sa_update_iocb->flags = SA_FLAG_INVALIDATE;
+ 	sa_update_iocb->salt = 0;
+ 	sa_update_iocb->spi = 0;
+ 	sa_update_iocb->sa_index = cpu_to_le16(sa_ctl->index);
+ 	sa_update_iocb->sa_control = 0;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x921d,
+ 	    "%s SAU DELETE RX Port ID = %02x:%02x:%02x, lid %d flags=%xh, index=%u, hdl=%x\n",
+ 	    __func__, sa_update_iocb->port_id[2], sa_update_iocb->port_id[1],
+ 	    sa_update_iocb->port_id[0], nport_handle, sa_update_iocb->flags,
+ 	    sa_update_iocb->sa_index, sp->handle);
+ 
+ 	sp->fcport->vha->qla_stats.control_requests++;
+ }
+ 
+ void qla24xx_auth_els(scsi_qla_host_t *vha, void **pkt, struct rsp_que **rsp)
+ {
+ 	struct purex_entry_24xx *p = *pkt;
+ 	struct enode		*ptr;
+ 	int		sid;
+ 	u16 totlen;
+ 	struct purexevent	*purex;
+ 	struct scsi_qla_host *host = NULL;
+ 	int rc;
+ 	struct fc_port *fcport;
+ 	struct qla_els_pt_arg a;
+ 	be_id_t beid;
+ 
+ 	memset(&a, 0, sizeof(a));
+ 
+ 	a.els_opcode = ELS_AUTH_ELS;
+ 	a.nport_handle = p->nport_handle;
+ 	a.rx_xchg_address = p->rx_xchg_addr;
+ 	a.did.b.domain = p->s_id[2];
+ 	a.did.b.area   = p->s_id[1];
+ 	a.did.b.al_pa  = p->s_id[0];
+ 	a.tx_byte_count = a.tx_len = sizeof(struct fc_els_ls_rjt);
+ 	a.tx_addr = vha->hw->elsrej.cdma;
+ 	a.vp_idx = vha->vp_idx;
+ 	a.control_flags = EPD_ELS_RJT;
+ 
+ 	sid = p->s_id[0] | (p->s_id[1] << 8) | (p->s_id[2] << 16);
+ 
+ 	totlen = (le16_to_cpu(p->frame_size) & 0x0fff) - PURX_ELS_HEADER_SIZE;
+ 	if (le16_to_cpu(p->status_flags) & 0x8000) {
+ 		totlen = le16_to_cpu(p->trunc_frame_size);
+ 		qla_els_reject_iocb(vha, (*rsp)->qpair, &a);
+ 		__qla_consume_iocb(vha, pkt, rsp);
+ 		return;
+ 	}
+ 
+ 	if (totlen > MAX_PAYLOAD) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x0910d,
+ 		    "%s WARNING: verbose ELS frame received (totlen=%x)\n",
+ 		    __func__, totlen);
+ 		qla_els_reject_iocb(vha, (*rsp)->qpair, &a);
+ 		__qla_consume_iocb(vha, pkt, rsp);
+ 		return;
+ 	}
+ 
+ 	if (!vha->hw->flags.edif_enabled) {
+ 		/* edif support not enabled */
+ 		ql_dbg(ql_dbg_edif, vha, 0x910e, "%s edif not enabled\n",
+ 		    __func__);
+ 		qla_els_reject_iocb(vha, (*rsp)->qpair, &a);
+ 		__qla_consume_iocb(vha, pkt, rsp);
+ 		return;
+ 	}
+ 
+ 	ptr = qla_enode_alloc(vha, N_PUREX);
+ 	if (!ptr) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x09109,
+ 		    "WARNING: enode allloc failed for sid=%x\n",
+ 		    sid);
+ 		qla_els_reject_iocb(vha, (*rsp)->qpair, &a);
+ 		__qla_consume_iocb(vha, pkt, rsp);
+ 		return;
+ 	}
+ 
+ 	purex = &ptr->u.purexinfo;
+ 	purex->pur_info.pur_sid = a.did;
+ 	purex->pur_info.pur_pend = 0;
+ 	purex->pur_info.pur_bytes_rcvd = totlen;
+ 	purex->pur_info.pur_rx_xchg_address = le32_to_cpu(p->rx_xchg_addr);
+ 	purex->pur_info.pur_nphdl = le16_to_cpu(p->nport_handle);
+ 	purex->pur_info.pur_did.b.domain =  p->d_id[2];
+ 	purex->pur_info.pur_did.b.area =  p->d_id[1];
+ 	purex->pur_info.pur_did.b.al_pa =  p->d_id[0];
+ 	purex->pur_info.vp_idx = p->vp_idx;
+ 
+ 	rc = __qla_copy_purex_to_buffer(vha, pkt, rsp, purex->msgp,
+ 		purex->msgp_len);
+ 	if (rc) {
+ 		qla_els_reject_iocb(vha, (*rsp)->qpair, &a);
+ 		qla_enode_free(vha, ptr);
+ 		return;
+ 	}
+ 	beid.al_pa = purex->pur_info.pur_did.b.al_pa;
+ 	beid.area   = purex->pur_info.pur_did.b.area;
+ 	beid.domain = purex->pur_info.pur_did.b.domain;
+ 	host = qla_find_host_by_d_id(vha, beid);
+ 	if (!host) {
+ 		ql_log(ql_log_fatal, vha, 0x508b,
+ 		    "%s Drop ELS due to unable to find host %06x\n",
+ 		    __func__, purex->pur_info.pur_did.b24);
+ 
+ 		qla_els_reject_iocb(vha, (*rsp)->qpair, &a);
+ 		qla_enode_free(vha, ptr);
+ 		return;
+ 	}
+ 
+ 	fcport = qla2x00_find_fcport_by_pid(host, &purex->pur_info.pur_sid);
+ 
+ 	if (host->e_dbell.db_flags != EDB_ACTIVE ||
+ 	    (fcport && fcport->loop_id == FC_NO_LOOP_ID)) {
+ 		ql_dbg(ql_dbg_edif, host, 0x0910c, "%s e_dbell.db_flags =%x %06x\n",
+ 		    __func__, host->e_dbell.db_flags,
+ 		    fcport ? fcport->d_id.b24 : 0);
+ 
+ 		qla_els_reject_iocb(host, (*rsp)->qpair, &a);
+ 		qla_enode_free(host, ptr);
+ 		return;
+ 	}
+ 
+ 	/* add the local enode to the list */
+ 	qla_enode_add(host, ptr);
+ 
+ 	ql_dbg(ql_dbg_edif, host, 0x0910c,
+ 	    "%s COMPLETE purex->pur_info.pur_bytes_rcvd =%xh s:%06x -> d:%06x xchg=%xh\n",
+ 	    __func__, purex->pur_info.pur_bytes_rcvd, purex->pur_info.pur_sid.b24,
+ 	    purex->pur_info.pur_did.b24, p->rx_xchg_addr);
+ }
+ 
+ static uint16_t  qla_edif_get_sa_index_from_freepool(fc_port_t *fcport, int dir)
+ {
+ 	struct scsi_qla_host *vha = fcport->vha;
+ 	struct qla_hw_data *ha = vha->hw;
+ 	void *sa_id_map;
+ 	unsigned long flags = 0;
+ 	u16 sa_index;
+ 
+ 	ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x3063,
+ 	    "%s: entry\n", __func__);
+ 
+ 	if (dir)
+ 		sa_id_map = ha->edif_tx_sa_id_map;
+ 	else
+ 		sa_id_map = ha->edif_rx_sa_id_map;
+ 
+ 	spin_lock_irqsave(&ha->sadb_fp_lock, flags);
+ 	sa_index = find_first_zero_bit(sa_id_map, EDIF_NUM_SA_INDEX);
+ 	if (sa_index >=  EDIF_NUM_SA_INDEX) {
+ 		spin_unlock_irqrestore(&ha->sadb_fp_lock, flags);
+ 		return INVALID_EDIF_SA_INDEX;
+ 	}
+ 	set_bit(sa_index, sa_id_map);
+ 	spin_unlock_irqrestore(&ha->sadb_fp_lock, flags);
+ 
+ 	if (dir)
+ 		sa_index += EDIF_TX_SA_INDEX_BASE;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 	    "%s: index retrieved from free pool %d\n", __func__, sa_index);
+ 
+ 	return sa_index;
+ }
+ 
+ /* find an sadb entry for an nport_handle */
+ static struct edif_sa_index_entry *
+ qla_edif_sadb_find_sa_index_entry(uint16_t nport_handle,
+ 		struct list_head *sa_list)
+ {
+ 	struct edif_sa_index_entry *entry;
+ 	struct edif_sa_index_entry *tentry;
+ 	struct list_head *indx_list = sa_list;
+ 
+ 	list_for_each_entry_safe(entry, tentry, indx_list, next) {
+ 		if (entry->handle == nport_handle)
+ 			return entry;
+ 	}
+ 	return NULL;
+ }
+ 
+ /* remove an sa_index from the nport_handle and return it to the free pool */
+ static int qla_edif_sadb_delete_sa_index(fc_port_t *fcport, uint16_t nport_handle,
+ 		uint16_t sa_index)
+ {
+ 	struct edif_sa_index_entry *entry;
+ 	struct list_head *sa_list;
+ 	int dir = (sa_index < EDIF_TX_SA_INDEX_BASE) ? 0 : 1;
+ 	int slot = 0;
+ 	int free_slot_count = 0;
+ 	scsi_qla_host_t *vha = fcport->vha;
+ 	struct qla_hw_data *ha = vha->hw;
+ 	unsigned long flags = 0;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 	    "%s: entry\n", __func__);
+ 
+ 	if (dir)
+ 		sa_list = &ha->sadb_tx_index_list;
+ 	else
+ 		sa_list = &ha->sadb_rx_index_list;
+ 
+ 	entry = qla_edif_sadb_find_sa_index_entry(nport_handle, sa_list);
+ 	if (!entry) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: no entry found for nport_handle 0x%x\n",
+ 		    __func__, nport_handle);
+ 		return -1;
+ 	}
+ 
+ 	spin_lock_irqsave(&ha->sadb_lock, flags);
+ 	/*
+ 	 * each tx/rx direction has up to 2 sa indexes/slots. 1 slot for in flight traffic
+ 	 * the other is use at re-key time.
+ 	 */
+ 	for (slot = 0; slot < 2; slot++) {
+ 		if (entry->sa_pair[slot].sa_index == sa_index) {
+ 			entry->sa_pair[slot].sa_index = INVALID_EDIF_SA_INDEX;
+ 			entry->sa_pair[slot].spi = 0;
+ 			free_slot_count++;
+ 			qla_edif_add_sa_index_to_freepool(fcport, dir, sa_index);
+ 		} else if (entry->sa_pair[slot].sa_index == INVALID_EDIF_SA_INDEX) {
+ 			free_slot_count++;
+ 		}
+ 	}
+ 
+ 	if (free_slot_count == 2) {
+ 		list_del(&entry->next);
+ 		kfree(entry);
+ 	}
+ 	spin_unlock_irqrestore(&ha->sadb_lock, flags);
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 	    "%s: sa_index %d removed, free_slot_count: %d\n",
+ 	    __func__, sa_index, free_slot_count);
+ 
+ 	return 0;
+ }
+ 
+ void
+ qla28xx_sa_update_iocb_entry(scsi_qla_host_t *v, struct req_que *req,
+ 	struct sa_update_28xx *pkt)
+ {
+ 	const char *func = "SA_UPDATE_RESPONSE_IOCB";
+ 	srb_t *sp;
+ 	struct edif_sa_ctl *sa_ctl;
+ 	int old_sa_deleted = 1;
+ 	uint16_t nport_handle;
+ 	struct scsi_qla_host *vha;
+ 
+ 	sp = qla2x00_get_sp_from_handle(v, func, req, pkt);
+ 
+ 	if (!sp) {
+ 		ql_dbg(ql_dbg_edif, v, 0x3063,
+ 			"%s: no sp found for pkt\n", __func__);
+ 		return;
+ 	}
+ 	/* use sp->vha due to npiv */
+ 	vha = sp->vha;
+ 
+ 	switch (pkt->flags & (SA_FLAG_INVALIDATE | SA_FLAG_TX)) {
+ 	case 0:
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: EDIF SA UPDATE RX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, pkt->sa_index);
+ 		break;
+ 	case 1:
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: EDIF SA DELETE RX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, pkt->sa_index);
+ 		break;
+ 	case 2:
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: EDIF SA UPDATE TX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, pkt->sa_index);
+ 		break;
+ 	case 3:
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: EDIF SA DELETE TX IOCB  vha: 0x%p  index: %d\n",
+ 		    __func__, vha, pkt->sa_index);
+ 		break;
+ 	}
+ 
+ 	/*
+ 	 * dig the nport handle out of the iocb, fcport->loop_id can not be trusted
+ 	 * to be correct during cleanup sa_update iocbs.
+ 	 */
+ 	nport_handle = sp->fcport->loop_id;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 	    "%s: %8phN comp status=%x old_sa_info=%x new_sa_info=%x lid %d, index=0x%x pkt_flags %xh hdl=%x\n",
+ 	    __func__, sp->fcport->port_name, pkt->u.comp_sts, pkt->old_sa_info, pkt->new_sa_info,
+ 	    nport_handle, pkt->sa_index, pkt->flags, sp->handle);
+ 
+ 	/* if rx delete, remove the timer */
+ 	if ((pkt->flags & (SA_FLAG_INVALIDATE | SA_FLAG_TX)) ==  SA_FLAG_INVALIDATE) {
+ 		struct edif_list_entry *edif_entry;
+ 
+ 		sp->fcport->flags &= ~(FCF_ASYNC_SENT | FCF_ASYNC_ACTIVE);
+ 
+ 		edif_entry = qla_edif_list_find_sa_index(sp->fcport, nport_handle);
+ 		if (edif_entry) {
+ 			ql_dbg(ql_dbg_edif, vha, 0x5033,
+ 			    "%s: removing edif_entry %p, new sa_index: 0x%x\n",
+ 			    __func__, edif_entry, pkt->sa_index);
+ 			qla_edif_list_delete_sa_index(sp->fcport, edif_entry);
+ 			del_timer(&edif_entry->timer);
+ 
+ 			ql_dbg(ql_dbg_edif, vha, 0x5033,
+ 			    "%s: releasing edif_entry %p, new sa_index: 0x%x\n",
+ 			    __func__, edif_entry, pkt->sa_index);
+ 
+ 			kfree(edif_entry);
+ 		}
+ 	}
+ 
+ 	/*
+ 	 * if this is a delete for either tx or rx, make sure it succeeded.
+ 	 * The new_sa_info field should be 0xffff on success
+ 	 */
+ 	if (pkt->flags & SA_FLAG_INVALIDATE)
+ 		old_sa_deleted = (le16_to_cpu(pkt->new_sa_info) == 0xffff) ? 1 : 0;
+ 
+ 	/* Process update and delete the same way */
+ 
+ 	/* If this is an sadb cleanup delete, bypass sending events to IPSEC */
+ 	if (sp->flags & SRB_EDIF_CLEANUP_DELETE) {
+ 		sp->fcport->flags &= ~(FCF_ASYNC_SENT | FCF_ASYNC_ACTIVE);
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: nph 0x%x, sa_index %d removed from fw\n",
+ 		    __func__, sp->fcport->loop_id, pkt->sa_index);
+ 
+ 	} else if ((pkt->entry_status == 0) && (pkt->u.comp_sts == 0) &&
+ 	    old_sa_deleted) {
+ 		/*
+ 		 * Note: Wa are only keeping track of latest SA,
+ 		 * so we know when we can start enableing encryption per I/O.
+ 		 * If all SA's get deleted, let FW reject the IOCB.
+ 
+ 		 * TODO: edif: don't set enabled here I think
+ 		 * TODO: edif: prli complete is where it should be set
+ 		 */
+ 		ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x3063,
+ 			"SA(%x)updated for s_id %02x%02x%02x\n",
+ 			pkt->new_sa_info,
+ 			pkt->port_id[2], pkt->port_id[1], pkt->port_id[0]);
+ 		sp->fcport->edif.enable = 1;
+ 		if (pkt->flags & SA_FLAG_TX) {
+ 			sp->fcport->edif.tx_sa_set = 1;
+ 			sp->fcport->edif.tx_sa_pending = 0;
+ 		} else {
+ 			sp->fcport->edif.rx_sa_set = 1;
+ 			sp->fcport->edif.rx_sa_pending = 0;
+ 		}
+ 	} else {
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: %8phN SA update FAILED: sa_index: %d, new_sa_info %d, %02x%02x%02x\n",
+ 		    __func__, sp->fcport->port_name, pkt->sa_index, pkt->new_sa_info,
+ 		    pkt->port_id[2], pkt->port_id[1], pkt->port_id[0]);
+ 	}
+ 
+ 	/* for delete, release sa_ctl, sa_index */
+ 	if (pkt->flags & SA_FLAG_INVALIDATE) {
+ 		/* release the sa_ctl */
+ 		sa_ctl = qla_edif_find_sa_ctl_by_index(sp->fcport,
+ 		    le16_to_cpu(pkt->sa_index), (pkt->flags & SA_FLAG_TX));
+ 		if (sa_ctl &&
+ 		    qla_edif_find_sa_ctl_by_index(sp->fcport, sa_ctl->index,
+ 			(pkt->flags & SA_FLAG_TX)) != NULL) {
+ 			ql_dbg(ql_dbg_edif + ql_dbg_verbose, vha, 0x3063,
+ 			    "%s: freeing sa_ctl for index %d\n",
+ 			    __func__, sa_ctl->index);
+ 			qla_edif_free_sa_ctl(sp->fcport, sa_ctl, sa_ctl->index);
+ 		} else {
+ 			ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 			    "%s: sa_ctl NOT freed, sa_ctl: %p\n",
+ 			    __func__, sa_ctl);
+ 		}
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: freeing sa_index %d, nph: 0x%x\n",
+ 		    __func__, le16_to_cpu(pkt->sa_index), nport_handle);
+ 		qla_edif_sadb_delete_sa_index(sp->fcport, nport_handle,
+ 		    le16_to_cpu(pkt->sa_index));
+ 	/*
+ 	 * check for a failed sa_update and remove
+ 	 * the sadb entry.
+ 	 */
+ 	} else if (pkt->u.comp_sts) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: freeing sa_index %d, nph: 0x%x\n",
+ 		    __func__, pkt->sa_index, nport_handle);
+ 		qla_edif_sadb_delete_sa_index(sp->fcport, nport_handle,
+ 		    le16_to_cpu(pkt->sa_index));
+ 	}
+ 
+ 	sp->done(sp, 0);
+ }
+ 
+ /******************
+  * SADB functions *
+  ******************/
+ 
+ /* allocate/retrieve an sa_index for a given spi */
+ static uint16_t qla_edif_sadb_get_sa_index(fc_port_t *fcport,
+ 		struct qla_sa_update_frame *sa_frame)
+ {
+ 	struct edif_sa_index_entry *entry;
+ 	struct list_head *sa_list;
+ 	uint16_t sa_index;
+ 	int dir = sa_frame->flags & SAU_FLG_TX;
+ 	int slot = 0;
+ 	int free_slot = -1;
+ 	scsi_qla_host_t *vha = fcport->vha;
+ 	struct qla_hw_data *ha = vha->hw;
+ 	unsigned long flags = 0;
+ 	uint16_t nport_handle = fcport->loop_id;
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 	    "%s: entry  fc_port: %p, nport_handle: 0x%x\n",
+ 	    __func__, fcport, nport_handle);
+ 
+ 	if (dir)
+ 		sa_list = &ha->sadb_tx_index_list;
+ 	else
+ 		sa_list = &ha->sadb_rx_index_list;
+ 
+ 	entry = qla_edif_sadb_find_sa_index_entry(nport_handle, sa_list);
+ 	if (!entry) {
+ 		if ((sa_frame->flags & (SAU_FLG_TX | SAU_FLG_INV)) == SAU_FLG_INV) {
+ 			ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 			    "%s: rx delete request with no entry\n", __func__);
+ 			return RX_DELETE_NO_EDIF_SA_INDEX;
+ 		}
+ 
+ 		/* if there is no entry for this nport, add one */
+ 		entry = kzalloc((sizeof(struct edif_sa_index_entry)), GFP_ATOMIC);
+ 		if (!entry)
+ 			return INVALID_EDIF_SA_INDEX;
+ 
+ 		sa_index = qla_edif_get_sa_index_from_freepool(fcport, dir);
+ 		if (sa_index == INVALID_EDIF_SA_INDEX) {
+ 			kfree(entry);
+ 			return INVALID_EDIF_SA_INDEX;
+ 		}
+ 
+ 		INIT_LIST_HEAD(&entry->next);
+ 		entry->handle = nport_handle;
+ 		entry->fcport = fcport;
+ 		entry->sa_pair[0].spi = sa_frame->spi;
+ 		entry->sa_pair[0].sa_index = sa_index;
+ 		entry->sa_pair[1].spi = 0;
+ 		entry->sa_pair[1].sa_index = INVALID_EDIF_SA_INDEX;
+ 		spin_lock_irqsave(&ha->sadb_lock, flags);
+ 		list_add_tail(&entry->next, sa_list);
+ 		spin_unlock_irqrestore(&ha->sadb_lock, flags);
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: Created new sadb entry for nport_handle 0x%x, spi 0x%x, returning sa_index %d\n",
+ 		    __func__, nport_handle, sa_frame->spi, sa_index);
+ 
+ 		return sa_index;
+ 	}
+ 
+ 	spin_lock_irqsave(&ha->sadb_lock, flags);
+ 
+ 	/* see if we already have an entry for this spi */
+ 	for (slot = 0; slot < 2; slot++) {
+ 		if (entry->sa_pair[slot].sa_index == INVALID_EDIF_SA_INDEX) {
+ 			free_slot = slot;
+ 		} else {
+ 			if (entry->sa_pair[slot].spi == sa_frame->spi) {
+ 				spin_unlock_irqrestore(&ha->sadb_lock, flags);
+ 				ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 				    "%s: sadb slot %d entry for lid 0x%x, spi 0x%x found, sa_index %d\n",
+ 				    __func__, slot, entry->handle, sa_frame->spi,
+ 				    entry->sa_pair[slot].sa_index);
+ 				return entry->sa_pair[slot].sa_index;
+ 			}
+ 		}
+ 	}
+ 	spin_unlock_irqrestore(&ha->sadb_lock, flags);
+ 
+ 	/* both slots are used */
+ 	if (free_slot == -1) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: WARNING: No free slots in sadb for nport_handle 0x%x, spi: 0x%x\n",
+ 		    __func__, entry->handle, sa_frame->spi);
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: Slot 0  spi: 0x%x  sa_index: %d,  Slot 1  spi: 0x%x  sa_index: %d\n",
+ 		    __func__, entry->sa_pair[0].spi, entry->sa_pair[0].sa_index,
+ 		    entry->sa_pair[1].spi, entry->sa_pair[1].sa_index);
+ 
+ 		return INVALID_EDIF_SA_INDEX;
+ 	}
+ 
+ 	/* there is at least one free slot, use it */
+ 	sa_index = qla_edif_get_sa_index_from_freepool(fcport, dir);
+ 	if (sa_index == INVALID_EDIF_SA_INDEX) {
+ 		ql_dbg(ql_dbg_edif, fcport->vha, 0x3063,
+ 		    "%s: empty freepool!!\n", __func__);
+ 		return INVALID_EDIF_SA_INDEX;
+ 	}
+ 
+ 	spin_lock_irqsave(&ha->sadb_lock, flags);
+ 	entry->sa_pair[free_slot].spi = sa_frame->spi;
+ 	entry->sa_pair[free_slot].sa_index = sa_index;
+ 	spin_unlock_irqrestore(&ha->sadb_lock, flags);
+ 	ql_dbg(ql_dbg_edif, fcport->vha, 0x3063,
+ 	    "%s: sadb slot %d entry for nport_handle 0x%x, spi 0x%x added, returning sa_index %d\n",
+ 	    __func__, free_slot, entry->handle, sa_frame->spi, sa_index);
+ 
+ 	return sa_index;
+ }
+ 
+ /* release any sadb entries -- only done at teardown */
+ void qla_edif_sadb_release(struct qla_hw_data *ha)
+ {
+ 	struct list_head *pos;
+ 	struct list_head *tmp;
+ 	struct edif_sa_index_entry *entry;
+ 
+ 	list_for_each_safe(pos, tmp, &ha->sadb_rx_index_list) {
+ 		entry = list_entry(pos, struct edif_sa_index_entry, next);
+ 		list_del(&entry->next);
+ 		kfree(entry);
+ 	}
+ 
+ 	list_for_each_safe(pos, tmp, &ha->sadb_tx_index_list) {
+ 		entry = list_entry(pos, struct edif_sa_index_entry, next);
+ 		list_del(&entry->next);
+ 		kfree(entry);
+ 	}
+ }
+ 
+ /**************************
+  * sadb freepool functions
+  **************************/
+ 
+ /* build the rx and tx sa_index free pools -- only done at fcport init */
+ int qla_edif_sadb_build_free_pool(struct qla_hw_data *ha)
+ {
+ 	ha->edif_tx_sa_id_map =
+ 	    kcalloc(BITS_TO_LONGS(EDIF_NUM_SA_INDEX), sizeof(long), GFP_KERNEL);
+ 
+ 	if (!ha->edif_tx_sa_id_map) {
+ 		ql_log_pci(ql_log_fatal, ha->pdev, 0x0009,
+ 		    "Unable to allocate memory for sadb tx.\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	ha->edif_rx_sa_id_map =
+ 	    kcalloc(BITS_TO_LONGS(EDIF_NUM_SA_INDEX), sizeof(long), GFP_KERNEL);
+ 	if (!ha->edif_rx_sa_id_map) {
+ 		kfree(ha->edif_tx_sa_id_map);
+ 		ha->edif_tx_sa_id_map = NULL;
+ 		ql_log_pci(ql_log_fatal, ha->pdev, 0x0009,
+ 		    "Unable to allocate memory for sadb rx.\n");
+ 		return -ENOMEM;
+ 	}
+ 	return 0;
+ }
+ 
+ /* release the free pool - only done during fcport teardown */
+ void qla_edif_sadb_release_free_pool(struct qla_hw_data *ha)
+ {
+ 	kfree(ha->edif_tx_sa_id_map);
+ 	ha->edif_tx_sa_id_map = NULL;
+ 	kfree(ha->edif_rx_sa_id_map);
+ 	ha->edif_rx_sa_id_map = NULL;
+ }
+ 
+ static void __chk_edif_rx_sa_delete_pending(scsi_qla_host_t *vha,
+ 		fc_port_t *fcport, uint32_t handle, uint16_t sa_index)
+ {
+ 	struct edif_list_entry *edif_entry;
+ 	struct edif_sa_ctl *sa_ctl;
+ 	uint16_t delete_sa_index = INVALID_EDIF_SA_INDEX;
+ 	unsigned long flags = 0;
+ 	uint16_t nport_handle = fcport->loop_id;
+ 	uint16_t cached_nport_handle;
+ 
+ 	spin_lock_irqsave(&fcport->edif.indx_list_lock, flags);
+ 	edif_entry = qla_edif_list_find_sa_index(fcport, nport_handle);
+ 	if (!edif_entry) {
+ 		spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ 		return;		/* no pending delete for this handle */
+ 	}
+ 
+ 	/*
+ 	 * check for no pending delete for this index or iocb does not
+ 	 * match rx sa_index
+ 	 */
+ 	if (edif_entry->delete_sa_index == INVALID_EDIF_SA_INDEX ||
+ 	    edif_entry->update_sa_index != sa_index) {
+ 		spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ 		return;
+ 	}
+ 
+ 	/*
+ 	 * wait until we have seen at least EDIF_DELAY_COUNT transfers before
+ 	 * queueing RX delete
+ 	 */
+ 	if (edif_entry->count++ < EDIF_RX_DELETE_FILTER_COUNT) {
+ 		spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ 		return;
+ 	}
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x5033,
+ 	    "%s: invalidating delete_sa_index,  update_sa_index: 0x%x sa_index: 0x%x, delete_sa_index: 0x%x\n",
+ 	    __func__, edif_entry->update_sa_index, sa_index, edif_entry->delete_sa_index);
+ 
+ 	delete_sa_index = edif_entry->delete_sa_index;
+ 	edif_entry->delete_sa_index = INVALID_EDIF_SA_INDEX;
+ 	cached_nport_handle = edif_entry->handle;
+ 	spin_unlock_irqrestore(&fcport->edif.indx_list_lock, flags);
+ 
+ 	/* sanity check on the nport handle */
+ 	if (nport_handle != cached_nport_handle) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: POST SA DELETE nport_handle mismatch: lid: 0x%x, edif_entry nph: 0x%x\n",
+ 		    __func__, nport_handle, cached_nport_handle);
+ 	}
+ 
+ 	/* find the sa_ctl for the delete and schedule the delete */
+ 	sa_ctl = qla_edif_find_sa_ctl_by_index(fcport, delete_sa_index, 0);
+ 	if (sa_ctl) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: POST SA DELETE sa_ctl: %p, index recvd %d\n",
+ 		    __func__, sa_ctl, sa_index);
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "delete index %d, update index: %d, nport handle: 0x%x, handle: 0x%x\n",
+ 		    delete_sa_index,
+ 		    edif_entry->update_sa_index, nport_handle, handle);
+ 
+ 		sa_ctl->flags = EDIF_SA_CTL_FLG_DEL;
+ 		set_bit(EDIF_SA_CTL_REPL, &sa_ctl->state);
+ 		qla_post_sa_replace_work(fcport->vha, fcport,
+ 		    nport_handle, sa_ctl);
+ 	} else {
+ 		ql_dbg(ql_dbg_edif, vha, 0x3063,
+ 		    "%s: POST SA DELETE sa_ctl not found for delete_sa_index: %d\n",
+ 		    __func__, delete_sa_index);
+ 	}
+ }
+ 
+ void qla_chk_edif_rx_sa_delete_pending(scsi_qla_host_t *vha,
+ 		srb_t *sp, struct sts_entry_24xx *sts24)
+ {
+ 	fc_port_t *fcport = sp->fcport;
+ 	/* sa_index used by this iocb */
+ 	struct scsi_cmnd *cmd = GET_CMD_SP(sp);
+ 	uint32_t handle;
+ 
+ 	handle = (uint32_t)LSW(sts24->handle);
+ 
+ 	/* find out if this status iosb is for a scsi read */
+ 	if (cmd->sc_data_direction != DMA_FROM_DEVICE)
+ 		return;
+ 
+ 	return __chk_edif_rx_sa_delete_pending(vha, fcport, handle,
+ 	   le16_to_cpu(sts24->edif_sa_index));
+ }
+ 
+ void qlt_chk_edif_rx_sa_delete_pending(scsi_qla_host_t *vha, fc_port_t *fcport,
+ 		struct ctio7_from_24xx *pkt)
+ {
+ 	__chk_edif_rx_sa_delete_pending(vha, fcport,
+ 	    pkt->handle, le16_to_cpu(pkt->edif_sa_index));
+ }
+ 
+ static void qla_parse_auth_els_ctl(struct srb *sp)
+ {
+ 	struct qla_els_pt_arg *a = &sp->u.bsg_cmd.u.els_arg;
+ 	struct bsg_job *bsg_job = sp->u.bsg_cmd.bsg_job;
+ 	struct fc_bsg_request *request = bsg_job->request;
+ 	struct qla_bsg_auth_els_request *p =
+ 	    (struct qla_bsg_auth_els_request *)bsg_job->request;
+ 
+ 	a->tx_len = a->tx_byte_count = sp->remap.req.len;
+ 	a->tx_addr = sp->remap.req.dma;
+ 	a->rx_len = a->rx_byte_count = sp->remap.rsp.len;
+ 	a->rx_addr = sp->remap.rsp.dma;
+ 
+ 	if (p->e.sub_cmd == SEND_ELS_REPLY) {
+ 		a->control_flags = p->e.extra_control_flags << 13;
+ 		a->rx_xchg_address = cpu_to_le32(p->e.extra_rx_xchg_address);
+ 		if (p->e.extra_control_flags == BSG_CTL_FLAG_LS_ACC)
+ 			a->els_opcode = ELS_LS_ACC;
+ 		else if (p->e.extra_control_flags == BSG_CTL_FLAG_LS_RJT)
+ 			a->els_opcode = ELS_LS_RJT;
+ 	}
+ 	a->did = sp->fcport->d_id;
+ 	a->els_opcode =  request->rqst_data.h_els.command_code;
+ 	a->nport_handle = cpu_to_le16(sp->fcport->loop_id);
+ 	a->vp_idx = sp->vha->vp_idx;
+ }
+ 
+ int qla_edif_process_els(scsi_qla_host_t *vha, struct bsg_job *bsg_job)
+ {
+ 	struct fc_bsg_request *bsg_request = bsg_job->request;
+ 	struct fc_bsg_reply *bsg_reply = bsg_job->reply;
+ 	fc_port_t *fcport = NULL;
+ 	struct qla_hw_data *ha = vha->hw;
+ 	srb_t *sp;
+ 	int rval =  (DID_ERROR << 16);
+ 	port_id_t d_id;
+ 	struct qla_bsg_auth_els_request *p =
+ 	    (struct qla_bsg_auth_els_request *)bsg_job->request;
+ 
+ 	d_id.b.al_pa = bsg_request->rqst_data.h_els.port_id[2];
+ 	d_id.b.area = bsg_request->rqst_data.h_els.port_id[1];
+ 	d_id.b.domain = bsg_request->rqst_data.h_els.port_id[0];
+ 
+ 	/* find matching d_id in fcport list */
+ 	fcport = qla2x00_find_fcport_by_pid(vha, &d_id);
+ 	if (!fcport) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x911a,
+ 		    "%s fcport not find online portid=%06x.\n",
+ 		    __func__, d_id.b24);
+ 		SET_DID_STATUS(bsg_reply->result, DID_ERROR);
+ 		return -EIO;
+ 	}
+ 
+ 	if (qla_bsg_check(vha, bsg_job, fcport))
+ 		return 0;
+ 
+ 	if (fcport->loop_id == FC_NO_LOOP_ID) {
+ 		ql_dbg(ql_dbg_edif, vha, 0x910d,
+ 		    "%s ELS code %x, no loop id.\n", __func__,
+ 		    bsg_request->rqst_data.r_els.els_code);
+ 		SET_DID_STATUS(bsg_reply->result, DID_BAD_TARGET);
+ 		return -ENXIO;
+ 	}
+ 
+ 	if (!vha->flags.online) {
+ 		ql_log(ql_log_warn, vha, 0x7005, "Host not online.\n");
+ 		SET_DID_STATUS(bsg_reply->result, DID_BAD_TARGET);
+ 		rval = -EIO;
+ 		goto done;
+ 	}
+ 
+ 	/* pass through is supported only for ISP 4Gb or higher */
+ 	if (!IS_FWI2_CAPABLE(ha)) {
+ 		ql_dbg(ql_dbg_user, vha, 0x7001,
+ 		    "ELS passthru not supported for ISP23xx based adapters.\n");
+ 		SET_DID_STATUS(bsg_reply->result, DID_BAD_TARGET);
+ 		rval = -EPERM;
+ 		goto done;
+ 	}
+ 
+ 	sp = qla2x00_get_sp(vha, fcport, GFP_KERNEL);
+ 	if (!sp) {
+ 		ql_dbg(ql_dbg_user, vha, 0x7004,
+ 		    "Failed get sp pid=%06x\n", fcport->d_id.b24);
+ 		rval = -ENOMEM;
+ 		SET_DID_STATUS(bsg_reply->result, DID_IMM_RETRY);
+ 		goto done;
+ 	}
+ 
+ 	sp->remap.req.len = bsg_job->request_payload.payload_len;
+ 	sp->remap.req.buf = dma_pool_alloc(ha->purex_dma_pool,
+ 	    GFP_KERNEL, &sp->remap.req.dma);
+ 	if (!sp->remap.req.buf) {
+ 		ql_dbg(ql_dbg_user, vha, 0x7005,
+ 		    "Failed allocate request dma len=%x\n",
+ 		    bsg_job->request_payload.payload_len);
+ 		rval = -ENOMEM;
+ 		SET_DID_STATUS(bsg_reply->result, DID_IMM_RETRY);
+ 		goto done_free_sp;
+ 	}
+ 
+ 	sp->remap.rsp.len = bsg_job->reply_payload.payload_len;
+ 	sp->remap.rsp.buf = dma_pool_alloc(ha->purex_dma_pool,
+ 	    GFP_KERNEL, &sp->remap.rsp.dma);
+ 	if (!sp->remap.rsp.buf) {
+ 		ql_dbg(ql_dbg_user, vha, 0x7006,
+ 		    "Failed allocate response dma len=%x\n",
+ 		    bsg_job->reply_payload.payload_len);
+ 		rval = -ENOMEM;
+ 		SET_DID_STATUS(bsg_reply->result, DID_IMM_RETRY);
+ 		goto done_free_remap_req;
+ 	}
+ 	sg_copy_to_buffer(bsg_job->request_payload.sg_list,
+ 	    bsg_job->request_payload.sg_cnt, sp->remap.req.buf,
+ 	    sp->remap.req.len);
+ 	sp->remap.remapped = true;
+ 
+ 	sp->type = SRB_ELS_CMD_HST_NOLOGIN;
+ 	sp->name = "SPCN_BSG_HST_NOLOGIN";
+ 	sp->u.bsg_cmd.bsg_job = bsg_job;
+ 	qla_parse_auth_els_ctl(sp);
+ 
+ 	sp->free = qla2x00_bsg_sp_free;
+ 	sp->done = qla2x00_bsg_job_done;
+ 
+ 	rval = qla2x00_start_sp(sp);
+ 
+ 	ql_dbg(ql_dbg_edif, vha, 0x700a,
+ 	    "%s %s %8phN xchg %x ctlflag %x hdl %x reqlen %xh bsg ptr %p\n",
+ 	    __func__, sc_to_str(p->e.sub_cmd), fcport->port_name,
+ 	    p->e.extra_rx_xchg_address, p->e.extra_control_flags,
+ 	    sp->handle, sp->remap.req.len, bsg_job);
+ 
+ 	if (rval != QLA_SUCCESS) {
+ 		ql_log(ql_log_warn, vha, 0x700e,
+ 		    "qla2x00_start_sp failed = %d\n", rval);
+ 		SET_DID_STATUS(bsg_reply->result, DID_IMM_RETRY);
+ 		rval = -EIO;
+ 		goto done_free_remap_rsp;
+ 	}
+ 	return rval;
+ 
+ done_free_remap_rsp:
+ 	dma_pool_free(ha->purex_dma_pool, sp->remap.rsp.buf,
+ 	    sp->remap.rsp.dma);
+ done_free_remap_req:
+ 	dma_pool_free(ha->purex_dma_pool, sp->remap.req.buf,
+ 	    sp->remap.req.dma);
+ done_free_sp:
+ 	qla2x00_rel_sp(sp);
+ 
+ done:
+ 	return rval;
+ }
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
diff --cc drivers/scsi/qla2xxx/qla_edif.h
index d7d1433295c7,1cff02e5bd43..000000000000
--- a/drivers/scsi/qla2xxx/qla_edif.h
+++ b/drivers/scsi/qla2xxx/qla_edif.h
@@@ -30,4 -51,78 +51,81 @@@ struct edif_dbell 
  	struct	completion	dbell;
  };
  
++<<<<<<< HEAD
++=======
+ #define SA_UPDATE_IOCB_TYPE            0x71    /* Security Association Update IOCB entry */
+ struct sa_update_28xx {
+ 	uint8_t entry_type;             /* Entry type. */
+ 	uint8_t entry_count;            /* Entry count. */
+ 	uint8_t sys_define;             /* System Defined. */
+ 	uint8_t entry_status;           /* Entry Status. */
+ 
+ 	uint32_t handle;                /* IOCB System handle. */
+ 
+ 	union {
+ 		__le16 nport_handle;  /* in: N_PORT handle. */
+ 		__le16 comp_sts;              /* out: completion status */
+ #define CS_PORT_EDIF_SUPP_NOT_RDY 0x64
+ #define CS_PORT_EDIF_INV_REQ      0x66
+ 	} u;
+ 	uint8_t vp_index;
+ 	uint8_t reserved_1;
+ 	uint8_t port_id[3];
+ 	uint8_t flags;
+ #define SA_FLAG_INVALIDATE BIT_0
+ #define SA_FLAG_TX	   BIT_1 // 1=tx, 0=rx
+ 
+ 	uint8_t sa_key[32];     /* 256 bit key */
+ 	__le32 salt;
+ 	__le32 spi;
+ 	uint8_t sa_control;
+ #define SA_CNTL_ENC_FCSP        (1 << 3)
+ #define SA_CNTL_ENC_OPD         (2 << 3)
+ #define SA_CNTL_ENC_MSK         (3 << 3)  // mask bits 4,3
+ #define SA_CNTL_AES_GMAC	(1 << 2)
+ #define SA_CNTL_KEY256          (2 << 0)
+ #define SA_CNTL_KEY128          0
+ 
+ 	uint8_t reserved_2;
+ 	__le16 sa_index;   // reserve: bit 11-15
+ 	__le16 old_sa_info;
+ 	__le16 new_sa_info;
+ };
+ 
+ #define        NUM_ENTRIES     256
+ #define        MAX_PAYLOAD     1024
+ #define        PUR_GET         1
+ 
+ struct dinfo {
+ 	int		nodecnt;
+ 	int		lstate;
+ };
+ 
+ struct pur_ninfo {
+ 	unsigned int	pur_pend:1;
+ 	port_id_t       pur_sid;
+ 	port_id_t	pur_did;
+ 	uint8_t		vp_idx;
+ 	short           pur_bytes_rcvd;
+ 	unsigned short  pur_nphdl;
+ 	unsigned int    pur_rx_xchg_address;
+ };
+ 
+ struct purexevent {
+ 	struct  pur_ninfo	pur_info;
+ 	unsigned char		*msgp;
+ 	u32			msgp_len;
+ };
+ 
+ #define	N_UNDEF		0
+ #define	N_PUREX		1
+ struct enode {
+ 	struct list_head	list;
+ 	struct dinfo		dinfo;
+ 	uint32_t		ntype;
+ 	union {
+ 		struct purexevent	purexinfo;
+ 	} u;
+ };
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  #endif	/* __QLA_EDIF_H */
diff --cc drivers/scsi/qla2xxx/qla_gbl.h
index 659d5933e356,e7c5143c66ef..000000000000
--- a/drivers/scsi/qla2xxx/qla_gbl.h
+++ b/drivers/scsi/qla2xxx/qla_gbl.h
@@@ -131,6 -130,15 +131,18 @@@ void qla24xx_free_purex_item(struct pur
  extern bool qla24xx_risc_firmware_invalid(uint32_t *);
  void qla_init_iocb_limit(scsi_qla_host_t *);
  
++<<<<<<< HEAD
++=======
+ void qla_edif_sadb_release(struct qla_hw_data *ha);
+ int qla_edif_sadb_build_free_pool(struct qla_hw_data *ha);
+ void qla_edif_sadb_release_free_pool(struct qla_hw_data *ha);
+ void qla_chk_edif_rx_sa_delete_pending(scsi_qla_host_t *vha,
+ 		srb_t *sp, struct sts_entry_24xx *sts24);
+ void qlt_chk_edif_rx_sa_delete_pending(scsi_qla_host_t *vha, fc_port_t *fcport,
+ 		struct ctio7_from_24xx *ctio);
+ int qla_edif_process_els(scsi_qla_host_t *vha, struct bsg_job *bsgjob);
+ const char *sc_to_str(uint16_t cmd);
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  
  /*
   * Global Data in qla_os.c source file.
@@@ -949,10 -971,19 +968,25 @@@ extern void qla_nvme_abort_process_comp
  
  /* nvme.c */
  void qla_nvme_unregister_remote_port(struct fc_port *fcport);
++<<<<<<< HEAD
++=======
+ 
+ /* qla_edif.c */
+ fc_port_t *qla2x00_find_fcport_by_pid(scsi_qla_host_t *vha, port_id_t *id);
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  void qla_edb_stop(scsi_qla_host_t *vha);
  int32_t qla_edif_app_mgmt(struct bsg_job *bsg_job);
  void qla_enode_init(scsi_qla_host_t *vha);
  void qla_enode_stop(scsi_qla_host_t *vha);
++<<<<<<< HEAD
++=======
+ void qla_edif_flush_sa_ctl_lists(fc_port_t *fcport);
+ void qla24xx_sa_update_iocb(srb_t *sp, struct sa_update_28xx *sa_update_iocb);
+ void qla24xx_sa_replace_iocb(srb_t *sp, struct sa_update_28xx *sa_update_iocb);
+ void qla24xx_auth_els(scsi_qla_host_t *vha, void **pkt, struct rsp_que **rsp);
+ void qla28xx_sa_update_iocb_entry(scsi_qla_host_t *vha, struct req_que *req,
+ 		struct sa_update_28xx *pkt);
++>>>>>>> dd30706e73b7 (scsi: qla2xxx: edif: Add key update)
  void qla_handle_els_plogi_done(scsi_qla_host_t *vha, struct event_arg *ea);
  
  #define QLA2XX_HW_ERROR			BIT_0
* Unmerged path drivers/scsi/qla2xxx/qla_def.h
* Unmerged path drivers/scsi/qla2xxx/qla_edif.c
* Unmerged path drivers/scsi/qla2xxx/qla_edif.h
diff --git a/drivers/scsi/qla2xxx/qla_fw.h b/drivers/scsi/qla2xxx/qla_fw.h
index 44db5e1fc35e..7775a6481c00 100644
--- a/drivers/scsi/qla2xxx/qla_fw.h
+++ b/drivers/scsi/qla2xxx/qla_fw.h
@@ -612,6 +612,7 @@ struct sts_entry_24xx {
 	union {
 		__le16 reserved_1;
 		__le16	nvme_rsp_pyld_len;
+		__le16 edif_sa_index;	 /* edif sa_index used for initiator read data */
 	};
 
 	__le16	state_flags;		/* State flags. */
* Unmerged path drivers/scsi/qla2xxx/qla_gbl.h
diff --git a/drivers/scsi/qla2xxx/qla_init.c b/drivers/scsi/qla2xxx/qla_init.c
index fe402638d6b3..319be7203c40 100644
--- a/drivers/scsi/qla2xxx/qla_init.c
+++ b/drivers/scsi/qla2xxx/qla_init.c
@@ -5086,6 +5086,16 @@ qla2x00_alloc_fcport(scsi_qla_host_t *vha, gfp_t flags)
 	INIT_LIST_HEAD(&fcport->sess_cmd_list);
 	spin_lock_init(&fcport->sess_cmd_lock);
 
+	spin_lock_init(&fcport->edif.sa_list_lock);
+	INIT_LIST_HEAD(&fcport->edif.tx_sa_list);
+	INIT_LIST_HEAD(&fcport->edif.rx_sa_list);
+
+	if (vha->e_dbell.db_flags == EDB_ACTIVE)
+		fcport->edif.app_started = 1;
+
+	spin_lock_init(&fcport->edif.indx_list_lock);
+	INIT_LIST_HEAD(&fcport->edif.edif_indx_list);
+
 	return fcport;
 }
 
diff --git a/drivers/scsi/qla2xxx/qla_iocb.c b/drivers/scsi/qla2xxx/qla_iocb.c
index 7c55022f5a26..f1fb990e743e 100644
--- a/drivers/scsi/qla2xxx/qla_iocb.c
+++ b/drivers/scsi/qla2xxx/qla_iocb.c
@@ -3848,6 +3848,12 @@ qla2x00_start_sp(srb_t *sp)
 	case SRB_PRLO_CMD:
 		qla24xx_prlo_iocb(sp, pkt);
 		break;
+	case SRB_SA_UPDATE:
+		qla24xx_sa_update_iocb(sp, pkt);
+		break;
+	case SRB_SA_REPLACE:
+		qla24xx_sa_replace_iocb(sp, pkt);
+		break;
 	default:
 		break;
 	}
diff --git a/drivers/scsi/qla2xxx/qla_isr.c b/drivers/scsi/qla2xxx/qla_isr.c
index 6e542510f034..110a1eab54a7 100644
--- a/drivers/scsi/qla2xxx/qla_isr.c
+++ b/drivers/scsi/qla2xxx/qla_isr.c
@@ -2988,6 +2988,8 @@ qla2x00_status_entry(scsi_qla_host_t *vha, struct rsp_que *rsp, void *pkt)
 	}
 
 	/* Fast path completion. */
+	qla_chk_edif_rx_sa_delete_pending(vha, sp, sts24);
+
 	if (comp_status == CS_COMPLETE && scsi_status == 0) {
 		qla2x00_process_completed_request(vha, req, handle);
 
@@ -3382,6 +3384,7 @@ qla2x00_error_entry(scsi_qla_host_t *vha, struct rsp_que *rsp, sts_entry_t *pkt)
 		}
 		break;
 
+	case SA_UPDATE_IOCB_TYPE:
 	case ABTS_RESP_24XX:
 	case CTIO_TYPE7:
 	case CTIO_CRC2:
@@ -3614,6 +3617,11 @@ void qla24xx_process_response_queue(struct scsi_qla_host *vha,
 				       purex_entry->els_frame_payload[3]);
 			}
 			break;
+		case SA_UPDATE_IOCB_TYPE:
+			qla28xx_sa_update_iocb_entry(vha, rsp->req,
+				(struct sa_update_28xx *)pkt);
+			break;
+
 		default:
 			/* Type Not Supported. */
 			ql_dbg(ql_dbg_async, vha, 0x5042,
diff --git a/drivers/scsi/qla2xxx/qla_os.c b/drivers/scsi/qla2xxx/qla_os.c
index fbb549c49362..5f4025835a3b 100644
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@ -2731,6 +2731,17 @@ qla2x00_probe_one(struct pci_dev *pdev, const struct pci_device_id *id)
 	spin_lock_init(&ha->tgt.sess_lock);
 	spin_lock_init(&ha->tgt.atio_lock);
 
+	spin_lock_init(&ha->sadb_lock);
+	INIT_LIST_HEAD(&ha->sadb_tx_index_list);
+	INIT_LIST_HEAD(&ha->sadb_rx_index_list);
+
+	spin_lock_init(&ha->sadb_fp_lock);
+
+	if (qla_edif_sadb_build_free_pool(ha)) {
+		kfree(ha);
+		goto  disable_device;
+	}
+
 	atomic_set(&ha->nvme_active_aen_cnt, 0);
 
 	/* Clear our data area */
@@ -3761,6 +3772,9 @@ qla2x00_free_device(scsi_qla_host_t *vha)
 
 	qla82xx_md_free(vha);
 
+	qla_edif_sadb_release_free_pool(ha);
+	qla_edif_sadb_release(ha);
+
 	qla2x00_free_queues(ha);
 }
 
@@ -5221,6 +5235,9 @@ qla2x00_do_work(struct scsi_qla_host *vha)
 			qla24xx_els_dcmd2_iocb(vha, ELS_DCMD_PLOGI,
 			    e->u.fcport.fcport, false);
 			break;
+		case QLA_EVT_SA_REPLACE:
+			qla24xx_issue_sa_replace_iocb(vha, e);
+			break;
 		}
 
 		if (rc == EAGAIN) {
diff --git a/drivers/scsi/qla2xxx/qla_target.h b/drivers/scsi/qla2xxx/qla_target.h
index 6b5ee6c3a43f..b42fa01fd20e 100644
--- a/drivers/scsi/qla2xxx/qla_target.h
+++ b/drivers/scsi/qla2xxx/qla_target.h
@@ -455,7 +455,7 @@ struct ctio7_from_24xx {
 	uint8_t  vp_index;
 	uint8_t  reserved1[5];
 	__le32	exchange_address;
-	__le16	reserved2;
+	__le16	edif_sa_index;
 	__le16	flags;
 	__le32	residual;
 	__le16	ox_id;
