x86/fpu/signal: Sanitize copy_user_to_fpregs_zeroing()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit cdcec1b77001e7f2cd10dccfc6d9b6d5d3f1f3ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/cdcec1b7.failed

Now that user_xfeatures is correctly set when xsave is enabled, remove
the duplicated initialization of components.

Rename the function while at it.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20210623121457.377341297@linutronix.de
(cherry picked from commit cdcec1b77001e7f2cd10dccfc6d9b6d5d3f1f3ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/fpu/signal.c
diff --cc arch/x86/kernel/fpu/signal.c
index 7e120ce9728a,a1a70134e1fe..000000000000
--- a/arch/x86/kernel/fpu/signal.c
+++ b/arch/x86/kernel/fpu/signal.c
@@@ -250,33 -251,27 +250,48 @@@ sanitize_restored_user_xstate(union fpr
  }
  
  /*
-  * Restore the extended state if present. Otherwise, restore the FP/SSE state.
+  * Restore the FPU state directly from the userspace signal frame.
   */
- static int copy_user_to_fpregs_zeroing(void __user *buf, u64 xbv, int fx_only)
+ static int restore_fpregs_from_user(void __user *buf, u64 xrestore, bool fx_only)
  {
- 	u64 init_bv;
- 	int r;
- 
  	if (use_xsave()) {
++<<<<<<< HEAD
 +		if (fx_only) {
 +			init_bv = xfeatures_mask_user() & ~XFEATURE_MASK_FPSSE;
 +
 +			r = copy_user_to_fxregs(buf);
 +			if (!r)
 +				copy_kernel_to_xregs(&init_fpstate.xsave, init_bv);
 +			return r;
 +		} else {
 +			init_bv = xfeatures_mask_user() & ~xbv;
 +
 +			r = xrstor_from_user_sigframe(buf, xbv);
 +			if (!r && unlikely(init_bv))
 +				copy_kernel_to_xregs(&init_fpstate.xsave, init_bv);
 +			return r;
 +		}
 +	} else if (use_fxsr()) {
 +		return copy_user_to_fxregs(buf);
 +	} else
++=======
+ 		u64 init_bv = xfeatures_mask_uabi() & ~xrestore;
+ 		int ret;
+ 
+ 		if (likely(!fx_only))
+ 			ret = xrstor_from_user_sigframe(buf, xrestore);
+ 		else
+ 			ret = fxrstor_from_user_sigframe(buf);
+ 
+ 		if (!ret && unlikely(init_bv))
+ 			os_xrstor(&init_fpstate.xsave, init_bv);
+ 		return ret;
+ 	} else if (use_fxsr()) {
+ 		return fxrstor_from_user_sigframe(buf);
+ 	} else {
++>>>>>>> cdcec1b77001 (x86/fpu/signal: Sanitize copy_user_to_fpregs_zeroing())
  		return frstor_from_user_sigframe(buf);
+ 	}
  }
  
  static int __fpu_restore_sig(void __user *buf, void __user *buf_fx,
* Unmerged path arch/x86/kernel/fpu/signal.c
