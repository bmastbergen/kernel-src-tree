net: create reusable function for getting ownership info of sysfs inodes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Tyler Hicks <tyhicks@canonical.com>
commit fbdeaed408cf2728c62640c10848ddb1b67e63d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/fbdeaed4.failed

Make net_ns_get_ownership() reusable by networking code outside of core.
This is useful, for example, to allow bridge related sysfs files to be
owned by container root.

Add a function comment since this is a potentially dangerous function to
use given the way that kobject_get_ownership() works by initializing uid
and gid before calling .get_ownership().

	Signed-off-by: Tyler Hicks <tyhicks@canonical.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit fbdeaed408cf2728c62640c10848ddb1b67e63d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/net_namespace.c
diff --cc net/core/net_namespace.c
index 4d99f6df8e15,738871af5efa..000000000000
--- a/net/core/net_namespace.c
+++ b/net/core/net_namespace.c
@@@ -17,7 -17,7 +17,11 @@@
  #include <linux/user_namespace.h>
  #include <linux/net_namespace.h>
  #include <linux/sched/task.h>
++<<<<<<< HEAD
 +#include <linux/cookie.h>
++=======
+ #include <linux/uidgid.h>
++>>>>>>> fbdeaed408cf (net: create reusable function for getting ownership info of sysfs inodes)
  
  #include <net/sock.h>
  #include <net/netlink.h>
diff --git a/include/net/net_namespace.h b/include/net/net_namespace.h
index 5caaaec477bd..06312cebd871 100644
--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -12,6 +12,7 @@
 #include <linux/workqueue.h>
 #include <linux/list.h>
 #include <linux/sysctl.h>
+#include <linux/uidgid.h>
 
 #include <net/flow.h>
 #include <net/netns/core.h>
@@ -216,6 +217,8 @@ extern struct net init_net;
 struct net *copy_net_ns(unsigned long flags, struct user_namespace *user_ns,
 			struct net *old_net);
 
+void net_ns_get_ownership(const struct net *net, kuid_t *uid, kgid_t *gid);
+
 void net_ns_barrier(void);
 #else /* CONFIG_NET_NS */
 #include <linux/sched.h>
@@ -228,6 +231,13 @@ static inline struct net *copy_net_ns(unsigned long flags,
 	return old_net;
 }
 
+static inline void net_ns_get_ownership(const struct net *net,
+					kuid_t *uid, kgid_t *gid)
+{
+	*uid = GLOBAL_ROOT_UID;
+	*gid = GLOBAL_ROOT_GID;
+}
+
 static inline void net_ns_barrier(void) {}
 #endif /* CONFIG_NET_NS */
 
diff --git a/net/core/net-sysfs.c b/net/core/net-sysfs.c
index fc6bc95980a0..2e5c5c83c861 100644
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@ -723,24 +723,6 @@ static const struct attribute_group wireless_group = {
 #define net_class_groups	NULL
 #endif /* CONFIG_SYSFS */
 
-static void net_ns_get_ownership(const struct net *net,
-				 kuid_t *uid, kgid_t *gid)
-{
-	if (net) {
-		kuid_t ns_root_uid = make_kuid(net->user_ns, 0);
-		kgid_t ns_root_gid = make_kgid(net->user_ns, 0);
-
-		if (uid_valid(ns_root_uid))
-			*uid = ns_root_uid;
-
-		if (gid_valid(ns_root_gid))
-			*gid = ns_root_gid;
-	} else {
-		*uid = GLOBAL_ROOT_UID;
-		*gid = GLOBAL_ROOT_GID;
-	}
-}
-
 #ifdef CONFIG_SYSFS
 #define to_rx_queue_attr(_attr) \
 	container_of(_attr, struct rx_queue_attribute, attr)
* Unmerged path net/core/net_namespace.c
