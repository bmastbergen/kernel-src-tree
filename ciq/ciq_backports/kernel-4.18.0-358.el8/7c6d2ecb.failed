net: be more gentle about silly gso requests coming from user

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 7c6d2ecbda83150b2036a2b36b21381ad4667762
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/7c6d2ecb.failed

Recent change in virtio_net_hdr_to_skb() broke some packetdrill tests.

When --mss=XXX option is set, packetdrill always provide gso_type & gso_size
for its inbound packets, regardless of packet size.

	if (packet->tcp && packet->mss) {
		if (packet->ipv4)
			gso.gso_type = VIRTIO_NET_HDR_GSO_TCPV4;
		else
			gso.gso_type = VIRTIO_NET_HDR_GSO_TCPV6;
		gso.gso_size = packet->mss;
	}

Since many other programs could do the same, relax virtio_net_hdr_to_skb()
to no longer return an error, but instead ignore gso settings.

This keeps Willem intent to make sure no malicious packet could
reach gso stack.

Note that TCP stack has a special logic in tcp_set_skb_tso_segs()
to clear gso_size for small packets.

Fixes: 6dd912f82680 ("net: check untrusted gso_size at kernel entry")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Willem de Bruijn <willemb@google.com>
	Acked-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7c6d2ecbda83150b2036a2b36b21381ad4667762)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/virtio_net.h
diff --cc include/linux/virtio_net.h
index acf273692515,e8a924eeea3d..000000000000
--- a/include/linux/virtio_net.h
+++ b/include/linux/virtio_net.h
@@@ -87,13 -109,17 +87,26 @@@ retry
  
  	if (hdr->gso_type != VIRTIO_NET_HDR_GSO_NONE) {
  		u16 gso_size = __virtio16_to_cpu(little_endian, hdr->gso_size);
+ 		struct skb_shared_info *shinfo = skb_shinfo(skb);
  
++<<<<<<< HEAD
 +		skb_shinfo(skb)->gso_size = gso_size;
 +		skb_shinfo(skb)->gso_type = gso_type;
 +
 +		/* Header must be checked, and gso_segs computed. */
 +		skb_shinfo(skb)->gso_type |= SKB_GSO_DODGY;
 +		skb_shinfo(skb)->gso_segs = 0;
++=======
+ 		/* Too small packets are not really GSO ones. */
+ 		if (skb->len - p_off > gso_size) {
+ 			shinfo->gso_size = gso_size;
+ 			shinfo->gso_type = gso_type;
+ 
+ 			/* Header must be checked, and gso_segs computed. */
+ 			shinfo->gso_type |= SKB_GSO_DODGY;
+ 			shinfo->gso_segs = 0;
+ 		}
++>>>>>>> 7c6d2ecbda83 (net: be more gentle about silly gso requests coming from user)
  	}
  
  	return 0;
* Unmerged path include/linux/virtio_net.h
