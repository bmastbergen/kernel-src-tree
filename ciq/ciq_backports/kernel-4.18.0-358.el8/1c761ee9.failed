efi/arm64: Update debug prints to reflect other entropy sources

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Mark Brown <broonie@kernel.org>
commit 1c761ee9da1ac6ba7e40d14457fac94c87eaff35
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/1c761ee9.failed

Currently the EFI stub prints a diagnostic on boot saying that KASLR will
be disabled if it is unable to use the EFI RNG protocol to obtain a seed
for KASLR.  With the addition of support for v8.5-RNG and the SMCCC RNG
protocol it is now possible for KASLR to obtain entropy even if the EFI
RNG protocol is unsupported in the system, and the main kernel now
explicitly says if KASLR is active itself.  This can result in a boot
log where the stub says KASLR has been disabled and the main kernel says
that it is enabled which is confusing for users.

Remove the explicit reference to KASLR from the diagnostics, the warnings
are still useful as EFI is the only source of entropy the stub uses when
randomizing the physical address of the kernel and the other sources may
not be available.

	Signed-off-by: Mark Brown <broonie@kernel.org>
Link: https://lore.kernel.org/r/20210120163810.14973-1-broonie@kernel.org
	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
(cherry picked from commit 1c761ee9da1ac6ba7e40d14457fac94c87eaff35)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/efi/libstub/arm64-stub.c
diff --cc drivers/firmware/efi/libstub/arm64-stub.c
index 1b4d465cc5d9,b69d63143e0d..000000000000
--- a/drivers/firmware/efi/libstub/arm64-stub.c
+++ b/drivers/firmware/efi/libstub/arm64-stub.c
@@@ -54,23 -54,22 +54,32 @@@ efi_status_t handle_kernel_image(efi_sy
  {
  	efi_status_t status;
  	unsigned long kernel_size, kernel_memsize = 0;
 -	u32 phys_seed = 0;
 +	void *old_image_addr = (void *)*image_addr;
 +	unsigned long preferred_offset;
 +	u64 phys_seed = 0;
  
  	if (IS_ENABLED(CONFIG_RANDOMIZE_BASE)) {
 -		if (!efi_nokaslr) {
 -			status = efi_get_random_bytes(sizeof(phys_seed),
 +		if (!nokaslr()) {
 +			status = efi_get_random_bytes(sys_table_arg,
 +						      sizeof(phys_seed),
  						      (u8 *)&phys_seed);
  			if (status == EFI_NOT_FOUND) {
++<<<<<<< HEAD
 +				pr_efi(sys_table_arg, "EFI_RNG_PROTOCOL unavailable, no randomness supplied\n");
 +			} else if (status != EFI_SUCCESS) {
 +				pr_efi_err(sys_table_arg, "efi_get_random_bytes() failed\n");
 +				return status;
++=======
+ 				efi_info("EFI_RNG_PROTOCOL unavailable\n");
+ 				efi_nokaslr = true;
+ 			} else if (status != EFI_SUCCESS) {
+ 				efi_err("efi_get_random_bytes() failed (0x%lx)\n",
+ 					status);
+ 				efi_nokaslr = true;
++>>>>>>> 1c761ee9da1a (efi/arm64: Update debug prints to reflect other entropy sources)
  			}
  		} else {
 -			efi_info("KASLR disabled on kernel command line\n");
 +			pr_efi(sys_table_arg, "KASLR disabled on kernel command line\n");
  		}
  	}
  
* Unmerged path drivers/firmware/efi/libstub/arm64-stub.c
