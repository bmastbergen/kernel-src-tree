block: get rid of the trace rq insert wrapper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
commit b357e4a694ac4b95096715df253548f7e1f2723f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/b357e4a6.failed

Get rid of the wrapper for trace_block_rq_insert() and call the function
directly.

	Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
	Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b357e4a694ac4b95096715df253548f7e1f2723f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-sched.c
diff --cc block/blk-mq-sched.c
index 530bf4e63103,ddb65e9e6fd9..000000000000
--- a/block/blk-mq-sched.c
+++ b/block/blk-mq-sched.c
@@@ -446,12 -384,6 +446,15 @@@ bool blk_mq_sched_try_insert_merge(stru
  }
  EXPORT_SYMBOL_GPL(blk_mq_sched_try_insert_merge);
  
++<<<<<<< HEAD
 +void blk_mq_sched_request_inserted(struct request *rq)
 +{
 +	trace_block_rq_insert(rq->q, rq);
 +}
 +EXPORT_SYMBOL_GPL(blk_mq_sched_request_inserted);
 +
++=======
++>>>>>>> b357e4a694ac (block: get rid of the trace rq insert wrapper)
  static bool blk_mq_sched_bypass_insert(struct blk_mq_hw_ctx *hctx,
  				       bool has_sched,
  				       struct request *rq)
diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index a3663a0812ec..4b1a70a519c4 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -134,6 +134,8 @@
 #include <linux/delay.h>
 #include <linux/backing-dev.h>
 
+#include <trace/events/block.h>
+
 #include "blk.h"
 #include "blk-mq.h"
 #include "blk-mq-tag.h"
@@ -5631,7 +5633,7 @@ static void bfq_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 
 	spin_unlock_irq(&bfqd->lock);
 
-	blk_mq_sched_request_inserted(rq);
+	trace_block_rq_insert(rq);
 
 	spin_lock_irq(&bfqd->lock);
 	bfqq = bfq_init_rq(rq);
diff --git a/block/blk-core.c b/block/blk-core.c
index 436c236db53a..63f6b54484de 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -54,6 +54,7 @@ EXPORT_TRACEPOINT_SYMBOL_GPL(block_rq_remap);
 EXPORT_TRACEPOINT_SYMBOL_GPL(block_bio_complete);
 EXPORT_TRACEPOINT_SYMBOL_GPL(block_split);
 EXPORT_TRACEPOINT_SYMBOL_GPL(block_unplug);
+EXPORT_TRACEPOINT_SYMBOL_GPL(block_rq_insert);
 
 DEFINE_IDA(blk_queue_ida);
 
* Unmerged path block/blk-mq-sched.c
diff --git a/block/blk-mq-sched.h b/block/blk-mq-sched.h
index b223a9c9ba3d..8d505163c580 100644
--- a/block/blk-mq-sched.h
+++ b/block/blk-mq-sched.h
@@ -9,7 +9,6 @@
 
 void blk_mq_sched_assign_ioc(struct request *rq);
 
-void blk_mq_sched_request_inserted(struct request *rq);
 bool blk_mq_sched_try_merge(struct request_queue *q, struct bio *bio,
 				struct request **merged_request);
 bool __blk_mq_sched_bio_merge(struct request_queue *q, struct bio *bio);
diff --git a/block/kyber-iosched.c b/block/kyber-iosched.c
index c93bbbdce939..5fa76d8f9392 100644
--- a/block/kyber-iosched.c
+++ b/block/kyber-iosched.c
@@ -24,6 +24,8 @@
 #include <linux/module.h>
 #include <linux/sbitmap.h>
 
+#include <trace/events/block.h>
+
 #include "blk.h"
 #include "blk-mq.h"
 #include "blk-mq-debugfs.h"
@@ -609,7 +611,7 @@ static void kyber_insert_requests(struct blk_mq_hw_ctx *hctx,
 			list_move_tail(&rq->queuelist, head);
 		sbitmap_set_bit(&khd->kcq_map[sched_domain],
 				rq->mq_ctx->index_hw[hctx->type]);
-		blk_mq_sched_request_inserted(rq);
+		trace_block_rq_insert(rq);
 		spin_unlock(&kcq->lock);
 	}
 }
diff --git a/block/mq-deadline.c b/block/mq-deadline.c
index 2b78478a2f8f..3fd6e46f5a02 100644
--- a/block/mq-deadline.c
+++ b/block/mq-deadline.c
@@ -17,6 +17,8 @@
 #include <linux/rbtree.h>
 #include <linux/sbitmap.h>
 
+#include <trace/events/block.h>
+
 #include "blk.h"
 #include "blk-mq.h"
 #include "blk-mq-debugfs.h"
@@ -506,7 +508,7 @@ static void dd_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 	if (blk_mq_sched_try_insert_merge(q, rq))
 		return;
 
-	blk_mq_sched_request_inserted(rq);
+	trace_block_rq_insert(rq);
 
 	if (at_head || blk_rq_is_passthrough(rq)) {
 		if (at_head)
