virtio_net: move txq wakeups under tx q lock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 22bc63c58e876cc359d0b1566dee3db8ecc16722
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/22bc63c5.failed

We currently check num_free outside tx q lock
which is unsafe: new packets can arrive meanwhile
and there won't be space in the queue.
Thus a spurious queue wakeup causing overhead
and even packet drops.

Move the check under the lock to fix that.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit 22bc63c58e876cc359d0b1566dee3db8ecc16722)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/virtio_net.c
diff --cc drivers/net/virtio_net.c
index 20814dd573ad,613aef630cdd..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -1418,12 -1516,13 +1418,17 @@@ static void virtnet_poll_cleantx(struc
  		return;
  
  	if (__netif_tx_trylock(txq)) {
++<<<<<<< HEAD
 +		free_old_xmit_skbs(sq);
++=======
+ 		free_old_xmit_skbs(sq, true);
+ 
+ 		if (sq->vq->num_free >= 2 + MAX_SKB_FRAGS)
+ 			netif_tx_wake_queue(txq);
+ 
++>>>>>>> 22bc63c58e87 (virtio_net: move txq wakeups under tx q lock)
  		__netif_tx_unlock(txq);
  	}
- 
- 	if (sq->vq->num_free >= 2 + MAX_SKB_FRAGS)
- 		netif_tx_wake_queue(txq);
  }
  
  static int virtnet_poll(struct napi_struct *napi, int budget)
@@@ -1502,14 -1604,32 +1507,27 @@@ static int virtnet_poll_tx(struct napi_
  
  	txq = netdev_get_tx_queue(vi->dev, index);
  	__netif_tx_lock(txq, raw_smp_processor_id());
++<<<<<<< HEAD
 +	free_old_xmit_skbs(sq);
- 	__netif_tx_unlock(txq);
- 
- 	virtqueue_napi_complete(napi, sq->vq, 0);
++=======
+ 	virtqueue_disable_cb(sq->vq);
+ 	free_old_xmit_skbs(sq, true);
  
  	if (sq->vq->num_free >= 2 + MAX_SKB_FRAGS)
  		netif_tx_wake_queue(txq);
  
+ 	opaque = virtqueue_enable_cb_prepare(sq->vq);
+ 
+ 	done = napi_complete_done(napi, 0);
+ 
+ 	if (!done)
+ 		virtqueue_disable_cb(sq->vq);
+ 
++>>>>>>> 22bc63c58e87 (virtio_net: move txq wakeups under tx q lock)
+ 	__netif_tx_unlock(txq);
+ 
 -	if (done) {
 -		if (unlikely(virtqueue_poll(sq->vq, opaque))) {
 -			if (napi_schedule_prep(napi)) {
 -				__netif_tx_lock(txq, raw_smp_processor_id());
 -				virtqueue_disable_cb(sq->vq);
 -				__netif_tx_unlock(txq);
 -				__napi_schedule(napi);
 -			}
 -		}
 -	}
++	virtqueue_napi_complete(napi, sq->vq, 0);
+ 
  	return 0;
  }
  
* Unmerged path drivers/net/virtio_net.c
