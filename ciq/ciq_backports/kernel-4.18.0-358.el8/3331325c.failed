PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Heiner Kallweit <hkallweit1@gmail.com>
commit 3331325c6347492dfbe31f6b2bfdaee9b0689cd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/3331325c.failed

Use new function pci_read_vpd_any() to simplify the code.

[bhelgaas: squash in fix for stack overflow reported & tested by
Qian [1] and Kunihiko [2]:
[1] https://lore.kernel.org/netdev/e89087c5-c495-c5ca-feb1-54cf3a8775c5@quicinc.com/
[2] https://lore.kernel.org/r/2f7e3770-ab47-42b5-719c-f7c661c07d28@socionext.com
Link: https://lore.kernel.org/r/6211be8a-5d10-8f3a-6d33-af695dc35caf@gmail.com
	Reported-by: Qian Cai <quic_qiancai@quicinc.com>
	Tested-by: Qian Cai <quic_qiancai@quicinc.com>
	Reported-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
	Tested-by: Kunihiko Hayashi <hayashi.kunihiko@socionext.com>
]

Link: https://lore.kernel.org/r/049fa71c-c7af-9c69-51c0-05c1bc2bf660@gmail.com
	Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 3331325c6347492dfbe31f6b2bfdaee9b0689cd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/vpd.c
diff --cc drivers/pci/vpd.c
index 799ce083bd7b,a4fc4d0690fe..000000000000
--- a/drivers/pci/vpd.c
+++ b/drivers/pci/vpd.c
@@@ -63,10 -57,7 +63,14 @@@ static size_t pci_vpd_size(struct pci_d
  	size_t off = 0, size;
  	unsigned char tag, header[1+2];	/* 1 byte tag, 2 bytes length */
  
++<<<<<<< HEAD
 +	/* Otherwise the following reads would fail. */
 +	dev->vpd->len = PCI_VPD_MAX_SIZE;
 +
 +	while (pci_read_vpd(dev, off, 1, header) == 1) {
++=======
+ 	while (pci_read_vpd_any(dev, off, 1, header) == 1) {
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  		size = 0;
  
  		if (off == 0 && (header[0] == 0x00 || header[0] == 0xff))
@@@ -105,6 -96,24 +109,27 @@@ error
  	return off ?: PCI_VPD_SZ_INVALID;
  }
  
++<<<<<<< HEAD
++=======
+ static bool pci_vpd_available(struct pci_dev *dev, bool check_size)
+ {
+ 	struct pci_vpd *vpd = &dev->vpd;
+ 
+ 	if (!vpd->cap)
+ 		return false;
+ 
+ 	if (vpd->len == 0 && check_size) {
+ 		vpd->len = pci_vpd_size(dev);
+ 		if (vpd->len == PCI_VPD_SZ_INVALID) {
+ 			vpd->cap = 0;
+ 			return false;
+ 		}
+ 	}
+ 
+ 	return true;
+ }
+ 
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  /*
   * Wait for last operation to complete.
   * This code has to spin since there is no other notification from the PCI
@@@ -144,30 -153,27 +169,45 @@@ static int pci_vpd_wait(struct pci_dev 
  }
  
  static ssize_t pci_vpd_read(struct pci_dev *dev, loff_t pos, size_t count,
 -			    void *arg, bool check_size)
 +			    void *arg)
  {
++<<<<<<< HEAD
 +	struct pci_vpd *vpd = dev->vpd;
++=======
+ 	struct pci_vpd *vpd = &dev->vpd;
+ 	unsigned int max_len;
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  	int ret = 0;
  	loff_t end = pos + count;
  	u8 *buf = arg;
  
++<<<<<<< HEAD
 +	if (!vpd)
++=======
+ 	if (!pci_vpd_available(dev, check_size))
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  		return -ENODEV;
  
  	if (pos < 0)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (!vpd->len)
 +		vpd->len = pci_vpd_size(dev);
 +
 +	if (vpd->len == PCI_VPD_SZ_INVALID)
 +		return -EIO;
 +
 +	if (pos > vpd->len)
++=======
+ 	max_len = check_size ? vpd->len : PCI_VPD_MAX_SIZE;
+ 
+ 	if (pos >= max_len)
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  		return 0;
  
 -	if (end > max_len) {
 -		end = max_len;
 +	if (end > vpd->len) {
 +		end = vpd->len;
  		count = end - pos;
  	}
  
@@@ -211,26 -217,23 +251,41 @@@
  }
  
  static ssize_t pci_vpd_write(struct pci_dev *dev, loff_t pos, size_t count,
 -			     const void *arg, bool check_size)
 +			     const void *arg)
  {
++<<<<<<< HEAD
 +	struct pci_vpd *vpd = dev->vpd;
++=======
+ 	struct pci_vpd *vpd = &dev->vpd;
+ 	unsigned int max_len;
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  	const u8 *buf = arg;
  	loff_t end = pos + count;
  	int ret = 0;
  
++<<<<<<< HEAD
 +	if (!vpd)
++=======
+ 	if (!pci_vpd_available(dev, check_size))
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  		return -ENODEV;
  
  	if (pos < 0 || (pos & 3) || (count & 3))
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (!vpd->len)
 +		vpd->len = pci_vpd_size(dev);
 +
 +	if (vpd->len == PCI_VPD_SZ_INVALID)
 +		return -EIO;
 +
 +	if (end > vpd->len)
++=======
+ 	max_len = check_size ? vpd->len : PCI_VPD_MAX_SIZE;
+ 
+ 	if (end > max_len)
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  		return -EINVAL;
  
  	if (mutex_lock_killable(&vpd->lock))
@@@ -327,9 -316,10 +382,13 @@@ void *pci_vpd_alloc(struct pci_dev *dev
  	void *buf;
  	int cnt;
  
++<<<<<<< HEAD
 +	if (!dev->vpd.cap)
++=======
+ 	if (!pci_vpd_available(dev, true))
++>>>>>>> 3331325c6347 (PCI/VPD: Use pci_read_vpd_any() in pci_vpd_size())
  		return ERR_PTR(-ENODEV);
  
 -	len = dev->vpd.len;
  	buf = kmalloc(len, GFP_KERNEL);
  	if (!buf)
  		return ERR_PTR(-ENOMEM);
* Unmerged path drivers/pci/vpd.c
