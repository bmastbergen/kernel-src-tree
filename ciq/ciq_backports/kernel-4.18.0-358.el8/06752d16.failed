Bluetooth: Check inquiry status before sending one

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Archie Pusaka <apusaka@chromium.org>
commit 06752d1678b49ac471f11950ebd6d29541828bba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/06752d16.failed

There is a possibility where HCI_INQUIRY flag is set but we still
send HCI_OP_INQUIRY anyway.

Such a case can be reproduced by connecting to an LE device while
active scanning. When the device is discovered, we initiate a
connection, stop LE Scan, and send Discovery MGMT with status
disabled, but we don't cancel the inquiry.

	Signed-off-by: Archie Pusaka <apusaka@chromium.org>
	Reviewed-by: Sonny Sasaka <sonnysasaka@chromium.org>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 06752d1678b49ac471f11950ebd6d29541828bba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/hci_request.c
diff --cc net/bluetooth/hci_request.c
index 18066218d81e,5b4eb87b19f0..000000000000
--- a/net/bluetooth/hci_request.c
+++ b/net/bluetooth/hci_request.c
@@@ -2774,7 -2950,10 +2774,14 @@@ static int bredr_inquiry(struct hci_req
  	const u8 liac[3] = { 0x00, 0x8b, 0x9e };
  	struct hci_cp_inquiry cp;
  
++<<<<<<< HEAD
 +	BT_DBG("%s", req->hdev->name);
++=======
+ 	if (test_bit(HCI_INQUIRY, &req->hdev->flags))
+ 		return 0;
+ 
+ 	bt_dev_dbg(req->hdev, "");
++>>>>>>> 06752d1678b4 (Bluetooth: Check inquiry status before sending one)
  
  	hci_dev_lock(req->hdev);
  	hci_inquiry_cache_flush(req->hdev);
* Unmerged path net/bluetooth/hci_request.c
