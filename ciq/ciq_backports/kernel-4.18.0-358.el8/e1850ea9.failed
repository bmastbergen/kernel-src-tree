bpf: bpf_fib_lookup return MTU value as output when looked up

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Jesper Dangaard Brouer <brouer@redhat.com>
commit e1850ea9bd9eca3656820b4875967d6f9c11c237
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/e1850ea9.failed

The BPF-helpers for FIB lookup (bpf_xdp_fib_lookup and bpf_skb_fib_lookup)
can perform MTU check and return BPF_FIB_LKUP_RET_FRAG_NEEDED. The BPF-prog
don't know the MTU value that caused this rejection.

If the BPF-prog wants to implement PMTU (Path MTU Discovery) (rfc1191) it
need to know this MTU value for the ICMP packet.

Patch change lookup and result struct bpf_fib_lookup, to contain this MTU
value as output via a union with 'tot_len' as this is the value used for
the MTU lookup.

V5:
 - Fixed uninit value spotted by Dan Carpenter.
 - Name struct output member mtu_result

	Reported-by: kernel test robot <lkp@intel.com>
	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/161287789952.790810.13134700381067698781.stgit@firesoul
(cherry picked from commit e1850ea9bd9eca3656820b4875967d6f9c11c237)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/filter.c
diff --cc net/core/filter.c
index 1cf9dcc60d9d,e7a9b1667dd6..000000000000
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@@ -5327,10 -5323,9 +5329,10 @@@ static int bpf_ipv4_fib_lookup(struct n
  	struct neighbour *neigh;
  	struct net_device *dev;
  	struct fib_result res;
 +	struct fib_nh *nh;
  	struct flowi4 fl4;
+ 	u32 mtu = 0;
  	int err;
- 	u32 mtu;
  
  	dev = dev_get_by_index_rcu(net, params->ifindex);
  	if (unlikely(!dev))
@@@ -5396,19 -5392,19 +5398,21 @@@
  
  	if (check_mtu) {
  		mtu = ip_mtu_from_fib_result(&res, params->ipv4_dst);
- 		if (params->tot_len > mtu)
+ 		if (params->tot_len > mtu) {
+ 			params->mtu_result = mtu; /* union with tot_len */
  			return BPF_FIB_LKUP_RET_FRAG_NEEDED;
+ 		}
  	}
  
 -	nhc = res.nhc;
 +	nh = &res.fi->fib_nh[res.nh_sel];
  
  	/* do not handle lwt encaps right now */
 -	if (nhc->nhc_lwtstate)
 +	if (nh->nh_lwtstate)
  		return BPF_FIB_LKUP_RET_UNSUPP_LWT;
  
 -	dev = nhc->nhc_dev;
 +	dev = nh->nh_dev;
 +	if (nh->nh_gw)
 +		params->ipv4_dst = nh->nh_gw;
  
  	params->rt_metric = res.fi->fib_priority;
  	params->ifindex = dev->ifindex;
@@@ -5433,11 -5442,11 +5437,16 @@@ static int bpf_ipv6_fib_lookup(struct n
  	struct neighbour *neigh;
  	struct net_device *dev;
  	struct inet6_dev *idev;
 +	struct fib6_info *f6i;
  	struct flowi6 fl6;
  	int strict = 0;
++<<<<<<< HEAD
 +	int oif;
 +	u32 mtu;
++=======
+ 	int oif, err;
+ 	u32 mtu = 0;
++>>>>>>> e1850ea9bd9e (bpf: bpf_fib_lookup return MTU value as output when looked up)
  
  	/* link local addresses are never forwarded */
  	if (rt6_need_strict(dst) || rt6_need_strict(src))
@@@ -5485,47 -5495,46 +5494,54 @@@
  		fl6.flowi6_tun_key.tun_id = 0;
  		fl6.flowi6_uid = sock_net_uid(net, NULL);
  
 -		err = ipv6_stub->fib6_lookup(net, oif, &fl6, &res, strict);
 +		f6i = ipv6_stub->fib6_lookup(net, oif, &fl6, strict);
  	}
  
 -	if (unlikely(err || IS_ERR_OR_NULL(res.f6i) ||
 -		     res.f6i == net->ipv6.fib6_null_entry))
 +	if (unlikely(IS_ERR_OR_NULL(f6i) || f6i == net->ipv6.fib6_null_entry))
  		return BPF_FIB_LKUP_RET_NOT_FWDED;
  
 -	switch (res.fib6_type) {
 -	/* only unicast is forwarded */
 -	case RTN_UNICAST:
 -		break;
 -	case RTN_BLACKHOLE:
 -		return BPF_FIB_LKUP_RET_BLACKHOLE;
 -	case RTN_UNREACHABLE:
 -		return BPF_FIB_LKUP_RET_UNREACHABLE;
 -	case RTN_PROHIBIT:
 -		return BPF_FIB_LKUP_RET_PROHIBIT;
 -	default:
 -		return BPF_FIB_LKUP_RET_NOT_FWDED;
 +	if (unlikely(f6i->fib6_flags & RTF_REJECT)) {
 +		switch (f6i->fib6_type) {
 +		case RTN_BLACKHOLE:
 +			return BPF_FIB_LKUP_RET_BLACKHOLE;
 +		case RTN_UNREACHABLE:
 +			return BPF_FIB_LKUP_RET_UNREACHABLE;
 +		case RTN_PROHIBIT:
 +			return BPF_FIB_LKUP_RET_PROHIBIT;
 +		default:
 +			return BPF_FIB_LKUP_RET_NOT_FWDED;
 +		}
  	}
  
 -	ipv6_stub->fib6_select_path(net, &res, &fl6, fl6.flowi6_oif,
 -				    fl6.flowi6_oif != 0, NULL, strict);
 +	if (f6i->fib6_type != RTN_UNICAST)
 +		return BPF_FIB_LKUP_RET_NOT_FWDED;
 +
 +	if (f6i->fib6_nsiblings && fl6.flowi6_oif == 0)
 +		f6i = ipv6_stub->fib6_multipath_select(net, f6i, &fl6,
 +						       fl6.flowi6_oif, NULL,
 +						       strict);
  
  	if (check_mtu) {
++<<<<<<< HEAD
 +		mtu = ipv6_stub->ip6_mtu_from_fib6(f6i, dst, src);
 +		if (params->tot_len > mtu)
++=======
+ 		mtu = ipv6_stub->ip6_mtu_from_fib6(&res, dst, src);
+ 		if (params->tot_len > mtu) {
+ 			params->mtu_result = mtu; /* union with tot_len */
++>>>>>>> e1850ea9bd9e (bpf: bpf_fib_lookup return MTU value as output when looked up)
  			return BPF_FIB_LKUP_RET_FRAG_NEEDED;
+ 		}
  	}
  
 -	if (res.nh->fib_nh_lws)
 +	if (f6i->fib6_nh.nh_lwtstate)
  		return BPF_FIB_LKUP_RET_UNSUPP_LWT;
  
 -	if (res.nh->fib_nh_gw_family)
 -		*dst = res.nh->fib_nh_gw6;
 +	if (f6i->fib6_flags & RTF_GATEWAY)
 +		*dst = f6i->fib6_nh.nh_gw;
  
 -	dev = res.nh->fib_nh_dev;
 -	params->rt_metric = res.f6i->fib6_metric;
 +	dev = f6i->fib6_nh.nh_dev;
 +	params->rt_metric = f6i->fib6_metric;
  	params->ifindex = dev->ifindex;
  
  	/* xdp and cls_bpf programs are run in RCU-bh so rcu_read_lock_bh is
diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index be0efddd1395..9a44ec02b335 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -2259,6 +2259,9 @@ union bpf_attr {
  *		* > 0 one of **BPF_FIB_LKUP_RET_** codes explaining why the
  *		  packet is not forwarded or needs assist from full stack
  *
+ *		If lookup fails with BPF_FIB_LKUP_RET_FRAG_NEEDED, then the MTU
+ *		was exceeded and output params->mtu_result contains the MTU.
+ *
  * long bpf_sock_hash_update(struct bpf_sock_ops *skops, struct bpf_map *map, void *key, u64 flags)
  *	Description
  *		Add an entry to, or update a sockhash *map* referencing sockets.
@@ -5009,9 +5012,13 @@ struct bpf_fib_lookup {
 	__be16	sport;
 	__be16	dport;
 
-	/* total length of packet from network header - used for MTU check */
-	__u16	tot_len;
+	union {	/* used for MTU check */
+		/* input to lookup */
+		__u16	tot_len; /* L3 length from network hdr (iph->tot_len) */
 
+		/* output: MTU value */
+		__u16	mtu_result;
+	};
 	/* input: L3 device index for lookup
 	 * output: device index from FIB lookup
 	 */
* Unmerged path net/core/filter.c
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 93fcb41a3d59..399788d2c8da 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -2239,6 +2239,9 @@ union bpf_attr {
  *		* > 0 one of **BPF_FIB_LKUP_RET_** codes explaining why the
  *		  packet is not forwarded or needs assist from full stack
  *
+ *		If lookup fails with BPF_FIB_LKUP_RET_FRAG_NEEDED, then the MTU
+ *		was exceeded and output params->mtu_result contains the MTU.
+ *
  * long bpf_sock_hash_update(struct bpf_sock_ops *skops, struct bpf_map *map, void *key, u64 flags)
  *	Description
  *		Add an entry to, or update a sockhash *map* referencing sockets.
@@ -4989,9 +4992,13 @@ struct bpf_fib_lookup {
 	__be16	sport;
 	__be16	dport;
 
-	/* total length of packet from network header - used for MTU check */
-	__u16	tot_len;
+	union {	/* used for MTU check */
+		/* input to lookup */
+		__u16	tot_len; /* L3 length from network hdr (iph->tot_len) */
 
+		/* output: MTU value */
+		__u16	mtu_result;
+	};
 	/* input: L3 device index for lookup
 	 * output: device index from FIB lookup
 	 */
