bridge: mrp: Fix the usage of br_mrp_port_switchdev_set_state

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Horatiu Vultur <horatiu.vultur@microchip.com>
commit b2bdba1cbc84cadb14393d0101a5bfd38d342e0a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/b2bdba1c.failed

The function br_mrp_port_switchdev_set_state was called both with MRP
port state and STP port state, which is an issue because they don't
match exactly.

Therefore, update the function to be used only with STP port state and
use the id SWITCHDEV_ATTR_ID_PORT_STP_STATE.

The choice of using STP over MRP is that the drivers already implement
SWITCHDEV_ATTR_ID_PORT_STP_STATE and already in SW we update the port
STP state.

Fixes: 9a9f26e8f7ea30 ("bridge: mrp: Connect MRP API with the switchdev API")
Fixes: fadd409136f0f2 ("bridge: switchdev: mrp: Implement MRP API for switchdev")
Fixes: 2f1a11ae11d222 ("bridge: mrp: Add MRP interface.")
	Reported-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
	Signed-off-by: Horatiu Vultur <horatiu.vultur@microchip.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b2bdba1cbc84cadb14393d0101a5bfd38d342e0a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_private_mrp.h
diff --cc net/bridge/br_private_mrp.h
index ab744ac18d94,2514954c1431..000000000000
--- a/net/bridge/br_private_mrp.h
+++ b/net/bridge/br_private_mrp.h
@@@ -51,9 -70,9 +51,15 @@@ int br_mrp_switchdev_set_ring_role(stru
  int br_mrp_switchdev_set_ring_state(struct net_bridge *br, struct br_mrp *mrp,
  				    enum br_mrp_ring_state_type state);
  int br_mrp_switchdev_send_ring_test(struct net_bridge *br, struct br_mrp *mrp,
++<<<<<<< HEAD
 +				    u32 interval, u8 max_miss, u32 period);
 +int br_mrp_port_switchdev_set_state(struct net_bridge_port *p,
 +				    enum br_mrp_port_state_type state);
++=======
+ 				    u32 interval, u8 max_miss, u32 period,
+ 				    bool monitor);
+ int br_mrp_port_switchdev_set_state(struct net_bridge_port *p, u32 state);
++>>>>>>> b2bdba1cbc84 (bridge: mrp: Fix the usage of br_mrp_port_switchdev_set_state)
  int br_mrp_port_switchdev_set_role(struct net_bridge_port *p,
  				   enum br_mrp_port_role_type role);
  int br_mrp_switchdev_set_in_role(struct net_bridge *br, struct br_mrp *mrp,
diff --git a/net/bridge/br_mrp.c b/net/bridge/br_mrp.c
index d673550412b4..53aef581bbe2 100644
--- a/net/bridge/br_mrp.c
+++ b/net/bridge/br_mrp.c
@@ -355,19 +355,22 @@ int br_mrp_del(struct net_bridge *br, struct br_mrp_instance *instance)
 int br_mrp_set_port_state(struct net_bridge_port *p,
 			  enum br_mrp_port_state_type state)
 {
+	u32 port_state;
+
 	if (!p || !(p->flags & BR_MRP_AWARE))
 		return -EINVAL;
 
 	spin_lock_bh(&p->br->lock);
 
 	if (state == BR_MRP_PORT_STATE_FORWARDING)
-		p->state = BR_STATE_FORWARDING;
+		port_state = BR_STATE_FORWARDING;
 	else
-		p->state = BR_STATE_BLOCKING;
+		port_state = BR_STATE_BLOCKING;
 
+	p->state = port_state;
 	spin_unlock_bh(&p->br->lock);
 
-	br_mrp_port_switchdev_set_state(p, state);
+	br_mrp_port_switchdev_set_state(p, port_state);
 
 	return 0;
 }
diff --git a/net/bridge/br_mrp_switchdev.c b/net/bridge/br_mrp_switchdev.c
index 99d532ab6efa..9187da87e99b 100644
--- a/net/bridge/br_mrp_switchdev.c
+++ b/net/bridge/br_mrp_switchdev.c
@@ -166,13 +166,12 @@ int br_mrp_switchdev_send_in_test(struct net_bridge *br, struct br_mrp *mrp,
 	return err;
 }
 
-int br_mrp_port_switchdev_set_state(struct net_bridge_port *p,
-				    enum br_mrp_port_state_type state)
+int br_mrp_port_switchdev_set_state(struct net_bridge_port *p, u32 state)
 {
 	struct switchdev_attr attr = {
 		.orig_dev = p->dev,
-		.id = SWITCHDEV_ATTR_ID_MRP_PORT_STATE,
-		.u.mrp_port_state = state,
+		.id = SWITCHDEV_ATTR_ID_PORT_STP_STATE,
+		.u.stp_state = state,
 	};
 	int err;
 
* Unmerged path net/bridge/br_private_mrp.h
