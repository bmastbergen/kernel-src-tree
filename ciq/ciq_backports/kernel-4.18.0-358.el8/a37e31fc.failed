firmware: smccc: Introduce SMCCC TRNG framework

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Andre Przywara <andre.przywara@arm.com>
commit a37e31fc97efe7f7c68cb381cf4390e472c09061
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a37e31fc.failed

The ARM DEN0098 document describe an SMCCC based firmware service to
deliver hardware generated random numbers. Its existence is advertised
according to the SMCCC v1.1 specification.

Add a (dummy) call to probe functions implemented in each architecture
(ARM and arm64), to determine the existence of this interface.
For now this return false, but this will be overwritten by each
architecture's support patch.

	Signed-off-by: Andre Przywara <andre.przywara@arm.com>
	Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
	Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit a37e31fc97efe7f7c68cb381cf4390e472c09061)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/smccc/smccc.c
* Unmerged path drivers/firmware/smccc/smccc.c
diff --git a/arch/arm/include/asm/archrandom.h b/arch/arm/include/asm/archrandom.h
new file mode 100644
index 000000000000..a8e84ca5c2ee
--- /dev/null
+++ b/arch/arm/include/asm/archrandom.h
@@ -0,0 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_ARCHRANDOM_H
+#define _ASM_ARCHRANDOM_H
+
+static inline bool __init smccc_probe_trng(void)
+{
+	return false;
+}
+
+#endif /* _ASM_ARCHRANDOM_H */
diff --git a/arch/arm64/include/asm/archrandom.h b/arch/arm64/include/asm/archrandom.h
index 5ea5a1ce5a5f..49caf27de7ee 100644
--- a/arch/arm64/include/asm/archrandom.h
+++ b/arch/arm64/include/asm/archrandom.h
@@ -7,6 +7,11 @@
 #include <linux/random.h>
 #include <asm/cpufeature.h>
 
+static inline bool __init smccc_probe_trng(void)
+{
+	return false;
+}
+
 static inline bool __arm64_rndr(unsigned long *v)
 {
 	bool ok;
@@ -63,5 +68,12 @@ static inline bool __must_check arch_get_random_seed_int(unsigned int *v)
 
 static inline bool __arm64_rndr(unsigned long *v) { return false; }
 
+#else /* !CONFIG_ARCH_RANDOM */
+
+static inline bool __init smccc_probe_trng(void)
+{
+	return false;
+}
+
 #endif /* CONFIG_ARCH_RANDOM */
 #endif /* _ASM_ARCHRANDOM_H */
* Unmerged path drivers/firmware/smccc/smccc.c
