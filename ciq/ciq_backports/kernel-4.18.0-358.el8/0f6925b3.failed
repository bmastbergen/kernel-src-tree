virtio_net: Do not pull payload in skb->head

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 0f6925b3e8da0dbbb52447ca8a8b42b371aac7db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/0f6925b3.failed

Xuan Zhuo reported that commit 3226b158e67c ("net: avoid 32 x truesize
under-estimation for tiny skbs") brought  a ~10% performance drop.

The reason for the performance drop was that GRO was forced
to chain sk_buff (using skb_shinfo(skb)->frag_list), which
uses more memory but also cause packet consumers to go over
a lot of overhead handling all the tiny skbs.

It turns out that virtio_net page_to_skb() has a wrong strategy :
It allocates skbs with GOOD_COPY_LEN (128) bytes in skb->head, then
copies 128 bytes from the page, before feeding the packet to GRO stack.

This was suboptimal before commit 3226b158e67c ("net: avoid 32 x truesize
under-estimation for tiny skbs") because GRO was using 2 frags per MSS,
meaning we were not packing MSS with 100% efficiency.

Fix is to pull only the ethernet header in page_to_skb()

Then, we change virtio_net_hdr_to_skb() to pull the missing
headers, instead of assuming they were already pulled by callers.

This fixes the performance regression, but could also allow virtio_net
to accept packets with more than 128bytes of headers.

Many thanks to Xuan Zhuo for his report, and his tests/help.

Fixes: 3226b158e67c ("net: avoid 32 x truesize under-estimation for tiny skbs")
	Reported-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
Link: https://www.spinics.net/lists/netdev/msg731397.html
Co-Developed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
	Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: "Michael S. Tsirkin" <mst@redhat.com>
	Cc: Jason Wang <jasowang@redhat.com>
	Cc: virtualization@lists.linux-foundation.org
	Acked-by: Jason Wang <jasowang@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0f6925b3e8da0dbbb52447ca8a8b42b371aac7db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/virtio_net.h
diff --cc include/linux/virtio_net.h
index acf273692515,b465f8f3e554..000000000000
--- a/include/linux/virtio_net.h
+++ b/include/linux/virtio_net.h
@@@ -59,6 -74,10 +63,13 @@@ static inline int virtio_net_hdr_to_skb
  
  		if (!skb_partial_csum_set(skb, start, off))
  			return -EINVAL;
++<<<<<<< HEAD
++=======
+ 
+ 		p_off = skb_transport_offset(skb) + thlen;
+ 		if (!pskb_may_pull(skb, p_off))
+ 			return -EINVAL;
++>>>>>>> 0f6925b3e8da (virtio_net: Do not pull payload in skb->head)
  	} else {
  		/* gso packets without NEEDS_CSUM do not set transport_offset.
  		 * probe and drop if does not match one of the above types.
@@@ -82,6 -104,17 +93,20 @@@ retry
  				}
  				return -EINVAL;
  			}
++<<<<<<< HEAD
++=======
+ 
+ 			p_off = keys.control.thoff + thlen;
+ 			if (!pskb_may_pull(skb, p_off) ||
+ 			    keys.basic.ip_proto != ip_proto)
+ 				return -EINVAL;
+ 
+ 			skb_set_transport_header(skb, keys.control.thoff);
+ 		} else if (gso_type) {
+ 			p_off = thlen;
+ 			if (!pskb_may_pull(skb, p_off))
+ 				return -EINVAL;
++>>>>>>> 0f6925b3e8da (virtio_net: Do not pull payload in skb->head)
  		}
  	}
  
diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 20814dd573ad..31b5dcca1c93 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -413,9 +413,13 @@ static struct sk_buff *page_to_skb(struct virtnet_info *vi,
 	offset += hdr_padded_len;
 	p += hdr_padded_len;
 
-	copy = len;
-	if (copy > skb_tailroom(skb))
-		copy = skb_tailroom(skb);
+	/* Copy all frame if it fits skb->head, otherwise
+	 * we let virtio_net_hdr_to_skb() and GRO pull headers as needed.
+	 */
+	if (len <= skb_tailroom(skb))
+		copy = len;
+	else
+		copy = ETH_HLEN + metasize;
 	skb_put_data(skb, p, copy);
 
 	if (metasize) {
* Unmerged path include/linux/virtio_net.h
