mm/page_isolation: guard against possible putback unisolated page

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Miaohe Lin <linmiaohe@huawei.com>
commit a500cb342c84a4c4696850304124bc801331c4a8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a500cb34.failed

Isolating a free page in an isolated pageblock is expected to always
work as watermarks don't apply here.

But if __isolate_free_page() failed, due to condition changes, the page
will be left on the free list.  And the page will be put back to free
list again via __putback_isolated_page().  This may trigger
VM_BUG_ON_PAGE() on page->flags checking in __free_one_page() if
PageReported is set.  Or we will corrupt the free list because
list_add() will be called for pages already on another list.

Add a VM_WARN_ON() to complain about this change.

Link: https://lkml.kernel.org/r/20210914114508.23725-1-linmiaohe@huawei.com
Fixes: 3c605096d315 ("mm/page_alloc: restrict max order of merging on isolated pageblock")
	Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: John Hubbard <jhubbard@nvidia.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a500cb342c84a4c4696850304124bc801331c4a8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_isolation.c
diff --cc mm/page_isolation.c
index ac8e2fd48d76,f67c4c70f17f..000000000000
--- a/mm/page_isolation.c
+++ b/mm/page_isolation.c
@@@ -93,10 -93,14 +93,21 @@@ static void unset_migratetype_isolate(s
  			buddy_pfn = __find_buddy_pfn(pfn, order);
  			buddy = page + (buddy_pfn - pfn);
  
++<<<<<<< HEAD
 +			if (pfn_valid_within(buddy_pfn) &&
 +			    !is_migrate_isolate_page(buddy)) {
 +				__isolate_free_page(page, order);
 +				isolated_page = true;
++=======
+ 			if (!is_migrate_isolate_page(buddy)) {
+ 				isolated_page = !!__isolate_free_page(page, order);
+ 				/*
+ 				 * Isolating a free page in an isolated pageblock
+ 				 * is expected to always work as watermarks don't
+ 				 * apply here.
+ 				 */
+ 				VM_WARN_ON(!isolated_page);
++>>>>>>> a500cb342c84 (mm/page_isolation: guard against possible putback unisolated page)
  			}
  		}
  	}
* Unmerged path mm/page_isolation.c
