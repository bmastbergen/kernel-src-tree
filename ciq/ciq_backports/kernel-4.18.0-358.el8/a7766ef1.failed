virtio_net: disable cb aggressively

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Michael S. Tsirkin <mst@redhat.com>
commit a7766ef18b33674fa164e2e2916cef16d4e17f43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a7766ef1.failed

There are currently two cases where we poll TX vq not in response to a
callback: start xmit and rx napi.  We currently do this with callbacks
enabled which can cause extra interrupts from the card.  Used not to be
a big issue as we run with interrupts disabled but that is no longer the
case, and in some cases the rate of spurious interrupts is so high
linux detects this and actually kills the interrupt.

Fix up by disabling the callbacks before polling the tx vq.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit a7766ef18b33674fa164e2e2916cef16d4e17f43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/virtio_net.c
diff --cc drivers/net/virtio_net.c
index 20814dd573ad,8a58a2f013af..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -1418,12 -1516,16 +1418,23 @@@ static void virtnet_poll_cleantx(struc
  		return;
  
  	if (__netif_tx_trylock(txq)) {
++<<<<<<< HEAD
 +		free_old_xmit_skbs(sq);
++=======
+ 		do {
+ 			virtqueue_disable_cb(sq->vq);
+ 			free_old_xmit_skbs(sq, true);
+ 		} while (unlikely(!virtqueue_enable_cb_delayed(sq->vq)));
+ 
+ 		if (sq->vq->num_free >= 2 + MAX_SKB_FRAGS)
+ 			netif_tx_wake_queue(txq);
+ 
++>>>>>>> a7766ef18b33 (virtio_net: disable cb aggressively)
  		__netif_tx_unlock(txq);
  	}
 +
 +	if (sq->vq->num_free >= 2 + MAX_SKB_FRAGS)
 +		netif_tx_wake_queue(txq);
  }
  
  static int virtnet_poll(struct napi_struct *napi, int budget)
@@@ -1571,10 -1694,14 +1582,18 @@@ static netdev_tx_t start_xmit(struct sk
  	bool use_napi = sq->napi.weight;
  
  	/* Free up any pending old buffers before queueing new ones. */
++<<<<<<< HEAD
 +	free_old_xmit_skbs(sq);
++=======
+ 	do {
+ 		if (use_napi)
+ 			virtqueue_disable_cb(sq->vq);
++>>>>>>> a7766ef18b33 (virtio_net: disable cb aggressively)
+ 
+ 		free_old_xmit_skbs(sq, false);
  
- 	if (use_napi && kick)
- 		virtqueue_enable_cb_delayed(sq->vq);
+ 	} while (use_napi && kick &&
+ 	       unlikely(!virtqueue_enable_cb_delayed(sq->vq)));
  
  	/* timestamp packet in software */
  	skb_tx_timestamp(skb);
* Unmerged path drivers/net/virtio_net.c
