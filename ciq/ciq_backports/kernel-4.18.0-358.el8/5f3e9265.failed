ima: Fail rule parsing when appraise_flag=blacklist is unsupportable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Tyler Hicks <tyhicks@linux.microsoft.com>
commit 5f3e92657bbfb63ad3109433d843c89996114b03
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/5f3e9265.failed

Verifying that a file hash is not blacklisted is currently only
supported for files with appended signatures (modsig).  In the future,
this might change.

For now, the "appraise_flag" option is only appropriate for appraise
actions and its "blacklist" value is only appropriate when
CONFIG_IMA_APPRAISE_MODSIG is enabled and "appraise_flag=blacklist" is
only appropriate when "appraise_type=imasig|modsig" is also present.
Make this clear at policy load so that IMA policy authors don't assume
that other uses of "appraise_flag=blacklist" are supported.

Fixes: 273df864cf74 ("ima: Check against blacklisted hashes for files with modsig")
	Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
Reivewed-by: Nayna Jain <nayna@linux.ibm.com>
	Tested-by: Nayna Jain <nayna@linux.ibm.com>
	Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
(cherry picked from commit 5f3e92657bbfb63ad3109433d843c89996114b03)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/integrity/ima/ima_policy.c
diff --cc security/integrity/ima/ima_policy.c
index 77c1e3c92616,cf3ddb38dfa8..000000000000
--- a/security/integrity/ima/ima_policy.c
+++ b/security/integrity/ima/ima_policy.c
@@@ -811,6 -984,65 +811,68 @@@ static void check_template_modsig(cons
  #undef MSG
  }
  
++<<<<<<< HEAD
++=======
+ static bool ima_validate_rule(struct ima_rule_entry *entry)
+ {
+ 	/* Ensure that the action is set */
+ 	if (entry->action == UNKNOWN)
+ 		return false;
+ 
+ 	/*
+ 	 * Ensure that the hook function is compatible with the other
+ 	 * components of the rule
+ 	 */
+ 	switch (entry->func) {
+ 	case NONE:
+ 	case FILE_CHECK:
+ 	case MMAP_CHECK:
+ 	case BPRM_CHECK:
+ 	case CREDS_CHECK:
+ 	case POST_SETATTR:
+ 	case MODULE_CHECK:
+ 	case FIRMWARE_CHECK:
+ 	case KEXEC_KERNEL_CHECK:
+ 	case KEXEC_INITRAMFS_CHECK:
+ 	case POLICY_CHECK:
+ 		/* Validation of these hook functions is in ima_parse_rule() */
+ 		break;
+ 	case KEXEC_CMDLINE:
+ 		if (entry->action & ~(MEASURE | DONT_MEASURE))
+ 			return false;
+ 
+ 		if (entry->flags & ~(IMA_FUNC | IMA_PCR))
+ 			return false;
+ 
+ 		if (ima_rule_contains_lsm_cond(entry))
+ 			return false;
+ 
+ 		break;
+ 	case KEY_CHECK:
+ 		if (entry->action & ~(MEASURE | DONT_MEASURE))
+ 			return false;
+ 
+ 		if (entry->flags & ~(IMA_FUNC | IMA_UID | IMA_PCR |
+ 				     IMA_KEYRINGS))
+ 			return false;
+ 
+ 		if (ima_rule_contains_lsm_cond(entry))
+ 			return false;
+ 
+ 		break;
+ 	default:
+ 		return false;
+ 	}
+ 
+ 	/* Ensure that combinations of flags are compatible with each other */
+ 	if (entry->flags & IMA_CHECK_BLACKLIST &&
+ 	    !(entry->flags & IMA_MODSIG_ALLOWED))
+ 		return false;
+ 
+ 	return true;
+ }
+ 
++>>>>>>> 5f3e92657bbf (ima: Fail rule parsing when appraise_flag=blacklist is unsupportable)
  static int ima_parse_rule(char *rule, struct ima_rule_entry *entry)
  {
  	struct audit_buffer *ab;
* Unmerged path security/integrity/ima/ima_policy.c
