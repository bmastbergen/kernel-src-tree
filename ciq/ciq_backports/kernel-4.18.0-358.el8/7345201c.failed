IB/cm: Improve the calling of cm_init_av_for_lap and cm_init_av_by_path

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Mark Zhang <markzhang@nvidia.com>
commit 7345201c39633fc4c82dae7315da7154efaf2459
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/7345201c.failed

The cm_init_av_for_lap() and cm_init_av_by_path() function calls have the
following issues:

1. Both of them might sleep and should not be called under spinlock.
2. The access of cm_id_priv->av should be under cm_id_priv->lock, which
   means it can't be initialized directly.

This patch splits the calling of 2 functions into two parts: first one
initializes an AV outside of the spinlock, the second one copies AV to
cm_id_priv->av under spinlock.

Fixes: e1444b5a163e ("IB/cm: Fix automatic path migration support")
Link: https://lore.kernel.org/r/038fb8ad932869b4548b0c7708cab7f76af06f18.1622629024.git.leonro@nvidia.com
	Signed-off-by: Mark Zhang <markzhang@nvidia.com>
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 7345201c39633fc4c82dae7315da7154efaf2459)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cm.c
diff --cc drivers/infiniband/core/cm.c
index 1e3f002ae60c,2e4658795e8e..000000000000
--- a/drivers/infiniband/core/cm.c
+++ b/drivers/infiniband/core/cm.c
@@@ -1566,15 -1496,16 +1562,27 @@@ int ib_send_cm_req(struct ib_cm_id *cm_
  	}
  
  	ret = cm_init_av_by_path(param->primary_path,
++<<<<<<< HEAD
 +				 param->ppath_sgid_attr, &cm_id_priv->av,
 +				 cm_id_priv);
++=======
+ 				 param->ppath_sgid_attr, &av);
++>>>>>>> 7345201c3963 (IB/cm: Improve the calling of cm_init_av_for_lap and cm_init_av_by_path)
  	if (ret)
- 		goto out;
+ 		return ret;
  	if (param->alternate_path) {
  		ret = cm_init_av_by_path(param->alternate_path, NULL,
++<<<<<<< HEAD
 +					 &cm_id_priv->alt_av, cm_id_priv);
 +		if (ret)
 +			goto out;
++=======
+ 					 &alt_av);
+ 		if (ret) {
+ 			cm_destroy_av(&av);
+ 			return ret;
+ 		}
++>>>>>>> 7345201c3963 (IB/cm: Improve the calling of cm_init_av_for_lap and cm_init_av_by_path)
  	}
  	cm_id->service_id = param->service_id;
  	cm_id->service_mask = ~cpu_to_be64(0);
@@@ -3394,17 -3348,6 +3426,20 @@@ static int cm_lap_handler(struct cm_wor
  		goto unlock;
  	}
  
++<<<<<<< HEAD
 +	ret = cm_init_av_for_lap(work->port, work->mad_recv_wc->wc,
 +				 work->mad_recv_wc->recv_buf.grh,
 +				 &cm_id_priv->av);
 +	if (ret)
 +		goto unlock;
 +
 +	ret = cm_init_av_by_path(param->alternate_path, NULL,
 +				 &cm_id_priv->alt_av, cm_id_priv);
 +	if (ret)
 +		goto unlock;
 +
++=======
++>>>>>>> 7345201c3963 (IB/cm: Improve the calling of cm_init_av_for_lap and cm_init_av_by_path)
  	cm_id_priv->id.lap_state = IB_CM_LAP_RCVD;
  	cm_id_priv->tid = lap_msg->hdr.tid;
  	cm_queue_work_unlock(cm_id_priv, work);
@@@ -3519,9 -3463,7 +3555,13 @@@ int ib_send_cm_sidr_req(struct ib_cm_i
  		return -EINVAL;
  
  	cm_id_priv = container_of(cm_id, struct cm_id_private, id);
++<<<<<<< HEAD
 +	ret = cm_init_av_by_path(param->path, param->sgid_attr,
 +				 &cm_id_priv->av,
 +				 cm_id_priv);
++=======
+ 	ret = cm_init_av_by_path(param->path, param->sgid_attr, &av);
++>>>>>>> 7345201c3963 (IB/cm: Improve the calling of cm_init_av_for_lap and cm_init_av_by_path)
  	if (ret)
  		return ret;
  
* Unmerged path drivers/infiniband/core/cm.c
