arm64: Add support for SMCCC TRNG entropy source

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Andre Przywara <andre.przywara@arm.com>
commit 38db987316a38a3fe55ff7f5f4653fcb520a9d26
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/38db9873.failed

The ARM architected TRNG firmware interface, described in ARM spec
DEN0098, defines an ARM SMCCC based interface to a true random number
generator, provided by firmware.
This can be discovered via the SMCCC >=v1.1 interface, and provides
up to 192 bits of entropy per call.

Hook this SMC call into arm64's arch_get_random_*() implementation,
coming to the rescue when the CPU does not implement the ARM v8.5 RNG
system registers.

For the detection, we piggy back on the PSCI/SMCCC discovery (which gives
us the conduit to use (hvc/smc)), then try to call the
ARM_SMCCC_TRNG_VERSION function, which returns -1 if this interface is
not implemented.

	Reviewed-by: Mark Brown <broonie@kernel.org>
	Signed-off-by: Andre Przywara <andre.przywara@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 38db987316a38a3fe55ff7f5f4653fcb520a9d26)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/archrandom.h
diff --cc arch/arm64/include/asm/archrandom.h
index 5ea5a1ce5a5f,09e43272ccb0..000000000000
--- a/arch/arm64/include/asm/archrandom.h
+++ b/arch/arm64/include/asm/archrandom.h
@@@ -4,9 -4,26 +4,32 @@@
  
  #ifdef CONFIG_ARCH_RANDOM
  
++<<<<<<< HEAD
 +#include <linux/random.h>
 +#include <asm/cpufeature.h>
 +
++=======
+ #include <linux/arm-smccc.h>
+ #include <linux/bug.h>
+ #include <linux/kernel.h>
+ #include <asm/cpufeature.h>
+ 
+ #define ARM_SMCCC_TRNG_MIN_VERSION	0x10000UL
+ 
+ extern bool smccc_trng_available;
+ 
+ static inline bool __init smccc_probe_trng(void)
+ {
+ 	struct arm_smccc_res res;
+ 
+ 	arm_smccc_1_1_invoke(ARM_SMCCC_TRNG_VERSION, &res);
+ 	if ((s32)res.a0 < 0)
+ 		return false;
+ 
+ 	return res.a0 >= ARM_SMCCC_TRNG_MIN_VERSION;
+ }
+ 
++>>>>>>> 38db987316a3 (arm64: Add support for SMCCC TRNG entropy source)
  static inline bool __arm64_rndr(unsigned long *v)
  {
  	bool ok;
@@@ -43,25 -76,70 +82,69 @@@ static inline bool __must_check arch_ge
  	 * cpufeature code and with potential scheduling between CPUs
  	 * with and without the feature.
  	 */
- 	if (!cpus_have_const_cap(ARM64_HAS_RNG))
- 		return false;
+ 	if (cpus_have_const_cap(ARM64_HAS_RNG) && __arm64_rndr(v))
+ 		return true;
  
- 	return __arm64_rndr(v);
+ 	return false;
  }
  
- 
  static inline bool __must_check arch_get_random_seed_int(unsigned int *v)
  {
+ 	struct arm_smccc_res res;
  	unsigned long val;
- 	bool ok = arch_get_random_seed_long(&val);
  
- 	*v = val;
- 	return ok;
+ 	if (smccc_trng_available) {
+ 		arm_smccc_1_1_invoke(ARM_SMCCC_TRNG_RND64, 32, &res);
+ 		if ((int)res.a0 >= 0) {
+ 			*v = res.a3 & GENMASK(31, 0);
+ 			return true;
+ 		}
+ 	}
+ 
+ 	if (cpus_have_const_cap(ARM64_HAS_RNG)) {
+ 		if (__arm64_rndr(&val)) {
+ 			*v = val;
+ 			return true;
+ 		}
+ 	}
+ 
+ 	return false;
  }
  
 -static inline bool __init __early_cpu_has_rndr(void)
 -{
 -	/* Open code as we run prior to the first call to cpufeature. */
 -	unsigned long ftr = read_sysreg_s(SYS_ID_AA64ISAR0_EL1);
 -	return (ftr >> ID_AA64ISAR0_RNDR_SHIFT) & 0xf;
 -}
 +#else
  
++<<<<<<< HEAD
 +static inline bool __arm64_rndr(unsigned long *v) { return false; }
++=======
+ static inline bool __init __must_check
+ arch_get_random_seed_long_early(unsigned long *v)
+ {
+ 	WARN_ON(system_state != SYSTEM_BOOTING);
+ 
+ 	if (smccc_trng_available) {
+ 		struct arm_smccc_res res;
+ 
+ 		arm_smccc_1_1_invoke(ARM_SMCCC_TRNG_RND64, 64, &res);
+ 		if ((int)res.a0 >= 0) {
+ 			*v = res.a3;
+ 			return true;
+ 		}
+ 	}
+ 
+ 	if (__early_cpu_has_rndr() && __arm64_rndr(v))
+ 		return true;
+ 
+ 	return false;
+ }
+ #define arch_get_random_seed_long_early arch_get_random_seed_long_early
+ 
+ #else /* !CONFIG_ARCH_RANDOM */
+ 
+ static inline bool __init smccc_probe_trng(void)
+ {
+ 	return false;
+ }
++>>>>>>> 38db987316a3 (arm64: Add support for SMCCC TRNG entropy source)
  
  #endif /* CONFIG_ARCH_RANDOM */
  #endif /* _ASM_ARCHRANDOM_H */
* Unmerged path arch/arm64/include/asm/archrandom.h
