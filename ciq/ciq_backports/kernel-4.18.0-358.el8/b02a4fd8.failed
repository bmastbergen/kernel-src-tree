cpumask: Make cpu_{online,possible,present,active}() inline

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit b02a4fd8148f655095d9e3d6eddd8f0042bcc27c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/b02a4fd8.failed

Prepare for addition of another mask. Primarily a code movement to
avoid having to create more #ifdef, but while there, convert
everything with an argument to an inline function.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
Link: https://lkml.kernel.org/r/20210310150109.045447765@infradead.org
(cherry picked from commit b02a4fd8148f655095d9e3d6eddd8f0042bcc27c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/cpumask.h
diff --cc include/linux/cpumask.h
index 3adc2fc32e67,a58433668bb2..000000000000
--- a/include/linux/cpumask.h
+++ b/include/linux/cpumask.h
@@@ -98,36 -98,7 +98,40 @@@ extern struct cpumask __cpu_active_mask
  
  extern atomic_t __num_online_cpus;
  
++<<<<<<< HEAD
 +#if NR_CPUS > 1
 +/**
 + * num_online_cpus() - Read the number of online CPUs
 + *
 + * Despite the fact that __num_online_cpus is of type atomic_t, this
 + * interface gives only a momentary snapshot and is not protected against
 + * concurrent CPU hotplug operations unless invoked from a cpuhp_lock held
 + * region.
 + */
 +static inline unsigned int num_online_cpus(void)
 +{
 +	return atomic_read(&__num_online_cpus);
 +}
 +#define num_possible_cpus()	cpumask_weight(cpu_possible_mask)
 +#define num_present_cpus()	cpumask_weight(cpu_present_mask)
 +#define num_active_cpus()	cpumask_weight(cpu_active_mask)
 +#define cpu_online(cpu)		cpumask_test_cpu((cpu), cpu_online_mask)
 +#define cpu_possible(cpu)	cpumask_test_cpu((cpu), cpu_possible_mask)
 +#define cpu_present(cpu)	cpumask_test_cpu((cpu), cpu_present_mask)
 +#define cpu_active(cpu)		cpumask_test_cpu((cpu), cpu_active_mask)
 +#else
 +#define num_online_cpus()	1U
 +#define num_possible_cpus()	1U
 +#define num_present_cpus()	1U
 +#define num_active_cpus()	1U
 +#define cpu_online(cpu)		((cpu) == 0)
 +#define cpu_possible(cpu)	((cpu) == 0)
 +#define cpu_present(cpu)	((cpu) == 0)
 +#define cpu_active(cpu)		((cpu) == 0)
 +#endif
++=======
+ extern cpumask_t cpus_booted_once_mask;
++>>>>>>> b02a4fd8148f (cpumask: Make cpu_{online,possible,present,active}() inline)
  
  static inline void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
  {
* Unmerged path include/linux/cpumask.h
