ceph: split 'metric' debugfs file into several files

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Luís Henriques <lhenriques@suse.de>
commit cbed4ff76bbb8083780dcd6ebb5bed2af25b9505
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/cbed4ff7.failed

Currently, all the metrics are grouped together in a single file, making
it difficult to process this file from scripts.  Furthermore, as new
metrics are added, processing this file will become even more challenging.

This patch turns the 'metric' file into a directory that will contain
several files, one for each metric.

	Signed-off-by: Luís Henriques <lhenriques@suse.de>
	Reviewed-by: Xiubo Li <xiubli@redhat.com>
	Reviewed-by: Jeff Layton <jlayton@kernel.org>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit cbed4ff76bbb8083780dcd6ebb5bed2af25b9505)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/debugfs.c
diff --cc fs/ceph/debugfs.c
index 08a330a116d4,55426514491b..000000000000
--- a/fs/ceph/debugfs.c
+++ b/fs/ceph/debugfs.c
@@@ -146,26 -146,30 +146,39 @@@ static int mdsc_show(struct seq_file *s
  		   name, total, avg, _min, max, sum);			\
  }
  
- static int metric_show(struct seq_file *s, void *p)
+ static int metrics_file_show(struct seq_file *s, void *p)
  {
  	struct ceph_fs_client *fsc = s->private;
- 	struct ceph_mds_client *mdsc = fsc->mdsc;
- 	struct ceph_client_metric *m = &mdsc->metric;
- 	int nr_caps = 0;
- 	s64 total, sum, avg, min, max, sq;
- 	u64 sum_sz, avg_sz, min_sz, max_sz;
+ 	struct ceph_client_metric *m = &fsc->mdsc->metric;
  
- 	sum = percpu_counter_sum(&m->total_inodes);
  	seq_printf(s, "item                               total\n");
  	seq_printf(s, "------------------------------------------\n");
++<<<<<<< HEAD
 +	seq_printf(s, "%-35s%lld / %lld\n", "opened files  / total inodes",
 +		   (long long)atomic64_read(&m->opened_files), sum);
 +	seq_printf(s, "%-35s%lld / %lld\n", "pinned i_caps / total inodes",
 +		   (long long)atomic64_read(&m->total_caps), sum);
 +	seq_printf(s, "%-35s%lld / %lld\n", "opened inodes / total inodes",
 +		   percpu_counter_sum(&m->opened_inodes), sum);
++=======
+ 	seq_printf(s, "%-35s%lld\n", "total inodes",
+ 		   percpu_counter_sum(&m->total_inodes));
+ 	seq_printf(s, "%-35s%lld\n", "opened files",
+ 		   atomic64_read(&m->opened_files));
+ 	seq_printf(s, "%-35s%lld\n", "pinned i_caps",
+ 		   atomic64_read(&m->total_caps));
+ 	seq_printf(s, "%-35s%lld\n", "opened inodes",
+ 		   percpu_counter_sum(&m->opened_inodes));
+ 	return 0;
+ }
+ 
+ static int metrics_latency_show(struct seq_file *s, void *p)
+ {
+ 	struct ceph_fs_client *fsc = s->private;
+ 	struct ceph_client_metric *m = &fsc->mdsc->metric;
+ 	s64 total, sum, avg, min, max, sq;
++>>>>>>> cbed4ff76bbb (ceph: split 'metric' debugfs file into several files)
  
- 	seq_printf(s, "\n");
  	seq_printf(s, "item          total       avg_lat(us)     min_lat(us)     max_lat(us)     stdev(us)\n");
  	seq_printf(s, "-----------------------------------------------------------------------------------\n");
  
* Unmerged path fs/ceph/debugfs.c
diff --git a/fs/ceph/super.h b/fs/ceph/super.h
index 0842f5707e85..cc5cdde41777 100644
--- a/fs/ceph/super.h
+++ b/fs/ceph/super.h
@@ -129,9 +129,9 @@ struct ceph_fs_client {
 	struct dentry *debugfs_congestion_kb;
 	struct dentry *debugfs_bdi;
 	struct dentry *debugfs_mdsc, *debugfs_mdsmap;
-	struct dentry *debugfs_metric;
 	struct dentry *debugfs_status;
 	struct dentry *debugfs_mds_sessions;
+	struct dentry *debugfs_metrics_dir;
 #endif
 
 #ifdef CONFIG_CEPH_FSCACHE
