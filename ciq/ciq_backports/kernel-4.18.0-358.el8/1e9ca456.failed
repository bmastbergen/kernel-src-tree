net: bridge: multicast: include router port vlan id in notifications

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Nikolay Aleksandrov <nikolay@nvidia.com>
commit 1e9ca45662d6bb65fb60d3fbb7737b081d9cffc9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/1e9ca456.failed

Use the port multicast context to check if the router port is a vlan and
in case it is include its vlan id in the notification.

	Signed-off-by: Nikolay Aleksandrov <nikolay@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1e9ca45662d6bb65fb60d3fbb7737b081d9cffc9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_multicast.c
diff --cc net/bridge/br_multicast.c
index def6f1840985,fb5e5df571fd..000000000000
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@@ -2148,31 -2957,62 +2148,44 @@@ static void br_port_mc_router_state_cha
   *  list is maintained ordered by pointer value
   *  and locked by br->multicast_lock and RCU
   */
 -static void br_multicast_add_router(struct net_bridge_mcast *brmctx,
 -				    struct net_bridge_mcast_port *pmctx,
 -				    struct hlist_node *rlist,
 -				    struct hlist_head *mc_router_list)
 +static void br_multicast_add_router(struct net_bridge *br,
 +				    struct net_bridge_port *port)
  {
 -	struct hlist_node *slot;
 +	struct net_bridge_port *p;
 +	struct hlist_node *slot = NULL;
  
 -	if (!hlist_unhashed(rlist))
 +	if (!hlist_unhashed(&port->rlist))
  		return;
  
 -	slot = br_multicast_get_rport_slot(brmctx, pmctx->port, mc_router_list);
 +	hlist_for_each_entry(p, &br->router_list, rlist) {
 +		if ((unsigned long) port >= (unsigned long) p)
 +			break;
 +		slot = &p->rlist;
 +	}
  
  	if (slot)
 -		hlist_add_behind_rcu(rlist, slot);
 +		hlist_add_behind_rcu(&port->rlist, slot);
  	else
++<<<<<<< HEAD
 +		hlist_add_head_rcu(&port->rlist, &br->router_list);
 +	br_rtr_notify(br->dev, port, RTM_NEWMDB);
 +	br_port_mc_router_state_change(port, true);
++=======
+ 		hlist_add_head_rcu(rlist, mc_router_list);
+ 
+ 	/* For backwards compatibility for now, only notify if we
+ 	 * switched from no IPv4/IPv6 multicast router to a new
+ 	 * IPv4 or IPv6 multicast router.
+ 	 */
+ 	if (br_multicast_no_router_otherpf(pmctx, rlist)) {
+ 		br_rtr_notify(pmctx->port->br->dev, pmctx, RTM_NEWMDB);
+ 		br_port_mc_router_state_change(pmctx->port, true);
+ 	}
++>>>>>>> 1e9ca45662d6 (net: bridge: multicast: include router port vlan id in notifications)
  }
  
 -/* Add port to router_list
 - *  list is maintained ordered by pointer value
 - *  and locked by br->multicast_lock and RCU
 - */
 -static void br_ip4_multicast_add_router(struct net_bridge_mcast *brmctx,
 -					struct net_bridge_mcast_port *pmctx)
 -{
 -	br_multicast_add_router(brmctx, pmctx, &pmctx->ip4_rlist,
 -				&brmctx->ip4_mc_router_list);
 -}
 -
 -/* Add port to router_list
 - *  list is maintained ordered by pointer value
 - *  and locked by br->multicast_lock and RCU
 - */
 -static void br_ip6_multicast_add_router(struct net_bridge_mcast *brmctx,
 -					struct net_bridge_mcast_port *pmctx)
 -{
 -#if IS_ENABLED(CONFIG_IPV6)
 -	br_multicast_add_router(brmctx, pmctx, &pmctx->ip6_rlist,
 -				&brmctx->ip6_mc_router_list);
 -#endif
 -}
 -
 -static void br_multicast_mark_router(struct net_bridge_mcast *brmctx,
 -				     struct net_bridge_mcast_port *pmctx,
 -				     struct timer_list *timer,
 -				     struct hlist_node *rlist,
 -				     struct hlist_head *mc_router_list)
 +static void br_multicast_mark_router(struct net_bridge *br,
 +				     struct net_bridge_port *port)
  {
  	unsigned long now = jiffies;
  
@@@ -2975,17 -4062,28 +2988,33 @@@ int br_multicast_set_router(struct net_
  	return err;
  }
  
 -static void
 -br_multicast_rport_del_notify(struct net_bridge_mcast_port *pmctx, bool deleted)
 +static void __del_port_router(struct net_bridge_port *p)
  {
 -	if (!deleted)
 +	if (hlist_unhashed(&p->rlist))
  		return;
++<<<<<<< HEAD
 +	hlist_del_init_rcu(&p->rlist);
 +	br_rtr_notify(p->br->dev, p, RTM_DELMDB);
 +	br_port_mc_router_state_change(p, false);
++=======
+ 
+ 	/* For backwards compatibility for now, only notify if there is
+ 	 * no multicast router anymore for both IPv4 and IPv6.
+ 	 */
+ 	if (!hlist_unhashed(&pmctx->ip4_rlist))
+ 		return;
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	if (!hlist_unhashed(&pmctx->ip6_rlist))
+ 		return;
+ #endif
+ 
+ 	br_rtr_notify(pmctx->port->br->dev, pmctx, RTM_DELMDB);
+ 	br_port_mc_router_state_change(pmctx->port, false);
++>>>>>>> 1e9ca45662d6 (net: bridge: multicast: include router port vlan id in notifications)
  
  	/* don't allow timer refresh */
 -	if (pmctx->multicast_router == MDB_RTR_TYPE_TEMP)
 -		pmctx->multicast_router = MDB_RTR_TYPE_TEMP_QUERY;
 +	if (p->multicast_router == MDB_RTR_TYPE_TEMP)
 +		p->multicast_router = MDB_RTR_TYPE_TEMP_QUERY;
  }
  
  int br_multicast_set_port_router(struct net_bridge_port *p, unsigned long val)
diff --git a/include/uapi/linux/if_bridge.h b/include/uapi/linux/if_bridge.h
index d042dfe91586..81d5606cae73 100644
--- a/include/uapi/linux/if_bridge.h
+++ b/include/uapi/linux/if_bridge.h
@@ -570,6 +570,7 @@ enum {
 	MDBA_ROUTER_PATTR_TYPE,
 	MDBA_ROUTER_PATTR_INET_TIMER,
 	MDBA_ROUTER_PATTR_INET6_TIMER,
+	MDBA_ROUTER_PATTR_VID,
 	__MDBA_ROUTER_PATTR_MAX
 };
 #define MDBA_ROUTER_PATTR_MAX (__MDBA_ROUTER_PATTR_MAX - 1)
diff --git a/net/bridge/br_mdb.c b/net/bridge/br_mdb.c
index 5621f5510fd4..1607f4f8295d 100644
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@ -570,12 +570,12 @@ void br_mdb_notify(struct net_device *dev,
 
 static int nlmsg_populate_rtr_fill(struct sk_buff *skb,
 				   struct net_device *dev,
-				   int ifindex, u32 pid,
+				   int ifindex, u16 vid, u32 pid,
 				   u32 seq, int type, unsigned int flags)
 {
+	struct nlattr *nest, *port_nest;
 	struct br_port_msg *bpm;
 	struct nlmsghdr *nlh;
-	struct nlattr *nest;
 
 	nlh = nlmsg_put(skb, pid, seq, type, sizeof(*bpm), 0);
 	if (!nlh)
@@ -589,8 +589,18 @@ static int nlmsg_populate_rtr_fill(struct sk_buff *skb,
 	if (!nest)
 		goto cancel;
 
-	if (nla_put_u32(skb, MDBA_ROUTER_PORT, ifindex))
+	port_nest = nla_nest_start_noflag(skb, MDBA_ROUTER_PORT);
+	if (!port_nest)
+		goto end;
+	if (nla_put_nohdr(skb, sizeof(u32), &ifindex)) {
+		nla_nest_cancel(skb, port_nest);
 		goto end;
+	}
+	if (vid && nla_put_u16(skb, MDBA_ROUTER_PATTR_VID, vid)) {
+		nla_nest_cancel(skb, port_nest);
+		goto end;
+	}
+	nla_nest_end(skb, port_nest);
 
 	nla_nest_end(skb, nest);
 	nlmsg_end(skb, nlh);
@@ -606,23 +616,28 @@ static int nlmsg_populate_rtr_fill(struct sk_buff *skb,
 static inline size_t rtnl_rtr_nlmsg_size(void)
 {
 	return NLMSG_ALIGN(sizeof(struct br_port_msg))
-		+ nla_total_size(sizeof(__u32));
+		+ nla_total_size(sizeof(__u32))
+		+ nla_total_size(sizeof(u16));
 }
 
-void br_rtr_notify(struct net_device *dev, struct net_bridge_port *port,
+void br_rtr_notify(struct net_device *dev, struct net_bridge_mcast_port *pmctx,
 		   int type)
 {
 	struct net *net = dev_net(dev);
 	struct sk_buff *skb;
 	int err = -ENOBUFS;
 	int ifindex;
+	u16 vid;
 
-	ifindex = port ? port->dev->ifindex : 0;
+	ifindex = pmctx ? pmctx->port->dev->ifindex : 0;
+	vid = pmctx && br_multicast_port_ctx_is_vlan(pmctx) ? pmctx->vlan->vid :
+							      0;
 	skb = nlmsg_new(rtnl_rtr_nlmsg_size(), GFP_ATOMIC);
 	if (!skb)
 		goto errout;
 
-	err = nlmsg_populate_rtr_fill(skb, dev, ifindex, 0, 0, type, NTF_SELF);
+	err = nlmsg_populate_rtr_fill(skb, dev, ifindex, vid, 0, 0, type,
+				      NTF_SELF);
 	if (err < 0) {
 		kfree_skb(skb);
 		goto errout;
* Unmerged path net/bridge/br_multicast.c
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index e7ccf58bc2f4..4484d94a2376 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -738,7 +738,7 @@ int br_mdb_hash_init(struct net_bridge *br);
 void br_mdb_hash_fini(struct net_bridge *br);
 void br_mdb_notify(struct net_device *dev, struct net_bridge_mdb_entry *mp,
 		   struct net_bridge_port_group *pg, int type);
-void br_rtr_notify(struct net_device *dev, struct net_bridge_port *port,
+void br_rtr_notify(struct net_device *dev, struct net_bridge_mcast_port *pmctx,
 		   int type);
 void br_multicast_del_pg(struct net_bridge_mdb_entry *mp,
 			 struct net_bridge_port_group *pg,
