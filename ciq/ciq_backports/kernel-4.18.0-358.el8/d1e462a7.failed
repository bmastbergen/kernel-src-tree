sctp: add probe_interval in sysctl and sock/asoc/transport

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Xin Long <lucien.xin@gmail.com>
commit d1e462a7a5f359cbb9a0e8fbfafcfb6657034105
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/d1e462a7.failed

PLPMTUD can be enabled by doing 'sysctl -w net.sctp.probe_interval=n'.
'n' is the interval for PLPMTUD probe timer in milliseconds, and it
can't be less than 5000 if it's not 0.

All asoc/transport's PLPMTUD in a new socket will be enabled by default.

	Signed-off-by: Xin Long <lucien.xin@gmail.com>
	Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d1e462a7a5f359cbb9a0e8fbfafcfb6657034105)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/sysctl.c
diff --cc net/sctp/sysctl.c
index 25a0e1d629c1,b46a416787ec..000000000000
--- a/net/sctp/sysctl.c
+++ b/net/sctp/sysctl.c
@@@ -59,23 -44,19 +59,29 @@@ static unsigned long max_autoclose_max 
  	? UINT_MAX : MAX_SCHEDULE_TIMEOUT / HZ;
  
  static int proc_sctp_do_hmac_alg(struct ctl_table *ctl, int write,
 -				 void *buffer, size_t *lenp, loff_t *ppos);
 +				void __user *buffer, size_t *lenp,
 +				loff_t *ppos);
  static int proc_sctp_do_rto_min(struct ctl_table *ctl, int write,
 -				void *buffer, size_t *lenp, loff_t *ppos);
 -static int proc_sctp_do_rto_max(struct ctl_table *ctl, int write, void *buffer,
 -				size_t *lenp, loff_t *ppos);
 -static int proc_sctp_do_udp_port(struct ctl_table *ctl, int write, void *buffer,
 -				 size_t *lenp, loff_t *ppos);
 +				void __user *buffer, size_t *lenp,
 +				loff_t *ppos);
 +static int proc_sctp_do_rto_max(struct ctl_table *ctl, int write,
 +				void __user *buffer, size_t *lenp,
 +				loff_t *ppos);
 +static int proc_sctp_do_udp_port(struct ctl_table *ctl, int write,
 +				 void __user *buffer, size_t *lenp,
 +				 loff_t *ppos);
  static int proc_sctp_do_alpha_beta(struct ctl_table *ctl, int write,
 -				   void *buffer, size_t *lenp, loff_t *ppos);
 +				   void __user *buffer, size_t *lenp,
 +				   loff_t *ppos);
  static int proc_sctp_do_auth(struct ctl_table *ctl, int write,
++<<<<<<< HEAD
 +			     void __user *buffer, size_t *lenp,
 +			     loff_t *ppos);
++=======
+ 			     void *buffer, size_t *lenp, loff_t *ppos);
+ static int proc_sctp_do_probe_interval(struct ctl_table *ctl, int write,
+ 				       void *buffer, size_t *lenp, loff_t *ppos);
++>>>>>>> d1e462a7a5f3 (sctp: add probe_interval in sysctl and sock/asoc/transport)
  
  static struct ctl_table sctp_table[] = {
  	{
@@@ -314,9 -295,16 +320,16 @@@ static struct ctl_table sctp_net_table[
  		.mode		= 0644,
  		.proc_handler	= proc_dointvec,
  	},
+ 	{
+ 		.procname	= "plpmtud_probe_interval",
+ 		.data		= &init_net.sctp.probe_interval,
+ 		.maxlen		= sizeof(int),
+ 		.mode		= 0644,
+ 		.proc_handler	= proc_sctp_do_probe_interval,
+ 	},
  	{
  		.procname	= "udp_port",
 -		.data		= &init_net.sctp.udp_port,
 +		.data		= &init_net.sctp_udp_port,
  		.maxlen		= sizeof(int),
  		.mode		= 0644,
  		.proc_handler	= proc_sctp_do_udp_port,
diff --git a/Documentation/networking/ip-sysctl.txt b/Documentation/networking/ip-sysctl.txt
index e1b139c4be92..37e41683bfa3 100644
--- a/Documentation/networking/ip-sysctl.txt
+++ b/Documentation/networking/ip-sysctl.txt
@@ -2237,6 +2237,14 @@ encap_port - INTEGER
 
 	Default: 0
 
+plpmtud_probe_interval - INTEGER
+        The time interval (in milliseconds) for sending PLPMTUD probe chunks.
+        These chunks are sent at the specified interval with a variable size
+        to probe the mtu of a given path between 2 endpoints. PLPMTUD will
+        be disabled when 0 is set, and other values for it must be >= 5000.
+
+	Default: 0
+
 
 /proc/sys/net/core/*
 	Please see: Documentation/sysctl/net.txt for descriptions of these entries.
diff --git a/include/net/netns/sctp.h b/include/net/netns/sctp.h
index 0db7fb3e4e15..73c33772e14e 100644
--- a/include/net/netns/sctp.h
+++ b/include/net/netns/sctp.h
@@ -76,6 +76,9 @@ struct netns_sctp {
 	/* HB.interval		    - 30 seconds  */
 	unsigned int hb_interval;
 
+	/* The interval for PLPMTUD probe timer */
+	unsigned int probe_interval;
+
 	/* Association.Max.Retrans  - 10 attempts
 	 * Path.Max.Retrans	    - 5	 attempts (per destination address)
 	 * Max.Init.Retransmits	    - 8	 attempts
diff --git a/include/net/sctp/constants.h b/include/net/sctp/constants.h
index cc91abdf015b..7213853a96c3 100644
--- a/include/net/sctp/constants.h
+++ b/include/net/sctp/constants.h
@@ -437,4 +437,6 @@ enum {
  */
 #define SCTP_AUTH_RANDOM_LENGTH 32
 
+#define SCTP_PROBE_TIMER_MIN	5000
+
 #endif /* __sctp_constants_h__ */
diff --git a/include/net/sctp/structs.h b/include/net/sctp/structs.h
index d359ce2080ce..1be933292912 100644
--- a/include/net/sctp/structs.h
+++ b/include/net/sctp/structs.h
@@ -191,6 +191,7 @@ struct sctp_sock {
 	 * will be inherited by all new associations.
 	 */
 	__u32 hbinterval;
+	__u32 probe_interval;
 
 	__be16 udp_port;
 	__be16 encap_port;
@@ -882,6 +883,7 @@ struct sctp_transport {
 	 * the destination address every heartbeat interval.
 	 */
 	unsigned long hbinterval;
+	unsigned long probe_interval;
 
 	/* SACK delay timeout */
 	unsigned long sackdelay;
@@ -1818,6 +1820,7 @@ struct sctp_association {
 	 * will be inherited by all new transports.
 	 */
 	unsigned long hbinterval;
+	unsigned long probe_interval;
 
 	__be16 encap_port;
 
diff --git a/net/sctp/associola.c b/net/sctp/associola.c
index 942972eb0d47..93b3851291d0 100644
--- a/net/sctp/associola.c
+++ b/net/sctp/associola.c
@@ -113,6 +113,7 @@ static struct sctp_association *sctp_association_init(
 	 * sock configured value.
 	 */
 	asoc->hbinterval = msecs_to_jiffies(sp->hbinterval);
+	asoc->probe_interval = msecs_to_jiffies(sp->probe_interval);
 
 	asoc->encap_port = sp->encap_port;
 
@@ -641,6 +642,7 @@ struct sctp_transport *sctp_assoc_add_peer(struct sctp_association *asoc,
 	 * association configured value.
 	 */
 	peer->hbinterval = asoc->hbinterval;
+	peer->probe_interval = asoc->probe_interval;
 
 	peer->encap_port = asoc->encap_port;
 
diff --git a/net/sctp/socket.c b/net/sctp/socket.c
index 9d3d681d6576..99622817ae09 100644
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@ -5248,6 +5248,7 @@ static int sctp_init_sock(struct sock *sk)
 	atomic_set(&sp->pd_mode, 0);
 	skb_queue_head_init(&sp->pd_lobby);
 	sp->frag_interleave = 0;
+	sp->probe_interval = net->sctp.probe_interval;
 
 	/* Create a per socket endpoint structure.  Even if we
 	 * change the data structure relationships, this may still
* Unmerged path net/sctp/sysctl.c
