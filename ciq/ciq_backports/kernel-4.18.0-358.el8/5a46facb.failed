net: bridge: vlan: add helpers to check for vlan id/range validity

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
commit 5a46facbbcd454985992b5109185329aebf82a02
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/5a46facb.failed

Add helpers to check if a vlan id or range are valid. The range helper
must be called when range start or end are detected.

	Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5a46facbbcd454985992b5109185329aebf82a02)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_private.h
diff --cc net/bridge/br_private.h
index e46ee76b07a9,dbc0089e2c1a..000000000000
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@@ -501,6 -502,42 +501,45 @@@ static inline bool br_vlan_should_use(c
  	return true;
  }
  
++<<<<<<< HEAD
++=======
+ static inline bool nbp_state_should_learn(const struct net_bridge_port *p)
+ {
+ 	return p->state == BR_STATE_LEARNING || p->state == BR_STATE_FORWARDING;
+ }
+ 
+ static inline bool br_vlan_valid_id(u16 vid)
+ {
+ 	return vid > 0 && vid < VLAN_VID_MASK;
+ }
+ 
+ static inline bool br_vlan_valid_range(const struct bridge_vlan_info *cur,
+ 				       const struct bridge_vlan_info *last)
+ {
+ 	/* pvid flag is not allowed in ranges */
+ 	if (cur->flags & BRIDGE_VLAN_INFO_PVID)
+ 		return false;
+ 
+ 	/* check for required range flags */
+ 	if (!(cur->flags & (BRIDGE_VLAN_INFO_RANGE_BEGIN |
+ 			    BRIDGE_VLAN_INFO_RANGE_END)))
+ 		return false;
+ 
+ 	/* when cur is the range end, check if:
+ 	 *  - it has range start flag
+ 	 *  - range ids are invalid (end is equal to or before start)
+ 	 */
+ 	if (last) {
+ 		if (cur->flags & BRIDGE_VLAN_INFO_RANGE_BEGIN)
+ 			return false;
+ 		else if (cur->vid <= last->vid)
+ 			return false;
+ 	}
+ 
+ 	return true;
+ }
+ 
++>>>>>>> 5a46facbbcd4 (net: bridge: vlan: add helpers to check for vlan id/range validity)
  static inline int br_opt_get(const struct net_bridge *br,
  			     enum net_bridge_opts opt)
  {
diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index 7b28bd8e9345..90083336f45a 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -572,17 +572,13 @@ static int br_process_vlan_info(struct net_bridge *br,
 				bool *changed,
 				struct netlink_ext_ack *extack)
 {
-	if (!vinfo_curr->vid || vinfo_curr->vid >= VLAN_VID_MASK)
+	if (!br_vlan_valid_id(vinfo_curr->vid))
 		return -EINVAL;
 
 	if (vinfo_curr->flags & BRIDGE_VLAN_INFO_RANGE_BEGIN) {
-		/* check if we are already processing a range */
-		if (*vinfo_last)
+		if (!br_vlan_valid_range(vinfo_curr, *vinfo_last))
 			return -EINVAL;
 		*vinfo_last = vinfo_curr;
-		/* don't allow range of pvids */
-		if ((*vinfo_last)->flags & BRIDGE_VLAN_INFO_PVID)
-			return -EINVAL;
 		return 0;
 	}
 
@@ -590,10 +586,7 @@ static int br_process_vlan_info(struct net_bridge *br,
 		struct bridge_vlan_info tmp_vinfo;
 		int v, err;
 
-		if (!(vinfo_curr->flags & BRIDGE_VLAN_INFO_RANGE_END))
-			return -EINVAL;
-
-		if (vinfo_curr->vid <= (*vinfo_last)->vid)
+		if (!br_vlan_valid_range(vinfo_curr, *vinfo_last))
 			return -EINVAL;
 
 		memcpy(&tmp_vinfo, *vinfo_last,
* Unmerged path net/bridge/br_private.h
