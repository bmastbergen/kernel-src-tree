KVM: arm64: Reject VM creation when the default IPA size is unsupported

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Marc Zyngier <maz@kernel.org>
commit 7d717558dd5ef10d28866750d5c24ff892ea3778
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/7d717558.failed

KVM/arm64 has forever used a 40bit default IPA space, partially
due to its 32bit heritage (where the only choice is 40bit).

However, there are implementations in the wild that have a *cough*
much smaller *cough* IPA space, which leads to a misprogramming of
VTCR_EL2, and a guest that is stuck on its first memory access
if userspace dares to ask for the default IPA setting (which most
VMMs do).

Instead, blundly reject the creation of such VM, as we can't
satisfy the requirements from userspace (with a one-off warning).
Also clarify the boot warning, and document that the VM creation
will fail when an unsupported IPA size is provided.

Although this is an ABI change, it doesn't really change much
for userspace:

- the guest couldn't run before this change, but no error was
  returned. At least userspace knows what is happening.

- a memory slot that was accepted because it did fit the default
  IPA space now doesn't even get a chance to be registered.

The other thing that is left doing is to convince userspace to
actually use the IPA space setting instead of relying on the
antiquated default.

Fixes: 233a7cb23531 ("kvm: arm64: Allow tuning the physical address size for VM")
	Signed-off-by: Marc Zyngier <maz@kernel.org>
	Cc: stable@vger.kernel.org
	Reviewed-by: Andrew Jones <drjones@redhat.com>
	Reviewed-by: Eric Auger <eric.auger@redhat.com>
Link: https://lore.kernel.org/r/20210311100016.3830038-2-maz@kernel.org
(cherry picked from commit 7d717558dd5ef10d28866750d5c24ff892ea3778)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kvm/reset.c
diff --cc arch/arm64/kvm/reset.c
index 9ce5b6bd0c6c,9d3d09a89894..000000000000
--- a/arch/arm64/kvm/reset.c
+++ b/arch/arm64/kvm/reset.c
@@@ -393,39 -323,10 +393,46 @@@ int kvm_set_ipa_limit(void
  		break;
  	}
  
++<<<<<<< HEAD
 +	pa_max = id_aa64mmfr0_parange_to_phys_shift(parange);
 +
 +	/* Clamp the IPA limit to the PA size supported by the kernel */
 +	ipa_max = (pa_max > PHYS_MASK_SHIFT) ? PHYS_MASK_SHIFT : pa_max;
 +	/*
 +	 * Since our stage2 table is dependent on the stage1 page table code,
 +	 * we must always honor the following condition:
 +	 *
 +	 *  Number of levels in Stage1 >= Number of levels in Stage2.
 +	 *
 +	 * So clamp the ipa limit further down to limit the number of levels.
 +	 * Since we can concatenate upto 16 tables at entry level, we could
 +	 * go upto 4bits above the maximum VA addressable with the current
 +	 * number of levels.
 +	 */
 +	va_max = PGDIR_SHIFT + PAGE_SHIFT - 3;
 +	va_max += 4;
 +
 +	if (va_max < ipa_max)
 +		ipa_max = va_max;
 +
 +	/*
 +	 * If the final limit is lower than the real physical address
 +	 * limit of the CPUs, report the reason.
 +	 */
 +	if (ipa_max < pa_max)
 +		pr_info("kvm: Limiting the IPA size due to kernel %s Address limit\n",
 +			(va_max < pa_max) ? "Virtual" : "Physical");
 +
 +	WARN(ipa_max < KVM_PHYS_SHIFT,
 +	     "KVM IPA limit (%d bit) is smaller than default size\n", ipa_max);
 +	kvm_ipa_limit = ipa_max;
 +	kvm_info("IPA Size Limit: %dbits\n", kvm_ipa_limit);
++=======
+ 	kvm_ipa_limit = id_aa64mmfr0_parange_to_phys_shift(parange);
+ 	kvm_info("IPA Size Limit: %d bits%s\n", kvm_ipa_limit,
+ 		 ((kvm_ipa_limit < KVM_PHYS_SHIFT) ?
+ 		  " (Reduced IPA size, limited VM/VMM compatibility)" : ""));
++>>>>>>> 7d717558dd5e (KVM: arm64: Reject VM creation when the default IPA size is unsupported)
  
  	return 0;
  }
diff --git a/Documentation/virt/kvm/api.rst b/Documentation/virt/kvm/api.rst
index 36c60d97dfd6..1e4b0f1f72b4 100644
--- a/Documentation/virt/kvm/api.rst
+++ b/Documentation/virt/kvm/api.rst
@@ -182,6 +182,9 @@ is dependent on the CPU capability and the kernel configuration. The limit can
 be retrieved using KVM_CAP_ARM_VM_IPA_SIZE of the KVM_CHECK_EXTENSION
 ioctl() at run-time.
 
+Creation of the VM will fail if the requested IPA size (whether it is
+implicit or explicit) is unsupported on the host.
+
 Please note that configuring the IPA size does not affect the capability
 exposed by the guest CPUs in ID_AA64MMFR0_EL1[PARange]. It only affects
 size of the address translated by the stage2 level (guest physical to
* Unmerged path arch/arm64/kvm/reset.c
