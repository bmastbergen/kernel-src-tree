i2c: designware: Move i2c_dw_validate_speed() helper to a common code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 20ee1d9020c9233129ba84094e7dd6fe4651cfad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/20ee1d90.failed

In order to export array supported speed for wider use, move it
to a header along with i2c_dw_validate_speed() helper moved to
a common code.

No functional changes intended.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@kernel.org>
(cherry picked from commit 20ee1d9020c9233129ba84094e7dd6fe4651cfad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-platdrv.c
diff --cc drivers/i2c/busses/i2c-designware-platdrv.c
index 3d5c410d94af,d6c03d7179c7..000000000000
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@@ -270,11 -234,11 +270,19 @@@ static int dw_i2c_plat_probe(struct pla
  	 * Some DSTDs use a non standard speed, round down to the lowest
  	 * standard speed.
  	 */
++<<<<<<< HEAD
 +	for (i = 1; i < ARRAY_SIZE(supported_speeds); i++) {
 +		if (acpi_speed < supported_speeds[i])
 +			break;
 +	}
 +	acpi_speed = supported_speeds[i - 1];
++=======
+ 	for (i = 0; i < ARRAY_SIZE(i2c_dw_supported_speeds); i++) {
+ 		if (acpi_speed >= i2c_dw_supported_speeds[i])
+ 			break;
+ 	}
+ 	acpi_speed = i < ARRAY_SIZE(i2c_dw_supported_speeds) ? i2c_dw_supported_speeds[i] : 0;
++>>>>>>> 20ee1d9020c9 (i2c: designware: Move i2c_dw_validate_speed() helper to a common code)
  
  	/*
  	 * Find bus speed from the "clock-frequency" device property, ACPI
@@@ -295,18 -259,9 +303,22 @@@
  	if (has_acpi_companion(&pdev->dev))
  		dw_i2c_acpi_configure(pdev);
  
++<<<<<<< HEAD
 +	/*
 +	 * Only standard mode at 100kHz, fast mode at 400kHz,
 +	 * fast mode plus at 1MHz and high speed mode at 3.4MHz are supported.
 +	 */
 +	if (t->bus_freq_hz != 100000 && t->bus_freq_hz != 400000 &&
 +	    t->bus_freq_hz != 1000000 && t->bus_freq_hz != 3400000) {
 +		dev_err(&pdev->dev,
 +			"%d Hz is unsupported, only 100kHz, 400kHz, 1MHz and 3.4MHz are supported\n",
 +			t->bus_freq_hz);
 +		ret = -EINVAL;
++=======
+ 	ret = i2c_dw_validate_speed(dev);
+ 	if (ret)
++>>>>>>> 20ee1d9020c9 (i2c: designware: Move i2c_dw_validate_speed() helper to a common code)
  		goto exit_reset;
- 	}
  
  	ret = i2c_dw_probe_lock_support(dev);
  	if (ret)
diff --git a/drivers/i2c/busses/i2c-designware-common.c b/drivers/i2c/busses/i2c-designware-common.c
index 37ca1ea69f2b..b31adcd42f9f 100644
--- a/drivers/i2c/busses/i2c-designware-common.c
+++ b/drivers/i2c/busses/i2c-designware-common.c
@@ -116,6 +116,30 @@ int i2c_dw_set_reg_access(struct dw_i2c_dev *dev)
 	return 0;
 }
 
+int i2c_dw_validate_speed(struct dw_i2c_dev *dev)
+{
+	struct i2c_timings *t = &dev->timings;
+	unsigned int i;
+
+	/*
+	 * Only standard mode at 100kHz, fast mode at 400kHz,
+	 * fast mode plus at 1MHz and high speed mode at 3.4MHz are supported.
+	 */
+	for (i = 0; i < ARRAY_SIZE(i2c_dw_supported_speeds); i++) {
+		if (t->bus_freq_hz == i2c_dw_supported_speeds[i])
+			break;
+	}
+	if (i == ARRAY_SIZE(i2c_dw_supported_speeds)) {
+		dev_err(dev->dev,
+			"%d Hz is unsupported, only 100kHz, 400kHz, 1MHz and 3.4MHz are supported\n",
+			t->bus_freq_hz);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(i2c_dw_validate_speed);
+
 u32 i2c_dw_scl_hcnt(u32 ic_clk, u32 tSYMBOL, u32 tf, int cond, int offset)
 {
 	/*
diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index a5f6db491e44..15f475197015 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -330,3 +330,12 @@ extern void i2c_dw_remove_lock_support(struct dw_i2c_dev *dev);
 static inline int i2c_dw_probe_lock_support(struct dw_i2c_dev *dev) { return 0; }
 static inline void i2c_dw_remove_lock_support(struct dw_i2c_dev *dev) {}
 #endif
+
+static __maybe_unused const u32 i2c_dw_supported_speeds[] = {
+	I2C_MAX_HIGH_SPEED_MODE_FREQ,
+	I2C_MAX_FAST_MODE_PLUS_FREQ,
+	I2C_MAX_FAST_MODE_FREQ,
+	I2C_MAX_STANDARD_MODE_FREQ,
+};
+
+int i2c_dw_validate_speed(struct dw_i2c_dev *dev);
* Unmerged path drivers/i2c/busses/i2c-designware-platdrv.c
