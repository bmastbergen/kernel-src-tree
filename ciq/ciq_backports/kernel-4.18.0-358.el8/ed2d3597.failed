net: bridge: mcast: split router port del+notify for mcast router split

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Linus Lüssing <linus.luessing@c0d3.blue>
commit ed2d35971a8066aa24ce65dd66c113c0506bb206
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/ed2d3597.failed

In preparation for the upcoming split of multicast router state into
their IPv4 and IPv6 variants split router port deletion and notification
into two functions. When we disable a port for instance later we want to
only send one notification to switchdev and netlink for compatibility
and want to avoid sending one for IPv4 and one for IPv6. For that the
split is needed.

	Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ed2d35971a8066aa24ce65dd66c113c0506bb206)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_multicast.c
diff --cc net/bridge/br_multicast.c
index 2827c70f9d21,30144f9d19d7..000000000000
--- a/net/bridge/br_multicast.c
+++ b/net/bridge/br_multicast.c
@@@ -947,19 -1355,35 +948,41 @@@ static int br_ip6_multicast_add_group(s
  }
  #endif
  
++<<<<<<< HEAD
 +static void br_multicast_router_expired(struct timer_list *t)
++=======
+ static bool br_multicast_rport_del(struct hlist_node *rlist)
+ {
+ 	if (hlist_unhashed(rlist))
+ 		return false;
+ 
+ 	hlist_del_init_rcu(rlist);
+ 	return true;
+ }
+ 
+ static bool br_ip4_multicast_rport_del(struct net_bridge_port *p)
+ {
+ 	return br_multicast_rport_del(&p->ip4_rlist);
+ }
+ 
+ static void br_multicast_router_expired(struct net_bridge_port *port,
+ 					struct timer_list *t,
+ 					struct hlist_node *rlist)
++>>>>>>> ed2d35971a80 (net: bridge: mcast: split router port del+notify for mcast router split)
  {
 +	struct net_bridge_port *port =
 +			from_timer(port, t, multicast_router_timer);
  	struct net_bridge *br = port->br;
+ 	bool del;
  
  	spin_lock(&br->multicast_lock);
  	if (port->multicast_router == MDB_RTR_TYPE_DISABLED ||
  	    port->multicast_router == MDB_RTR_TYPE_PERM ||
 -	    timer_pending(t))
 +	    timer_pending(&port->multicast_router_timer))
  		goto out;
  
- 	__del_port_router(port);
+ 	del = br_multicast_rport_del(rlist);
+ 	br_multicast_rport_del_notify(port, del);
  out:
  	spin_unlock(&br->multicast_lock);
  }
@@@ -1283,9 -1729,8 +1307,14 @@@ void br_multicast_disable_port(struct n
  		if (!(pg->flags & MDB_PG_FLAGS_PERMANENT))
  			br_multicast_find_del_pg(br, pg);
  
++<<<<<<< HEAD
 +	__del_port_router(port);
 +
 +	del_timer(&port->multicast_router_timer);
++=======
+ 	del |= br_ip4_multicast_rport_del(port);
+ 	del_timer(&port->ip4_mc_router_timer);
++>>>>>>> ed2d35971a80 (net: bridge: mcast: split router port del+notify for mcast router split)
  	del_timer(&port->ip4_own_query.timer);
  #if IS_ENABLED(CONFIG_IPV6)
  	del_timer(&port->ip6_own_query.timer);
@@@ -2975,11 -3556,12 +3005,18 @@@ int br_multicast_set_router(struct net_
  	return err;
  }
  
- static void __del_port_router(struct net_bridge_port *p)
+ static void
+ br_multicast_rport_del_notify(struct net_bridge_port *p, bool deleted)
  {
++<<<<<<< HEAD
 +	if (hlist_unhashed(&p->rlist))
 +		return;
 +	hlist_del_init_rcu(&p->rlist);
++=======
+ 	if (!deleted)
+ 		return;
+ 
++>>>>>>> ed2d35971a80 (net: bridge: mcast: split router port del+notify for mcast router split)
  	br_rtr_notify(p->br->dev, p, RTM_DELMDB);
  	br_port_mc_router_state_change(p, false);
  
@@@ -3006,8 -3589,9 +3044,14 @@@ int br_multicast_set_port_router(struc
  	switch (val) {
  	case MDB_RTR_TYPE_DISABLED:
  		p->multicast_router = MDB_RTR_TYPE_DISABLED;
++<<<<<<< HEAD
 +		__del_port_router(p);
 +		del_timer(&p->multicast_router_timer);
++=======
+ 		del |= br_ip4_multicast_rport_del(p);
+ 		del_timer(&p->ip4_mc_router_timer);
+ 		br_multicast_rport_del_notify(p, del);
++>>>>>>> ed2d35971a80 (net: bridge: mcast: split router port del+notify for mcast router split)
  		break;
  	case MDB_RTR_TYPE_TEMP_QUERY:
  		p->multicast_router = MDB_RTR_TYPE_TEMP_QUERY;
* Unmerged path net/bridge/br_multicast.c
