Bluetooth: btintel: Skip reading firmware file version while in bootloader mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Lokendra Singh <lokendra.singh@intel.com>
commit 1f4ec585e6618ad75d5a82e58482ea2c5b4b7167
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/1f4ec585.failed

This skips parsing the firmware version information from the firmware
file while controller is in bootloader mode. As in bootloader mode,
we are supposed to patch unconditionally.

	Signed-off-by: Lokendra Singh <lokendra.singh@intel.com>
	Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
	Tested-by: Tedd Ho-Jeong An <tedd.an@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 1f4ec585e6618ad75d5a82e58482ea2c5b4b7167)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btintel.c
diff --cc drivers/bluetooth/btintel.c
index e4d5f4423165,e44b6993cf91..000000000000
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@@ -1003,6 -1022,42 +1003,45 @@@ int btintel_download_firmware(struct hc
  {
  	int err;
  
++<<<<<<< HEAD
++=======
+ 	/* SfP and WsP don't seem to update the firmware version on file
+ 	 * so version checking is currently not possible.
+ 	 */
+ 	switch (ver->hw_variant) {
+ 	case 0x0b:	/* SfP */
+ 	case 0x0c:	/* WsP */
+ 		/* Skip version checking */
+ 		break;
+ 	default:
+ 		/* Skip reading firmware file version in bootloader mode */
+ 		if (ver->fw_variant == 0x06)
+ 			break;
+ 
+ 		/* Skip download if firmware has the same version */
+ 		if (btintel_firmware_version(hdev, ver->fw_build_num,
+ 					     ver->fw_build_ww, ver->fw_build_yy,
+ 					     fw, boot_param)) {
+ 			bt_dev_info(hdev, "Firmware already loaded");
+ 			/* Return -EALREADY to indicate that the firmware has
+ 			 * already been loaded.
+ 			 */
+ 			return -EALREADY;
+ 		}
+ 	}
+ 
+ 	/* The firmware variant determines if the device is in bootloader
+ 	 * mode or is running operational firmware. The value 0x06 identifies
+ 	 * the bootloader and the value 0x23 identifies the operational
+ 	 * firmware.
+ 	 *
+ 	 * If the firmware version has changed that means it needs to be reset
+ 	 * to bootloader when operational so the new firmware can be loaded.
+ 	 */
+ 	if (ver->fw_variant == 0x23)
+ 		return -EINVAL;
+ 
++>>>>>>> 1f4ec585e661 (Bluetooth: btintel: Skip reading firmware file version while in bootloader mode)
  	err = btintel_sfi_rsa_header_secure_send(hdev, fw);
  	if (err)
  		return err;
@@@ -1019,6 -1074,32 +1058,35 @@@ int btintel_download_firmware_newgen(st
  	int err;
  	u32 css_header_ver;
  
++<<<<<<< HEAD
++=======
+ 	/* Skip reading firmware file version in bootloader mode */
+ 	if (ver->img_type != 0x01) {
+ 		/* Skip download if firmware has the same version */
+ 		if (btintel_firmware_version(hdev, ver->min_fw_build_nn,
+ 					     ver->min_fw_build_cw,
+ 					     ver->min_fw_build_yy,
+ 					     fw, boot_param)) {
+ 			bt_dev_info(hdev, "Firmware already loaded");
+ 			/* Return -EALREADY to indicate that firmware has
+ 			 * already been loaded.
+ 			 */
+ 			return -EALREADY;
+ 		}
+ 	}
+ 
+ 	/* The firmware variant determines if the device is in bootloader
+ 	 * mode or is running operational firmware. The value 0x01 identifies
+ 	 * the bootloader and the value 0x03 identifies the operational
+ 	 * firmware.
+ 	 *
+ 	 * If the firmware version has changed that means it needs to be reset
+ 	 * to bootloader when operational so the new firmware can be loaded.
+ 	 */
+ 	if (ver->img_type == 0x03)
+ 		return -EINVAL;
+ 
++>>>>>>> 1f4ec585e661 (Bluetooth: btintel: Skip reading firmware file version while in bootloader mode)
  	/* iBT hardware variants 0x0b, 0x0c, 0x11, 0x12, 0x13, 0x14 support
  	 * only RSA secure boot engine. Hence, the corresponding sfi file will
  	 * have RSA header of 644 bytes followed by Command Buffer.
* Unmerged path drivers/bluetooth/btintel.c
