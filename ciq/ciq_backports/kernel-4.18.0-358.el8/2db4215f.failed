scsi: sd_zbc: Update write pointer offset cache

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Johannes Thumshirn <johannes.thumshirn@wdc.com>
commit 2db4215f47557703dade2baccfa8da7b7e42a7e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/2db4215f.failed

Recent changes changed the completion of SCSI commands from Soft-IRQ
context to IRQ context. This triggers the following warning, when we're
completing writes to zoned block devices that go through the zone append
emulation:

 CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.12.0-rc2+ #2
 Hardware name: Supermicro Super Server/X10SRL-F, BIOS 2.0 12/17/2015
 RIP: 0010:__local_bh_disable_ip+0x3f/0x50
 RSP: 0018:ffff8883e1409ba8 EFLAGS: 00010006
 RAX: 0000000080010001 RBX: 0000000000000001 RCX: 0000000000000013
 RDX: ffff888129e4d200 RSI: 0000000000000201 RDI: ffffffff915b9dbd
 RBP: ffff888113e9a540 R08: ffff888113e9a540 R09: 00000000000077f0
 R10: 0000000000080000 R11: 0000000000000001 R12: ffff888129e4d200
 R13: 0000000000001000 R14: 00000000000077f0 R15: ffff888129e4d218
 FS:  0000000000000000(0000) GS:ffff8883e1400000(0000) knlGS:0000000000000000
 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
 CR2: 00007f2f8418ebc0 CR3: 000000021202a006 CR4: 00000000001706f0
 Call Trace:
  <IRQ>
  _raw_spin_lock_bh+0x18/0x40
  sd_zbc_complete+0x43d/0x1150
  sd_done+0x631/0x1040
  ? mark_lock+0xe4/0x2fd0
  ? provisioning_mode_store+0x3f0/0x3f0
  scsi_finish_command+0x31b/0x5c0
  _scsih_io_done+0x960/0x29e0 [mpt3sas]
  ? mpt3sas_scsih_scsi_lookup_get+0x1c7/0x340 [mpt3sas]
  ? __lock_acquire+0x166b/0x58b0
  ? _get_st_from_smid+0x4a/0x80 [mpt3sas]
  _base_process_reply_queue+0x23f/0x26e0 [mpt3sas]
  ? lock_is_held_type+0x98/0x110
  ? find_held_lock+0x2c/0x110
  ? mpt3sas_base_sync_reply_irqs+0x360/0x360 [mpt3sas]
  _base_interrupt+0x8d/0xd0 [mpt3sas]
  ? rcu_read_lock_sched_held+0x3f/0x70
  __handle_irq_event_percpu+0x24d/0x600
  handle_irq_event+0xef/0x240
  ? handle_irq_event_percpu+0x110/0x110
  handle_edge_irq+0x1f6/0xb60
  __common_interrupt+0x75/0x160
  common_interrupt+0x7b/0xa0
  </IRQ>
  asm_common_interrupt+0x1e/0x40

Don't use spin_lock_bh() to protect the update of the write pointer offset
cache, but use spin_lock_irqsave() for it.

Link: https://lore.kernel.org/r/3cfebe48d09db73041b7849be71ffbcec7ee40b3.1615369586.git.johannes.thumshirn@wdc.com
Fixes: 664f0dce2058 ("scsi: mpt3sas: Add support for shared host tagset for CPU hotplug")
	Reported-by: Shinichiro Kawasaki <shinichiro.kawasaki@wdc.com>
	Tested-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
	Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 2db4215f47557703dade2baccfa8da7b7e42a7e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd_zbc.c
diff --cc drivers/scsi/sd_zbc.c
index 67491e9d3b40,994f1b8e3504..000000000000
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@@ -281,29 -280,28 +281,49 @@@ static int sd_zbc_update_wp_offset_cb(s
  static void sd_zbc_update_wp_offset_workfn(struct work_struct *work)
  {
  	struct scsi_disk *sdkp;
++<<<<<<< HEAD
 +	struct scsi_disk_aux *aux;
++=======
+ 	unsigned long flags;
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  	unsigned int zno;
  	int ret;
  
 -	sdkp = container_of(work, struct scsi_disk, zone_wp_offset_work);
 +	aux = container_of(work, struct scsi_disk_aux, zone_wp_offset_work);
 +	sdkp = aux->sdkp;
  
++<<<<<<< HEAD
 +	spin_lock_bh(&sdkp->aux->zones_wp_offset_lock);
++=======
+ 	spin_lock_irqsave(&sdkp->zones_wp_offset_lock, flags);
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  	for (zno = 0; zno < sdkp->nr_zones; zno++) {
 -		if (sdkp->zones_wp_offset[zno] != SD_ZBC_UPDATING_WP_OFST)
 +		if (sdkp->aux->zones_wp_offset[zno] != SD_ZBC_UPDATING_WP_OFST)
  			continue;
  
++<<<<<<< HEAD
 +		spin_unlock_bh(&sdkp->aux->zones_wp_offset_lock);
 +		ret = sd_zbc_do_report_zones(sdkp, sdkp->aux->zone_wp_update_buf,
 +					     SD_BUF_SIZE,
 +					     zno * sdkp->zone_blocks, true);
 +		spin_lock_bh(&sdkp->aux->zones_wp_offset_lock);
++=======
+ 		spin_unlock_irqrestore(&sdkp->zones_wp_offset_lock, flags);
+ 		ret = sd_zbc_do_report_zones(sdkp, sdkp->zone_wp_update_buf,
+ 					     SD_BUF_SIZE,
+ 					     zno * sdkp->zone_blocks, true);
+ 		spin_lock_irqsave(&sdkp->zones_wp_offset_lock, flags);
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  		if (!ret)
 -			sd_zbc_parse_report(sdkp, sdkp->zone_wp_update_buf + 64,
 +			sd_zbc_parse_report(sdkp, sdkp->aux->zone_wp_update_buf + 64,
  					    zno, sd_zbc_update_wp_offset_cb,
  					    sdkp);
  	}
++<<<<<<< HEAD
 +	spin_unlock_bh(&sdkp->aux->zones_wp_offset_lock);
++=======
+ 	spin_unlock_irqrestore(&sdkp->zones_wp_offset_lock, flags);
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  
  	scsi_device_put(sdkp->device);
  }
@@@ -340,8 -339,8 +361,13 @@@ blk_status_t sd_zbc_prepare_zone_append
  	if (!blk_req_zone_write_trylock(rq))
  		return BLK_STS_ZONE_RESOURCE;
  
++<<<<<<< HEAD
 +	spin_lock_bh(&sdkp->aux->zones_wp_offset_lock);
 +	wp_offset = sdkp->aux->zones_wp_offset[zno];
++=======
+ 	spin_lock_irqsave(&sdkp->zones_wp_offset_lock, flags);
+ 	wp_offset = sdkp->zones_wp_offset[zno];
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  	switch (wp_offset) {
  	case SD_ZBC_INVALID_WP_OFST:
  		/*
@@@ -369,7 -368,7 +395,11 @@@
  
  		*lba += wp_offset;
  	}
++<<<<<<< HEAD
 +	spin_unlock_bh(&sdkp->aux->zones_wp_offset_lock);
++=======
+ 	spin_unlock_irqrestore(&sdkp->zones_wp_offset_lock, flags);
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  	if (ret)
  		blk_req_zone_write_unlock(rq);
  	return ret;
@@@ -455,7 -455,7 +486,11 @@@ static unsigned int sd_zbc_zone_wp_upda
  	 * invalid to force an update from disk the next time a zone append
  	 * command is issued.
  	 */
++<<<<<<< HEAD
 +	spin_lock_bh(&sdkp->aux->zones_wp_offset_lock);
++=======
+ 	spin_lock_irqsave(&sdkp->zones_wp_offset_lock, flags);
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  
  	if (result && op != REQ_OP_ZONE_RESET_ALL) {
  		if (op == REQ_OP_ZONE_APPEND) {
@@@ -499,7 -499,7 +534,11 @@@
  	}
  
  unlock_wp_offset:
++<<<<<<< HEAD
 +	spin_unlock_bh(&sdkp->aux->zones_wp_offset_lock);
++=======
+ 	spin_unlock_irqrestore(&sdkp->zones_wp_offset_lock, flags);
++>>>>>>> 2db4215f4755 (scsi: sd_zbc: Update write pointer offset cache)
  
  	return good_bytes;
  }
* Unmerged path drivers/scsi/sd_zbc.c
