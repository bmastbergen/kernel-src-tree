media: videobuf2: Move frame_vector into media subsystem

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Daniel Vetter <daniel.vetter@ffwll.ch>
commit eb83b8e3e6478845f8130622a2048ed4ec3b3be3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/eb83b8e3.failed

It's the only user. This also garbage collects the CONFIG_FRAME_VECTOR
symbol from all over the tree (well just one place, somehow omap media
driver still had this in its Kconfig, despite not using it).

	Reviewed-by: John Hubbard <jhubbard@nvidia.com>
	Acked-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
	Acked-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
	Acked-by: Tomasz Figa <tfiga@chromium.org>
	Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
	Cc: Jason Gunthorpe <jgg@ziepe.ca>
	Cc: Pawel Osciak <pawel@osciak.com>
	Cc: Marek Szyprowski <m.szyprowski@samsung.com>
	Cc: Kyungmin Park <kyungmin.park@samsung.com>
	Cc: Tomasz Figa <tfiga@chromium.org>
	Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: John Hubbard <jhubbard@nvidia.com>
	Cc: Jérôme Glisse <jglisse@redhat.com>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: linux-mm@kvack.org
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linux-samsung-soc@vger.kernel.org
	Cc: linux-media@vger.kernel.org
	Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
	Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Link: https://patchwork.freedesktop.org/patch/msgid/20201127164131.2244124-7-daniel.vetter@ffwll.ch
(cherry picked from commit eb83b8e3e6478845f8130622a2048ed4ec3b3be3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/media/platform/omap/Kconfig
#	include/linux/mm.h
#	include/media/videobuf2-core.h
diff --cc drivers/media/platform/omap/Kconfig
index ecac6074d239,de16de46c0f4..000000000000
--- a/drivers/media/platform/omap/Kconfig
+++ b/drivers/media/platform/omap/Kconfig
@@@ -8,10 -9,8 +8,13 @@@ config VIDEO_OMAP2_VOU
  	depends on MMU
  	depends on FB_OMAP2 || (COMPILE_TEST && FB_OMAP2=n)
  	depends on ARCH_OMAP2 || ARCH_OMAP3 || COMPILE_TEST
 -	depends on VIDEO_V4L2
 -	select VIDEOBUF2_DMA_CONTIG
 +	select VIDEOBUF_GEN
 +	select VIDEOBUF_DMA_CONTIG
  	select OMAP2_VRFB if ARCH_OMAP2 || ARCH_OMAP3
++<<<<<<< HEAD
 +	select FRAME_VECTOR
 +	default n
++=======
++>>>>>>> eb83b8e3e647 (media: videobuf2: Move frame_vector into media subsystem)
  	help
  	  V4L2 Display driver support for OMAP2/3 based boards.
diff --cc include/linux/mm.h
index 8cd1bab50fcb,049439b65553..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -1650,48 -1754,6 +1650,51 @@@ int account_locked_vm(struct mm_struct 
  int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,
  			struct task_struct *task, bool bypass_rlim);
  
++<<<<<<< HEAD
 +/* Container for pinned pfns / pages */
 +struct frame_vector {
 +	unsigned int nr_allocated;	/* Number of frames we have space for */
 +	unsigned int nr_frames;	/* Number of frames stored in ptrs array */
 +	bool got_ref;		/* Did we pin pages by getting page ref? */
 +	bool is_pfns;		/* Does array contain pages or pfns? */
 +	void *ptrs[0];		/* Array of pinned pfns / pages. Use
 +				 * pfns_vector_pages() or pfns_vector_pfns()
 +				 * for access */
 +};
 +
 +struct frame_vector *frame_vector_create(unsigned int nr_frames);
 +void frame_vector_destroy(struct frame_vector *vec);
 +int get_vaddr_frames(unsigned long start, unsigned int nr_pfns,
 +		     unsigned int gup_flags, struct frame_vector *vec);
 +void put_vaddr_frames(struct frame_vector *vec);
 +int frame_vector_to_pages(struct frame_vector *vec);
 +void frame_vector_to_pfns(struct frame_vector *vec);
 +
 +static inline unsigned int frame_vector_count(struct frame_vector *vec)
 +{
 +	return vec->nr_frames;
 +}
 +
 +static inline struct page **frame_vector_pages(struct frame_vector *vec)
 +{
 +	if (vec->is_pfns) {
 +		int err = frame_vector_to_pages(vec);
 +
 +		if (err)
 +			return ERR_PTR(err);
 +	}
 +	return (struct page **)(vec->ptrs);
 +}
 +
 +static inline unsigned long *frame_vector_pfns(struct frame_vector *vec)
 +{
 +	if (!vec->is_pfns)
 +		frame_vector_to_pfns(vec);
 +	return (unsigned long *)(vec->ptrs);
 +}
 +
++=======
++>>>>>>> eb83b8e3e647 (media: videobuf2: Move frame_vector into media subsystem)
  struct kvec;
  int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
  			struct page **pages);
diff --cc include/media/videobuf2-core.h
index f6818f732f34,799ba61b5b6f..000000000000
--- a/include/media/videobuf2-core.h
+++ b/include/media/videobuf2-core.h
@@@ -17,6 -17,8 +17,11 @@@
  #include <linux/poll.h>
  #include <linux/dma-buf.h>
  #include <linux/bitops.h>
++<<<<<<< HEAD
++=======
+ #include <media/media-request.h>
+ #include <media/frame_vector.h>
++>>>>>>> eb83b8e3e647 (media: videobuf2: Move frame_vector into media subsystem)
  
  #define VB2_MAX_FRAME	(32)
  #define VB2_MAX_PLANES	(8)
diff --git a/drivers/media/common/videobuf2/Kconfig b/drivers/media/common/videobuf2/Kconfig
index 4ed11b46676a..6c0bafabea6e 100644
--- a/drivers/media/common/videobuf2/Kconfig
+++ b/drivers/media/common/videobuf2/Kconfig
@@ -8,7 +8,6 @@ config VIDEOBUF2_V4L2
 
 config VIDEOBUF2_MEMOPS
 	tristate
-	select FRAME_VECTOR
 
 config VIDEOBUF2_DMA_CONTIG
 	tristate
diff --git a/drivers/media/common/videobuf2/Makefile b/drivers/media/common/videobuf2/Makefile
index 77bebe8b202f..54306f8d096c 100644
--- a/drivers/media/common/videobuf2/Makefile
+++ b/drivers/media/common/videobuf2/Makefile
@@ -1,5 +1,6 @@
 # SPDX-License-Identifier: GPL-2.0
 videobuf2-common-objs := videobuf2-core.o
+videobuf2-common-objs += frame_vector.o
 
 ifeq ($(CONFIG_TRACEPOINTS),y)
   videobuf2-common-objs += vb2-trace.o
diff --git a/mm/frame_vector.c b/drivers/media/common/videobuf2/frame_vector.c
similarity index 99%
rename from mm/frame_vector.c
rename to drivers/media/common/videobuf2/frame_vector.c
index 11e9f3044daf..1eeb2ab02b46 100644
--- a/mm/frame_vector.c
+++ b/drivers/media/common/videobuf2/frame_vector.c
@@ -8,6 +8,8 @@
 #include <linux/pagemap.h>
 #include <linux/sched.h>
 
+#include <media/frame_vector.h>
+
 /**
  * get_vaddr_frames() - map virtual addresses to pfns
  * @start:	starting user address
* Unmerged path drivers/media/platform/omap/Kconfig
* Unmerged path include/linux/mm.h
diff --git a/include/media/frame_vector.h b/include/media/frame_vector.h
new file mode 100644
index 000000000000..bfed1710dc24
--- /dev/null
+++ b/include/media/frame_vector.h
@@ -0,0 +1,47 @@
+// SPDX-License-Identifier: GPL-2.0
+#ifndef _MEDIA_FRAME_VECTOR_H
+#define _MEDIA_FRAME_VECTOR_H
+
+/* Container for pinned pfns / pages in frame_vector.c */
+struct frame_vector {
+	unsigned int nr_allocated;	/* Number of frames we have space for */
+	unsigned int nr_frames;	/* Number of frames stored in ptrs array */
+	bool got_ref;		/* Did we pin pages by getting page ref? */
+	bool is_pfns;		/* Does array contain pages or pfns? */
+	void *ptrs[];		/* Array of pinned pfns / pages. Use
+				 * pfns_vector_pages() or pfns_vector_pfns()
+				 * for access */
+};
+
+struct frame_vector *frame_vector_create(unsigned int nr_frames);
+void frame_vector_destroy(struct frame_vector *vec);
+int get_vaddr_frames(unsigned long start, unsigned int nr_pfns,
+		     struct frame_vector *vec);
+void put_vaddr_frames(struct frame_vector *vec);
+int frame_vector_to_pages(struct frame_vector *vec);
+void frame_vector_to_pfns(struct frame_vector *vec);
+
+static inline unsigned int frame_vector_count(struct frame_vector *vec)
+{
+	return vec->nr_frames;
+}
+
+static inline struct page **frame_vector_pages(struct frame_vector *vec)
+{
+	if (vec->is_pfns) {
+		int err = frame_vector_to_pages(vec);
+
+		if (err)
+			return ERR_PTR(err);
+	}
+	return (struct page **)(vec->ptrs);
+}
+
+static inline unsigned long *frame_vector_pfns(struct frame_vector *vec)
+{
+	if (!vec->is_pfns)
+		frame_vector_to_pfns(vec);
+	return (unsigned long *)(vec->ptrs);
+}
+
+#endif /* _MEDIA_FRAME_VECTOR_H */
* Unmerged path include/media/videobuf2-core.h
diff --git a/mm/Kconfig b/mm/Kconfig
index 6da8b7636bba..f3ff9ce7dad8 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -716,9 +716,6 @@ config DEVICE_PRIVATE
 config VMAP_PFN
 	bool
 
-config FRAME_VECTOR
-	bool
-
 config ARCH_USES_HIGH_VMA_FLAGS
 	bool
 config ARCH_HAS_PKEYS
diff --git a/mm/Makefile b/mm/Makefile
index 7cd85b93df52..c7a75211fb15 100644
--- a/mm/Makefile
+++ b/mm/Makefile
@@ -106,7 +106,6 @@ obj-$(CONFIG_PAGE_EXTENSION) += page_ext.o
 obj-$(CONFIG_CMA_DEBUGFS) += cma_debug.o
 obj-$(CONFIG_USERFAULTFD) += userfaultfd.o
 obj-$(CONFIG_IDLE_PAGE_TRACKING) += page_idle.o
-obj-$(CONFIG_FRAME_VECTOR) += frame_vector.o
 obj-$(CONFIG_DEBUG_PAGE_REF) += debug_page_ref.o
 obj-$(CONFIG_HARDENED_USERCOPY) += usercopy.o
 obj-$(CONFIG_PERCPU_STATS) += percpu-stats.o
