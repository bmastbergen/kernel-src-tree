efi/arm64: libstub: Deal gracefully with EFI_RNG_PROTOCOL failure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Ard Biesheuvel <ardb@kernel.org>
commit d32de9130f6c79533508e2c7879f18997bfbe2a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/d32de913.failed

Currently, on arm64, we abort on any failure from efi_get_random_bytes()
other than EFI_NOT_FOUND when it comes to setting the physical seed for
KASLR, but ignore such failures when obtaining the seed for virtual
KASLR or for early seeding of the kernel's entropy pool via the config
table. This is inconsistent, and may lead to unexpected boot failures.

So let's permit any failure for the physical seed, and simply report
the error code if it does not equal EFI_NOT_FOUND.

	Cc: <stable@vger.kernel.org> # v5.8+
	Reported-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
(cherry picked from commit d32de9130f6c79533508e2c7879f18997bfbe2a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/efi/libstub/arm64-stub.c
diff --cc drivers/firmware/efi/libstub/arm64-stub.c
index 1b4d465cc5d9,04f5d79d4265..000000000000
--- a/drivers/firmware/efi/libstub/arm64-stub.c
+++ b/drivers/firmware/efi/libstub/arm64-stub.c
@@@ -54,23 -55,22 +54,32 @@@ efi_status_t handle_kernel_image(efi_sy
  {
  	efi_status_t status;
  	unsigned long kernel_size, kernel_memsize = 0;
 -	u32 phys_seed = 0;
 +	void *old_image_addr = (void *)*image_addr;
 +	unsigned long preferred_offset;
 +	u64 phys_seed = 0;
  
  	if (IS_ENABLED(CONFIG_RANDOMIZE_BASE)) {
 -		if (!efi_nokaslr) {
 -			status = efi_get_random_bytes(sizeof(phys_seed),
 +		if (!nokaslr()) {
 +			status = efi_get_random_bytes(sys_table_arg,
 +						      sizeof(phys_seed),
  						      (u8 *)&phys_seed);
  			if (status == EFI_NOT_FOUND) {
++<<<<<<< HEAD
 +				pr_efi(sys_table_arg, "EFI_RNG_PROTOCOL unavailable, no randomness supplied\n");
 +			} else if (status != EFI_SUCCESS) {
 +				pr_efi_err(sys_table_arg, "efi_get_random_bytes() failed\n");
 +				return status;
++=======
+ 				efi_info("EFI_RNG_PROTOCOL unavailable, KASLR will be disabled\n");
+ 				efi_nokaslr = true;
+ 			} else if (status != EFI_SUCCESS) {
+ 				efi_err("efi_get_random_bytes() failed (0x%lx), KASLR will be disabled\n",
+ 					status);
+ 				efi_nokaslr = true;
++>>>>>>> d32de9130f6c (efi/arm64: libstub: Deal gracefully with EFI_RNG_PROTOCOL failure)
  			}
  		} else {
 -			efi_info("KASLR disabled on kernel command line\n");
 +			pr_efi(sys_table_arg, "KASLR disabled on kernel command line\n");
  		}
  	}
  
* Unmerged path drivers/firmware/efi/libstub/arm64-stub.c
diff --git a/drivers/firmware/efi/libstub/fdt.c b/drivers/firmware/efi/libstub/fdt.c
index bf3d436f0c6d..1d883eb445c1 100644
--- a/drivers/firmware/efi/libstub/fdt.c
+++ b/drivers/firmware/efi/libstub/fdt.c
@@ -144,7 +144,7 @@ static efi_status_t update_fdt(efi_system_table_t *sys_table, void *orig_fdt,
 	if (status)
 		goto fdt_set_fail;
 
-	if (IS_ENABLED(CONFIG_RANDOMIZE_BASE)) {
+	if (IS_ENABLED(CONFIG_RANDOMIZE_BASE) && !efi_nokaslr) {
 		efi_status_t efi_status;
 
 		efi_status = efi_get_random_bytes(sys_table, sizeof(fdt_val64),
@@ -154,8 +154,6 @@ static efi_status_t update_fdt(efi_system_table_t *sys_table, void *orig_fdt,
 					     &fdt_val64, sizeof(fdt_val64));
 			if (status)
 				goto fdt_set_fail;
-		} else if (efi_status != EFI_NOT_FOUND) {
-			return efi_status;
 		}
 	}
 
