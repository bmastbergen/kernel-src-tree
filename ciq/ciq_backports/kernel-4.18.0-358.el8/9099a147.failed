sched/fair: Add a few assertions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 9099a14708ce1dfecb6002605594a0daa319b555
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/9099a147.failed

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Tested-by: Don Hiatt <dhiatt@digitalocean.com>
	Tested-by: Hongyu Ning <hongyu.ning@linux.intel.com>
	Tested-by: Vincent Guittot <vincent.guittot@linaro.org>
Link: https://lkml.kernel.org/r/20210422123308.015639083@infradead.org
(cherry picked from commit 9099a14708ce1dfecb6002605594a0daa319b555)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 36bb66f20ff1,6bdbb7bb0d66..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -6151,10 -6274,27 +6151,29 @@@ static int select_idle_cpu(struct task_
   */
  static int select_idle_sibling(struct task_struct *p, int prev, int target)
  {
 -	bool has_idle_core = false;
  	struct sched_domain *sd;
 -	unsigned long task_util;
  	int i, recent_used_cpu;
  
++<<<<<<< HEAD
 +	if (available_idle_cpu(target) || sched_idle_cpu(target))
++=======
+ 	/*
+ 	 * On asymmetric system, update task utilization because we will check
+ 	 * that the task fits with cpu's capacity.
+ 	 */
+ 	if (static_branch_unlikely(&sched_asym_cpucapacity)) {
+ 		sync_entity_load_avg(&p->se);
+ 		task_util = uclamp_task_util(p);
+ 	}
+ 
+ 	/*
+ 	 * per-cpu select_idle_mask usage
+ 	 */
+ 	lockdep_assert_irqs_disabled();
+ 
+ 	if ((available_idle_cpu(target) || sched_idle_cpu(target)) &&
+ 	    asym_fits_capacity(task_util, target))
++>>>>>>> 9099a14708ce (sched/fair: Add a few assertions)
  		return target;
  
  	/*
@@@ -6609,8 -6796,12 +6626,12 @@@ select_task_rq_fair(struct task_struct 
  	int new_cpu = prev_cpu;
  	int want_affine = 0;
  	/* SD_flags and WF_flags share the first nibble */
 -	int sd_flag = wake_flags & 0xF;
 +	int sd_flag = wake_flags & 0x1c; /* RHEL adjust this from 0xf */
  
+ 	/*
+ 	 * required for stable ->cpus_allowed
+ 	 */
+ 	lockdep_assert_held(&p->pi_lock);
  	if (wake_flags & WF_TTWU) {
  		record_wakee(p);
  
* Unmerged path kernel/sched/fair.c
