KVM: s390: restore old debugfs names

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Christian Borntraeger <borntraeger@de.ibm.com>
commit bb000f640e76c4c2402990d0613d4269e9c6dd29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/bb000f64.failed

commit bc9e9e672df9 ("KVM: debugfs: Reuse binary stats descriptors")
did replace the old definitions with the binary ones. While doing that
it missed that some files are names different than the counters. This
is especially important for kvm_stat which does have special handling
for counters named instruction_*.

Fixes: commit bc9e9e672df9 ("KVM: debugfs: Reuse binary stats descriptors")
CC: Jing Zhang <jingzhangos@google.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
Message-Id: <20210726150108.5603-1-borntraeger@de.ibm.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit bb000f640e76c4c2402990d0613d4269e9c6dd29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kvm/kvm-s390.c
diff --cc arch/s390/kvm/kvm-s390.c
index dfdae1f6dc62,4527ac7b5961..000000000000
--- a/arch/s390/kvm/kvm-s390.c
+++ b/arch/s390/kvm/kvm-s390.c
@@@ -57,119 -58,133 +57,229 @@@
  #define VCPU_IRQS_MAX_BUF (sizeof(struct kvm_s390_irq) * \
  			   (KVM_MAX_VCPUS + LOCAL_IRQS))
  
 -const struct _kvm_stats_desc kvm_vm_stats_desc[] = {
 -	KVM_GENERIC_VM_STATS(),
 -	STATS_DESC_COUNTER(VM, inject_io),
 -	STATS_DESC_COUNTER(VM, inject_float_mchk),
 -	STATS_DESC_COUNTER(VM, inject_pfault_done),
 -	STATS_DESC_COUNTER(VM, inject_service_signal),
 -	STATS_DESC_COUNTER(VM, inject_virtio)
 -};
 -static_assert(ARRAY_SIZE(kvm_vm_stats_desc) ==
 -		sizeof(struct kvm_vm_stat) / sizeof(u64));
 -
 -const struct kvm_stats_header kvm_vm_stats_header = {
 -	.name_size = KVM_STATS_NAME_SIZE,
 -	.num_desc = ARRAY_SIZE(kvm_vm_stats_desc),
 -	.id_offset = sizeof(struct kvm_stats_header),
 -	.desc_offset = sizeof(struct kvm_stats_header) + KVM_STATS_NAME_SIZE,
 -	.data_offset = sizeof(struct kvm_stats_header) + KVM_STATS_NAME_SIZE +
 -		       sizeof(kvm_vm_stats_desc),
 +struct kvm_stats_debugfs_item debugfs_entries[] = {
 +	VCPU_STAT("userspace_handled", exit_userspace),
 +	VCPU_STAT("exit_null", exit_null),
 +	VCPU_STAT("pfault_sync", pfault_sync),
 +	VCPU_STAT("exit_validity", exit_validity),
 +	VCPU_STAT("exit_stop_request", exit_stop_request),
 +	VCPU_STAT("exit_external_request", exit_external_request),
 +	VCPU_STAT("exit_io_request", exit_io_request),
 +	VCPU_STAT("exit_external_interrupt", exit_external_interrupt),
 +	VCPU_STAT("exit_instruction", exit_instruction),
 +	VCPU_STAT("exit_pei", exit_pei),
 +	VCPU_STAT("exit_program_interruption", exit_program_interruption),
 +	VCPU_STAT("exit_instr_and_program_int", exit_instr_and_program),
 +	VCPU_STAT("exit_operation_exception", exit_operation_exception),
 +	VCPU_STAT("halt_successful_poll", halt_successful_poll),
 +	VCPU_STAT("halt_attempted_poll", halt_attempted_poll),
 +	VCPU_STAT("halt_poll_invalid", halt_poll_invalid),
 +	VCPU_STAT("halt_no_poll_steal", halt_no_poll_steal),
 +	VCPU_STAT("halt_wakeup", halt_wakeup),
 +	VCPU_STAT("halt_poll_success_ns", halt_poll_success_ns),
 +	VCPU_STAT("halt_poll_fail_ns", halt_poll_fail_ns),
 +	VCPU_STAT("instruction_lctlg", instruction_lctlg),
 +	VCPU_STAT("instruction_lctl", instruction_lctl),
 +	VCPU_STAT("instruction_stctl", instruction_stctl),
 +	VCPU_STAT("instruction_stctg", instruction_stctg),
 +	VCPU_STAT("deliver_ckc", deliver_ckc),
 +	VCPU_STAT("deliver_cputm", deliver_cputm),
 +	VCPU_STAT("deliver_emergency_signal", deliver_emergency_signal),
 +	VCPU_STAT("deliver_external_call", deliver_external_call),
 +	VCPU_STAT("deliver_service_signal", deliver_service_signal),
 +	VCPU_STAT("deliver_virtio", deliver_virtio),
 +	VCPU_STAT("deliver_stop_signal", deliver_stop_signal),
 +	VCPU_STAT("deliver_prefix_signal", deliver_prefix_signal),
 +	VCPU_STAT("deliver_restart_signal", deliver_restart_signal),
 +	VCPU_STAT("deliver_program", deliver_program),
 +	VCPU_STAT("deliver_io", deliver_io),
 +	VCPU_STAT("deliver_machine_check", deliver_machine_check),
 +	VCPU_STAT("exit_wait_state", exit_wait_state),
 +	VCPU_STAT("inject_ckc", inject_ckc),
 +	VCPU_STAT("inject_cputm", inject_cputm),
 +	VCPU_STAT("inject_external_call", inject_external_call),
 +	VM_STAT("inject_float_mchk", inject_float_mchk),
 +	VCPU_STAT("inject_emergency_signal", inject_emergency_signal),
 +	VM_STAT("inject_io", inject_io),
 +	VCPU_STAT("inject_mchk", inject_mchk),
 +	VM_STAT("inject_pfault_done", inject_pfault_done),
 +	VCPU_STAT("inject_program", inject_program),
 +	VCPU_STAT("inject_restart", inject_restart),
 +	VM_STAT("inject_service_signal", inject_service_signal),
 +	VCPU_STAT("inject_set_prefix", inject_set_prefix),
 +	VCPU_STAT("inject_stop_signal", inject_stop_signal),
 +	VCPU_STAT("inject_pfault_init", inject_pfault_init),
 +	VM_STAT("inject_virtio", inject_virtio),
 +	VCPU_STAT("instruction_epsw", instruction_epsw),
 +	VCPU_STAT("instruction_gs", instruction_gs),
 +	VCPU_STAT("instruction_io_other", instruction_io_other),
 +	VCPU_STAT("instruction_lpsw", instruction_lpsw),
 +	VCPU_STAT("instruction_lpswe", instruction_lpswe),
 +	VCPU_STAT("instruction_pfmf", instruction_pfmf),
 +	VCPU_STAT("instruction_ptff", instruction_ptff),
 +	VCPU_STAT("instruction_stidp", instruction_stidp),
 +	VCPU_STAT("instruction_sck", instruction_sck),
 +	VCPU_STAT("instruction_sckpf", instruction_sckpf),
 +	VCPU_STAT("instruction_spx", instruction_spx),
 +	VCPU_STAT("instruction_stpx", instruction_stpx),
 +	VCPU_STAT("instruction_stap", instruction_stap),
 +	VCPU_STAT("instruction_iske", instruction_iske),
 +	VCPU_STAT("instruction_ri", instruction_ri),
 +	VCPU_STAT("instruction_rrbe", instruction_rrbe),
 +	VCPU_STAT("instruction_sske", instruction_sske),
 +	VCPU_STAT("instruction_ipte_interlock", instruction_ipte_interlock),
 +	VCPU_STAT("instruction_essa", instruction_essa),
 +	VCPU_STAT("instruction_stsi", instruction_stsi),
 +	VCPU_STAT("instruction_stfl", instruction_stfl),
 +	VCPU_STAT("instruction_tb", instruction_tb),
 +	VCPU_STAT("instruction_tpi", instruction_tpi),
 +	VCPU_STAT("instruction_tprot", instruction_tprot),
 +	VCPU_STAT("instruction_tsch", instruction_tsch),
 +	VCPU_STAT("instruction_sthyi", instruction_sthyi),
 +	VCPU_STAT("instruction_sie", instruction_sie),
 +	VCPU_STAT("instruction_sigp_sense", instruction_sigp_sense),
 +	VCPU_STAT("instruction_sigp_sense_running", instruction_sigp_sense_running),
 +	VCPU_STAT("instruction_sigp_external_call", instruction_sigp_external_call),
 +	VCPU_STAT("instruction_sigp_emergency", instruction_sigp_emergency),
 +	VCPU_STAT("instruction_sigp_cond_emergency", instruction_sigp_cond_emergency),
 +	VCPU_STAT("instruction_sigp_start", instruction_sigp_start),
 +	VCPU_STAT("instruction_sigp_stop", instruction_sigp_stop),
 +	VCPU_STAT("instruction_sigp_stop_store_status", instruction_sigp_stop_store_status),
 +	VCPU_STAT("instruction_sigp_store_status", instruction_sigp_store_status),
 +	VCPU_STAT("instruction_sigp_store_adtl_status", instruction_sigp_store_adtl_status),
 +	VCPU_STAT("instruction_sigp_set_arch", instruction_sigp_arch),
 +	VCPU_STAT("instruction_sigp_set_prefix", instruction_sigp_prefix),
 +	VCPU_STAT("instruction_sigp_restart", instruction_sigp_restart),
 +	VCPU_STAT("instruction_sigp_cpu_reset", instruction_sigp_cpu_reset),
 +	VCPU_STAT("instruction_sigp_init_cpu_reset", instruction_sigp_init_cpu_reset),
 +	VCPU_STAT("instruction_sigp_unknown", instruction_sigp_unknown),
 +	VCPU_STAT("instruction_diag_10", diagnose_10),
 +	VCPU_STAT("instruction_diag_44", diagnose_44),
 +	VCPU_STAT("instruction_diag_9c", diagnose_9c),
 +	VCPU_STAT("diag_9c_ignored", diagnose_9c_ignored),
 +	VCPU_STAT("diag_9c_forward", diagnose_9c_forward),
 +	VCPU_STAT("instruction_diag_258", diagnose_258),
 +	VCPU_STAT("instruction_diag_308", diagnose_308),
 +	VCPU_STAT("instruction_diag_500", diagnose_500),
 +	VCPU_STAT("instruction_diag_other", diagnose_other),
 +	{ NULL }
  };
  
++<<<<<<< HEAD
 +struct kvm_s390_tod_clock_ext {
 +	__u8 epoch_idx;
 +	__u64 tod;
 +	__u8 reserved[7];
 +} __packed;
++=======
+ const struct _kvm_stats_desc kvm_vcpu_stats_desc[] = {
+ 	KVM_GENERIC_VCPU_STATS(),
+ 	STATS_DESC_COUNTER(VCPU, exit_userspace),
+ 	STATS_DESC_COUNTER(VCPU, exit_null),
+ 	STATS_DESC_COUNTER(VCPU, exit_external_request),
+ 	STATS_DESC_COUNTER(VCPU, exit_io_request),
+ 	STATS_DESC_COUNTER(VCPU, exit_external_interrupt),
+ 	STATS_DESC_COUNTER(VCPU, exit_stop_request),
+ 	STATS_DESC_COUNTER(VCPU, exit_validity),
+ 	STATS_DESC_COUNTER(VCPU, exit_instruction),
+ 	STATS_DESC_COUNTER(VCPU, exit_pei),
+ 	STATS_DESC_COUNTER(VCPU, halt_no_poll_steal),
+ 	STATS_DESC_COUNTER(VCPU, instruction_lctl),
+ 	STATS_DESC_COUNTER(VCPU, instruction_lctlg),
+ 	STATS_DESC_COUNTER(VCPU, instruction_stctl),
+ 	STATS_DESC_COUNTER(VCPU, instruction_stctg),
+ 	STATS_DESC_COUNTER(VCPU, exit_program_interruption),
+ 	STATS_DESC_COUNTER(VCPU, exit_instr_and_program),
+ 	STATS_DESC_COUNTER(VCPU, exit_operation_exception),
+ 	STATS_DESC_COUNTER(VCPU, deliver_ckc),
+ 	STATS_DESC_COUNTER(VCPU, deliver_cputm),
+ 	STATS_DESC_COUNTER(VCPU, deliver_external_call),
+ 	STATS_DESC_COUNTER(VCPU, deliver_emergency_signal),
+ 	STATS_DESC_COUNTER(VCPU, deliver_service_signal),
+ 	STATS_DESC_COUNTER(VCPU, deliver_virtio),
+ 	STATS_DESC_COUNTER(VCPU, deliver_stop_signal),
+ 	STATS_DESC_COUNTER(VCPU, deliver_prefix_signal),
+ 	STATS_DESC_COUNTER(VCPU, deliver_restart_signal),
+ 	STATS_DESC_COUNTER(VCPU, deliver_program),
+ 	STATS_DESC_COUNTER(VCPU, deliver_io),
+ 	STATS_DESC_COUNTER(VCPU, deliver_machine_check),
+ 	STATS_DESC_COUNTER(VCPU, exit_wait_state),
+ 	STATS_DESC_COUNTER(VCPU, inject_ckc),
+ 	STATS_DESC_COUNTER(VCPU, inject_cputm),
+ 	STATS_DESC_COUNTER(VCPU, inject_external_call),
+ 	STATS_DESC_COUNTER(VCPU, inject_emergency_signal),
+ 	STATS_DESC_COUNTER(VCPU, inject_mchk),
+ 	STATS_DESC_COUNTER(VCPU, inject_pfault_init),
+ 	STATS_DESC_COUNTER(VCPU, inject_program),
+ 	STATS_DESC_COUNTER(VCPU, inject_restart),
+ 	STATS_DESC_COUNTER(VCPU, inject_set_prefix),
+ 	STATS_DESC_COUNTER(VCPU, inject_stop_signal),
+ 	STATS_DESC_COUNTER(VCPU, instruction_epsw),
+ 	STATS_DESC_COUNTER(VCPU, instruction_gs),
+ 	STATS_DESC_COUNTER(VCPU, instruction_io_other),
+ 	STATS_DESC_COUNTER(VCPU, instruction_lpsw),
+ 	STATS_DESC_COUNTER(VCPU, instruction_lpswe),
+ 	STATS_DESC_COUNTER(VCPU, instruction_pfmf),
+ 	STATS_DESC_COUNTER(VCPU, instruction_ptff),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sck),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sckpf),
+ 	STATS_DESC_COUNTER(VCPU, instruction_stidp),
+ 	STATS_DESC_COUNTER(VCPU, instruction_spx),
+ 	STATS_DESC_COUNTER(VCPU, instruction_stpx),
+ 	STATS_DESC_COUNTER(VCPU, instruction_stap),
+ 	STATS_DESC_COUNTER(VCPU, instruction_iske),
+ 	STATS_DESC_COUNTER(VCPU, instruction_ri),
+ 	STATS_DESC_COUNTER(VCPU, instruction_rrbe),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sske),
+ 	STATS_DESC_COUNTER(VCPU, instruction_ipte_interlock),
+ 	STATS_DESC_COUNTER(VCPU, instruction_stsi),
+ 	STATS_DESC_COUNTER(VCPU, instruction_stfl),
+ 	STATS_DESC_COUNTER(VCPU, instruction_tb),
+ 	STATS_DESC_COUNTER(VCPU, instruction_tpi),
+ 	STATS_DESC_COUNTER(VCPU, instruction_tprot),
+ 	STATS_DESC_COUNTER(VCPU, instruction_tsch),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sie),
+ 	STATS_DESC_COUNTER(VCPU, instruction_essa),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sthyi),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_sense),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_sense_running),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_external_call),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_emergency),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_cond_emergency),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_start),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_stop),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_stop_store_status),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_store_status),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_store_adtl_status),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_arch),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_prefix),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_restart),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_init_cpu_reset),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_cpu_reset),
+ 	STATS_DESC_COUNTER(VCPU, instruction_sigp_unknown),
+ 	STATS_DESC_COUNTER(VCPU, instruction_diagnose_10),
+ 	STATS_DESC_COUNTER(VCPU, instruction_diagnose_44),
+ 	STATS_DESC_COUNTER(VCPU, instruction_diagnose_9c),
+ 	STATS_DESC_COUNTER(VCPU, diag_9c_ignored),
+ 	STATS_DESC_COUNTER(VCPU, diag_9c_forward),
+ 	STATS_DESC_COUNTER(VCPU, instruction_diagnose_258),
+ 	STATS_DESC_COUNTER(VCPU, instruction_diagnose_308),
+ 	STATS_DESC_COUNTER(VCPU, instruction_diagnose_500),
+ 	STATS_DESC_COUNTER(VCPU, instruction_diagnose_other),
+ 	STATS_DESC_COUNTER(VCPU, pfault_sync)
+ };
+ static_assert(ARRAY_SIZE(kvm_vcpu_stats_desc) ==
+ 		sizeof(struct kvm_vcpu_stat) / sizeof(u64));
+ 
+ const struct kvm_stats_header kvm_vcpu_stats_header = {
+ 	.name_size = KVM_STATS_NAME_SIZE,
+ 	.num_desc = ARRAY_SIZE(kvm_vcpu_stats_desc),
+ 	.id_offset = sizeof(struct kvm_stats_header),
+ 	.desc_offset = sizeof(struct kvm_stats_header) + KVM_STATS_NAME_SIZE,
+ 	.data_offset = sizeof(struct kvm_stats_header) + KVM_STATS_NAME_SIZE +
+ 		       sizeof(kvm_vcpu_stats_desc),
+ };
++>>>>>>> bb000f640e76 (KVM: s390: restore old debugfs names)
  
  /* allow nested virtualization in KVM (if enabled by user space) */
  static int nested;
diff --git a/arch/s390/include/asm/kvm_host.h b/arch/s390/include/asm/kvm_host.h
index 611f18ecde91..99e4faf12688 100644
--- a/arch/s390/include/asm/kvm_host.h
+++ b/arch/s390/include/asm/kvm_host.h
@@ -451,15 +451,15 @@ struct kvm_vcpu_stat {
 	u64 instruction_sigp_init_cpu_reset;
 	u64 instruction_sigp_cpu_reset;
 	u64 instruction_sigp_unknown;
-	u64 diagnose_10;
-	u64 diagnose_44;
-	u64 diagnose_9c;
-	u64 diagnose_9c_ignored;
-	u64 diagnose_9c_forward;
-	u64 diagnose_258;
-	u64 diagnose_308;
-	u64 diagnose_500;
-	u64 diagnose_other;
+	u64 instruction_diagnose_10;
+	u64 instruction_diagnose_44;
+	u64 instruction_diagnose_9c;
+	u64 diag_9c_ignored;
+	u64 diag_9c_forward;
+	u64 instruction_diagnose_258;
+	u64 instruction_diagnose_308;
+	u64 instruction_diagnose_500;
+	u64 instruction_diagnose_other;
 	u64 pfault_sync;
 };
 
diff --git a/arch/s390/kvm/diag.c b/arch/s390/kvm/diag.c
index 569af09b54ee..54f8d022e7de 100644
--- a/arch/s390/kvm/diag.c
+++ b/arch/s390/kvm/diag.c
@@ -25,7 +25,7 @@ static int diag_release_pages(struct kvm_vcpu *vcpu)
 
 	start = vcpu->run->s.regs.gprs[(vcpu->arch.sie_block->ipa & 0xf0) >> 4];
 	end = vcpu->run->s.regs.gprs[vcpu->arch.sie_block->ipa & 0xf] + PAGE_SIZE;
-	vcpu->stat.diagnose_10++;
+	vcpu->stat.instruction_diagnose_10++;
 
 	if (start & ~PAGE_MASK || end & ~PAGE_MASK || start >= end
 	    || start < 2 * PAGE_SIZE)
@@ -75,7 +75,7 @@ static int __diag_page_ref_service(struct kvm_vcpu *vcpu)
 
 	VCPU_EVENT(vcpu, 3, "diag page reference parameter block at 0x%llx",
 		   vcpu->run->s.regs.gprs[rx]);
-	vcpu->stat.diagnose_258++;
+	vcpu->stat.instruction_diagnose_258++;
 	if (vcpu->run->s.regs.gprs[rx] & 7)
 		return kvm_s390_inject_program_int(vcpu, PGM_SPECIFICATION);
 	rc = read_guest(vcpu, vcpu->run->s.regs.gprs[rx], rx, &parm, sizeof(parm));
@@ -146,7 +146,7 @@ static int __diag_page_ref_service(struct kvm_vcpu *vcpu)
 static int __diag_time_slice_end(struct kvm_vcpu *vcpu)
 {
 	VCPU_EVENT(vcpu, 5, "%s", "diag time slice end");
-	vcpu->stat.diagnose_44++;
+	vcpu->stat.instruction_diagnose_44++;
 	kvm_vcpu_on_spin(vcpu, true);
 	return 0;
 }
@@ -170,7 +170,7 @@ static int __diag_time_slice_end_directed(struct kvm_vcpu *vcpu)
 	int tid;
 
 	tid = vcpu->run->s.regs.gprs[(vcpu->arch.sie_block->ipa & 0xf0) >> 4];
-	vcpu->stat.diagnose_9c++;
+	vcpu->stat.instruction_diagnose_9c++;
 
 	/* yield to self */
 	if (tid == vcpu->vcpu_id)
@@ -193,7 +193,7 @@ static int __diag_time_slice_end_directed(struct kvm_vcpu *vcpu)
 		VCPU_EVENT(vcpu, 5,
 			   "diag time slice end directed to %d: yield forwarded",
 			   tid);
-		vcpu->stat.diagnose_9c_forward++;
+		vcpu->stat.diag_9c_forward++;
 		return 0;
 	}
 
@@ -204,7 +204,7 @@ static int __diag_time_slice_end_directed(struct kvm_vcpu *vcpu)
 	return 0;
 no_yield:
 	VCPU_EVENT(vcpu, 5, "diag time slice end directed to %d: ignored", tid);
-	vcpu->stat.diagnose_9c_ignored++;
+	vcpu->stat.diag_9c_ignored++;
 	return 0;
 }
 
@@ -214,7 +214,7 @@ static int __diag_ipl_functions(struct kvm_vcpu *vcpu)
 	unsigned long subcode = vcpu->run->s.regs.gprs[reg] & 0xffff;
 
 	VCPU_EVENT(vcpu, 3, "diag ipl functions, subcode %lx", subcode);
-	vcpu->stat.diagnose_308++;
+	vcpu->stat.instruction_diagnose_308++;
 	switch (subcode) {
 	case 3:
 		vcpu->run->s390_reset_flags = KVM_S390_RESET_CLEAR;
@@ -246,7 +246,7 @@ static int __diag_virtio_hypercall(struct kvm_vcpu *vcpu)
 {
 	int ret;
 
-	vcpu->stat.diagnose_500++;
+	vcpu->stat.instruction_diagnose_500++;
 	/* No virtio-ccw notification? Get out quickly. */
 	if (!vcpu->kvm->arch.css_support ||
 	    (vcpu->run->s.regs.gprs[1] != KVM_S390_VIRTIO_CCW_NOTIFY))
@@ -300,7 +300,7 @@ int kvm_s390_handle_diag(struct kvm_vcpu *vcpu)
 	case 0x500:
 		return __diag_virtio_hypercall(vcpu);
 	default:
-		vcpu->stat.diagnose_other++;
+		vcpu->stat.instruction_diagnose_other++;
 		return -EOPNOTSUPP;
 	}
 }
* Unmerged path arch/s390/kvm/kvm-s390.c
