net: switchdev: delete switchdev_port_obj_add_now

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Vladimir Oltean <vladimir.oltean@nxp.com>
commit cf6def51badebbacaedd3999a4d94761197e18b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/cf6def51.failed

After the removal of the transactional model inside
switchdev_port_obj_add_now, it has no added value and we can just call
switchdev_port_obj_notify directly, bypassing this function. Let's
delete it.

	Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Reviewed-by: Ido Schimmel <idosch@nvidia.com>
	Acked-by: Linus Walleij <linus.walleij@linaro.org>
	Acked-by: Jiri Pirko <jiri@nvidia.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit cf6def51badebbacaedd3999a4d94761197e18b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/switchdev/switchdev.c
diff --cc net/switchdev/switchdev.c
index b8f2957d0fcb,3509d362056d..000000000000
--- a/net/switchdev/switchdev.c
+++ b/net/switchdev/switchdev.c
@@@ -248,41 -242,6 +248,44 @@@ static int switchdev_port_obj_notify(en
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int switchdev_port_obj_add_now(struct net_device *dev,
 +				      const struct switchdev_obj *obj,
 +				      struct netlink_ext_ack *extack)
 +{
 +	struct switchdev_trans trans;
 +	int err;
 +
 +	ASSERT_RTNL();
 +
 +	/* Phase I: prepare for obj add. Driver/device should fail
 +	 * here if there are going to be issues in the commit phase,
 +	 * such as lack of resources or support.  The driver/device
 +	 * should reserve resources needed for the commit phase here,
 +	 * but should not commit the obj.
 +	 */
 +
 +	trans.ph_prepare = true;
 +	err = switchdev_port_obj_notify(SWITCHDEV_PORT_OBJ_ADD,
 +					dev, obj, &trans, extack);
 +	if (err)
 +		return err;
 +
 +	/* Phase II: commit obj add.  This cannot fail as a fault
 +	 * of driver/device.  If it does, it's a bug in the driver/device
 +	 * because the driver said everythings was OK in phase I.
 +	 */
 +
 +	trans.ph_prepare = false;
 +	err = switchdev_port_obj_notify(SWITCHDEV_PORT_OBJ_ADD,
 +					dev, obj, &trans, extack);
 +	WARN(err, "%s: Commit of object (id=%d) failed.\n", dev->name, obj->id);
 +
 +	return err;
 +}
 +
++=======
++>>>>>>> cf6def51bade (net: switchdev: delete switchdev_port_obj_add_now)
  static void switchdev_port_obj_add_deferred(struct net_device *dev,
  					    const void *data)
  {
* Unmerged path net/switchdev/switchdev.c
