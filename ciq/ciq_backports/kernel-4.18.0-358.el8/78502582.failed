powerpc/mm/highmem: use __set_pte_at() for kmap_local()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 785025820a6a565185ce9d47fdd8d23dbf91dee8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/78502582.failed

The original PowerPC highmem mapping function used __set_pte_at() to
denote that the mapping is per CPU.  This got lost with the conversion
to the generic implementation.

Override the default map function.

Link: https://lkml.kernel.org/r/20210112170411.281464308@linutronix.de
Fixes: 47da42b27a56 ("powerpc/mm/highmem: Switch to generic kmap atomic")
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Andreas Larsson <andreas@gaisler.com>
	Cc: "David S. Miller" <davem@davemloft.net>
	Cc: Paul Cercueil <paul@crapouillou.net>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 785025820a6a565185ce9d47fdd8d23dbf91dee8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/highmem.h
diff --cc arch/powerpc/include/asm/highmem.h
index cec820f961da,c0fcd1bbdba9..000000000000
--- a/arch/powerpc/include/asm/highmem.h
+++ b/arch/powerpc/include/asm/highmem.h
@@@ -59,34 -56,14 +59,43 @@@ extern pte_t *pkmap_page_table
  #define PKMAP_NR(virt)  ((virt-PKMAP_BASE) >> PAGE_SHIFT)
  #define PKMAP_ADDR(nr)  (PKMAP_BASE + ((nr) << PAGE_SHIFT))
  
 -#define flush_cache_kmaps()	flush_cache_all()
 +extern void *kmap_high(struct page *page);
 +extern void kunmap_high(struct page *page);
 +extern void *kmap_atomic_prot(struct page *page, pgprot_t prot);
 +extern void __kunmap_atomic(void *kvaddr);
 +
++<<<<<<< HEAD
 +static inline void *kmap(struct page *page)
 +{
 +	might_sleep();
 +	if (!PageHighMem(page))
 +		return page_address(page);
 +	return kmap_high(page);
 +}
 +
 +static inline void kunmap(struct page *page)
 +{
 +	BUG_ON(in_interrupt());
 +	if (!PageHighMem(page))
 +		return;
 +	kunmap_high(page);
 +}
  
 +static inline void *kmap_atomic(struct page *page)
 +{
 +	return kmap_atomic_prot(page, kmap_prot);
 +}
 +
 +
 +#define flush_cache_kmaps()	flush_cache_all()
++=======
+ #define arch_kmap_local_set_pte(mm, vaddr, ptep, ptev)	\
+ 	__set_pte_at(mm, vaddr, ptep, ptev, 1)
+ #define arch_kmap_local_post_map(vaddr, pteval)	\
+ 	local_flush_tlb_page(NULL, vaddr)
+ #define arch_kmap_local_post_unmap(vaddr)	\
+ 	local_flush_tlb_page(NULL, vaddr)
++>>>>>>> 785025820a6a (powerpc/mm/highmem: use __set_pte_at() for kmap_local())
  
  #endif /* __KERNEL__ */
  
* Unmerged path arch/powerpc/include/asm/highmem.h
