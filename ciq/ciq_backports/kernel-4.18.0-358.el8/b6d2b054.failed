mq-deadline: Fix request accounting

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit b6d2b054e8baaee53fd2d4854c63cbf0f2c6262a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/b6d2b054.failed

The block layer may call the I/O scheduler .finish_request() callback
without having called the .insert_requests() callback. Make sure that the
mq-deadline I/O statistics are correct if the block layer inserts an I/O
request that bypasses the I/O scheduler. This patch prevents that lower
priority I/O is delayed longer than necessary for mixed I/O priority
workloads.

	Cc: Niklas Cassel <Niklas.Cassel@wdc.com>
	Cc: Damien Le Moal <damien.lemoal@wdc.com>
	Cc: Hannes Reinecke <hare@suse.de>
	Reported-by: Niklas Cassel <Niklas.Cassel@wdc.com>
Fixes: 08a9ad8bf607 ("block/mq-deadline: Add cgroup support")
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
Link: https://lore.kernel.org/r/20210824170520.1659173-1-bvanassche@acm.org
	Reviewed-by: Niklas Cassel <niklas.cassel@wdc.com>
	Tested-by: Niklas Cassel <niklas.cassel@wdc.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b6d2b054e8baaee53fd2d4854c63cbf0f2c6262a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/mq-deadline.c
diff --cc block/mq-deadline.c
index 19fd637b8c25,18dc8efe9652..000000000000
--- a/block/mq-deadline.c
+++ b/block/mq-deadline.c
@@@ -696,11 -711,14 +696,12 @@@ static void dd_insert_request(struct bl
  
  	prio = ioprio_class_to_prio[ioprio_class];
  	dd_count(dd, inserted, prio);
+ 	rq->elv.priv[0] = (void *)(uintptr_t)1;
  
 -	if (blk_mq_sched_try_insert_merge(q, rq, &free)) {
 -		blk_mq_free_requests(&free);
 +	if (blk_mq_sched_try_insert_merge(q, rq))
  		return;
 -	}
  
 -	trace_block_rq_insert(rq);
 +	blk_mq_sched_request_inserted(rq);
  
  	per_prio = &dd->per_prio[prio];
  	if (at_head) {
@@@ -739,12 -760,10 +740,18 @@@ static void dd_insert_requests(struct b
  	spin_unlock(&dd->lock);
  }
  
++<<<<<<< HEAD
 +/*
 + * Nothing to do here. This is defined only to ensure that .finish_request
 + * method is called upon request completion.
 + */
 +static void dd_prepare_request(struct request *rq, struct bio *bio)
++=======
+ /* Callback from inside blk_mq_rq_ctx_init(). */
+ static void dd_prepare_request(struct request *rq)
++>>>>>>> b6d2b054e8ba (mq-deadline: Fix request accounting)
  {
+ 	rq->elv.priv[0] = NULL;
  }
  
  /*
* Unmerged path block/mq-deadline.c
