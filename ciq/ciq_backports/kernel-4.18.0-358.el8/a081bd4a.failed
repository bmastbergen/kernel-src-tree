of/device: Add input id to of_dma_configure()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
commit a081bd4af4ce80d845a0bab355ab5d0822db8058
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a081bd4a.failed

Devices sitting on proprietary busses have a device ID space that
is owned by the respective bus and related firmware bindings. In order
to let the generic OF layer handle the input translations to
an IOMMU id, for such busses the current of_dma_configure() interface
should be extended in order to allow the bus layer to provide the
device input id parameter - that is retrieved/assigned in bus
specific code and firmware.

Augment of_dma_configure() to add an optional input_id parameter,
leaving current functionality unchanged.

	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Reviewed-by: Rob Herring <robh@kernel.org>
	Cc: Rob Herring <robh+dt@kernel.org>
	Cc: Robin Murphy <robin.murphy@arm.com>
	Cc: Joerg Roedel <joro@8bytes.org>
	Cc: Laurentiu Tudor <laurentiu.tudor@nxp.com>
Link: https://lore.kernel.org/r/20200619082013.13661-8-lorenzo.pieralisi@arm.com
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit a081bd4af4ce80d845a0bab355ab5d0822db8058)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bus/fsl-mc/fsl-mc-bus.c
#	drivers/iommu/of_iommu.c
#	drivers/of/device.c
diff --cc drivers/bus/fsl-mc/fsl-mc-bus.c
index 5d8266c6571f,8ead3f0238f2..000000000000
--- a/drivers/bus/fsl-mc/fsl-mc-bus.c
+++ b/drivers/bus/fsl-mc/fsl-mc-bus.c
@@@ -127,6 -115,18 +127,21 @@@ static int fsl_mc_bus_uevent(struct dev
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int fsl_mc_dma_configure(struct device *dev)
+ {
+ 	struct device *dma_dev = dev;
+ 	struct fsl_mc_device *mc_dev = to_fsl_mc_device(dev);
+ 	u32 input_id = mc_dev->icid;
+ 
+ 	while (dev_is_fsl_mc(dma_dev))
+ 		dma_dev = dma_dev->parent;
+ 
+ 	return of_dma_configure_id(dev, dma_dev->of_node, 0, &input_id);
+ }
+ 
++>>>>>>> a081bd4af4ce (of/device: Add input id to of_dma_configure())
  static ssize_t modalias_show(struct device *dev, struct device_attribute *attr,
  			     char *buf)
  {
diff --cc drivers/iommu/of_iommu.c
index 1f2baa27b42c,e505b9130a1c..000000000000
--- a/drivers/iommu/of_iommu.c
+++ b/drivers/iommu/of_iommu.c
@@@ -137,21 -163,21 +174,34 @@@ struct of_pci_iommu_alias_info 
  static int of_pci_iommu_init(struct pci_dev *pdev, u16 alias, void *data)
  {
  	struct of_pci_iommu_alias_info *info = data;
- 	struct of_phandle_args iommu_spec = { .args_count = 1 };
- 	int err;
+ 	u32 input_id = alias;
  
++<<<<<<< HEAD
 +	err = of_map_rid(info->np, alias, "iommu-map", "iommu-map-mask",
 +			 &iommu_spec.np, iommu_spec.args);
 +	if (err)
 +		return err == -ENODEV ? NO_IOMMU : err;
 +
 +	err = of_iommu_xlate(info->dev, &iommu_spec);
 +	of_node_put(iommu_spec.np);
 +	return err;
 +}
 +
++=======
+ 	return of_iommu_configure_dev_id(info->np, info->dev, &input_id);
+ }
+ 
+ static int of_iommu_configure_device(struct device_node *master_np,
+ 				     struct device *dev, const u32 *id)
+ {
+ 	return (id) ? of_iommu_configure_dev_id(master_np, dev, id) :
+ 		      of_iommu_configure_dev(master_np, dev);
+ }
+ 
++>>>>>>> a081bd4af4ce (of/device: Add input id to of_dma_configure())
  const struct iommu_ops *of_iommu_configure(struct device *dev,
- 					   struct device_node *master_np)
+ 					   struct device_node *master_np,
+ 					   const u32 *id)
  {
  	const struct iommu_ops *ops = NULL;
  	struct iommu_fwspec *fwspec = dev_iommu_fwspec_get(dev);
diff --cc drivers/of/device.c
index 453aa80bba55,b439c1e05434..000000000000
--- a/drivers/of/device.c
+++ b/drivers/of/device.c
@@@ -160,8 -162,8 +162,13 @@@ int of_dma_configure_id(struct device *
  	dev_dbg(dev, "device is%sdma coherent\n",
  		coherent ? " " : " not ");
  
++<<<<<<< HEAD
 +	iommu = of_iommu_configure(dev, np);
 +	if (IS_ERR(iommu) && PTR_ERR(iommu) == -EPROBE_DEFER)
++=======
+ 	iommu = of_iommu_configure(dev, np, id);
+ 	if (PTR_ERR(iommu) == -EPROBE_DEFER)
++>>>>>>> a081bd4af4ce (of/device: Add input id to of_dma_configure())
  		return -EPROBE_DEFER;
  
  	dev_dbg(dev, "device is%sbehind an iommu\n",
* Unmerged path drivers/bus/fsl-mc/fsl-mc-bus.c
* Unmerged path drivers/iommu/of_iommu.c
* Unmerged path drivers/of/device.c
diff --git a/include/linux/of_device.h b/include/linux/of_device.h
index 8d31e39dd564..07ca187fc5e4 100644
--- a/include/linux/of_device.h
+++ b/include/linux/of_device.h
@@ -55,9 +55,15 @@ static inline struct device_node *of_cpu_device_node_get(int cpu)
 	return of_node_get(cpu_dev->of_node);
 }
 
-int of_dma_configure(struct device *dev,
+int of_dma_configure_id(struct device *dev,
 		     struct device_node *np,
-		     bool force_dma);
+		     bool force_dma, const u32 *id);
+static inline int of_dma_configure(struct device *dev,
+				   struct device_node *np,
+				   bool force_dma)
+{
+	return of_dma_configure_id(dev, np, force_dma, NULL);
+}
 #else /* CONFIG_OF */
 
 static inline int of_driver_match_device(struct device *dev,
@@ -106,6 +112,12 @@ static inline struct device_node *of_cpu_device_node_get(int cpu)
 	return NULL;
 }
 
+static inline int of_dma_configure_id(struct device *dev,
+				   struct device_node *np,
+				   bool force_dma)
+{
+	return 0;
+}
 static inline int of_dma_configure(struct device *dev,
 				   struct device_node *np,
 				   bool force_dma)
diff --git a/include/linux/of_iommu.h b/include/linux/of_iommu.h
index f3d40dd7bb66..16f4b3e87f20 100644
--- a/include/linux/of_iommu.h
+++ b/include/linux/of_iommu.h
@@ -13,7 +13,8 @@ extern int of_get_dma_window(struct device_node *dn, const char *prefix,
 			     size_t *size);
 
 extern const struct iommu_ops *of_iommu_configure(struct device *dev,
-					struct device_node *master_np);
+					struct device_node *master_np,
+					const u32 *id);
 
 #else
 
@@ -25,7 +26,8 @@ static inline int of_get_dma_window(struct device_node *dn, const char *prefix,
 }
 
 static inline const struct iommu_ops *of_iommu_configure(struct device *dev,
-					 struct device_node *master_np)
+					 struct device_node *master_np,
+					 const u32 *id)
 {
 	return NULL;
 }
