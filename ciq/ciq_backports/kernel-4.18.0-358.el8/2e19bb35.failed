net: bridge: switchdev: fix incorrect use of FDB flags when picking the dst device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Vladimir Oltean <vladimir.oltean@nxp.com>
commit 2e19bb35ce15a8b49f4a809469163f668e2d539f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/2e19bb35.failed

Nikolay points out that it is incorrect to assume that it is impossible
to have an fdb entry with fdb->dst == NULL and the BR_FDB_LOCAL bit in
fdb->flags not set. This is because there are reader-side places that
test_bit(BR_FDB_LOCAL, &fdb->flags) without the br->hash_lock, and if
the updating of the FDB entry happens on another CPU, there are no
memory barriers at writer or reader side which would ensure that the
reader sees the updates to both fdb->flags and fdb->dst in the same
order, i.e. the reader will not see an inconsistent FDB entry.

So we must be prepared to deal with FDB entries where fdb->dst and
fdb->flags are in a potentially inconsistent state, and that means that
fdb->dst == NULL should remain a condition to pick the net_device that
we report to switchdev as being the bridge device, which is what the
code did prior to the blamed patch.

Fixes: 52e4bec15546 ("net: bridge: switchdev: treat local FDBs the same as entries towards the bridge")
	Suggested-by: Nikolay Aleksandrov <nikolay@nvidia.com>
	Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
	Acked-by: Nikolay Aleksandrov <nikolay@nvidia.com>
Link: https://lore.kernel.org/r/20210802113633.189831-1-vladimir.oltean@nxp.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 2e19bb35ce15a8b49f4a809469163f668e2d539f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bridge/br_fdb.c
#	net/bridge/br_switchdev.c
diff --cc net/bridge/br_fdb.c
index 727e4c29f2d6,af31cebfda94..000000000000
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@@ -718,9 -745,10 +718,14 @@@ static int br_fdb_replay_one(struct not
  	item.added_by_user = test_bit(BR_FDB_ADDED_BY_USER, &fdb->flags);
  	item.offloaded = test_bit(BR_FDB_OFFLOADED, &fdb->flags);
  	item.is_local = test_bit(BR_FDB_LOCAL, &fdb->flags);
++<<<<<<< HEAD
 +	item.info.dev = dev;
++=======
+ 	item.info.dev = (!p || item.is_local) ? br->dev : p->dev;
+ 	item.info.ctx = ctx;
++>>>>>>> 2e19bb35ce15 (net: bridge: switchdev: fix incorrect use of FDB flags when picking the dst device)
  
 -	err = nb->notifier_call(nb, action, &item);
 +	err = nb->notifier_call(nb, SWITCHDEV_FDB_ADD_TO_DEVICE, &item);
  	return notifier_to_errno(err);
  }
  
diff --cc net/bridge/br_switchdev.c
index be7535fa5f0e,36d75fd4a80c..000000000000
--- a/net/bridge/br_switchdev.c
+++ b/net/bridge/br_switchdev.c
@@@ -86,6 -134,7 +86,10 @@@ br_switchdev_fdb_notify(struct net_brid
  		.is_local = test_bit(BR_FDB_LOCAL, &fdb->flags),
  		.offloaded = test_bit(BR_FDB_OFFLOADED, &fdb->flags),
  	};
++<<<<<<< HEAD
++=======
+ 	struct net_device *dev = (!dst || info.is_local) ? br->dev : dst->dev;
++>>>>>>> 2e19bb35ce15 (net: bridge: switchdev: fix incorrect use of FDB flags when picking the dst device)
  
  	switch (type) {
  	case RTM_DELNEIGH:
* Unmerged path net/bridge/br_fdb.c
* Unmerged path net/bridge/br_switchdev.c
