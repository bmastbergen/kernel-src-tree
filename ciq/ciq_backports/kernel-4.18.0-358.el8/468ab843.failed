mm: vmscan: add shrinker_info_protected() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Yang Shi <shy828301@gmail.com>
commit 468ab8437a97a953895856c3709e48b3067da13c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/468ab843.failed

The shrinker_info is dereferenced in a couple of places via
rcu_dereference_protected with different calling conventions, for
example, using mem_cgroup_nodeinfo helper or dereferencing
memcg->nodeinfo[nid]->shrinker_info.  And the later patch will add more
dereference places.

So extract the dereference into a helper to make the code more readable.
No functional change.

[akpm@linux-foundation.org: retain rcu_dereference_protected() in free_shrinker_info(), per Hugh]

Link: https://lkml.kernel.org/r/20210311190845.9708-8-shy828301@gmail.com
	Signed-off-by: Yang Shi <shy828301@gmail.com>
	Acked-by: Roman Gushchin <guro@fb.com>
	Acked-by: Kirill Tkhai <ktkhai@virtuozzo.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 468ab8437a97a953895856c3709e48b3067da13c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmscan.c
diff --cc mm/vmscan.c
index c8392b7a9934,400f4a657b27..000000000000
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@@ -199,16 -192,23 +199,32 @@@ static inline int shrinker_map_size(in
  	return (DIV_ROUND_UP(nr_items, BITS_PER_LONG) * sizeof(unsigned long));
  }
  
++<<<<<<< HEAD
 +static int expand_one_shrinker_map(struct mem_cgroup *memcg,
 +				   int size, int old_size)
++=======
+ static struct shrinker_info *shrinker_info_protected(struct mem_cgroup *memcg,
+ 						     int nid)
+ {
+ 	return rcu_dereference_protected(memcg->nodeinfo[nid]->shrinker_info,
+ 					 lockdep_is_held(&shrinker_rwsem));
+ }
+ 
+ static int expand_one_shrinker_info(struct mem_cgroup *memcg,
+ 				    int size, int old_size)
++>>>>>>> 468ab8437a97 (mm: vmscan: add shrinker_info_protected() helper)
  {
 -	struct shrinker_info *new, *old;
 +	struct memcg_shrinker_map *new, *old;
  	struct mem_cgroup_per_node *pn;
  	int nid;
  
  	for_each_node(nid) {
  		pn = memcg->nodeinfo[nid];
++<<<<<<< HEAD
 +		old = rcu_dereference_protected(pn->shrinker_map, true);
++=======
+ 		old = shrinker_info_protected(memcg, nid);
++>>>>>>> 468ab8437a97 (mm: vmscan: add shrinker_info_protected() helper)
  		/* Not yet online memcg */
  		if (!old)
  			return 0;
@@@ -681,12 -682,11 +697,17 @@@ static unsigned long shrink_slab_memcg(
  	if (!down_read_trylock(&shrinker_rwsem))
  		return 0;
  
++<<<<<<< HEAD
 +	map = rcu_dereference_protected(memcg->nodeinfo[nid]->shrinker_map,
 +					true);
 +	if (unlikely(!map))
++=======
+ 	info = shrinker_info_protected(memcg, nid);
+ 	if (unlikely(!info))
++>>>>>>> 468ab8437a97 (mm: vmscan: add shrinker_info_protected() helper)
  		goto unlock;
  
 -	for_each_set_bit(i, info->map, shrinker_nr_max) {
 +	for_each_set_bit(i, map->map, shrinker_nr_max) {
  		struct shrink_control sc = {
  			.gfp_mask = gfp_mask,
  			.nid = nid,
* Unmerged path mm/vmscan.c
