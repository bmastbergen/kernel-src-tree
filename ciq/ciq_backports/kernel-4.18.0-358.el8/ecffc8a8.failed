tracing: Add trace_total_entries() / trace_total_entries_cpu()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Douglas Anderson <dianders@chromium.org>
commit ecffc8a8c7301f6f3c731ba23e38cd049a046416
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/ecffc8a8.failed

These two new exported functions will be used in a future patch by
kdb_ftdump() to quickly skip all but the last few trace entries.

Link: http://lkml.kernel.org/r/20190319171206.97107-2-dianders@chromium.org

	Acked-by: Daniel Thompson <daniel.thompson@linaro.org>
	Suggested-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Douglas Anderson <dianders@chromium.org>
	Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
(cherry picked from commit ecffc8a8c7301f6f3c731ba23e38cd049a046416)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace.c
diff --cc kernel/trace/trace.c
index 3efee662ba03,dcb9adb44be9..000000000000
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@@ -3322,10 -3493,32 +3322,36 @@@ static void s_stop(struct seq_file *m, 
  }
  
  static void
++<<<<<<< HEAD
 +get_total_entries(struct array_buffer *buf,
- 		  unsigned long *total, unsigned long *entries)
++=======
+ get_total_entries_cpu(struct trace_buffer *buf, unsigned long *total,
+ 		      unsigned long *entries, int cpu)
  {
  	unsigned long count;
+ 
+ 	count = ring_buffer_entries_cpu(buf->buffer, cpu);
+ 	/*
+ 	 * If this buffer has skipped entries, then we hold all
+ 	 * entries for the trace and we need to ignore the
+ 	 * ones before the time stamp.
+ 	 */
+ 	if (per_cpu_ptr(buf->data, cpu)->skipped_entries) {
+ 		count -= per_cpu_ptr(buf->data, cpu)->skipped_entries;
+ 		/* total is the same as the entries */
+ 		*total = count;
+ 	} else
+ 		*total = count +
+ 			ring_buffer_overrun_cpu(buf->buffer, cpu);
+ 	*entries = count;
+ }
+ 
+ static void
+ get_total_entries(struct trace_buffer *buf,
++>>>>>>> ecffc8a8c730 (tracing: Add trace_total_entries() / trace_total_entries_cpu())
+ 		  unsigned long *total, unsigned long *entries)
+ {
+ 	unsigned long t, e;
  	int cpu;
  
  	*total = 0;
* Unmerged path kernel/trace/trace.c
diff --git a/kernel/trace/trace.h b/kernel/trace/trace.h
index d08237c45b3a..f7e977ed9c67 100644
--- a/kernel/trace/trace.h
+++ b/kernel/trace/trace.h
@@ -663,6 +663,9 @@ void trace_init_global_iter(struct trace_iterator *iter);
 
 void tracing_iter_reset(struct trace_iterator *iter, int cpu);
 
+unsigned long trace_total_entries_cpu(struct trace_array *tr, int cpu);
+unsigned long trace_total_entries(struct trace_array *tr);
+
 void trace_function(struct trace_array *tr,
 		    unsigned long ip,
 		    unsigned long parent_ip,
