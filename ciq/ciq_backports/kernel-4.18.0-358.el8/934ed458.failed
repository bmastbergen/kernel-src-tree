iommu/vt-d: Fix dereference of pointer info before it is null checked

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Colin Ian King <colin.king@canonical.com>
commit 934ed4580c0a13a49ab7c4cbf94cd1958c0679ed
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/934ed458.failed

The assignment of iommu from info->iommu occurs before info is null checked
hence leading to a potential null pointer dereference issue. Fix this by
assigning iommu and checking if iommu is null after null checking info.

Addresses-Coverity: ("Dereference before null check")
Fixes: 4c82b88696ac ("iommu/vt-d: Allocate/register iopf queue for sva devices")
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
Link: https://lore.kernel.org/r/20210611135024.32781-1-colin.king@canonical.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 934ed4580c0a13a49ab7c4cbf94cd1958c0679ed)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/iommu.c
diff --cc drivers/iommu/intel/iommu.c
index f6eac6e0c085,76a58b8ad6c3..000000000000
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@@ -5232,9 -5329,14 +5232,18 @@@ static int intel_iommu_disable_auxd(str
  static int intel_iommu_enable_sva(struct device *dev)
  {
  	struct device_domain_info *info = get_domain_info(dev);
++<<<<<<< HEAD
 +	struct intel_iommu *iommu = info->iommu;
++=======
+ 	struct intel_iommu *iommu;
+ 	int ret;
++>>>>>>> 934ed4580c0a (iommu/vt-d: Fix dereference of pointer info before it is null checked)
+ 
+ 	if (!info || dmar_disabled)
+ 		return -EINVAL;
  
- 	if (!info || !iommu || dmar_disabled)
+ 	iommu = info->iommu;
+ 	if (!iommu)
  		return -EINVAL;
  
  	if (!(iommu->flags & VTD_FLAG_SVM_CAPABLE))
* Unmerged path drivers/iommu/intel/iommu.c
