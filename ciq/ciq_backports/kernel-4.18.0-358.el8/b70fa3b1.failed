mm: Make mem_dump_obj() handle NULL and zero-sized pointers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Paul E. McKenney <paulmck@kernel.org>
commit b70fa3b12fc8d2b870d1ac7fd44da89271eb8705
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/b70fa3b1.failed

This commit makes mem_dump_obj() call out NULL and zero-sized pointers
specially instead of classifying them as non-paged memory.

	Cc: Christoph Lameter <cl@linux.com>
	Cc: Pekka Enberg <penberg@kernel.org>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: <linux-mm@kvack.org>
	Reported-by: Andrii Nakryiko <andrii@kernel.org>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
	Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
(cherry picked from commit b70fa3b12fc8d2b870d1ac7fd44da89271eb8705)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/util.c
diff --cc mm/util.c
index cfebce329d05,92f23d2c1277..000000000000
--- a/mm/util.c
+++ b/mm/util.c
@@@ -839,3 -982,32 +839,35 @@@ int memcmp_pages(struct page *page1, st
  	kunmap_atomic(addr1);
  	return ret;
  }
++<<<<<<< HEAD
++=======
+ 
+ /**
+  * mem_dump_obj - Print available provenance information
+  * @object: object for which to find provenance information.
+  *
+  * This function uses pr_cont(), so that the caller is expected to have
+  * printed out whatever preamble is appropriate.  The provenance information
+  * depends on the type of object and on how much debugging is enabled.
+  * For example, for a slab-cache object, the slab name is printed, and,
+  * if available, the return address and stack trace from the allocation
+  * of that object.
+  */
+ void mem_dump_obj(void *object)
+ {
+ 	if (!virt_addr_valid(object)) {
+ 		if (object == NULL)
+ 			pr_cont(" NULL pointer.\n");
+ 		else if (object == ZERO_SIZE_PTR)
+ 			pr_cont(" zero-size pointer.\n");
+ 		else
+ 			pr_cont(" non-paged (local) memory.\n");
+ 		return;
+ 	}
+ 	if (kmem_valid_obj(object)) {
+ 		kmem_dump_obj(object);
+ 		return;
+ 	}
+ 	pr_cont(" non-slab memory.\n");
+ }
++>>>>>>> b70fa3b12fc8 (mm: Make mem_dump_obj() handle NULL and zero-sized pointers)
* Unmerged path mm/util.c
