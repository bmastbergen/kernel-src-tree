Revert "driver core: Don't do deferred probe in parallel with kernel_init thread"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Saravana Kannan <saravanak@google.com>
commit 96d8a9168ef5539beba9951dffe6eda07b74833e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/96d8a916.failed

This reverts commit cec72f3efc6272420c2c2c699607f03d09b93e41.

Commit cec72f3efc62 ("driver core: Don't do deferred probe in parallel
with kernel_init thread") was fixing a commit 716a7a259690 ("driver
core: fw_devlink: Add support for batching fwnode parsing"). Since the
commit being fixed itself is going to be reverted, the fix can also be
reverted.

	Signed-off-by: Saravana Kannan <saravanak@google.com>
Link: https://lore.kernel.org/r/20201121020232.908850-4-saravanak@google.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 96d8a9168ef5539beba9951dffe6eda07b74833e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index c73bf3cdd933,b1189697c29b..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -1547,19 -1546,9 +1547,23 @@@ void fw_devlink_resume(void
  		goto out;
  
  	device_link_add_missing_supplier_links();
++<<<<<<< HEAD
 +	list_splice_tail_init(&deferred_fw_devlink, &probe_list);
++=======
+ 	driver_deferred_probe_force_trigger();
++>>>>>>> 96d8a9168ef5 (Revert "driver core: Don't do deferred probe in parallel with kernel_init thread")
  out:
  	mutex_unlock(&defer_fw_devlink_lock);
 +
 +	/*
 +	 * bus_probe_device() can cause new devices to get added and they'll
 +	 * try to grab defer_fw_devlink_lock. So, this needs to be done outside
 +	 * the defer_fw_devlink_lock.
 +	 */
 +	list_for_each_entry_safe(dev, tmp, &probe_list, links_defer_hook) {
 +		list_del_init(&dev->links_defer_hook);
 +		bus_probe_device(dev);
 +	}
  }
  /* Device links support end. */
  
diff --git a/drivers/base/base.h b/drivers/base/base.h
index 3a0e972b3720..ced7fb69c35c 100644
--- a/drivers/base/base.h
+++ b/drivers/base/base.h
@@ -146,6 +146,7 @@ extern char *make_class_name(const char *name, struct kobject *kobj);
 extern int devres_release_all(struct device *dev);
 extern void device_block_probing(void);
 extern void device_unblock_probing(void);
+extern void driver_deferred_probe_force_trigger(void);
 
 /* /sys/devices directory */
 extern struct kset *devices_kset;
* Unmerged path drivers/base/core.c
diff --git a/drivers/base/dd.c b/drivers/base/dd.c
index f9a65479af43..7a685532f845 100644
--- a/drivers/base/dd.c
+++ b/drivers/base/dd.c
@@ -184,6 +184,11 @@ static void driver_deferred_probe_trigger(void)
 	if (!driver_deferred_probe_enable)
 		return;
 
+	driver_deferred_probe_force_trigger();
+}
+
+void driver_deferred_probe_force_trigger(void)
+{
 	/*
 	 * A successful probe means that all the devices in the pending list
 	 * should be triggered to be reprobed.  Move all the deferred devices
