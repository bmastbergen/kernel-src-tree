ata: start separating SATA specific code from libata-eh.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
commit a695de27fca5cefce0d1d93bab681e35605fee55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/a695de27.failed

Start separating SATA specific code from libata-eh.c:

* move sata_async_notification() to libata-sata.c:

Code size savings on m68k arch using (modified) atari_defconfig:

   text    data     bss     dec     hex filename
before:
  16243      18       0   16261    3f85 drivers/ata/libata-eh.o
after:
  16164      18       0   16182    3f36 drivers/ata/libata-eh.o

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit a695de27fca5cefce0d1d93bab681e35605fee55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/ata/libata-eh.c
#	drivers/ata/libata-sata.c
diff --cc drivers/ata/libata-eh.c
index 4b54e83864fa,ef4d606cd8c6..000000000000
--- a/drivers/ata/libata-eh.c
+++ b/drivers/ata/libata-eh.c
@@@ -1101,81 -1090,9 +1101,84 @@@ int ata_port_freeze(struct ata_port *ap
  
  	return nr_aborted;
  }
 -EXPORT_SYMBOL_GPL(ata_port_freeze);
  
  /**
++<<<<<<< HEAD
 + *	sata_async_notification - SATA async notification handler
 + *	@ap: ATA port where async notification is received
 + *
 + *	Handler to be called when async notification via SDB FIS is
 + *	received.  This function schedules EH if necessary.
 + *
 + *	LOCKING:
 + *	spin_lock_irqsave(host lock)
 + *
 + *	RETURNS:
 + *	1 if EH is scheduled, 0 otherwise.
 + */
 +int sata_async_notification(struct ata_port *ap)
 +{
 +	u32 sntf;
 +	int rc;
 +
 +	if (!(ap->flags & ATA_FLAG_AN))
 +		return 0;
 +
 +	rc = sata_scr_read(&ap->link, SCR_NOTIFICATION, &sntf);
 +	if (rc == 0)
 +		sata_scr_write(&ap->link, SCR_NOTIFICATION, sntf);
 +
 +	if (!sata_pmp_attached(ap) || rc) {
 +		/* PMP is not attached or SNTF is not available */
 +		if (!sata_pmp_attached(ap)) {
 +			/* PMP is not attached.  Check whether ATAPI
 +			 * AN is configured.  If so, notify media
 +			 * change.
 +			 */
 +			struct ata_device *dev = ap->link.device;
 +
 +			if ((dev->class == ATA_DEV_ATAPI) &&
 +			    (dev->flags & ATA_DFLAG_AN))
 +				ata_scsi_media_change_notify(dev);
 +			return 0;
 +		} else {
 +			/* PMP is attached but SNTF is not available.
 +			 * ATAPI async media change notification is
 +			 * not used.  The PMP must be reporting PHY
 +			 * status change, schedule EH.
 +			 */
 +			ata_port_schedule_eh(ap);
 +			return 1;
 +		}
 +	} else {
 +		/* PMP is attached and SNTF is available */
 +		struct ata_link *link;
 +
 +		/* check and notify ATAPI AN */
 +		ata_for_each_link(link, ap, EDGE) {
 +			if (!(sntf & (1 << link->pmp)))
 +				continue;
 +
 +			if ((link->device->class == ATA_DEV_ATAPI) &&
 +			    (link->device->flags & ATA_DFLAG_AN))
 +				ata_scsi_media_change_notify(link->device);
 +		}
 +
 +		/* If PMP is reporting that PHY status of some
 +		 * downstream ports has changed, schedule EH.
 +		 */
 +		if (sntf & (1 << SATA_PMP_CTRL_PORT)) {
 +			ata_port_schedule_eh(ap);
 +			return 1;
 +		}
 +
 +		return 0;
 +	}
 +}
 +
 +/**
++=======
++>>>>>>> a695de27fca5 (ata: start separating SATA specific code from libata-eh.c)
   *	ata_eh_freeze_port - EH helper to freeze port
   *	@ap: ATA port to freeze
   *
* Unmerged path drivers/ata/libata-sata.c
* Unmerged path drivers/ata/libata-eh.c
* Unmerged path drivers/ata/libata-sata.c
diff --git a/include/linux/libata.h b/include/linux/libata.h
index ce0dc53b9adc..cac4cf5b949e 100644
--- a/include/linux/libata.h
+++ b/include/linux/libata.h
@@ -1209,6 +1209,7 @@ extern int ata_do_set_mode(struct ata_link *link, struct ata_device **r_failed_d
 extern void ata_scsi_port_error_handler(struct Scsi_Host *host, struct ata_port *ap);
 extern void ata_scsi_cmd_error_handler(struct Scsi_Host *host, struct ata_port *ap, struct list_head *eh_q);
 extern bool sata_lpm_ignore_phy_events(struct ata_link *link);
+extern int sata_async_notification(struct ata_port *ap);
 
 extern int ata_cable_40wire(struct ata_port *ap);
 extern int ata_cable_80wire(struct ata_port *ap);
@@ -1307,7 +1308,6 @@ extern void ata_port_wait_eh(struct ata_port *ap);
 extern int ata_link_abort(struct ata_link *link);
 extern int ata_port_abort(struct ata_port *ap);
 extern int ata_port_freeze(struct ata_port *ap);
-extern int sata_async_notification(struct ata_port *ap);
 
 extern void ata_eh_freeze_port(struct ata_port *ap);
 extern void ata_eh_thaw_port(struct ata_port *ap);
