PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Zhang Qilong <zhangqilong3@huawei.com>
commit dd8088d5a8969dc2b42f71d7bc01c25c61a78066
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/dd8088d5.failed

In many case, we need to check return value of pm_runtime_get_sync, but
it brings a trouble to the usage counter processing. Many callers forget
to decrease the usage counter when it failed, which could resulted in
reference leak. It has been discussed a lot[0][1]. So we add a function
to deal with the usage counter for better coding.

[0]https://lkml.org/lkml/2020/6/14/88
[1]https://patchwork.ozlabs.org/project/linux-tegra/list/?series=178139
	Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
	Acked-by: Rafael J. Wysocki  <rafael.j.wysocki@intel.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit dd8088d5a8969dc2b42f71d7bc01c25c61a78066)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pm_runtime.h
diff --cc include/linux/pm_runtime.h
index 6d2125465ffd,b492ae00cc90..000000000000
--- a/include/linux/pm_runtime.h
+++ b/include/linux/pm_runtime.h
@@@ -237,6 -386,34 +237,37 @@@ static inline int pm_runtime_get_sync(s
  	return __pm_runtime_resume(dev, RPM_GET_PUT);
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * pm_runtime_resume_and_get - Bump up usage counter of a device and resume it.
+  * @dev: Target device.
+  *
+  * Resume @dev synchronously and if that is successful, increment its runtime
+  * PM usage counter. Return 0 if the runtime PM usage counter of @dev has been
+  * incremented or a negative error code otherwise.
+  */
+ static inline int pm_runtime_resume_and_get(struct device *dev)
+ {
+ 	int ret;
+ 
+ 	ret = __pm_runtime_resume(dev, RPM_GET_PUT);
+ 	if (ret < 0) {
+ 		pm_runtime_put_noidle(dev);
+ 		return ret;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ /**
+  * pm_runtime_put - Drop device usage counter and queue up "idle check" if 0.
+  * @dev: Target device.
+  *
+  * Decrement the runtime PM usage counter of @dev and if it turns out to be
+  * equal to 0, queue up a work item for @dev like in pm_request_idle().
+  */
++>>>>>>> dd8088d5a896 (PM: runtime: Add pm_runtime_resume_and_get to deal with usage counter)
  static inline int pm_runtime_put(struct device *dev)
  {
  	return __pm_runtime_idle(dev, RPM_GET_PUT | RPM_ASYNC);
* Unmerged path include/linux/pm_runtime.h
