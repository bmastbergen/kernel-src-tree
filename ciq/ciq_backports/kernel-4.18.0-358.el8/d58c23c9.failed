IB/core: Only update PKEY and GID caches on respective events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Håkon Bugge <haakon.bugge@oracle.com>
commit d58c23c9254894d438ce5c516745cf694eac86b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/d58c23c9.failed

Both the PKEY and GID tables in an HCA can hold in the order of hundreds
entries. Reading them is expensive. Partly because the API for retrieving
them only returns a single entry at a time. Further, on certain
implementations, e.g., CX-3, the VFs are paravirtualized in this respect
and have to rely on the PF driver to perform the read. This again demands
VF to PF communication.

IB Core's cache is refreshed on all events. Hence, filter the refresh of
the PKEY and GID caches based on the event received being
IB_EVENT_PKEY_CHANGE and IB_EVENT_GID_CHANGE respectively.

Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
Link: https://lore.kernel.org/r/1621964949-28484-1-git-send-email-haakon.bugge@oracle.com
	Signed-off-by: Håkon Bugge <haakon.bugge@oracle.com>
	Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit d58c23c9254894d438ce5c516745cf694eac86b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cache.c
diff --cc drivers/infiniband/core/cache.c
index a27a159ec5fa,d32045986109..000000000000
--- a/drivers/infiniband/core/cache.c
+++ b/drivers/infiniband/core/cache.c
@@@ -1473,10 -1465,12 +1473,16 @@@ err
  }
  
  static int
++<<<<<<< HEAD
 +ib_cache_update(struct ib_device *device, u8 port, bool enforce_security)
++=======
+ ib_cache_update(struct ib_device *device, u32 port, bool update_gids,
+ 		bool update_pkeys, bool enforce_security)
++>>>>>>> d58c23c92548 (IB/core: Only update PKEY and GID caches on respective events)
  {
  	struct ib_port_attr       *tprops = NULL;
- 	struct ib_pkey_cache      *pkey_cache = NULL, *old_pkey_cache;
+ 	struct ib_pkey_cache      *pkey_cache = NULL;
+ 	struct ib_pkey_cache      *old_pkey_cache = NULL;
  	int                        i;
  	int                        ret;
  
* Unmerged path drivers/infiniband/core/cache.c
