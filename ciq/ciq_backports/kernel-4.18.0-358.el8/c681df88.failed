x86: Remove unusual Unicode characters from comments

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-358.el8
commit-author Ingo Molnar <mingo@kernel.org>
commit c681df88dcb12b1efd7e4efcfe498c5e9c31ce02
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-358.el8/c681df88.failed

We've accumulated a few unusual Unicode characters in arch/x86/
over the years, substitute them with their proper ASCII equivalents.

A few of them were a whitespace equivalent: ' ' - the use was harmless.

	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: linux-kernel@vger.kernel.org
(cherry picked from commit c681df88dcb12b1efd7e4efcfe498c5e9c31ce02)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/elf.h
diff --cc arch/x86/include/asm/elf.h
index 1527ec351036,7d7500806af8..000000000000
--- a/arch/x86/include/asm/elf.h
+++ b/arch/x86/include/asm/elf.h
@@@ -282,9 -280,29 +282,32 @@@ extern u32 elf_hwcap2
  /*
   * An executable for which elf_read_implies_exec() returns TRUE will
   * have the READ_IMPLIES_EXEC personality flag set automatically.
++<<<<<<< HEAD
++=======
+  *
+  * The decision process for determining the results are:
+  *
+  *                 CPU: | lacks NX*  | has NX, ia32     | has NX, x86_64 |
+  * ELF:                 |            |                  |                |
+  * ---------------------|------------|------------------|----------------|
+  * missing PT_GNU_STACK | exec-all   | exec-all         | exec-none      |
+  * PT_GNU_STACK == RWX  | exec-stack | exec-stack       | exec-stack     |
+  * PT_GNU_STACK == RW   | exec-none  | exec-none        | exec-none      |
+  *
+  *  exec-all  : all PROT_READ user mappings are executable, except when
+  *              backed by files on a noexec-filesystem.
+  *  exec-none : only PROT_EXEC user mappings are executable.
+  *  exec-stack: only the stack and PROT_EXEC user mappings are executable.
+  *
+  *  *this column has no architectural effect: NX markings are ignored by
+  *   hardware, but may have behavioral effects when "wants X" collides with
+  *   "cannot be X" constraints in memory permission flags, as in
+  *   https://lkml.kernel.org/r/20190418055759.GA3155@mellanox.com
+  *
++>>>>>>> c681df88dcb1 (x86: Remove unusual Unicode characters from comments)
   */
  #define elf_read_implies_exec(ex, executable_stack)	\
 -	(mmap_is_ia32() && executable_stack == EXSTACK_DEFAULT)
 +	(executable_stack != EXSTACK_DISABLE_X)
  
  struct task_struct;
  
diff --git a/arch/x86/events/intel/uncore_snbep.c b/arch/x86/events/intel/uncore_snbep.c
index ed63050bb214..e470055ae76f 100644
--- a/arch/x86/events/intel/uncore_snbep.c
+++ b/arch/x86/events/intel/uncore_snbep.c
@@ -280,17 +280,17 @@
  * | [63]  |    00h    | VALID - When set, indicates the CPU bus
  *                       numbers have been initialized. (RO)
  * |[62:48]|    ---    | Reserved
- * |[47:40]|    00h    | BUS_NUM_5 — Return the bus number BIOS assigned
+ * |[47:40]|    00h    | BUS_NUM_5 - Return the bus number BIOS assigned
  *                       CPUBUSNO(5). (RO)
- * |[39:32]|    00h    | BUS_NUM_4 — Return the bus number BIOS assigned
+ * |[39:32]|    00h    | BUS_NUM_4 - Return the bus number BIOS assigned
  *                       CPUBUSNO(4). (RO)
- * |[31:24]|    00h    | BUS_NUM_3 — Return the bus number BIOS assigned
+ * |[31:24]|    00h    | BUS_NUM_3 - Return the bus number BIOS assigned
  *                       CPUBUSNO(3). (RO)
- * |[23:16]|    00h    | BUS_NUM_2 — Return the bus number BIOS assigned
+ * |[23:16]|    00h    | BUS_NUM_2 - Return the bus number BIOS assigned
  *                       CPUBUSNO(2). (RO)
- * |[15:8] |    00h    | BUS_NUM_1 — Return the bus number BIOS assigned
+ * |[15:8] |    00h    | BUS_NUM_1 - Return the bus number BIOS assigned
  *                       CPUBUSNO(1). (RO)
- * | [7:0] |    00h    | BUS_NUM_0 — Return the bus number BIOS assigned
+ * | [7:0] |    00h    | BUS_NUM_0 - Return the bus number BIOS assigned
  *                       CPUBUSNO(0). (RO)
  */
 #define SKX_MSR_CPU_BUS_NUMBER		0x300
* Unmerged path arch/x86/include/asm/elf.h
diff --git a/arch/x86/include/asm/nospec-branch.h b/arch/x86/include/asm/nospec-branch.h
index ccc3adb43e6c..a154c2d99bc0 100644
--- a/arch/x86/include/asm/nospec-branch.h
+++ b/arch/x86/include/asm/nospec-branch.h
@@ -32,7 +32,7 @@
 
 /*
  * Google experimented with loop-unrolling and this turned out to be
- * the optimal version — two calls, each with their own speculation
+ * the optimal version - two calls, each with their own speculation
  * trap should their return address end up getting used, in a loop.
  */
 #define __FILL_RETURN_BUFFER(reg, nr, sp)	\
diff --git a/arch/x86/xen/xen-pvh.S b/arch/x86/xen/xen-pvh.S
index ca2d3b2bf2af..1e6051969605 100644
--- a/arch/x86/xen/xen-pvh.S
+++ b/arch/x86/xen/xen-pvh.S
@@ -40,10 +40,10 @@
  *          the boot start info structure.
  * - `cr0`: bit 0 (PE) must be set. All the other writeable bits are cleared.
  * - `cr4`: all bits are cleared.
- * - `cs `: must be a 32-bit read/execute code segment with a base of ‘0’
- *          and a limit of ‘0xFFFFFFFF’. The selector value is unspecified.
+ * - `cs `: must be a 32-bit read/execute code segment with a base of `0`
+ *          and a limit of `0xFFFFFFFF`. The selector value is unspecified.
  * - `ds`, `es`: must be a 32-bit read/write data segment with a base of
- *               ‘0’ and a limit of ‘0xFFFFFFFF’. The selector values are all
+ *               `0` and a limit of `0xFFFFFFFF`. The selector values are all
  *               unspecified.
  * - `tr`: must be a 32-bit TSS (active) with a base of '0' and a limit
  *         of '0x67'.
