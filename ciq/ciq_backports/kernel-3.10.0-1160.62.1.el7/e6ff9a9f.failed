fs: __fget_light() can use __fget() in slow path

jira LE-1907
cve CVE-2021-4083
Rebuild_History Non-Buildable kernel-3.10.0-1160.62.1.el7
commit-author Oleg Nesterov <oleg@redhat.com>
commit e6ff9a9fa4e05c1c03dec63cdc6a87d6dea02755
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.62.1.el7/e6ff9a9f.failed

The slow path in __fget_light() can use __fget() to avoid the
code duplication. Saves 232 bytes.

	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit e6ff9a9fa4e05c1c03dec63cdc6a87d6dea02755)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/file.c
diff --cc fs/file.c
index 44bd634b636a,771578b33fb6..000000000000
--- a/fs/file.c
+++ b/fs/file.c
@@@ -779,21 -690,13 +779,27 @@@ struct file *fget_light(unsigned int fd
  
  	*fput_needed = 0;
  	if (atomic_read(&files->count) == 1) {
 -		file = __fcheck_files(files, fd);
 -		if (file && (file->f_mode & mask))
 +		file = fcheck_files(files, fd);
 +		if (file && (file->f_mode & FMODE_PATH))
  			file = NULL;
  	} else {
++<<<<<<< HEAD
 +		rcu_read_lock();
 +		file = fcheck_files(files, fd);
 +		if (file) {
 +			if (!(file->f_mode & FMODE_PATH) &&
 +			    atomic_long_inc_not_zero(&file->f_count))
 +				*fput_needed = 1;
 +			else
 +				/* Didn't get the reference, someone's freed */
 +				file = NULL;
 +		}
 +		rcu_read_unlock();
++=======
+ 		file = __fget(fd, mask);
+ 		if (file)
+ 			*fput_needed = 1;
++>>>>>>> e6ff9a9fa4e0 (fs: __fget_light() can use __fget() in slow path)
  	}
  
  	return file;
* Unmerged path fs/file.c
