xfs: allow SECURE namespace xattrs to use reserved block pool

jira LE-1907
Rebuild_History Non-Buildable kernel-5.14.0-427.37.1.el9_4
commit-author Eric Sandeen <sandeen@redhat.com>
commit 39c1ddb064fd38e28571c853f067b134d17cffb2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-427.37.1.el9_4/39c1ddb0.failed

We got a report from the podman folks that selinux relabels that happen
as part of their process were returning ENOSPC when the filesystem is
completely full. This is because xattr changes reserve about 15 blocks
for the worst case, but the common case is for selinux contexts to be
the sole, in-inode xattr and consume no blocks.

We already allow reserved space consumption for XFS_ATTR_ROOT for things
such as ACLs, and SECURE namespace attributes are not so very different,
so allow them to use the reserved space as well.

Code-comment-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Darrick J. Wong <djwong@kernel.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Chandan Babu R <chandanbabu@kernel.org>

V2: Remove local variable, add comment.
V3: Add Dave's preferred comment
V4: Spelling and comment beautification
(cherry picked from commit 39c1ddb064fd38e28571c853f067b134d17cffb2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_xattr.c
diff --cc fs/xfs/xfs_xattr.c
index 10aa1fd39d2b,eaf849260bd6..000000000000
--- a/fs/xfs/xfs_xattr.c
+++ b/fs/xfs/xfs_xattr.c
@@@ -100,14 -103,31 +100,35 @@@ xfs_attr_change
  			return error;
  
  		args->op_flags |= XFS_DA_OP_LOGGED;
 +		use_logging = true;
  	}
  
 -	args->owner = args->dp->i_ino;
 -	args->geo = mp->m_attr_geo;
 -	args->whichfork = XFS_ATTR_FORK;
 -	xfs_attr_sethash(args);
 +	error = xfs_attr_set(args);
  
++<<<<<<< HEAD
 +	if (use_logging)
 +		xfs_attr_rele_log_assist(mp);
 +	return error;
++=======
+ 	/*
+ 	 * Some xattrs must be resistant to allocation failure at ENOSPC, e.g.
+ 	 * creating an inode with ACLs or security attributes requires the
+ 	 * allocation of the xattr holding that information to succeed. Hence
+ 	 * we allow xattrs in the VFS TRUSTED, SYSTEM, POSIX_ACL and SECURITY
+ 	 * (LSM xattr) namespaces to dip into the reserve block pool to allow
+ 	 * manipulation of these xattrs when at ENOSPC. These VFS xattr
+ 	 * namespaces translate to the XFS_ATTR_ROOT and XFS_ATTR_SECURE on-disk
+ 	 * namespaces.
+ 	 *
+ 	 * For most of these cases, these special xattrs will fit in the inode
+ 	 * itself and so consume no extra space or only require temporary extra
+ 	 * space while an overwrite is being made. Hence the use of the reserved
+ 	 * pool is largely to avoid the worst case reservation from preventing
+ 	 * the xattr from being created at ENOSPC.
+ 	 */
+ 	return xfs_attr_set(args, op,
+ 			args->attr_filter & (XFS_ATTR_ROOT | XFS_ATTR_SECURE));
++>>>>>>> 39c1ddb064fd (xfs: allow SECURE namespace xattrs to use reserved block pool)
  }
  
  
* Unmerged path fs/xfs/xfs_xattr.c
