net-sysfs: call dev_hold if kobject_init_and_add success

jira LE-1907
cve CVE-2019-20811
Rebuild_History Non-Buildable kernel-3.10.0-1160.6.1.el7
commit-author YueHaibing <yuehaibing@huawei.com>
commit a3e23f719f5c4a38ffb3d30c8d7632a4ed8ccd9e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.6.1.el7/a3e23f71.failed

In netdev_queue_add_kobject and rx_queue_add_kobject,
if sysfs_create_group failed, kobject_put will call
netdev_queue_release to decrease dev refcont, however
dev_hold has not be called. So we will see this while
unregistering dev:

unregister_netdevice: waiting for bcsh0 to become free. Usage count = -1

	Reported-by: Hulk Robot <hulkci@huawei.com>
Fixes: d0d668371679 ("net: don't decrement kobj reference count on init failure")
	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a3e23f719f5c4a38ffb3d30c8d7632a4ed8ccd9e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/net-sysfs.c
diff --cc net/core/net-sysfs.c
index 3885622ac43a,8f8b7b6c2945..000000000000
--- a/net/core/net-sysfs.c
+++ b/net/core/net-sysfs.c
@@@ -888,12 -922,20 +888,24 @@@ static int rx_queue_add_kobject(struct 
  	struct kobject *kobj = &queue->kobj;
  	int error = 0;
  
 -	kobj->kset = dev->queues_kset;
 +	kobj->kset = net->queues_kset;
  	error = kobject_init_and_add(kobj, &rx_queue_ktype, NULL,
 -				     "rx-%u", index);
 -	if (error)
 +	    "rx-%u", index);
 +	if (error) {
 +		kobject_put(kobj);
  		return error;
++<<<<<<< HEAD
++=======
+ 
+ 	dev_hold(queue->dev);
+ 
+ 	if (dev->sysfs_rx_queue_group) {
+ 		error = sysfs_create_group(kobj, dev->sysfs_rx_queue_group);
+ 		if (error) {
+ 			kobject_put(kobj);
+ 			return error;
+ 		}
++>>>>>>> a3e23f719f5c (net-sysfs: call dev_hold if kobject_init_and_add success)
  	}
  
  	kobject_uevent(kobj, KOBJ_ADD);
@@@ -1292,25 -1459,25 +1303,26 @@@ static int netdev_queue_add_kobject(str
  	struct kobject *kobj = &queue->kobj;
  	int error = 0;
  
 -	kobj->kset = dev->queues_kset;
 +	kobj->kset = net->queues_kset;
  	error = kobject_init_and_add(kobj, &netdev_queue_ktype, NULL,
 -				     "tx-%u", index);
 +	    "tx-%u", index);
  	if (error)
 -		return error;
 +		goto exit;
  
+ 	dev_hold(queue->dev);
+ 
  #ifdef CONFIG_BQL
  	error = sysfs_create_group(kobj, &dql_group);
 -	if (error) {
 -		kobject_put(kobj);
 -		return error;
 -	}
 +	if (error)
 +		goto exit;
  #endif
  
  	kobject_uevent(kobj, KOBJ_ADD);
- 	dev_hold(queue->dev);
  
  	return 0;
 +exit:
 +	kobject_put(kobj);
 +	return error;
  }
  #endif /* CONFIG_SYSFS */
  
* Unmerged path net/core/net-sysfs.c
