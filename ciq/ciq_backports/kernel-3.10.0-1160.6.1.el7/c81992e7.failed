PCI: hv: Retry PCI bus D0 entry on invalid device state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.6.1.el7
Rebuild_CHGLOG: - [pci] hv: Retry PCI bus D0 entry on invalid device state (Mohammed Gamal) [1846667]
Rebuild_FUZZ: 95.24%
commit-author Wei Hu <weh@microsoft.com>
commit c81992e7f4aa19a055dbff5bd6c6d5ff9408f2fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.6.1.el7/c81992e7.failed

When kdump is triggered, some PCI devices may have not been shut down
cleanly before the kdump kernel starts.

This causes the initial attempt to enter D0 state in the kdump kernel to
fail with invalid device state returned from Hyper-V host.

When this happens, explicitly call hv_pci_bus_exit() and retry to enter
the D0 state.

Link: https://lore.kernel.org/r/20200507050300.10974-1-weh@microsoft.com
	Signed-off-by: Wei Hu <weh@microsoft.com>
[lorenzo.pieralisi@arm.com: commit log]
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
(cherry picked from commit c81992e7f4aa19a055dbff5bd6c6d5ff9408f2fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index 13440dc8261a,92092a47d3af..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -2622,7 -3221,7 +2658,11 @@@ free_bus
  	return ret;
  }
  
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +static void hv_pci_bus_exit(struct hv_device *hdev)
++=======
+ static int hv_pci_bus_exit(struct hv_device *hdev, bool keep_devs)
++>>>>>>> c81992e7f4aa (PCI: hv: Retry PCI bus D0 entry on invalid device state):drivers/pci/controller/pci-hyperv.c
  {
  	struct hv_pcibus_device *hbus = hv_get_drvdata(hdev);
  	struct {
@@@ -2638,16 -3237,21 +2678,25 @@@
  	 * access the per-channel ringbuffer any longer.
  	 */
  	if (hdev->channel->rescind)
 -		return 0;
 +		return;
  
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +	/* Delete any children which might still exist. */
 +	memset(&relations, 0, sizeof(relations));
 +	hv_pci_devices_present(hbus, &relations);
++=======
+ 	if (!keep_devs) {
+ 		/* Delete any children which might still exist. */
+ 		dr = kzalloc(sizeof(*dr), GFP_KERNEL);
+ 		if (dr && hv_pci_start_relations_work(hbus, dr))
+ 			kfree(dr);
+ 	}
++>>>>>>> c81992e7f4aa (PCI: hv: Retry PCI bus D0 entry on invalid device state):drivers/pci/controller/pci-hyperv.c
  
  	ret = hv_send_resources_released(hdev);
 -	if (ret) {
 +	if (ret)
  		dev_err(&hdev->device,
  			"Couldn't send resources released packet(s)\n");
 -		return ret;
 -	}
  
  	memset(&pkt.teardown_packet, 0, sizeof(pkt.teardown_packet));
  	init_completion(&comp_pkt.host_event);
* Unmerged path drivers/pci/pci-hyperv.c
