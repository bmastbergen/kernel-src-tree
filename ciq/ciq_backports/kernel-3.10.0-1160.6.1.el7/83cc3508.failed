PCI: hv: Fix the PCI HyperV probe failure path to release resource properly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.6.1.el7
Rebuild_CHGLOG: - [pci] hv: Fix the PCI HyperV probe failure path to release resource properly (Mohammed Gamal) [1846667]
Rebuild_FUZZ: 96.55%
commit-author Wei Hu <weh@microsoft.com>
commit 83cc3508ffaa6e2cd364d29418d35fab6f069b51
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.6.1.el7/83cc3508.failed

In some error cases in hv_pci_probe(), allocated resources are not freed.

Fix this by adding a field to keep track of the high water mark for slots
that have resources allocated to them.  In case of an error, this high
water mark is used to know which slots have resources that must be released.
Since slots are numbered starting with zero, a value of -1 indicates no
slots have been allocated resources.  There may be unused slots in the range
between slot 0 and the high water mark slot, but these slots are already
ignored by the existing code in the allocate and release loops with the call
to get_pcichild_wslot().

Link: https://lore.kernel.org/r/20200507050211.10923-1-weh@microsoft.com
	Signed-off-by: Wei Hu <weh@microsoft.com>
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Reviewed-by: Michael Kelley <mikelley@microsoft.com>
(cherry picked from commit 83cc3508ffaa6e2cd364d29418d35fab6f069b51)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index 13440dc8261a,e6fac0187722..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -459,8 -480,11 +459,11 @@@ struct hv_pcibus_device 
  
  	struct workqueue_struct *wq;
  
+ 	/* Highest slot of child device with resources allocated */
+ 	int wslot_res_allocated;
+ 
  	/* hypercall arg, must not cross page boundary */
 -	struct hv_retarget_device_interrupt retarget_msi_interrupt_params;
 +	struct retarget_msi_interrupt retarget_msi_interrupt_params;
  
  	/*
  	 * Don't put anything here: retarget_msi_interrupt_params must be last
@@@ -2337,10 -2850,10 +2340,10 @@@ static int hv_send_resources_allocated(
  	struct hv_pci_dev *hpdev;
  	struct pci_packet *pkt;
  	size_t size_res;
- 	u32 wslot;
+ 	int wslot;
  	int ret;
  
 -	size_res = (hbus->protocol_version < PCI_PROTOCOL_VERSION_1_2)
 +	size_res = (pci_protocol_version < PCI_PROTOCOL_VERSION_1_2)
  			? sizeof(*res_assigned) : sizeof(*res_assigned2);
  
  	pkt = kmalloc(sizeof(*pkt) + size_res, GFP_KERNEL);
@@@ -2589,7 -3146,7 +2599,11 @@@ static int hv_pci_probe(struct hv_devic
  
  	ret = hv_pci_allocate_bridge_windows(hbus);
  	if (ret)
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
 +		goto unmap;
++=======
+ 		goto exit_d0;
++>>>>>>> 83cc3508ffaa (PCI: hv: Fix the PCI HyperV probe failure path to release resource properly):drivers/pci/controller/pci-hyperv.c
  
  	ret = hv_send_resources_allocated(hdev);
  	if (ret)
@@@ -2607,9 -3164,15 +2621,18 @@@
  
  free_windows:
  	hv_pci_free_bridge_windows(hbus);
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
++=======
+ exit_d0:
+ 	(void) hv_pci_bus_exit(hdev, true);
+ free_irq_domain:
+ 	irq_domain_remove(hbus->irq_domain);
+ free_fwnode:
+ 	irq_domain_free_fwnode(hbus->sysdata.fwnode);
++>>>>>>> 83cc3508ffaa (PCI: hv: Fix the PCI HyperV probe failure path to release resource properly):drivers/pci/controller/pci-hyperv.c
  unmap:
  	iounmap(hbus->cfg_addr);
 -free_config:
 +release:
  	hv_free_config_window(hbus);
  close:
  	vmbus_close(hdev->channel);
* Unmerged path drivers/pci/pci-hyperv.c
