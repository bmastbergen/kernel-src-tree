sched, s390: Create a dedicated topology table

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.6.1.el7
commit-author Vincent Guittot <vincent.guittot@linaro.org>
commit 2dfd747629e65f89d2dbceb92fffc763f66228b2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.6.1.el7/2dfd7476.failed

BOOK level is only relevant for s390 so we create a dedicated topology table
with BOOK level and remove it from default table.

	Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Cc: Philipp Hachtmann <phacht@linux.vnet.ibm.com>
	Cc: cmetcalf@tilera.com
	Cc: benh@kernel.crashing.org
	Cc: dietmar.eggemann@arm.com
	Cc: preeti@linux.vnet.ibm.com
	Cc: tony.luck@intel.com
	Cc: fenghua.yu@intel.com
	Cc: linux390@de.ibm.com
	Cc: linux-s390@vger.kernel.org
Link: http://lkml.kernel.org/r/1397209481-28542-3-git-send-email-vincent.guittot@linaro.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 2dfd747629e65f89d2dbceb92fffc763f66228b2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/topology.h
#	kernel/sched/core.c
diff --cc arch/s390/include/asm/topology.h
index 8ff0f45fef16,56af53093d24..000000000000
--- a/arch/s390/include/asm/topology.h
+++ b/arch/s390/include/asm/topology.h
@@@ -34,21 -26,6 +34,24 @@@ extern struct cpu_topology_s390 cpu_top
  
  #define mc_capable() 1
  
++<<<<<<< HEAD
 +static inline const struct cpumask *cpu_coregroup_mask(int cpu)
 +{
 +	return &cpu_topology[cpu].core_mask;
 +}
 +
 +static inline const struct cpumask *cpu_book_mask(int cpu)
 +{
 +	return &cpu_topology[cpu].book_mask;
 +}
 +
 +static inline const struct cpumask *cpu_drawer_mask(int cpu)
 +{
 +	return &cpu_topology[cpu].drawer_mask;
 +}
 +
++=======
++>>>>>>> 2dfd747629e6 (sched, s390: Create a dedicated topology table)
  int topology_cpu_init(struct cpu *);
  int topology_set_cpu_management(int fc);
  void topology_schedule_update(void);
diff --cc kernel/sched/core.c
index 91f5f4b41be0,e59e5aec745a..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -7749,12 -6024,6 +7749,15 @@@ static struct sched_domain_topology_lev
  #ifdef CONFIG_SCHED_MC
  	{ cpu_coregroup_mask, cpu_core_flags, SD_INIT_NAME(MC) },
  #endif
++<<<<<<< HEAD
 +#ifdef CONFIG_SCHED_BOOK
 +	{ cpu_book_mask, SD_INIT_NAME(BOOK) },
 +#endif
 +#ifdef CONFIG_SCHED_DRAWER
 +	{ cpu_drawer_mask, SD_INIT_NAME(DRAWER) },
 +#endif
++=======
++>>>>>>> 2dfd747629e6 (sched, s390: Create a dedicated topology table)
  	{ cpu_cpu_mask, SD_INIT_NAME(DIE) },
  	{ NULL, },
  };
* Unmerged path arch/s390/include/asm/topology.h
diff --git a/arch/s390/kernel/topology.c b/arch/s390/kernel/topology.c
index 1b44dd227db6..0e1d253a5cdf 100644
--- a/arch/s390/kernel/topology.c
+++ b/arch/s390/kernel/topology.c
@@ -478,6 +478,23 @@ int topology_cpu_init(struct cpu *cpu)
 	return sysfs_create_group(&cpu->dev.kobj, &topology_cpu_attr_group);
 }
 
+const struct cpumask *cpu_coregroup_mask(int cpu)
+{
+	return &cpu_topology[cpu].core_mask;
+}
+
+static const struct cpumask *cpu_book_mask(int cpu)
+{
+	return &cpu_topology[cpu].book_mask;
+}
+
+static struct sched_domain_topology_level s390_topology[] = {
+	{ cpu_coregroup_mask, cpu_core_flags, SD_INIT_NAME(MC) },
+	{ cpu_book_mask, SD_INIT_NAME(BOOK) },
+	{ cpu_cpu_mask, SD_INIT_NAME(DIE) },
+	{ NULL, },
+};
+
 static int __init topology_init(void)
 {
 	if (!MACHINE_HAS_TOPOLOGY) {
@@ -486,6 +503,9 @@ static int __init topology_init(void)
 	}
 	set_topology_timer();
 out:
+
+	set_sched_topology(s390_topology);
+
 	return device_create_file(cpu_subsys.dev_root, &dev_attr_dispatching);
 }
 early_initcall(topology_init);
* Unmerged path kernel/sched/core.c
