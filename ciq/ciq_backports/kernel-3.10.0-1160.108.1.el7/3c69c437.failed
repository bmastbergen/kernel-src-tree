gfs2: Rename sd_{ glock => kill }_wait

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.108.1.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 3c69c437bf9832d2201702c5ccc3b8a77a7e0aa3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.108.1.el7/3c69c437.failed

Rename sd_glock_wait to sd_kill_wait: we'll use it for other things
related to "killing" a filesystem on unmount soon (kill_sb).

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 3c69c437bf9832d2201702c5ccc3b8a77a7e0aa3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/incore.h
diff --cc fs/gfs2/incore.h
index 5c3c5f98d07d,7abb43bb8df0..000000000000
--- a/fs/gfs2/incore.h
+++ b/fs/gfs2/incore.h
@@@ -715,8 -714,9 +715,14 @@@ struct gfs2_sbd 
  	struct lm_lockstruct sd_lockstruct;
  	struct gfs2_holder sd_live_gh;
  	struct gfs2_glock *sd_rename_gl;
++<<<<<<< HEAD
 +	struct gfs2_glock *sd_trans_gl;
 +	wait_queue_head_t sd_glock_wait;
++=======
+ 	struct gfs2_glock *sd_freeze_gl;
+ 	struct work_struct sd_freeze_work;
+ 	wait_queue_head_t sd_kill_wait;
++>>>>>>> 3c69c437bf98 (gfs2: Rename sd_{ glock => kill }_wait)
  	wait_queue_head_t sd_async_glock_wait;
  	atomic_t sd_glock_disposal;
  	struct completion sd_locking_init;
diff --git a/fs/gfs2/glock.c b/fs/gfs2/glock.c
index f2bb8997ec29..799557c45858 100644
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@ -175,7 +175,7 @@ void gfs2_glock_free(struct gfs2_glock *gl)
 	wake_up_glock(gl);
 	call_rcu(&gl->gl_rcu, gfs2_glock_dealloc);
 	if (atomic_dec_and_test(&sdp->sd_glock_disposal))
-		wake_up(&sdp->sd_glock_wait);
+		wake_up(&sdp->sd_kill_wait);
 }
 
 /**
@@ -972,7 +972,7 @@ out_free:
 	kfree(gl->gl_lksb.sb_lvbptr);
 	kmem_cache_free(cachep, gl);
 	if (atomic_dec_and_test(&sdp->sd_glock_disposal))
-		wake_up(&sdp->sd_glock_wait);
+		wake_up(&sdp->sd_kill_wait);
 
 out:
 	return ret;
@@ -1837,7 +1837,7 @@ void gfs2_gl_hash_clear(struct gfs2_sbd *sdp)
 	flush_workqueue(glock_workqueue);
 	glock_hash_walk(clear_glock, sdp);
 	flush_workqueue(glock_workqueue);
-	wait_event_timeout(sdp->sd_glock_wait,
+	wait_event_timeout(sdp->sd_kill_wait,
 			   atomic_read(&sdp->sd_glock_disposal) == 0,
 			   HZ * 600);
 	glock_hash_walk(dump_glock_func, sdp);
* Unmerged path fs/gfs2/incore.h
diff --git a/fs/gfs2/ops_fstype.c b/fs/gfs2/ops_fstype.c
index 9f53ceffe027..f5e71b7bf3be 100644
--- a/fs/gfs2/ops_fstype.c
+++ b/fs/gfs2/ops_fstype.c
@@ -86,7 +86,7 @@ static struct gfs2_sbd *init_sbd(struct super_block *sb)
 	set_bit(SDF_NOJOURNALID, &sdp->sd_flags);
 	gfs2_tune_init(&sdp->sd_tune);
 
-	init_waitqueue_head(&sdp->sd_glock_wait);
+	init_waitqueue_head(&sdp->sd_kill_wait);
 	init_waitqueue_head(&sdp->sd_async_glock_wait);
 	atomic_set(&sdp->sd_glock_disposal, 0);
 	init_completion(&sdp->sd_locking_init);
