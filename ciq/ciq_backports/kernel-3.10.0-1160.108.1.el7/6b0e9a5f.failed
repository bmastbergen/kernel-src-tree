gfs2: Fix wrong quota shrinker return value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.108.1.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 6b0e9a5f1e6d7f2719856b601d5639902fc0ee4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.108.1.el7/6b0e9a5f.failed

Function gfs2_qd_isolate must only return LRU_REMOVED when removing the
item from the lru list; otherwise, the number of items on the list will
go wrong.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 6b0e9a5f1e6d7f2719856b601d5639902fc0ee4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/quota.c
diff --cc fs/gfs2/quota.c
index e8bd4f2a17e7,f58072efafc9..000000000000
--- a/fs/gfs2/quota.c
+++ b/fs/gfs2/quota.c
@@@ -144,35 -144,40 +144,43 @@@ static void gfs2_qd_dispose(struct list
  	}
  }
  
 -
 -static enum lru_status gfs2_qd_isolate(struct list_head *item,
 -		struct list_lru_one *lru, spinlock_t *lru_lock, void *arg)
 +static enum lru_status gfs2_qd_isolate(struct list_head *item, spinlock_t *lock, void *arg)
  {
  	struct list_head *dispose = arg;
- 	struct gfs2_quota_data *qd = list_entry(item, struct gfs2_quota_data, qd_lru);
+ 	struct gfs2_quota_data *qd =
+ 		list_entry(item, struct gfs2_quota_data, qd_lru);
+ 	enum lru_status status;
  
  	if (!spin_trylock(&qd->qd_lockref.lock))
  		return LRU_SKIP;
  
+ 	status = LRU_SKIP;
  	if (qd->qd_lockref.count == 0) {
  		lockref_mark_dead(&qd->qd_lockref);
++<<<<<<< HEAD
 +		list_move(&qd->qd_lru, dispose);
++=======
+ 		list_lru_isolate_move(lru, &qd->qd_lru, dispose);
+ 		status = LRU_REMOVED;
++>>>>>>> 6b0e9a5f1e6d (gfs2: Fix wrong quota shrinker return value)
  	}
  
  	spin_unlock(&qd->qd_lockref.lock);
- 	return LRU_REMOVED;
+ 	return status;
  }
  
 -static unsigned long gfs2_qd_shrink_scan(struct shrinker *shrink,
 -					 struct shrink_control *sc)
 +static int gfs2_shrink_qd_memory(struct shrinker *shrink,
 +				 struct shrink_control *sc)
  {
  	LIST_HEAD(dispose);
 -	unsigned long freed;
 +
 +	if (sc->nr_to_scan == 0)
 +		goto out;
  
  	if (!(sc->gfp_mask & __GFP_FS))
 -		return SHRINK_STOP;
 +		return -1;
  
 -	freed = list_lru_shrink_walk(&gfs2_qd_lru, sc,
 -				     gfs2_qd_isolate, &dispose);
 +	list_lru_walk(&gfs2_qd_lru, gfs2_qd_isolate, &dispose, sc->nr_to_scan);
  
  	gfs2_qd_dispose(&dispose);
  
* Unmerged path fs/gfs2/quota.c
