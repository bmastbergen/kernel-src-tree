drm/i915/psr: Improve fast and IO wake lines calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-5.14.0-427.22.1.el9_4
commit-author Jouni Högander <jouni.hogander@intel.com>
commit fe10e7c681a147d4635a83706528d5caf349a978
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-427.22.1.el9_4/fe10e7c6.failed

Current fast and IO wake lines calculation is assuming fast wake sync
length is 18 pulses. Let's improve this by checking actual length.

Add getter for IO buffer wake time and return 10 us there which was assumed
with static 42 us IO wake time. Upcoming patches will extent this for
different display versions.

Bspec: 65450

v3:
  - s/get_io_buffer_wake_time/io_buffer_wake_time/ and use it directly in
    calculation.
v2:
  - rename io_wake_time in if block to io_buffer_wake_time
  - rename get_io_wake_time to get_io_buffer_wake_time

	Signed-off-by: Jouni Högander <jouni.hogander@intel.com>
	Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20240313133221.868391-3-jouni.hogander@intel.com
(cherry picked from commit fe10e7c681a147d4635a83706528d5caf349a978)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_psr.c
diff --cc drivers/gpu/drm/i915/display/intel_psr.c
index 7deb76eea681,7736bdcad82d..000000000000
--- a/drivers/gpu/drm/i915/display/intel_psr.c
+++ b/drivers/gpu/drm/i915/display/intel_psr.c
@@@ -1028,16 -1130,50 +1028,62 @@@ static bool _compute_psr2_wake_times(st
  				     struct intel_crtc_state *crtc_state)
  {
  	struct drm_i915_private *i915 = dp_to_i915(intel_dp);
++<<<<<<< HEAD
++=======
+ 	int check_entry_lines;
+ 
+ 	if (DISPLAY_VER(i915) < 20)
+ 		return true;
+ 
+ 	/* ALPM Entry Check = 2 + CEILING( 5us /tline ) */
+ 	check_entry_lines = 2 +
+ 		intel_usecs_to_scanlines(&crtc_state->hw.adjusted_mode, 5);
+ 
+ 	if (check_entry_lines > 15)
+ 		return false;
+ 
+ 	if (i915->display.params.psr_safest_params)
+ 		check_entry_lines = 15;
+ 
+ 	intel_dp->psr.alpm_parameters.check_entry_lines = check_entry_lines;
+ 
+ 	return true;
+ }
+ 
+ static int io_buffer_wake_time(void)
+ {
+ 	return 10;
+ }
+ 
+ static bool _compute_alpm_params(struct intel_dp *intel_dp,
+ 				 struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = dp_to_i915(intel_dp);
++>>>>>>> fe10e7c681a1 (drm/i915/psr: Improve fast and IO wake lines calculation)
  	int io_wake_lines, io_wake_time, fast_wake_lines, fast_wake_time;
  	u8 max_wake_lines;
  
  	if (DISPLAY_VER(i915) >= 12) {
++<<<<<<< HEAD
 +		io_wake_time = 42;
 +		/*
 +		 * According to Bspec it's 42us, but based on testing
 +		 * it is not enough -> use 45 us.
 +		 */
 +		fast_wake_time = 45;
++=======
+ 		int tfw_exit_latency = 20; /* eDP spec */
+ 		int phy_wake = 4;	   /* eDP spec */
+ 		int preamble = 8;	   /* eDP spec */
+ 		int precharge = intel_dp_aux_fw_sync_len() - preamble;
+ 
+ 		io_wake_time = max(precharge, io_buffer_wake_time()) + preamble +
+ 			phy_wake + tfw_exit_latency;
+ 		fast_wake_time = precharge + preamble + phy_wake +
+ 			tfw_exit_latency;
+ 
+ 		/* TODO: Check how we can use ALPM_CTL fast wake extended field */
++>>>>>>> fe10e7c681a1 (drm/i915/psr: Improve fast and IO wake lines calculation)
  		max_wake_lines = 12;
  	} else {
  		io_wake_time = 50;
* Unmerged path drivers/gpu/drm/i915/display/intel_psr.c
